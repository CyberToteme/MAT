Label, Type, Content
0, Line, //  Trailing slash in name indicates that entry is a directory 
0, Line, //  allow organisation synonyms, like 'org' or 'organization' 
0, Line, //  No include expression, ignore 
0, Line, //  rc-1, 1.0 
0, Line, //  noop 
0, Line, //  If node was previously traversed, need to remove outgoing edges. 
0, Line, //  Simple scheme is to just present the public type of the container 
0, Line, //  A nullable reference 
1, Line, //  TODO - don't calculate the same value concurrently 
0, Line, //  Always publish `ComponentWithVariants` 
0, Block, /*      * Maven supports wildcards in exclusion rules according to:     * http://www.smartjava.org/content/maven-and-wildcard-exclusions     * https://issues.apache.org/jira/browse/MNG-3832     * This should be used for non-transitive dependencies      */
1, Line, //  TODO this should not be using the default charset because it's not an input and might introduce flakiness 
0, Line, //  Returns an approximation of a composite variant 
0, Line, //  We have some batched up conflicts. Resolve the first, and continue traversing the graph 
0, Line, // Each build request carries it's own log level and it is used during the execution of the build (see LogToClient) 
0, Line, //  Implementation note: It is only necessary to override visit methods   for AST nodes that reference statements. For ClosureExpression we rely on   the assumption that it always references a BlockStatement and hence our   visitBlockStatement() method gets called.
0, Line, //  Workspace scope is expected to be persisted in the project cache dir since 4.0. 
0, Line, //  register eagerly so stop() is triggered when services are being stopped 
0, Line, //  may be we have C[k1:v1] -> should become (C)([k1:v1]) 
0, Line, //  Construct a new CompilerOptions class 
0, Line, //    Add `publicType`   
0, Line, //  Swap the Foreground and Background bits. 
0, Line, //  Configure the component 
0, Line, //  This is called from the download thread. Only forward the events when not cancelled 
0, Line, //  This insanity is needed for the case where someone calls pluginContainer.add(new SomePlugin())   That is, the plugin container has the instance that we want, but we don't think (we can't know) it has been applied
0, Line, //  Register the project's source set output directories 
0, Line, // no scheme means someone passed a relative url. In our context only file relative urls make sense. 
0, Line, //  Sha256 is not part of core-services (i.e. no Hashing.sha256() available), hence we use plain Guava classes here. 
1, Line, //  TODO Make this work with pending elements
0, Line, //  anything other than PropertyExpressions or   VariableExpressions will stop resolving 
0, Line, //  If a delimiter; if dot, swap to groupToken, otherwise the rest belongs in qualifier. 
0, Line, //  GENERATE ConfigureUtil.configureUsing(v); 
0, Line, //  Ignore the rule if it expects Ivy metadata and this isn't an Ivy module 
0, Line, //  Missing files can be ignored 
0, Line, //  Matches: task <identifier> <operator> <expression> | task <string> <operator> <expression>   Map to: passThrough(task('<identifier>') <operator> <expression>) | passThrough(task(<string>) <operator> <expression>) 
0, Line, //  No overlap no cry 
0, Line, //  CopyProcessingSpec overrides to broaden return type 
0, Line, //  Assume individual files have no dependencies 
0, Line, //  For testing 
0, Line, //  a local component that provides a JVM assembly 
0, Line, //  we hold other project locks that we should release first 
0, Line, //  Retain buffer if there is capacity in the queue, otherwise discard 
0, Line, //  Sort source files to work around https://issues.apache.org/jira/browse/GROOVY-7966 
0, Line, //  No macro includes were seen in the include graph of this file, so the result can be reused if this file is seen again 
0, Line, //  Use an injected ObjectFactory to create a Server object 
1, JavaDoc, /*  * The DSL for declaring plugins to inject into an included build. * * TODO: Plugins need to be located in this build's buildSrc. * * @since 4.6  */
0, Line, //  TODO:ADAM - switch the logging back on.                  LOGGER.debug("Ignoring failure to extract throwable cause.", ignored);
0, Line, //  On Windows, / and \ are separators, on Unix only / is a separator. 
1, Line, //  TODO some kind of context of why the method was attached (e.g. which plugin declared the rule)   TODO some kind of instance state for the method (might be the same as context above) 
0, Line, //  Discard the body when the expression is not resolvable 
0, Line, //  GROOVY-4043: Do this check up the hierarchy, if needed 
0, Line, //  TODO - add stripped symbols to the installation
0, Line, //  Matches: task <identifier>(<options-map>) <closure> 
1, Line, //  TODO: Need to track version/implementation of symbol strip tool. 
0, Line, //  Take a snapshot while holding lock 
0, Line, //  TODO - all this matching stuff is constant for a given DependencyMetadata instance
0, Line, //  -----------------------------------------------   ---- Delegate CopySpec methods to rootSpec ----   ----------------------------------------------- 
0, Line, //  Matches: task <identifier> <closure> 
1, Line, // TODO move to base-services once the ProgressLogger dependency is removed
0, Line, //  Only for relative positioning 
0, Line, //  Capture changes in execution outcome 
0, Line, //  Mark this listener type as being notified 
0, Line, //  Register as a 'logger' to support this being replaced by build logic. 
1, Line, //  Return a dummy implementation of this as creating a real hasher drags ~20 more services   along with it, and a hasher isn't actually needed on the worker process side at the moment. 
0, Line, //  Fallback to failing the task in case we don't know anything special   about the error 
0, Line, //  Notify caches that lock is to be released. The caches may do work on the cache files during this 
0, Line, //  Don't list versions for gradleMetadata if maven-metadata.xml will be checked. 
0, Line, //  since we have B and want to get A we start with the most   outer class, put them together and then see if that does   already exist. In case of B from within A$B we are done   after the first step already. In case of for example   A.B.C.D.E.F and accessing E from F we test A$E=failed,   A$B$E=failed, A$B$C$E=fail, A$B$C$D$E=success 
0, Line, //  not supported by javax.xml.transform.Transformer; use two spaces instead 
0, Line, //  Short circuit logic when only 2 candidates 
0, Line, //  In a similar way to Ivy, Maven may use other hosts for additional artifacts, but not POMs 
0, Line, //  TODO get normal resolving to set declaring class
1, Line, //  there's a risk, for some methods, that the hash is always   recomputed but it won't be worse than before 
0, Line, //  copy in case any actions mutate the store 
0, Line, //  we would normally log at a lower level than lifecycle, but the Ant message priority is actually higher   than (or equal to) the set lifecycle log level 
1, Line, //  This isn't quite right. Should close the worker classpath cache once we're finished with the worker processes. This may be before the end of this build   or they may be used across multiple builds 
0, Line, //  producer doesn't declare anything, so we assume that it only provides the implicit capability 
0, Line, //  Source dir already at the start of the path, just use the include path 
0, Line, //  Configuration artifacts are determined locally 
0, Line, //  Can discard the state required to create instance 
0, Line, //  For stats we don't really care about thread safety 
0, Block, /* Mutable */
0, Line, //  No parent, we're done 
0, Line, //  Skip, visitor is not interested 
0, Line, //  complete cancelling key 
0, Line, // noinspection OptionalGetWithoutIsPresent 
0, Line, //  library, albeit only for selected classes that run a high risk of being statically referenced from a transform.
0, Line, //  GENERATE public <type> <getter>() { return <field> } 
0, Line, //  GENERATE private DynamicObject dynamicObjectHelper 
0, Line, //  Always treat as non-empty 
0, Line, //  the type of the property node instead. 
0, Line, //  If the failure handler rethrows exception, then execution of other nodes is aborted. (--continue will collect failures) 
0, Line, // exclude rules for a dependency specified in gradle DSL 
0, Line, //  Create a processor that processes events in its own thread 
0, Line, //  Only consider one candidate, because matchesUniqueVersion means that there's no ambiguity on the version number 
0, Line, //  Not required, but Guava's performance bad for an empty immutable list 
0, Block, /*  unsupported by this transformer  */
0, Line, //  Always schedule the generation task after the clean task 
0, Line, //  If there's more than one module, merge them into a module set 
0, Line, //  some impls support this but not factory.setAttribute("indent-number") 
0, Line, //  If any of the child strategies don't expire the daemon, the daemon will not expire.   Otherwise, the daemon will expire and aggregate the reasons together. 
0, Line, // it means the registry didn't exist yet 
1, Line, //  TODO Need a better mechanism to wire tasks into lifecycle 
0, Line, //  not supported 
0, Line, //  If there is a transform for the language into one of the component inputs, add a default source set 
0, Line, //  Allows individual identification for debugging 
0, Line, //  only print first Gradle script stack trace element 
0, Line, //  Finalizing here, as we need this to run after any 'assembling' task (jar, link, etc) is created.   TODO: Convert this to `@BinaryTasks` when we model a `NativeAssembly` instead of wiring compile tasks directly to LinkTask 
0, Line, //  Never use empty settings when the settings were explicitly set 
0, Line, //  Need to double check that the target still has hard edges to it 
0, Line, //  We will only add dependencies to the leaves if there is such a published module 
0, Line, //  Don't bother searching remotely 
0, Line, //  Disallow classes from Groovy Jar that reference external classes. Such classes must be loaded from astTransformClassLoader,   or a NoClassDefFoundError will occur. Essentially this is drawing a line between the Groovy compiler and the Groovy 
0, Line, //  When a Provider is used as a task dependency (rather than as a task input), need to unpack the value 
0, Line, //  Metadata builder uses mutable project state, so synchronize access to the project state 
0, Line, //  This special case is for Maven snapshots with Gradle Module Metadata when we need to remap the file name, which   corresponds to the unique timestamp, to the SNAPSHOT version, for backwards compatibility 
1, Line, //  TODO:Cedric This is not quite right. We assume that if we are asking for a specific binary, then we resolve to the assembly instead   of the jar, but it should be somehow parameterized 
0, Line, //  Part of a strongly connected component (ie cycle) - move values to root of the component   The root is the first node of the component we encountered 
0, Line, //    Add `getName()`   
1, Line, //  Ensure that at most one action that may have access to the mutable state of the build runs at a given time   TODO - move this to a better home and reuse 
0, Line, //  Remove all the classes other than the main class 
0, Line, //  Necessary for Groovy compilation to pick up output of regular and joint Java compilation,   and for joint Java compilation to pick up the output of regular Java compilation.   Assumes that output of regular Java compilation (which is not under this task's control) also goes   into spec.getDestinationDir(). We could configure this on source set level, but then spec.getDestinationDir()   would end up on the compile class path of every compile task for that source set, which may not be desirable.
0, Line, //  Call directly on the delegate to avoid some dynamic dispatch 
0, Line, //  We need to sort here since the file order obtained from the filesystem   can change between machines and we always want to have the same shaded jars. 
0, Line, //  Check that the object has already been serialized. 
0, Line, //  This configuration cannot be mutated, but some parent configurations provide artifacts 
0, Line, // This one should go away once we complete the auto-apply plugins 
0, Block, /*         Note: Aether implicitly uses a thread pool and tasks to perform transfers,        so we manually propagate the current build operation ref so logging is correctly associated.      */
0, Line, //  throw new MissingPropertyException(name, <view-type>.class) 
0, Line, //  GENERATE getInstantiator() 
0, Line, //  Find the candidates with the highest base version 
0, Line, //  Hold the lock until we actually start accepting connections for the case when stop is called from another   thread while we are in the middle here. 
0, Line, //  the platform itself is greater than the forced version 
0, Line, //  GENERATE services.get(ObjectFactory.class) 
0, Line, //  Replace result if we fail on warning 
0, Line, //  Find and remove common prefix 
0, Line, //  Serialize the worker implementation classpath, this is consumed by GradleWorkerMain 
0, Line, //  else, might be a link which points to nothing, or has been removed while we're visiting, or ... 
0, Line, //  Try to configure an element 
0, Block, /*      * Returns Whether the transformer can transform     * these arguments at all.      */
0, Line, //  Do not check for opaque properties when implementing PropertyMixIn, as this is expensive 
0, Line, //  This does almost the same thing as passing through DesugaredAttributeContainerSerializer / DesugaringAttributeContainerSerializer.   Those make some assumptions about allowed attribute value types that we can't - we serialize everything else to a string instead. 
0, Line, //  We don't adjust the column value as in the event we unwrap, we want to keep correctness 
0, Line, //  see if the grammar if out-of-date by way of its importVocab 
0, Line, //  only way I know of to determine current log level 
0, Line, //  TODO: Reuse more of CommandlineActionFactory
0, Line, //  Serialize the actual security manager type, this is consumed by BootstrapSecurityManager 
0, Line, //  The accumulated exclusions that apply to this edge based on the path from the root 
0, Line, // prefix internal fields with _ so that they don't get into the way of propertyMissing() 
0, Line, //  TODO validate that the plugin accepts this kind of argument
0, Line, //  We must be on some Unix variant, including Cygwin or MSYS(2) on Windows... 
1, Line, //  TODO(ew): inject BuildOperationIdentifierRegistry instead of static use
0, Line, //  Guard against TestNG calling this hook more than once with the same testClass.   See https://github.com/cbeust/testng/issues/1618 for details. 
0, Line, //  Parallel configuration 
1, Line, //  TODO:HH Use managed views for this, only applied when the respective language is applied
0, Line, //  Should not reach this point as this is validated in the test framework implementation - just propagate the failure 
0, Line, //  consumer expressed no preference, defaults to library 
0, Line, //  Order is significant. Injection handler should be at the end 
0, Line, //  https://en.wikipedia.org/wiki/Standard_error 
0, Line, //  Queue this up for checking again later 
0, Line, //  All of these field names are really long to prevent collisions with the groovy setters.   Groovy will try to set the private fields if given the opportunity.   This makes it much more difficult for this to happen accidentally.
0, Line, //  Get any errors from the compiler result 
0, Line, //  [baseName]-[appendix]-[version]-[classifier].[extension] 
0, Line, //  Try to infer the effective jvm options for the currently running process.   We only care about 'managed' jvm args, anything else is unimportant to the running build 
0, Line, //  Add the library and extension 
0, Line, //  Should use ProjectState instead
0, Line, //  2. the graph contains first-level dependencies which have been substituted (likely) so we're going to iterate on dependencies instead 
0, Line, //  Reuse the same version as last build 
0, Line, //  Used just to test the mechanism 
1, Line, //  TODO: There has to be a simpler way to do this.   We want to create a buildable filecollection based on a filtered view of selected source directory sets 
1, Line, //  Passing null for sha1 - TODO - consider using the etag which is an MD5 hash of the file (when less than 5Gb) 
1, Line, //  TODO:ADAM - need to do this earlier 
0, Line, //  Add incoming artifact transforms 
0, Line, //  This should live closer to the project itself
0, Line, //  no daemon process has started yet 
0, Line, //  Treat everything else as a single file 
0, Line, //  TODO Add a deprecation warning in Gradle 6.0
0, Line, //  Convert once, in order to write the Ivy descriptor with _all_ configurations 
1, Line, //  TODO - exception when no default type 
0, Line, //  no outputs file 
0, Line, //  build tasks without project reference 
0, Line, //  XCTest executable   Sync the binary to the BUILT_PRODUCTS_DIR, otherwise Xcode won't find any tests 
0, Line, // supplied java location 
0, Line, //  If we can't discover the version from the normal metadata, make some assumptions 
0, Line, //  Create tasks for solutions, projects and filters 
0, Line, //  this loop builds a name from right to left each name part   separated by "." 
1, Line, //  Don't force evaluation of rules here, let the task container do what it needs to
0, Line, //  No args 
0, Line, //  Else, continue below 
0, Line, //  Rename `LinuxMain.swift` to `main.swift` so the entry point is correctly detected by swiftc 
0, Line, // class results may be created earlier, where we don't yet have access to the start time 
0, Line, //  Add to the end of the queue, so that we traverse the graph in breadth-wise order to pick up as many conflicts as   possible before attempting to resolve them 
0, Line, //  Use the index here so we can apply any filters to the realized element 
0, Line, //  this work has to be done before classes are loaded, otherwise there are risks that   the PermGen space is full before we create the reflection methods 
0, Line, //  GroovySystem.getMetaClassRegistry() 
1, Line, //  result is a scala.util.Either   right is a Seq of files that were generated   left is routes compilation errors   TODO: It might be nice to pass along these errors in some way 
0, Line, //  parallel safe version of Compiler.compilerInterface() 
0, Line, //  visit the method call, because one of the args may be an input method call 
0, Line, //  We can't close replaced loaders immediately, because their classes may be used during shutdown,   after the return of the reload() call that caused the loader to be swapped out.   We have no way of knowing when the loader is actually done with, so we use the request after the request   that triggered the reload as the trigger point to close the replaced loader. 
0, Line, //  Matches: task <method-call> <operator> <expression> 
0, Line, //  A ∪ (A ∩ B) ∪ (A ∩ C) -> A 
0, Line, // In case the output event arrives after completion of the test  and we need to have a matching descriptor to inform the user which test this output belongs to  we will use the current parent 
0, Line, //  generate documentation 
1, Line, //  TODO deleteOnExit won't clean up non-empty directories (and it leaks memory for long-running processes). 
1, JavaDoc, /*  * Meta-info about a Java component. * * TODO - this is some legacy stuff, to be merged into other component interfaces  */
0, Line, //  This is a hidden property that may be useful to track down issues. Remove when NTLM Auth is solid. 
0, Line, //  Should not happen when reading from a StringReader 
0, Line, //  GENERATE private MetaClass metaClass = GroovySystem.getMetaClassRegistry().getMetaClass(getClass()) 
0, Line, //  If we reach this point it means we have a dependency which doesn't belong to the resolution result   Which can mean two things: 
0, Line, //  Wrap the processor in an actor, to make it thread-safe 
0, Line, //  from this point down, logging is sent back to the client 
0, Line, //  Java source files are supported, too. Therefore we should care about the relative path. 
0, Line, //  Show any contextual cause recursively 
0, Line, //  Use an arbitrary ordering when the artifacts have the same public attributes 
0, Line, //  Other home dir cached and not in use, clean it up
0, Line, //  We're making an assumption here that the target's plugin registry is backed classLoaderScope.   Because we are only build.gradle files right now, this holds. 
0, Line, //  Build configuration for GradleWorkerMain 
0, Line, //  start logging now that the logging manager is connected 
0, Line, //  First try to resolve the artifacts locally before going remote 
0, Line, //  Add to the front of the queue, to flush out configurations that are no longer required. 
0, Line, //  Controls when to disable reading default authentication credentials, should be used in tests only 
0, Line, //  If the jansi.force property is set, then we force to output 
0, Line, //  Using the test sources feature introduced in Eclipse Photon 
0, Line, //  Flaky 
1, Line, //  TODO: Need to track version/implementation of symbol extraction tool. 
0, Line, //  Mix in some Groovy DSL support. Should decorate instead 
0, Line, //  don't care 
0, Line, //  Service calls have no effect, no need to register them 
0, Line, //  just serialize as a String as best we can 
0, Line, //  Create Visual Studio project extensions 
0, Line, //  See https://issues.gradle.org/browse/GRADLE-1589 
0, Line, //  Run the build and get the build outcomes model 
0, Line, //  Done 
0, Line, //  Reach into meta class to avoid lookup 
0, Line, //  Windows at least will sometimes throw odd exceptions like java.nio.file.AccessDeniedException   if the file gets deleted while the watch is being set up. 
0, Line, // verify that the parsed descriptor is the correct parent module. 
0, Line, //  We need to attach failures on unattached dependencies too, in case a node wasn't selected   at all, but we still want to see an error message for it. 
0, Line, //  For now, we only create test suites for static library variants 
0, Line, //  We'll get this when we try to look up "ProgramFilesDir (x86)" on a 32-bit OS 
0, Line, //  Serialize configuration for the worker process to it stdin 
0, Block, /*  (non-Javadoc)         * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getVersion()          */
0, Line, //  Only use this for top level init scripts 
0, Line, //  Never up to date; we don't understand the data structures. 
0, Line, //  TODO: Combine these with MutationGuard
0, Line, //  setup the default configurations used when mapping to resolved versions 
0, Line, //  A very dumb strategy for invalidating cache 
0, Line, //  There is a chance we could not attach target configurations previously 
0, Line, //  Add the Gradle API filter between the user classloader and the worker infrastructure classloader 
0, Line, //  We need a consistent index here 
0, Line, //  Object converted = $typeConverter.convert(foo, Float.class, false); 
0, Line, //  Read body 
0, Line, //  Mixed case 
1, Line, //  TODO: This should be modeled differently, perhaps as a dependency on the implementation configuration 
1, Line, //  This is not super nice, but dependencies are created through reflection, for decoration   and assume a constructor with 3 arguments (Group, Name, Version) which is suitable for   most cases. We could create an empty attribute set directly in the AbstractDependencyImpl,   but then it wouldn't be mutable. Therefore we proceed with "late injection" of the attributes 
0, Line, //  Always expand empty node 
0, Line, //  A dependency artifact will be defined if the descriptor specified a classifier or non-default type attribute. 
1, Line, //  TODO(ew): Consider whether this belongs in Console or here
0, Line, //  stream has been closed, don't bother reading anything else 
0, Line, //  only care about HTTP hosts right now 
0, Line, //  Call return new <implClass>(param1) 
0, Line, //  Listen for the end of configuration of the root project of the root build,   and discard buffered notifications if no listeners have yet appeared.   This avoids buffering until the end of the build when no listener comes. 
0, Line, //  Assume that test has renamed itself (this can actually happen) 
0, Line, //  Expire recently unused Daemons when memory pressure is high 
0, Line, //  FindBugs cannot handle missing directories 
0, Line, //  Only count non-CREATE events, since creation also causes a modification event, unless the event is for a directory. 
0, Line, //  Retain strong reference 
1, Line, //  TODO - should split this up, so that the inputs are attached to an object that represents the binary, which is then later used to configure the link/assemble tasks 
0, Line, //  Augment the environment for the execution 
0, Line, //  Transient, don't serialize all the views that happen to have been visited, recreate them when visited via the deserialized view 
0, Line, //  some implementation uses null to represent bootstrap classloader   i.e. Object.class.getClassLoader()==null 
1, Line, //  we need to wrap this into a loop, because there's always a risk   that the method, which is weakly referenced, has been collected   in between the creation time and now 
0, Line, //  TaskListenerInternal 
0, Line, //  Ignore. Currently the actions don't need to run, it's just better if they do   By the time this node is notified that the task in the other build has completed, it's too late to run the action   Instead, the action should be attached to the task in the other build rather than here 
0, Line, //  Here, we will distribute A ∩ (B ∪ C) if, and only if, at   least one of the distribution operations (A ∩ B) can be simplified 
0, Line, //  Find the nearest parent up that we care about and use that as the parent. 
0, Line, //  When the outputs are generated, throw away all state for files that do not live in an append-only cache.   This is intentionally very simple, to be improved later 
0, Line, //  and class as property 
0, Line, //  A launchable created by the provider - just hand it back 
1, Line, //  TODO(daniel): Should support in a better way multi file invocation. 
0, Line, //  Must run each action 
0, Line, //  The other is better, current is not part of result 
1, Line, //  It's true right now that this is always coming from the TestKit, but might not be in the future.
0, Line, //  this shouldn't happen, resolvers should call notFound() 
0, Line, //  Redirect stderr to stdout when both stdout and stderr are attached to a console. Assume that they are attached to the same console   This avoids interleaving problems when stdout and stderr end up at the same location 
0, Line, //  get(<type>) 
0, Line, //  Should get back some kind of reference that can be queried below instead of looking the task up every time 
0, Line, //  This is the root block. Can have any number of children <= maxChildIndexEntries 
0, Line, //  There are enough entries in this block and the left sibling to make up 2 blocks, so redistribute   the entries evenly between them 
0, Line, //  the deployment descriptor already exists; no need to generate it 
0, Block, /*  (non-Javadoc)         * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getGroupId()          */
0, Line, //  GENERATE objectFactory.directoryProperty() 
0, Line, //  Sanitise the exception and report it 
0, Line, //  https://github.com/gradle/gradle/issues/2319 
0, Line, //  Return the group to use for the given build operation, searching up the build operation hierarchy for the first group 
0, Line, //  Split line if a single line goes over 1 MB 
0, Line, //  Intentionally not the text 
0, Line, //  in which case we output "" to stay compatible with existing builds that scan the script for it 
0, Line, //  Resolving a project component can cause traversal to other projects, at which   point we could release the project lock and allow another task to run.  We can't   use a cache loader here because it is synchronized.  If the other task also tries   to resolve a project component, he can block trying to get the lock around the   loader while still holding the project lock.  To avoid this deadlock, we check,   then release the project lock only if we need to resolve the project and ensure   that only the thread holding the lock can populate the metadata for a project.
1, Line, //  TODO - don't select again here, as the selection is already performed to select the toolchain 
1, Line, //  TODO include link to documentation giving more explanation of what's going on here. 
0, Line, //  the name is a type so remove it from the scoping   as it is only a classvariable, it is only in   referencedClassVariables, but must be removed   for each parentscope too 
0, Line, //  Layout 
0, Line, //  Add any finalizers to the queue 
0, Line, //  We know all are compatibles, so this is only possible if some disambiguation happens but not getting us to 1 candidate 
0, Line, //  should this be null?
0, Line, //  /proc/meminfo is in kB since Linux 4.0, see https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/proc/task_mmu.c?id=39a8804455fb23f09157341d3ba7db6d7ae6ee76#n22 
1, Line, //  TODO: Migrate this away from here 
0, Line, //  Because the same suffix is used for all decorating class generator instances, share the same cache as well 
0, Line, //  check if directory is already watched   on Windows, check if any parent is already watched 
0, Line, //  Should really fail here if sourcesToCompile is not empty: no transform for this source set in this binary 
0, Line, //  Include the shortest path from each version that has a direct dependency on the broken dependency, back to the root 
0, Line, //  Ignore the subkey if it doesn't have a folder and version 
0, Line, // directly printing to the stream to avoid log level filtering. 
0, Block, /*         The song and dance with Action<Runnable> is to ease testing.        See DisconnectableInputStreamTest      */
0, Line, //  Add dependencies to the start of the queue 
0, Line, //  end element marker 
0, Line, // when 
0, Line, //  Don't configure anything 
0, Line, //  Target: arm 
0, Line, //  Add if absent 
0, Line, //  GENERATE private ConventionMapping mapping 
0, Line, //  Initialize Matchers once and then reset them for performance 
0, Line, //  Project has no publications: simply use the project name in place of the dependency name 
0, Line, //  only add confs if they are specified. if they aren't, endElement will handle this 
0, Line, //  This second check is only done so that we can make the difference between an uninitialized rule (never seen before) and   a rule which is not reusable 
0, Line, //  this.getServices() 
0, Line, //  Currently visiting the successor node - we're in a cycle 
0, Line, // for gradle distribution specific dependencies 
0, Line, //  Handle anyOf first because we don't want to special case it in   every other case 
0, Line, //  Adds a void $propName(Closure<?> cl) method that executes the closure 
0, Line, //  Stopping, so result doesn't really matter. 
0, Line, //  More information: http://blog.jetbrains.com/scala/2014/10/30/scala-plugin-update-for-intellij-idea-14-rc-is-out/ 
0, Line, //  Configurations are built on-demand, but only once. 
0, Line, //  We have enough local data to make a comparison, get the remote metadata 
0, Line, //  we do not resolve a vanilla name starting with a lower case letter   try to resolve against a default import, because we know that the 
0, Line, //  A launchable synthesized by the consumer - unpack it into a set of task names 
0, Line, // offset based implementation is only safe up to certain figure  because of the int max value  for large streams/files (huge builds), we need to roll the file 
0, Line, //  TODO - deal with more than one directory
0, Line, //  private member: implementation details 
0, Line, //  Don't inline the Groovy jar as the Groovy “tools locator” searches for it by name 
0, Line, //  TODO:ADAM - switch the logging back on.                  LOGGER.debug("Ignoring failure to serialize throwable.", ignored);
0, Line, //  min chunk size 4kB, max size 1MB 
0, Line, // for updates to private JDK caches of the environment state 
1, Line, //  This looks ugly, very ugly, but that is apparently what Ant does itself 
1, Line, //  TODO - should be incremental 
0, Line, //  Set the system properties and use this process 
0, Line, //  Was it updated during execution?
0, Line, //  Foreground daemon cannot be 'told' what's his startup options as the client sits in the same process so we will infer the jvm opts from the inputArguments() 
0, Line, //  round to nearest second 
0, Line, //  this.field = value 
0, Line, //  Configure the included build to discover available modules 
0, Line, //  Initialize SSLContext 
0, Line, //  J flags can not be set in the option file   add additional option files 
0, Line, //  use the max heap as an approximation 
1, Line, //  TODO: this is terrible 
0, Line, //  Collect artifact sets in a list, using the id of the set as its index in the list 
0, Line, //  If no errors, get the compiled source and write it to the destination file 
1, Line, //  TODO: This should actually be a Routable message with a single handler,   but we need some way to correlate a given request with a specific response channel 
0, Line, //  For now, required and preferred are treated the same 
0, Line, //  Does not need to be redrawn if component is out of bound 
1, Line, //  TODO - this is pretty nasty, look at avoiding using a time bomb stub here 
0, Line, //  Prevent construction 
0, Line, //  the removal of the method will be reported   the removed methods will be reported   the added methods will be reported 
0, Block, /*              * We know that DefaultScript & friends don't have user-visible nested types,             * so don't try to look up nonsensical types like org.gradle.Script#sourceCompatibility              */
0, Line, //  We don't know what the type is - let Guava take care of it. 
0, Line, //  Query the declared methods of the meta class 
1, Line, // TODO:rbo Change the parameter type to `Transformer<String, @Nullable String>` once we migrate to Java 8
0, Line, //  check interfaces at this level first 
1, Line, // TODO - make this work on windows  originalIn.close();
0, Line, //  Could be different to ids in the requests as they may be unqualified 
0, Line, //  Could potentially also look whether we have the details for an ancestor directory tree   Could possibly infer that the path refers to a directory, if we have details for a descendant path (and it's not a missing file) 
1, Line, //  TODO better exception type 
0, Line, //  set up a configuration named 'antlr' for the user to specify the antlr libs to use in case   they want a specific version etc. 
0, Line, //  <class>.getDeclaredMethod(<getter-name>) 
0, Line, //  This will propagate through the graph and prune configurations that are no longer required. 
0, Line, // by keying the failures only by 'requested' we lose some precision  at edge case we'll lose info about a different exception if we have different failure for the same requested version 
0, Line, //  wait for it to open 
0, Line, //  Serialize the application classpath, this is consumed by BootstrapSecurityManager 
0, Line, // TODO: all methods 
0, Line, //  check module node imports aliases   the while loop enables a check for inner classes which are not fully imported, 
1, Line, //  Note: This would be better housed in a scope that encapsulated the tree of Gradle objects. 
0, Line, //  this situation occurs when there was no branch defined   in the original dependency descriptor. So the dynamicId   shouldn't contain a branch neither 
0, Line, //  TODO: Honor changes to build directory 
0, Line, //  the target component exists, so we need to fallback to the traditional selection process 
0, Line, //  happens when dispatching to taskdef via createNode() 
0, Line, // is it sane enough?
0, Line, //  Retain strong references to the values created for this session 
0, Line, //  Configure test binary to compile against binary under test 
0, Line, //  If this task uses a pre-compiled header 
0, Line, //  only define a Scala SDK for a module if we could create a scalaSdkLibrary 
0, Line, //  Flushing data split across previous and current appending 
0, Line, //  GENERATE public DynamicObject getAsDynamicObject() { 
0, Line, //  TODO: Publishing for test executable?
0, Line, //  Skip things that aren't files 
0, Line, //  next character is not a separator 
0, Line, //  need to run operation under cache lock 
1, JavaDoc, /*  * A {@link org.gradle.api.file.ConfigurableFileCollection} that can be used as a task input property. Caches the matching set of files during task execution, and discards the result after task execution. * * TODO - disallow further changes to this collection once task has started * TODO - keep the file entries to snapshot later, to avoid a stat on each file during snapshot  */
0, Line, //  Total number of garbage collection events observed in the window 
0, Line, //  Buckets of dependencies 
0, Line, //  Force loading to check if method handle is supported 
0, Line, //  Wrap in generic 'build failed' cross version exception 
0, Line, //  Otherwise, macro or macro function call 
1, Line, //  TODO This class, DefaultBuildOperationQueue and ExecutionPlan have many of the same   behavior and concerns - we should look for a way to generalize this pattern. 
0, Line, //  can't be equal otherwise wouldn't have been collected 
1, Line, // TODO:instant-execution: remove this 
0, Line, //  TODO: Reuse more of BuildActionsFactory
1, Line, //  Can only set once: should really be part of the constructor   Can only set once: should really be part of the constructor
0, Line, //  Configure test binary to link against tested component compiled objects 
1, Line, //  This isn't quite right, as we may lose precision when converting to a double 
0, Line, //  Use writeFile because the cache can internally recover from datafile   corruption, so we don't care at this level if it's corrupt 
0, Line, //  Exit value is unreliable for determination of process failure. 
0, Line, //  Setup the dependency on the main binary   This should all be replaced by a single dependency that points at some "testable" variants of the main binary 
1, Line, //  decimalFormat is not thread safe - synchronize access to the instance 
1, Line, //  TODO - wire this stuff in properly 
1, Line, //  TODO:ADAM - need to cleanup completion too, if not used 
0, Line, //  TODO: consider entryAttributes in equals, hashCode, and toString 
0, Line, //  invokeMethod(this, name, args) 
0, Line, //  Used by the Kotlin plugin 
1, Line, //  TODO: Need to check for proper type/cast 
0, Line, //  Last entry, complete the result 
0, Line, //  a class consisting of a vanilla name can never be   a static inner class, because at least one dot is   required for this. Example: foo.bar -> foo$bar 
0, Line, //  Copy selection failure 
0, Line, //  It's almost always the same attribute sets which are compared, so in order to avoid a lot of memory allocation   during computation of the intersection, we cache the result here. 
0, Line, //  Pull-only always comes first 
0, Line, //  Look for model(«») (i.e. call to model with anything other than non literal closure) 
1, Line, //  TODO - should use a resolver so that this method is consistent with Project.uri(string) 
1, Line, //  TODO wolfs - schedule fingerprinting separately, it can be done without having the project lock 
0, Line, //  Authoritative result - don't need to try remote 
0, Line, //  do some checks up-front, so we avoid creating the queue in most cases   Cases we want to handle:   - List<String>   - Class<?>   - List<Class<?>>   - Integer[]   - ? extends BaseType   - Class<?>[] 
0, Line, //  create the listener adapters right when the ConsumerOperationParameters are instantiated but no earlier,   this ensures that when multiple requests are issued that are built from the same builder, such requests do not share any state kept in the listener adapters   e.g. if the listener adapters do per-request caching, such caching must not leak between different requests built from the same builder
0, Line, //  Snapshot the state and notify the caches 
0, Line, //  Currently not required 
0, Line, //  TODO: synchronization 
0, Line, //  We're sorting the names of the configurations and later attributes   to make sure the output is consistently the same between invocations 
0, Line, //  don't forward 
0, Line, //  Allow only certain things from the underlying classloader 
0, Line, //  Don't add if our last record has a `:taskName` status, and this one is `:taskName SOMETHING` 
0, Line, //  Assume that each artifact points to a unique file, and use the relative path from the project as the id 
0, Line, //  Matches: task <identifier> <arg-list> | task <string> <arg-list>   Map to: task("<identifier>", <arg-list>) | task(<string>, <arg-list>) 
0, Line, //  Remove license files that cause collisions between a LICENSE file and a license/ directory. 
1, Line, //  Note: don't actually remove this in 6.0, the deprecation is here to encourage people to use ObjectFactory instead. Just remove the overload and the nag and leave the method here
0, Line, //  If no expiration strategies exist, the daemon will not expire. 
0, Line, //  overwrite rather than append libraries 
0, Line, //  let's see if we can find a single variant which has exactly the requested artifacts 
0, Line, //  Check to see if there are any compatible canceled daemons and wait to see if one becomes idle 
0, Line, //  count every event on OSX 
0, Line, //  Info about the owning task can be inferred, and we don't provide any further info at this point.   This is largely to expose timing information about executed tasks 
1, Line, //  todo: consider multithreading/multiprocess issues   Teamcity has the concept of a "wave" of messages   where each thread/process uses a unique wave id 
0, Line, //  Assume 8.1 
0, Line, //  don't bother trying to handle primitive arrays specially 
0, Line, //  Attempt to merge with the left sibling 
0, Line, //  for command file format, see http://docs.oracle.com/javase/6/docs/technotes/tools/windows/javac.html#commandlineargfile   use platform character and line encoding 
0, Line, //  This can happen on Windows 
0, Line, //  fully visit the class hierarchy before any interfaces in order to meet the contract   of PropertyDetails.getGetters() etc. 
0, Line, //  caches 
1, Line, //  TODO - reduce duplication with Swift binary 
0, Line, //  If no current selection for module, just use the candidate. 
0, Line, //  Running the task requires access to the task's owning project 
0, Line, //  all the values are equal, but we store all the binaries that match that value   and incrementally build a list of binaries which are excluded because of a better match 
0, Line, //  store thrown exception 
0, Line, //  lock on demand 
0, Line, //  not the same provider 
0, Line, //  Already completed 
0, Line, //  Encode as ascii 
0, Line, //  Another process may have already copied the compiler interface JAR   Avoid copying over same existing file to avoid locking problems 
0, Line, //  Lock is in use - mark as contended 
0, Line, //  Handles both junctions and real symlinks (https://www.2brightsparks.com/resources/articles/NTFS-Hard-Links-Junctions-and-Symbolic-Links.pdf) 
0, Line, //  Should not happen reading from a StringReader 
0, Line, //  Attaches the owning WorkerExecutor to this factory 
0, Line, //  Same as the length of this, minus the last element, minus the dot between them 
0, Line, //  Keep the argument from this expression 
0, Line, //  Are all file snapshots after execution accounted for as new entries?
0, Line, //  we must use a String literal here, otherwise using things like Foo.class.name will trigger unnecessary   loading of classes in the classloader of the DefaultIsolatedAntBuilder, which is not what we want. 
0, Line, //  Create the tasks for each C++ binary that is registered 
0, Line, //  an exclude all is for modules, not artifacts 
0, Line, //  Adds a void set$PropName(Object value) method that fails 
0, Line, //  start element marker 
0, Line, //  This should only be used for top-level builds 
0, Line, //  Else, wait for the next update event 
0, Line, //  Don't care, collect the artifacts later (in the correct order) 
0, Line, //  Verify that none of the listed "versions" do match another pattern 
0, Line, //  We've already validated the inputs: should never get here. 
0, Line, //  Use this thread to process any work - this allows work to be executed using the   worker lease acquired by this thread even if the executor thread pool is full of   workers from other threads.  In other words, it ensures that all worker leases   are being utilized, regardless of the bounds of the thread pool. 
0, Line, //  Restrict the decorations to those required to decorate all views reachable from this type 
0, Line, //  cached resolved values 
0, Line, //  do not fail the build as feature is non-critical 
0, Line, //  do not remove task descriptors because they might be needed to describe subsequent tasks' dependencies 
0, Line, //  avoid clone 
0, Line, //  TODO - take care of this in the selector parser 
1, Line, // TODO: move bootclasspath to platform 
0, Line, //  gradleFileResource type is mapped to AntFileResource 
0, Line, //  A javac warning, ignore 
0, Line, //  No support for command file 
1, Line, //  TODO: This should be modeled as a source set 
0, Line, //  Configure an implicit variant 
0, Line, //  Path is an ancestor of this 
0, Line, //  Copied from Method.isDefault() 
0, Line, //  This should come from the compiler classpath only 
0, Line, //  Consider every node that must run before the finalizer 
0, Line, //  Do not hold lock while removing listener, as the listener may still be receiving events on another thread and will need to acquire the lock to handle these events 
0, Line, //  Create all of the pipeline eagerly as soon as this is enabled, to track the state of build operations.   All of the pipelines do this, so should instead have a single stage that tracks this for all pipelines and that can replay the current state to new pipelines   Then, a pipeline can be added for each listener as required 
0, Line, //  Once the node has been discovered, changing the target is not allowed, as it changes the promise of the node as well 
0, Line, //  fall back to the default logic 
0, Line, //  A set of progress operations that have been forwarded 
0, Line, //  First child node 
0, Line, //  this is necessary to prevent O(n^2) behavior in xcode project loading 
0, Line, //  GENERATE super.getAsDynamicObject() 
0, Line, //  Transform closure 
0, Line, //  Should instead forward these to the task's validation context 
0, Line, //  Mutable property 
0, Line, //  DependencyResolutionListener 
0, Line, //  end of tag marker 
0, Line, //  Have read some data - let readers know 
1, Line, //  TODO - the project model should be reachable from ProjectState without another lookup 
0, Line, //  Adds a void $propName(Closure<?> cl) method that throws MME, to avoid attempts to convert closure to something else 
0, Line, //  Nexus uses sha1 etags, with a constant prefix   e.g {SHA1{b8ad5573a5e9eba7d48ed77a48ad098e3ec2590b}} 
0, Line, //  part of a cycle : use the 'minimum' component as the root of the cycle 
0, Line, //  Look for a realized object 
0, Line, //  String[] 
0, Line, //  Also releases any locks 
0, Line, //  Not already known, attempt to resolve the parent 
0, Line, // The first argument is not really used but it is very useful in diagnosing, i.e. running 'jps -m' 
0, Line, // when root suite is completed we stop redirecting 
0, Line, //  let the delegate resolver select among them 
0, Line, //  Setting time to 0 because we need API jars to be identical independently of   the timestamps of class files 
1, Line, //  TODO: Locate this tool from a tool provider   hide main symbol 
0, Line, //  for storing to field 
0, Line, //  Property is readable and all getters and setters are abstract 
0, Line, //  Wait for work to be submitted if the queue is empty and our worker count is under max workers   This attempts to keep up to max workers threads alive once they've been started. 
0, Line, //  Ignore the decorated service 
0, Line, //  Add a create task 
1, Line, //  TODO: This prefix shouldn't be hardcoded 
0, Line, //  Directory has something in it already 
0, Line, //  Source file has not changed and no include files 
0, Line, //  Do a shallow render of any constraint edges, and do not mark the node as visited. 
0, Line, //  assert the exit value signals success 
0, Line, //  should be protected, but use of the class generator forces it to be public 
0, Line, //  Turn off request logging, this can end up logging OAUTH   tokens which should not ever be in a build log 
0, Line, //  Ignore some broken samples before the given date 
0, Line, //  GENERATE new BeanDynamicObject(this) 
0, Line, //  Both of these values are effectively part of a cross Gradle version contract.   Do not change them. 
0, Line, //  TODO Use IvyArtifact here
0, Line, //  Not part of a strongly connected component or the root of a strongly connected component 
0, Line, //  modifies in place 
0, Line, //  Copy the snapshots whose values are the same, then snapshot remaining values 
0, Line, //  Serialize the incoming class and parameters (if necessary) 
0, Line, //  null if type == UNDEFINED 
0, Line, //  Only * characters: matches #1 above 
0, Block, /*      * Checks whether the plugin marker artifact exists in the backing artifacts repositories.      */
0, Line, //  this exception means that we want to try again. 
0, Line, //  Probe for artifact with classifier 
0, Line, //  note: BigInteger and BigDecimal are also imported by default 
0, Line, //  SoftwareModel 
0, Line, //  At this point we must have annotations on this private getter 
0, Line, //  Create a SourceFile object to represent an "empty" extern 
0, Line, //  <tr>     <td><literal><link linkend="$id">$name</link>$signature</literal></td>     <td>$description</td>   </tr> 
0, Line, //  Any windows GCC compatible implementation (mingw, cygwin) 
0, Line, //  ml/ml64 have position sensitive arguments,   e.g., /Fo must appear before /c and /c must appear before the source file. 
0, Line, //  extract the files that were generated 
0, Line, //  First scan for annotation, and short circuit transformation if not present 
0, Line, //  asking isResolved here allows to check if a primitive   type name like "int" was used to make t. In such a case   we have nothing left to do. 
0, Line, //  According to absolute positioning 
0, Line, //  Make the argument serializers available so work implementations can register their own serializers 
0, Line, //  Not sure under what scenario (if any) this would occur,   but there's no sense in collecting the descriptor if it does.
0, Line, //  Rethrow 
0, Line, //  We can only determine if two DaemonStopEvent point at the same daemon if we know the PIDs 
0, Line, //  Use an IdeaModule to reference a project 
0, Line, //  literal followed by at least one * 
0, Line, //  Lifecycle messages 
0, Line, //  If we've freed memory, invalidate the current OS memory snapshot 
0, Line, //  consumer didn't express any preference, everything fits 
0, Line, //  Traverse graph 
0, Line, //  Enabled caching if task type is annotated with @CacheableTask 
0, Line, //  Wrap build failure in 'cancelled' cross version exception 
0, Line, //  alternatively, we could return project.getLayout().files(Runnable)   would differ in the following ways: 1. live (not sure if we want live here) 2. no autowiring (probably want autowiring here) 
0, Line, //  Run the rules and try to find something again. 
0, Line, //  Invalid paths fall through to here 
0, Line, //  TODO - set ACL here if necessary
0, Line, //  A map from progress operation id seen in event -> progress operation id that should be forwarded 
0, Line, // just in case we have a bug related to logging,  printing some exit info directly to file: 
0, Line, //  Register the defined substitutions for included build 
0, Line, //  only need to decorate when this callback is delayed 
0, Line, //  The task status line may appear twice - once for the execution, once for the UP-TO-DATE/SKIPPED/etc   So don't add to the task list if this is an update to a previously added task.
0, Line, //  all tasks have the same value 
0, Line, //  Create the domain object 
0, Line, //  Calculate how many rows of the status area overlap with the text area 
0, Line, //  An object-like macro 
0, Line, //  Set up worker ClassLoader 
0, Line, // eg. 'someTask' or 'sT'  eg. '', ':' or ':foo:bar' 
0, Line, //  Watch for the client disconnecting before we call stop() 
0, Line, //  separator 
0, Line, //  ProjectStateWrapper might contain the configured eclipse project name 
1, Line, //  TODO:LPTR Remove projection for reference node   This shouldn't be needed, but if there's no actual value referenced, model report can only   show the type of the node if we do this for now. It should use the schema instead to find   the type of the property node instead. 
0, Line, // 1) we've seen the replacement, register new conflict and return 
0, Line, //  Add new labels to the unused queue 
0, Line, //  This is final - use {@link TaskDependencyContainer#visitDependencies} to provide the dependencies instead. 
0, Line, // noinspection unchecked 
0, Line, //  TODO: Add test name to the report   @formatter:off
0, Line, //  triggering file resolve 
1, Line, //  TODO:ADAM - switch the logging back on. Need to make sending messages from daemon to client async wrt log event generation                  LOGGER.debug("Ignoring failure to extract throwable stack trace.", ignored); 
0, Line, //  only an input for other task instances 
0, Line, //  Wrap in a <span>, to work around CSS problem in IE 
0, Line, //  Collect a map from component to its owning component. This might be better to move to the component or some publications model 
0, Line, //  Can use arg without conversion 
0, Line, //  super class not on the classpath - unable to scan parent class 
0, Line, //  Get the next page, in the next iteration of this loop. 
0, Line, //  Have already visited this node - skip it 
0, Line, //  the class property stops resolving, dynamic property names too 
1, Line, //  TODO: Need failure handling, e.g., cannot clone repository 
0, Line, //  Missing ',' 
0, Line, //  Match recording is optimized for the general case of a single match 
0, Line, //  this happens when JNA is not in the path.. or   this happens when the stdout is being redirected to a file. 
0, Line, //  
1, Line, //  TODO This should actually compare a SortedSet 
0, Line, //  Add an adapter for each newly added target 
1, Line, //  TODO - validate that it's a valid model path 
0, Block, /*      * Groovy manipulates the JVM to let GString extend String.     * Whenever we have a Set or Map containing Strings, it might also     * contain GStrings. This breaks deserialization on the client.     * This method forces GString to String conversion.      */
0, Line, //  only write if we have results, otherwise truncate 
0, Line, //  TODO: Synchronization 
0, Line, // we could retrieve annotations at construction time and hold references to them but unfortunately  in IBM JDK strong references are held from annotation instance to class in which it is used so we have to reflect 
0, Line, //  Restore the existing object being deserialized. 
0, Line, //  handle decoding underflow, multi-byte unicode character at buffer chunk boundary 
0, Line, //  Either no cached, or it's changed. See if we can find something local with the same checksum 
0, Line, //  we need to make sure the variants we consider provide the implicit capability 
0, Line, // FileCollection files = ProjectBuilder.builder().build().files();  assertThat(call("{ bean, fc -> bean.files fc}", bean, files), nullValue());  assertThat(bean.getFiles(), sameInstance(files)); 
0, Line, //  Do not reprocess 
0, Line, //  relink, produce another object file   hide _main symbol 
0, Line, //  Intentionally not a “create” method as this should not be exposed as a service 
1, Line, //  The visual C++ tools use the path to find other executables   TODO:ADAM - restrict this to the specific path for the target tool 
0, Line, //  Track any progress operation that either can't be display due to label shortage or child progress operation is already been displayed 
0, Line, //  Assume 80 wide. This is to minimize wrapping on console where we don't know the width (eg mintty)   It's not intended to be a correct solution, simply a work around 
0, Line, // noinspection ResultOfMethodCallIgnored 
0, Line, //  Not looking at a match 
0, Line, //  doesn't exist on either side, nothing to compare 
0, Line, //  https://github.com/gradle/gradle/issues/9380   Remove a srcDir from a sourceSet 
0, Line, //  Ignore artifact transforms 
1, Line, //  TODO:pm Move this to WARN level once we fixed maven-publish, see gradle/gradle#1662 
0, Line, //  Constraint: only consider explicit exclusions declared for this constraint 
1, Line, //  TODO:ADAM - This isn't quite right   MB: I think ^ refers to the first capable classloader loading the class. This could be different   from the loader which originally loaded it, which could pose equality and lifecycle issues. 
0, Line, //  check next level of interfaces 
0, Line, //  This is expensive to calculate, so cache the result 
0, Line, //  ignore anonymous classes 
0, Line, //  standalone test suite 
0, Line, //  When build output area is not visible, position the cursor at the end of the output area 
0, Line, //  try to resolve a public static inner class' name 
0, Line, //  fallback: take the name from the ProjectState 
0, Line, //  Log the error but analyze the remaining interfaces. We could for example run into https://bugs.openjdk.java.net/browse/JDK-7032558 
0, Line, //  Synthesize a start event 
0, Line, // querying runtime for each invocation 
0, Line, //  Eventually add blank line before section 
0, Line, //  else, assume we can write to anything that exists and is not a directory 
0, Line, //  Called from generated code on failure to convert the supplied value for a property to the property type 
0, Line, //  System.nanoTime() can go backwards under some circumstances.   http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6458294   This max() call ensures that we don't return negative durations. 
0, Line, //  Some POMs depend on themselves, don't add this dependency: Ivy doesn't allow this! 
0, Line, //  TODO:instant-execution reconsider type visibility 
0, Block, /*     This can't be called just include, because it has the same erasure as include(Iterable<String>).      */
0, Line, //  setProperty(this, name, value) 
0, Line, //  One of the Scala plugins is applied, but ScalaRuntime extension is missing or the ScalaPlatform is undefined.   we can't create a Scala SDK without either one 
0, Line, //  Re-wording to exception message to get rid of the fqcn it contains
0, Line, //  GENERATE getAsDynamicObject().setProperty(name, value) 
0, Line, //  attributes. 
1, Line, //  TODO:Cedric This is an approximation: when a component wants to compile against the assembly of   a library (not the jar), then we should give it the *stubbed classes* instead of the raw classes. However:   - there's no such thing as a "stubbed classes assembly"   - for performance reasons only the classes that belong to the API are stubbed, so we would miss the classes that do not belong to the API   So this makes the UsageKind.API misleading (should this be COMPILE?).
0, Line, // assertThat(call("{ bean -> bean.things([1,2,3]) }", bean), nullValue());  assertThat(bean.getThings().size(), equalTo(3)); 
0, Line, //  TODO:LPTR This should be like @Finalize void generatedSourcesAreInputs(@Each PlayApplicationBinarySpecInternal binary) 
0, Line, //  It is okay to have redundant generated 'is'-getters 
0, Block, /*      * This inner class hides the fact that the actual de-duplication algorithm is stateful.      */
0, Line, // we're spinning a thread to do work to avoid blocking the connection  This means that the Daemon potentially can do multiple things but we only allows a single build at a time 
0, Line, //  look into the module node if there is a class with that name 
0, Line, //  Type is more complicated, need to check everything. 
0, Line, //  Register at least the project buildDir as a directory to be deleted. 
0, Line, //  TODO - use circular buffers to avoid copying   TODO - share a single initializer with MultiChannelQueue
0, Line, //  Do nothing by default 
0, Line, //  In Kotlin:     > Boolean accessor methods (where the name of the getter starts with is and the name of   > the setter starts with set) are represented as properties which have the same name as   > the getter method. Boolean properties are visible with a `is` prefix in Kotlin     https://kotlinlang.org/docs/reference/java-interop.html#getters-and-setters     This code assumes all configurable Boolean property getters follow the `is` prefix convention.   
0, Block, /*      * Replaces the currently visited expression with the specified expression.      */
0, Line, //  currently we only look in script code; could extend this to build script classes 
0, Line, //  Ensure resource transport protocol, authentication types and credentials are all compatible 
0, Line, //     @Rule 
0, Line, //  we replace '.' only in the className part   with '$' to find an inner class. The case that   the package is really a class is handled elsewhere 
0, Line, //  Always abort execution for an execution failure (as opposed to a node failure) 
0, Line, //  Box value 
0, Line, //  Back to being a pending dependency   Clear remaining incoming edges, as they must be all from constraints 
1, JavaDoc, /*  * An _immutable_ view of the variant of a component. * * TODO - this should replace or merge into VariantResolveMetadata, OutgoingVariant, ConfigurationMetadata  */
1, Line, //  because it's a capability conflict resolution, there is only one candidate per module identifier   so we can be lenient wrt the version number used in the descriptor, which helps whenever the user   used the convenience "notation" method 
0, Line, //  Notify upwards of currently existing descendant spec hierarchy 
0, Line, //  For Maven we don't really know if an optional dependency is required for runtime or compile   so we use the safest: compile 
0, Line, //  when FileVisitOption.FOLLOW_LINKS, we only get here when link couldn't be followed 
0, Line, //  modifies args in place 
0, Line, //  construct project tasks 
0, Line, //  Locked by the same process, treat as if locked by another process 
0, Line, //  end::jupiter-example[] 
0, Line, //  We *absolutely* need to avoid polluting the project with ClassInfo from *our* classloader   So this class must NOT call any dynamic Groovy code. This means we must do what follows using   good old java reflection! 
0, Line, //  Gcc on windows requires the path to be set 
0, Line, //  jarName format: org.jacoco.agent-<version>.jar 
1, Line, //  TODO improve lookup by reusing AvailableJavaHomes testfixture   for now we play it safe and just return false; 
0, Line, //  Continue 
0, Line, //  Disable command line file for now because some custom assemblers   don't understand the same arguments as GCC. 
0, Line, //  in particular, this is about GStrings 
0, Line, //  Should retain this on the metadata rather than calculate on each invocation 
0, Line, //  Collect this early, as the process' current directory can change during embedded test execution
0, Line, // task properties:
0, Line, // we can try sending something to the daemon and try out if he is really dead or use jps  if he's really dead we should deregister it if it is not already deregistered.  if the daemon is not dead we might continue receiving from him (and try to find the bug in messaging infrastructure) 
1, Line, //  TODO - should decorate 
0, Line, //  crash 
0, Line, //  GENERATE getConvention() 
0, Line, //  node and any subclass resolving will then take place elsewhere 
1, Line, //  TODO removing this stuff from the store should be handled through some sort of decoration 
0, Line, //  Set the context classloader to the bootstrap classloader, to work around how JAXP locates implementation classes   This should ensure that the JAXP classes provided by the JVM are used, rather than some other implementation 
0, Line, //  Delete the coverage file before the task executes, so we don't append to a leftover file from the last execution.   This makes the task cacheable even if multiple JVMs write to same destination file, e.g. when executing tests in parallel.   The JaCoCo agent supports writing in parallel to the same file, see https://github.com/jacoco/jacoco/pull/52. 
1, Line, //  TODO: fix the way we work out which exception is important: TaskExecutionException is not always the most helpful
0, Block, /*      * The manifest if this is a jar file and has a manifest, null otherwise.      */
0, Line, //  Either a resolvable expression or a non-empty unresolvable expression, collect. Ignore includes with no value 
0, Line, //  Deployments are considered outOfDate until initial execution with file watching 
0, Line, //  When the component defines a precompiled header, we need to check if the precompiled header is the _first_ header in the source file.   For source files that do not include the precompiled header as the first file, we emit a warning   For source files that do include the precompiled header, we mark them as a "source file for pch"   The native compiler then adds the appropriate compiler arguments for those source files that can use PCH 
1, Line, //  TODO: do we need any factories here? 
0, Line, //  Object propertyMissing(String name) 
0, Line, //  Body is an expression with one or more arguments 
0, Line, //  Always publish process info for multi-request workers 
0, Line, //  the platform doesn't exist, so we're building a lenient one 
0, Line, //  Don't bother resolving local components asynchronously 
0, Line, //  A report to be generated, ignore 
0, Line, //  Authoritative result means don't do remote search 
0, Line, //  no dynamic constraints defined, so dynamicId equals revId 
0, Line, //  Write rich content to stdout and plain content to stderr 
1, Line, //  TODO:HH This should be moved back into languageNative project 
0, Line, //  Build may have failed before getting to projectsLoaded 
1, Line, //  TODO make this work with pending elements
1, Line, //  TODO: Ultimately, this should be some kind of 3rd party dependency that's visible to dependency management.
1, Line, //  TODO: These should come from somewhere else, probably 
0, Line, //  Create test lifecycle task 
1, Line, //  TODO: This should become smarter and move into the compiler infrastructure instead     of the task, similar to how the other native languages are done.     For now, this does a rudimentary incremental build analysis by looking at     which files changed . 
0, Line, //  Ensure binding validation has been done. This should happen elsewhere 
0, Line, //  invoked by Groovy 
0, Line, //  IDEA doesn't like the result of file.toURI() so use the absolute path instead 
0, Line, //  Version isn't used, except by a human looking at the output of jps. 
0, Line, //  No tool chains can build for this platform. Assemble a description of why 
0, Line, //  We need to use the deprecated constructor as it is compatible with certain previous versions of the Zinc compiler 
0, Line, //  Need to compile all secondary routes ("Foo.routes") before primary ("routes") 
0, Line, // handler.registerResolver(new UpgradeCapabilityResolver()); 
0, Line, //  we do not do our name mangling to find an inner class   if the type is a ConstructedClassWithPackage, because in this case we   are resolving the name at a different place already 
0, JavaDoc, /*      * <p>Allows the container to be configured, creating missing objects as they are referenced.</p>     *     * <p>TODO: example usage</p>     *     * @param configureClosure The closure to configure this container with     * @return This.      */
0, Line, //  Ends up with: 1 2 3 -> 4 <- 5 6 
0, Line, //  This agent should be loaded via the custom system ClassLoader 
0, Line, //  Update the cache entry in the index: this resets the age of the cached entry to zero 
0, Line, //  Should be excluded 
0, Line, //  Still 'updated' with reason when version remains the same. 
0, Line, //  check for duplicate entries in java and resources 
0, Line, //  Use Throwable to record the location where a suffix was registered, to allow diagnostics when a collision is found   This may have performance implications, however the assumption is that class generators are global scoped objects that are created once and in very small numbers 
0, Line, //  Strategy mutations will not require a re-resolve 
0, Line, //  Maven local 
0, Line, //  Adds a void $propName(Closure<?> cl) method that delegates to model state 
0, Line, //  Print something to verify it is after task execution 
0, Line, //  This is used only to retain strong references to the values 
0, Line, // windows needs an additional backslash in jar urls 
0, Line, //  Add a line before the first question that has been asked of the user   This makes the assumption that all questions happen together, which is ok for now   It would be better to allow this handler to ask the output renderers to show a blank line before the prompt, if not already present 
0, Line, //  should not happen
0, Line, //  Versions before 3.2 would throw away the cause. There was also a regression in 4.0.x 
0, Line, //  This cannot be CopyOnWriteArrayList because we need to iterate it in reverse,   which requires atomically getting an iterator and the size.   Moreover, we iterate this list far more often that we mutate,   making a (albeit home grown) copy-on-write strategy more appealing. 
0, Line, //  No more unused label? Try to resize. 
0, Line, //  Some POMs depend on themselves through their parent POM, don't add this dependency   since Ivy doesn't allow this!   Example: http://repo2.maven.org/maven2/com/atomikos/atomikos-util/3.6.4/atomikos-util-3.6.4.pom 
0, Line, // Assuming the message has correct format. Not bullet proof, but seems to work ok for now. 
0, Line, //  A nested instance 
0, Line, //  Use the origin file when it can satisfy the basename requirements 
0, Line, //  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-Keyword 
0, Line, //  we must not use interrupt() because it would automatically   close the connection (sending data from an interrupted thread   automatically closes the connection) 
0, Line, //  Eagerly calculate the file if this will be used as a dependency of some task   This is to avoid having to lock the project when a consuming task in another project runs 
0, Line, //  legacy mode for internal APIs 
1, JavaDoc, /*  * A minimal resolver, which does not use any native services. Used during bootstrap only. You should generally use {@link FileResolver} instead. * * TODO - share more stuff with AbstractFileResolver.  */
0, Line, //  Clear previous traversal state, if any 
0, Line, //  Notify threads that may be waiting on this task to complete.   This is required because although all builds may share the same coordination service, the 'something may have changed' event that is fired when a task in this build completes   happens before the state tracked here is updated, and so the worker threads in the consuming build may think the task has not completed and go back to sleep waiting for some   other event to happen, which may not. Signalling again here means that all worker threads in all builds will be woken up which can be expensive.   It would be much better to avoid duplicating the task state here and instead have the task executors communicate directly with each other, possibly via some abstraction   that represents the task outcome
0, Line, // we don't want to support "--flag true" syntax 
1, Line, // a list instance is needed here, as org.gradle.internal.snapshot.ValueSnapshotter.processValue() does not support  serializing Iterators directly 
0, Line, //  Execute the health check that should send out a DaemonExpiration event   if the daemon is unhealthy 
0, Line, //  this is an artifact asked for a particular dependency 
0, Line, //  origins have to be stored until the end of the build 
0, Line, //  Parking space for the write cursor 
0, Line, //  Caller must be holding lock 
0, Line, //  Don't close 
0, Line, //  skipped versions were not used in a release 
0, Line, //  Fallback to ClassLoader's lookup 
0, Line, // argument quoting:   - " must be encoded as \"   - % must be encoded as %%   - pathological case: \" must be encoded as \\\", but other than that, \ MUST NOT be quoted   - other characters (including ') will not be quoted   - use a state machine rather than regexps 
0, Line, //  test if vanilla name is current class name 
0, Line, //  revisit all dependencies and possibly change the classpath order! 
0, Line, //  Any node that the preceding task must run after is also a preceding node. 
0, Line, //  return var 
0, Line, //  Never up to date 
0, Line, //  line gap between the text area and the status area. 
0, Line, //  expand the thread pool until we hit max workers 
0, Line, //  otherwise, keep lock open 
0, Line, //  -1 because of Z_ERROR 
0, Line, //  Work backwards from highest version, return the first candidate with qualified version and release status, or candidate with unqualified version 
0, Line, //  externals are mapped to linked resources so we just need a name of the resource, without full path   non unique folder names are naively deduped by adding parent filename as a prefix till unique   since this seems like a rare edge case this simple approach should be enough 
1, Line, //  TODO:lptr this should be added only if the scan plugin is applied, but SnapshotTaskInputsOperationIntegrationTest   TODO:lptr expects it to be added also when the build cache is enabled (but not the scan plugin) 
0, Line, //  Use the ABI as the hash 
0, Line, //  need to defer loading of Zinc/sbt/Scala classes until we are   running in the compiler daemon and have them on the class path 
0, Line, //  GENERATE super.<propName>(v) 
0, Line, //  At this point, we need the component metadata, because it may declare attributes that are needed for matching   Component metadata may not necessarily hit the network if there is a custom component metadata supplier 
0, Line, //  GENERATE private boolean <flag-name>; 
0, Line, //  Expire when Daemon Registry becomes unreachable for some reason 
0, Line, //  <tr>     <td><link linkend="$id"><literal>$name</literal></link</td>     <td>$description</td>   </tr> 
0, Line, //  the new value is a better fit than the old one 
0, Line, //  A single leaf node as child and total text is not too long, collapse 
0, Line, //  Define a classes variant to use for compilation 
0, Line, //  Edge states are deduplicated, this is a performance optimization 
0, Line, //  Only remove edges that come from a different node than the source of the dependency going back to pending   The edges from the "From" will be removed first 
0, Line, //  Coercion is an expensive process, so we cache the result of coercing to other attribute types.   We can afford using a hashmap here because attributes are interned, and their lifetime doesn't   exceed a build 
0, Line, //  Detach the process from the parent terminal/console 
0, Line, //  This is the first time we've seen the module, so register with conflict resolver. 
0, Line, //  TODO: Whenever we allow _user_ services to be injected, this would have to know   from which classloader we need to load the service 
0, Line, //  Source file has not been compiled before, or its include file graph has changed in some way   Calculate the include file graph for the source file and mark for recompilation 
0, Line, //  Gradle core plus worker implementation classes 
0, Line, //  TODO: Does a static library really have any runtime elements?
0, Line, //  todo CC: check that it ok to do this if configurations have attributes 
0, Line, //  Prefer direct transformation over indirect transformation 
0, Line, //  Classes or resources requested, some Jars found, let's prefer these 
1, Line, //  TODO: We should set this for macOS, but this currently breaks XCTest support for Swift   when Swift depends on C++ libraries built by Gradle. 
0, Line, //  Check if type is Factory<? extends ElementType> 
0, Line, //  The default name for a model is the name of the Java interface 
0, Line, //  Compile the javascript file with the options we've created 
0, Line, //  We should never attempt to join strings so if you see this, there's a problem 
0, Line, //  Create a new group for tasks or configure project 
0, Line, //  If we've never resolved, must resolve 
0, Line, //  On Linux, we assume swift is installed into /opt/swift 
0, Line, //  This already throws when creating `apiElements` so be eager to have a clear error message 
0, Line, //  2 or more lines that look like stack trace elements 
0, Line, // for example: ':a SKIPPED' or ':foo:bar:baz UP-TO-DATE' but not ':a' 
0, Line, //  Maintain a hierarchy of all progress operations in progress — heads up: this is a *forest*, not just 1 tree 
0, Line, //  Already have a hard dependency, this optional dependency is not pending. 
0, Line, //  If the client has not set a location for SOURCE_OUTPUT, javac outputs those files to the CLASS_OUTPUT directory, so clean that instead. 
0, Line, //  Literal followed by *: matches #3 above 
0, Line, //  This may be thrown by the caller of this method at a later time 
0, Line, //  Exclude rules 
0, Line, // The maximum number of times to retry a request when S3 responds with a http 5xx error 
0, Line, //  most outer class is now element 0 
0, Line, //  3.x - 4.6 works on Java 7 - 8 
0, Line, //  First need to populate the default variant version mapping strategy with the default values   provided by plugins 
0, Line, //  Any available tool chain 
0, Line, //  Lock is held while creating ClassLoader - nothing else can happen while this is running 
0, Line, //  Treat all models returned to the action as part of the same object graph 
0, Line, //  We don't use Attribute.INTENSITY_BOLD_OFF as it's rarely supported like Windows 10 
0, Line, //  The wrapper uses the .ok file to identify distributions that are safe to use.   If we delete anything from the distribution before deleting the OK file, the   wrapper will attempt to use the distribution as-is and fail in strange and unrecoverable   ways. 
0, Line, //  may be we have C[k1:v1, k2:v2] -> should become (C)([k1:v1, k2:v2]) 
1, Line, //  TODO:lptr When we drop Java 8 support we can switch to using ClassLoader.getName() instead of storing our own
0, Line, //  A new module. Check for conflict with capabilities and module replacements. 
0, Line, //  attributes 
0, Line, //  return silently when directory doesn't exist 
0, Line, //  so "leaks" into the public API of this component 
0, Line, //  this.instantiator = AsmBackedClassGenerator.getInstantiatorForNext() 
0, Line, //  Log configuration 
0, Line, //  Isolate parameters in this thread prior to starting work in a separate thread 
1, Line, //  TODO: Provide an abstraction for accessing resources within the same module (maven-metadata, directory listing, etc)   That way we can avoid passing `ivyPatterns` and `artifactPatterns` around everywhere 
0, Line, //  not holding the cache lock, can stop now 
1, Line, //  TODO:instant-execution - remove kotlin predicate after updating the wrapper
0, Line, //  These are used to discard references to tasks so they can be garbage collected 
0, Line, //  Generate inputReferences() method 
0, Line, //  Special handling for artifacts declared for optional dependencies 
0, Line, //  the following only needs to be done serially to preserve ordering of dependencies in the graph: we have visited the edges   but we still didn't add the result to the queue. Doing it from resolve threads would result in non-reproducible graphs, where   edges could be added in different order. To avoid this, the addition of new edges is done serially. 
0, Line, //  Only false if no declared outputs AND no Task.upToDateWhen spec. We force to true for incremental tasks. 
1, JavaDoc, /*      * Closes the tooling API, releasing all resources. Blocks until completed.     *     * <p>May attempt to expire some or all daemons started by this tooling API client. The exact behaviour here is implementation-specific and not guaranteed.     * The expiration is best effort only. This method may return before the daemons have stopped.</p>     *     * <p>Note: this is not yet part of the public tooling API yet.</p>     *     * TODO - need to model this as a long running operation, and allow stdout, stderr and progress listener to be supplied.     * TODO - need to define exceptions.     * TODO - no further operations are allowed after this has been called     * TODO - cancel current operations or block until complete     * TODO - introduce a 'tooling API client' interface and move this method there      */
0, Line, //  a local component cannot have attributes (for now). However, variants of the component   itself may. 
0, Line, //  TODO - put this somewhere else 
0, Line, // Making the daemon infrastructure log with DEBUG. This is only for the infrastructure! 
1, Line, //  TODO LD use something more stable than a cast here 
0, Line, //  Tasks are ignored by providers if launchables is not null 
0, Line, // replace wildcard '*' with '.*' 
0, Line, //  now, do our processing using the antlr preprocessor results whenever possible. 
0, Line, //  Note: beforeEvaluate and afterEvaluate ops do not throw, instead mark state as failed 
0, Line, //  Optimizes comparisons by making sure that the 2 elements of   the pair are "sorted" by hashcode ascending 
0, Line, //  Return null to remove the statement 
0, Line, //  Reached the end of input, worker has crashed or exited 
0, Line, //  Ignore this progress operation, and map any reference to it to its parent (or whatever its parent is mapped to 
0, Line, //  This code path will always be a no-op following the changes in DefaultImmutableAttributesFactory   However this code will have to remain forever while the other one should be removed at some point (Gradle 7.0?) 
0, Line, //  Protects the following state 
0, Line, //  Still starting up 
0, Line, //  Show the direct cause of the last contextual cause only 
0, Line, //  populates descriptors, last descriptor in wins for a given architecture 
0, Line, //  We have a cached version, but it might be out of date, so we tell the upstreams to revalidate too 
0, Line, //  1.1, 1.2 
0, Line, //  determine the package name :( 
0, Line, //  Force the user home services to be stopped first, the dependencies between the user home services and the global services are not preserved currently 
0, Line, //  TODO: do not reference mutable state 
0, Line, //  At this stage, 'strictly' implies 'requires'. 
0, Line, //  Invert the map of (file extension -> UTI) pairs to   (UTI -> [file extension 1, ...]) pairs. 
0, Line, //  A primitive type 
0, Line, //  We could do this in Java, which would be easier. However, Twirl only has a Java interface in version 1.3+   If we used Java here then Gradle's TwirlCompiler would need to support both ScalaMethod for Twirl 1.0-1.2 and Java's Method for Twirl 1.3+   Method definition: https://github.com/playframework/twirl/blob/1.3.12/compiler/src/main/scala/play/twirl/compiler/TwirlCompiler.scala#L167 
0, Line, //  clean up comments and new lines 
0, Line, //     private ClassLoader methodParamClassLoader; 
0, Line, //  Managed internal views are allowed not to be implemented by the default implementation 
0, Line, //  equality has been tested before so we know groups are different 
0, Line, //  Checking if there is a type variable to resolve, since resolving the type variable via `TypeToken` is quite expensive. 
0, Line, //  if found only one project dependency - return it, otherwise call the next resolver 
0, Line, //  invoke the typed setter 
0, Line, //  All requests completed, write response 
1, Line, //  TODO: Make this more intelligent by matching the attributes of the runtime usage on the variant identities 
1, Line, //  Workaround for backwards compatibility. Previously, this case would unintentionally cause the method to be invoked on the owner   continue below 
0, Line, //  Don't render empty 'requested' reason 
0, Line, //  guessing right side part of a mapping 
0, Line, //  Assume an infrastructure problem 
0, Line, //  this.metaClass = <value> 
0, Line, //  Remove Kotlin DSL and Kotlin jars 
0, Line, //  maybe it matched through coercion 
0, Line, //  Start the download in another thread and wait for the result 
0, Line, //  '\\\r\n' discarded from stream 
0, Line, //  Make sure file order is always consistent 
0, Line, //  If previous resolve failed, no point in re-resolving 
0, Line, //  If we are pretending that we don't have a sourcepath, the compiler will   look on the classpath for sources. Since we don't want to bring in any   sources implicitly from the classpath, we have to ignore source files   found on the classpath. 
0, Line, //  Dependencies de-duplication 
0, Line, //  we have for example a class name A, are in class X   and there is a nested class A$X. we want to be able   to access that class directly, so A becomes a valid   name in X. 
0, Line, //  we're writing 2 copies of the resource: one relocated, the other not, in order to support `getResource/getResourceAsStream` with   both absolute and relative paths 
0, Line, //  Cannot visit local artifacts until transform has been executed 
0, Line, //  Note the order in which the build phase are added is important 
0, Line, //  the "status" attribute is mandatory, so if it's missing, we need to add it 
0, Line, //  Stop cancelling before sending end-of-input 
0, Line, //  GENERATE private <type> <property-field-name>; 
0, Line, //  Handler to detect Gradle metadata redirects 
0, Line, //  Task is not required - skip it 
0, Line, //  NOTE: we use non-blocking IO as there is no reliable way when using blocking IO to shutdown reads while   keeping writes active. For example, Socket.shutdownInput() does not work on Windows. 
1, Line, //  TODO - capitalise the target name in the task name   TODO - don't create a launch target for a library 
0, Line, //  If they change, continuity of the IDs will be broken. 
0, Line, //  Zero or more * characters followed by at least one !* 
0, Line, //  We can only have attributes if we have the factory, then need to copy 
0, Line, //  We don't care about producing nodes that haven't finished yet 
0, Line, //  The eclipse workspace contains projects from root and included builds. Check projects from all builds   so that models built for included builds do not consider projects from parent builds as external. 
0, Line, //  Broken version 
0, Line, // no mode infos available - fall back to defaults 
0, Line, //  start of tag marker 
0, Line, //  add groovy-ant to bring in Groovydoc for Groovy 2.0+ 
0, Line, //  No hard dependency, queue up pending dependency in case we see a hard dependency later. 
0, Line, //  TODO: Assumes there's a single 'main' Swift component 
0, Line, //  the ansi escapes. 
0, Line, //  It is possible that multiple threads will execute this branch concurrently, when the type is missing. However, the contract for `get()` below will ensure that   only one thread will actually generate the implementation class
0, Line, //  Index of the artifact set == the id of the artifact set 
0, Line, //  Version not found at this base path 
1, JavaDoc, /*      * Create binaries for test suites. TODO: This should really be a @ComponentBinaries rule, but at this point we have no clue what the concrete binary type is, so everything has to be duplicated in     * specific plugins. See usages for example.      */
0, Line, //  NOTE: Windows uses Path, but allows asking for PATH, and PATH         is set within builder object for some things such         as CommandLineIntegrationTest, try PATH first, and         then revert to default of Path if null 
0, Line, //  Use Java serialization for everything else 
0, Line, //  Save the processed metadata for next time. 
0, Line, //  TODO:LPTR Should be @Nested with @Console inside 
0, Line, //  We need to add missing files as source roots, since the package name for deleted files provided by IncrementalTaskInputs also need to be determined. 
0, Line, //  ignore classes in method bodies 
0, Line, //  There are only enough entries to make up 1 block, so move the entries of the right sibling into   this block and discard this block. Might also need to merge the parent 
0, Line, //                 resolution.setLibraryBinary(null); 
0, Line, //  A path, either "" or <> delimited 
0, Line, //  If we get here, we have no idea how much memory the worker is using 
0, Line, //  Work around some bugs in Input.skip() 
0, Line, //  the ansi escapes for piping it into ansi color aware commands (e.g. less -r) 
0, Line, //  remove build listener 
0, Line, //  core javadoc options 
0, Line, //  Need to make sure we remove duplicates, so we can't just compose iterators from source collections 
0, Line, //  The provider is of compatible type and the element was either already realized or we are removing a provider to the element 
0, Line, //  And now let's make sure we do not have another version of that virtual platform missing its metadata 
0, Line, //  Current Model 
0, Line, //  we add a package if there is none yet and the module has one. But we   do not add that if the type is a ConstructedClassWithPackage. The code in ConstructedClassWithPackage   hasPackageName() will return true if ConstructedClassWithPackage#className has no dots.   but since the prefix may have them and the code there does ignore that 
0, Line, //  PatternFilterable overrides to broaden return type 
0, Line, //    Generate factory class   
0, Line, //  java.lang.Object found, which is not a test class 
0, Line, //  If there are 'pending' dependencies that share a target with any of these outgoing edges,   then reset the state of the node that owns those dependencies.   This way, all edges of the node will be re-processed. 
0, Line, //  the regular typed setter 
0, Line, //  Inject 
0, Line, //  Axe everything after the expected exception 
0, Line, //  Use a Class-Path manifest JAR to circumvent too long command line issues on Windows (cap 8191)   Classpath is huge here because it's the test runtime classpath 
0, Line, //  API first 
0, Line, //  stderr of Gradle is redirected to stdout of xcodebuild tool. To work around, we consider xcodebuild stdout and stderr as   the error output only if xcodebuild failed most likely due to Gradle. 
0, Line, //  Treat all errors as warnings, for backwards compatibility 
0, Line, //  tag::host-and-path[] 
0, Line, //  Just the minimal stuff necessary for the worker infrastructure 
0, Line, //  unclear what the best thing to do here would be 
0, Line, //  TODO wolfs: Move these identifiers to the actual strategy classes when they live in :snapshots 
0, Line, //  May (or may not) be mutable - unpack the state 
0, Line, //  Host: x86   Target: ia64 
0, Line, //  Previously traversed but new constraints no longer pending, so partial traversing 
0, Line, //  ...  end::sample[] 
0, Line, //  MODULE_WORKING_DIR doesn't seem to work correctly and MODULE_DIR seems to be in `.idea/modules/<path-to-subproject>`   See https://youtrack.jetbrains.com/issue/IDEA-194910 
0, Line, //  Note: order is crucial here. Nodes are traversed through these states in the order defined below 
0, Line, //  Ignore 
0, Line, //  verbose output is written to stderr for some reason 
0, Line, //  V 
0, Line, //  These errors happen if the JNI lib is not available for your platform.   But since we are on ANSI friendly platform, assume the user is on the console. 
0, Line, //  in order to avoid tracking the set of enqueued nodes 
0, Line, //  we assume generated file collections have no build dependencies 
0, Line, //  Always need the files, as we need to run the transform in order to calculate the output artifacts. 
0, Line, //  For each candidate node, add it to the preceding nodes. 
0, Line, //  Add tasks to build various kinds of components 
0, Line, //  Don't need these things, they're provided by the runtime 
0, Line, //  Loop over all listed versions, sorted by LATEST first 
0, Line, //  is method that returns Boolean is not a getter according to JavaBeans, but include it for compatibility with Groovy 
0, Line, //  The following code was patched according to the following PR: https://github.com/fusesource/jansi/pull/70 
0, Line, //  if we reach this point it means the node selection was restarted, but   effectively it has the same incoming edges as before, so we can return   the result we computed last time 
0, Line, //  Create test suite test task 
0, Line, //  Protects the following fields 
1, Line, //  Did we already consider it as an output after the previous execution? 
0, Line, //  This happens when the connection between the worker and the build daemon is closed for some reason,   possibly because the build daemon died unexpectedly. 
0, Line, //  not a valid signature
0, Line, // remember if module id was annotated 
0, Line, //  property requires >= JAXP 1.5 / Java8 
0, Line, //  Capture non-file input changes 
0, Line, //  Add the items in this page of results to the list we'll return. 
0, Line, //  This will cause problems on Windows if the path to the Gradle executable that is used has a space in it (e.g. the user's dir is c:/Users/Luke Daley/)   This is fundamentally a windows issue: You can't have arguments with spaces in them if the path to the batch script has a space   We could work around this by setting -Dgradle.user.home but GRADLE-1730 (which affects 1.0-milestone-3) means that that   is problematic as well. For now, we just don't support running the int tests from a path with a space in it on Windows.   When we stop testing against M3 we should change to use the system property. 
0, Line, //  TODO - should iterate over each candidate until we successfully copy into the cache
0, Line, //  TODO: Replace with native test task
0, Line, //  Must close each input first 
1, Line, //  TODO: To get rid of this, we need a `FunctionalSourceSet` instance here, and that's surprisingly difficult to get. 
0, Line, //  64 bit   32 bit 
0, Line, //  prevent file system change events when generated content 
0, Line, //  there are no left candidate, do not bother checking other attributes 
0, Line, // partial match 
1, Line, //  TODO generic model related super exception? 
0, Line, //  TODO:lptr this should be added only if the scan plugin is applied, but SnapshotTaskInputsOperationIntegrationTest     expects it to be added also when the build cache is enabled (but not the scan plugin)
0, Line, //  Based on https://github.com/playframework/twirl/blob/1.3.13/compiler/src/main/scala/play/twirl/compiler/TwirlCompiler.scala#L156     
0, Line, //  no-op 
0, Line, //  path(Type) 
0, Line, //  Find the status line for the previous record of this task 
0, Line, //  Inherit implementation dependencies 
0, Line, //  Register the domain object 
0, Line, //  Temporary Classpath implementation for new jvm component model 
1, Line, //  TODO - this should work for any build, rather than just an included build 
0, Line, //  Special case "build successful" when there is no result object to send 
0, Block, /*              * NOTE! The JDK code to create SSLContexts relies on the values of the given system properties.             *             * To prevent concurrent changes to system properties from interfering with this, we need to synchronize access/modifications             * to system properties.  This is best effort since we can't prevent user code from modifying system properties willy-nilly.             *             * The most critical system property is java.home. Changing this property while trying to create a SSLContext can cause many strange             * problems:             * https://github.com/gradle/gradle/issues/8830             * https://github.com/gradle/gradle/issues/8039             * https://github.com/gradle/gradle/issues/7842             * https://github.com/gradle/gradle/issues/2588              */
0, Line, //  append full stack trace 
0, Line, //  tag::custom-task-class[] 
0, Line, //  Use the file from the cache when it does not 
0, Line, //  see if the grammar if out-of-date by way of its super-grammar(s) as gleaned from parsing the grammar file 
0, Line, //  This is a performance optimization. Most modules do not declare capabilities. So, instead of systematically registering   an implicit capability for each module that we see, we only consider modules which _declare_ capabilities. If they do,   then we try to find a module which provides the same capability. It that module has been found, then we register it.   Otherwise, we have nothing to do. This avoids most of registrations.
0, Line, //  Use a dummy security manager, which hacks the application classpath into the system ClassLoader 
0, Line, //  GENERATE this.services() 
0, Line, //  A reference to this class 
0, Line, //  checks if it's a derived platform 
0, Line, //  Discard actions after execution 
0, Line, //  Set explicit build file, if required 
0, Line, //  Gradle's log levels correspond to slf4j log levels   as implemented in OutputEventListenerBackedLogger.   These levels are mapped to java.util.logging.Levels   corresponding to the mapping implemented in the   SLF4JBridgeHandler which is installed by this logging system. 
0, Line, //  Not the first g++ in the path, needs the path variable updated 
1, Line, //  Workaround for https://issues.gradle.org/browse/GRADLE-2625 
0, Line, //  Ivy can resolve files from multiple hosts, so we need to look at all   of the possible URLs used by the Ivy resolver to identify all of the repositories 
0, Line, //  When age == 0, verified since the start of this build, assume the meta-data hasn't changed 
0, Line, //  Keep this expression 
0, Line, //  retrieve content from URL and write to output 
0, Line, //  Default Eclipse JRE paths:   https://github.com/eclipse/eclipse.jdt.debug/blob/master/org.eclipse.jdt.launching/plugin.xml#L241-L303 
0, Line, //  Callable<? extends String> 
0, Line, //  Consider variant aware components with no buildable binaries as non-buildables 
0, Line, // the default 
0, Line, //  Only use this for top level project scripts 
1, Line, //  TODO: We basically don't support copying custom Javadoc options
0, Line, //  Any available Visual Studio >= 2019 
0, Line, //  TODO: Make plan executor respond to changes in parallelism configuration 
0, Line, //  TODO: Change the default location for these reports to follow the convention defined in #configureReportOutputDirectory
0, Line, //  do nothing 
0, Line, //  An application ClassLoader: Inspect class to collect up the classpath for it 
0, Line, //  do not include module-info files, as they would represent a bundled dependency module, instead of Gradle itself 
0, Line, // We might leave that in if we decide it's a good idea for an extra safety net. 
0, Line, //  User scope is expected to be persisted in the global cache since 4.0. 
0, Line, // The matching is very simple at the moment but it should solve majority of cases.  It operates using String#contains and it tests either requested or selected module.
0, Line, //  Move default values into body of closure, so they can use <inputs-lvar> 
0, Line, //  Check that given daemon still exists in registry - a daemon registry could be removed and recreated between checks 
0, Line, //  could make resolveDependencies() cache its result for later use by GenerateIdeaModule 
0, Line, //  need to validate that the selected configuration still matches the consumer attributes   Note that this validation only occurs when `dependencyConfiguration != null` (otherwise we would select with attribute matching)
0, Line, //  rename project dependencies 
0, Line, //  Convert Swift-like macros to a Map like NativeCompileSpec expects 
1, Line, //  TODO: This exists because we detect all available native tool chains on a system (clang, gcc, swiftc, msvc).     Many of our old tests assume that available tool chains can compile many/most languages, so they do not try to   restrict the required set of tool chains.     The swiftc tool chain can build _only_ Swift, so tests that expect to use the swiftc tool chain properly annotate   their requirements with ToolChainRequirement.SWIFTC (or a version-specific requirement).     Our multi-test runner is smart enough to disable tests that do not meet the test's requirements, but since many   of the old tests do not have requirements, we assume the tests require a "C" like tool chain (GCC, Clang, MSVC).     In the future... we want to go back to old tests and annotate them with tool chains requirements.
0, Line, // TODO:HH installTask.dependsOn(executable)
0, Line, //  Will create `ivy.xml` even for Maven publishing! (as long as `Upload.uploadDescriptor == true`) 
0, Line, //  The directory is now empty so delete it 
0, Line, //  Take a deep copy of the compilerArgs because the following methods mutate it. 
0, Line, //  NOTE: might make sense to respect per-compile-task log level 
0, Line, //  Prefer 64-bit tools when building on a 64-bit OS 
0, Line, //  No separating whitespace between the #define and the name 
1, Line, // we don't handle Variables at the moment because users didn't request it yet  and it would probably push us to add support in the tooling api to retrieve the variable mappings.
0, Line, //  we don't decorate everything in BuildListener, just projectsLoaded/projectsEvaluated 
0, Line, //  as we don't have this right now we simulate it by reaching up the tree. 
0, Line, //  Do nothing. 
0, Line, //  Can get duplicate start events 
0, Line, //  Copy built-on-demand state 
0, Line, //  Lower or equal priority but higher version, keep higher scope and exclusions 
0, Line, //  Any available Visual Studio >= 2017 
0, Line, //  check module static imports (for static inner classes) 
0, Line, //  because we need the attributes to be computes lazily too, because of component metadata rules. 
0, Line, //  type 1 = ? extends T 
0, Line, //  GENERATE new ConventionAwareHelper(this, getConvention()) 
0, Line, //  Only download in parallel if there is more than 1 component to download 
0, Line, //  Otherwise, just reuse previous result 
0, Line, //  Rethrow the first failure 
0, Line, // this does not change 
0, Line, //  On rare occasions, exitValue == 0 when the process is expected to fail, and the error output indicates failure. 
0, Line, //  2) create an AntlrTask for this sourceSet following the gradle 
0, Line, //  Track all unused labels to display future progress operation 
0, Line, //  Include as binary when the target project is not included in the workspace 
0, Line, //  Collect changes that would trigger a rebuild 
0, Line, //  if there is a cause, it's an invalid name exception 
0, Line, //  TODO - add linkRenderer.link(property) 
0, Line, //  Already started 
0, Line, //  Start task execution if necessary: this is required for building plugin artifacts,   since these are built on-demand prior to the regular start signal for included builds. 
0, Line, //  Only expand the thread pool if there is work in the queue or we know that work is about to be submitted (i.e. force == true) 
0, Line, //  from this point down, the daemon is 'busy' 
0, Line, //  Callable<S> 
1, Line, //  TODO: VersionSelector should be more descriptive, so it can be directly translated 
0, Line, // 2) new module is a replacement to a module we've seen already, register conflict and return 
0, Line, // builds old model of resolved dependency graph based on the result events 
0, Line, //  Any available Swift compiler <= 4 
0, Line, //  Have not visited this node yet. Push its successors onto the queue in front of this node and visit   them 
0, Line, //  This is a special case for backwards compatibility: it is possible to have   a cycle where the root component depends on a library which transitively   depends on a different version of the root module. In this case, we effectively   allow 2 modules to have the same capability, so we filter the nodes coming   from transitive dependencies
0, Line, //  If any of the input values are not available for this selection, ignore the rule 
0, Line, //  throw new ReadOnlyPropertyException(name, <view-type>.class) 
0, Line, // add description only to the first module 
0, Line, //  Order is significant 
0, Block, /*         When writing a file into the filestore a marker file with this suffix is written alongside,        then removed after the write. This is used to detect partially written files (due to a serious crash)        and to silently clean them.      */
0, Line, //  Any available Visual Studio >= 2015 
1, Line, //  TODO:LPTR Should be a content-less @InputDirectory 
1, Line, //  TODO Need a smarter way to map usage to artifact classifier 
0, Line, //  The file names passed to -cp are canonicalised by the JVM when it creates the system classloader, and so the file names are   lost if they happen to refer to links, for example, into the Gradle artifact cache. Try to reconstitute the file names   from the system classpath 
0, Line, //  can be null in tests, ResolveState cannot be mocked   can be null in tests, ComponentState cannot be mocked 
0, Line, //  Generate args 
0, Line, //  Only use for system Java/Groovy classes; arbitrary use on the build classpath will result in class/jar leaks. 
0, Line, //  Snapshot POMs use -SNAPSHOT instead of the timestamp as version, so validate against the expected id 
0, Line, //  No need to resolve type parameters if the method is from the same class. 
0, Line, //  Any available Visual Studio >= 2012 
0, Line, //  We throw away all state between builds 
0, Line, //  note: this is here to override the default Groovy Collection.findAll { } method. 
0, Line, //  Not yet implemented 
0, Line, //  Collect only the shortest paths 
0, Line, //  this configuration is a child of toAdd, so no need to add it 
0, Line, //  Reached the end of input, worker has exited without failing 
0, Line, //  don't evaluate children, see if we know it's without validating it 
0, Line, //  Collect any container level add actions then add the object specific action 
0, Line, //  Should ask the annotation handler to figure this out instead
0, Line, //  Transient fields 
0, Line, //  Have to alter the "type" of the artifact to match what is published 
0, Line, //  Cannot configure Slf4j logger. This will happen if:   - Tests are executed with a custom classloader (e.g using `java.system.class.loader`)   - Tests are run with `--module-path`, effectively hiding Gradle classes
0, Line, //  10%   384M 
0, Line, //  Any available Visual Studio >= 2013 
0, Line, // then 
0, Line, //  Search in the standard installation locations 
0, Line, //  We do not consider injecting constructors public API 
0, Line, //  For now, 'requires' implies 'prefers', and 'strictly' implies 'requires'   Only publish the defining constraint. 
0, Line, //  Clear the user's environment 
0, Line, //  Order is optimised for humans looking at the log. 
0, Line, //  where the transform class is loaded from) 
0, Line, //  For test suites (including suite-like custom Runners), if the test suite class   matches the filter, run the entire suite instead of filtering away its contents. 
1, Block, /*      * TODO once source compatibility is raised to 1.7, this should be rewritten using the java.nio.FileSystem API,     * which can deal with jars and folders the same way instead of duplicating code.      */
0, Line, //  not holding the cache lock, flush is done so notify flush thread and continue 
0, Line, //  attribute name 
0, Line, //  Include file graph for this source file has not changed, skip this file 
0, Line, //  When deriving variants for the Java ecosystem, we actually have 2 components "mixed together": the library and the platform   and there's no way to figure out what was the intent when it was published. So we derive variants, but we also need   to use generic JAVA_API and JAVA_RUNTIME attributes, instead of more precise JAVA_API_JARS and JAVA_RUNTIME_JARS   because of the platform aspect (which aren't jars but "something"). Using JAVA_API_JARS for the library part and   JAVA_API for the platform would lead to selection of the platform when we don't want them (in other words in a single   component we cannot mix precise usages with more generic ones)
1, Line, //  TODO - better exception 
0, Line, //  There are only enough entries to make up 1 block, so move the entries of the left sibling into   this block and discard the left sibling. Might also need to merge the parent 
0, Line, //  JGit properties work from their relocated locations and conflict if they are left in place. 
0, Line, //  Attempt to determine whether the compiler is the correct implementation 
0, Line, //  we don't know about this kind of archive task 
0, Line, //  Compile all secondary routes files first 
0, Line, //  Read configuration from stdin 
0, Line, //  since we need access to the method and that it's weakly referenced   we always need to double check that it hasn't been collected 
0, Line, //  found the first project dependency 
0, Line, //  If the Java plugin is applied, we want to express that the "compile" and "runtime" variants   are mapped to some attributes, which can be used in the version mapping strategy.   This is only required for POM publication, because the variants have _implicit_ attributes that we want explicit for matching 
0, Line, //  fail fast, this should not happen 
0, Line, //  Only unpack one level of Providers, since Provider<Provider<>> is not supported - we don't need two levels of laziness. 
0, Line, //  Must prepare to bind inputs first 
0, Line, //  One or more '*' followed by one or more non-wildcard: matches #2 above 
0, Line, // already handled elsewhere 
0, Line, // close all streams and redirect IO 
0, Line, //  If there's more than group, merge them into a group set 
0, Line, // Keeps the class set analysis of the given JavaCompile task 
0, Line, //  This test class should be loaded via the custom system ClassLoader 
0, Line, //  this.getClass() 
0, Line, //  If no implementation classpath has been provided, just use the application classloader 
1, Line, // TODO SF this method accepts Closure instance as parameter but does not work correctly for it 
0, Line, //  read entire response 
0, Line, //  Didn't find node at path 
0, Line, //  Already invoking a method on the mix-in 
1, Line, //  TODO find a better way to present this information in the error message   Attempt to mimic Gradle nested exception output 
0, Line, //  Compare 2 static selectors semantically 
0, Line, //  Remove compile and AST types from the Groovy loader 
1, Line, //  TODO: we should really find a better solution for this...   maybe we could use a FilterReader instead of a FilterInputStream? 
0, Line, //  now handle dirs 
0, Line, //  Have visited all of this node's successors 
0, Line, //  Kotlin passes these types for its own basic types 
0, Line, //  subclass hook, allowing us to fake the context for testing 
0, Line, //  Enhance already reported failures 
0, Line, // checks if candidate project is dependent of the origin project with given configuration 
0, Line, //  will be removed in 6.0 
0, Line, // replacement candidates are the only important candidates 
0, Line, //  We only cache the result of parsing the Maven settings files, but allow this value to be updated in-flight   via system properties. This allows the local maven repo to be overridden when publishing to maven   (see http://forums.gradle.org/gradle/topics/override_location_of_the_local_maven_repo). 
0, Line, //  fact. We check here for ConstructedClassWithPackage. 
0, Line, //  Inject missing interfaces to support the usage of plugins compiled with older Gradle versions.   A normal gradle build does this by adding the MixInLegacyTypesClassLoader to the class loader hierarchy.   In a test run, which is essentially a plain Java application, the classpath is flattened and injected   into the system class loader and there exists no Gradle class loader hierarchy in the running test. (See Implementation   in ApplicationClassesInSystemClassLoaderWorkerImplementationFactory, BootstrapSecurityManager and GradleWorkerMain.)   Thus, we inject the missing interfaces directly into the system class loader used to load all classes in the test.
0, Line, //  Need to lock the cache in order to write to the module metadata store 
0, Line, //  put var #1 ('foo') on the stack   push the constant Class onto the stack   push int 1 or 0 (interpreted as true or false) onto the stack 
0, Line, //  As an optimization first check if the method name is among the candidates before we construct an equivalence wrapper 
0, Line, //  Need to perform the actual resolve
0, Line, //  else, unchanged; check next file 
0, Line, //  fall back to standard out 
0, Line, //  Token concatenation is only allowed inside a #define body   Arbitrary tokens won't resolve to an include path   Treat both these cases as an unresolvable include directive 
0, Line, //  Track currently associated label with its progress operation 
0, Line, //  Couldn't find a registration for the given type 
1, Line, //  not fully accurate but a sensible fallback   see http://stackoverflow.com/questions/1288102/how-do-i-detect-whether-the-file-system-is-case-sensitive 
0, Line, //  creating before locking, have to create the most flexible setup 
0, Line, //  try to reconstruct the exception 
0, Line, //  Attempt to merge with the right sibling 
0, Line, //  We have an exclusive lock (whether we asked for it or not). 
0, Line, //  Already at the front. If not at the front, need to recreate 
0, Line, // copy configuration from parent descriptor 
0, Line, //  + setter methods for the above - assume we’ve defined them 
0, Line, //  List modules based on metadata files, but only if we won't check for maven-metadata (which is preferred) 
1, Line, //  TODO not sure if we can clean up the generics here and do less unchecked casting 
0, Line, //  used in integration tests 
0, Line, //  end::custom-task-class[] 
0, Block, /*         Note: there is deliberately no internal synchronizing or caching at this level.        Class generation should be performed behind a ManagedProxyFactory.      */
0, Line, //  Should use `InstantiatorFactory` instead to pick up some validation, but this is currently somewhat expensive
0, Line, //  TODO: Add other build like files `build.gradle.kts`, `settings.gradle(.kts)`, other `.gradle`, `gradle.properties`
0, Line, //  Something else may have removed it 
0, Line, //  _changed_ since last execution, possibly by another task 
0, Line, //  This can happen when a method fails which this method depends on 
0, Line, //           dynamicObjectHelper = <init>        }        return dynamicObjectHelper;   } 
0, Line, //  Transforms do not require project state 
0, Line, //  The only reason for this unit test is to verify that no StackOverflowException is being thrown when   many patterns are passed to getPatternsMatcher. See https://github.com/gradle/gradle/issues/10329 
0, Line, //  TODO IntSet 
1, Line, //  TODO - deal with more than one header dir, e.g. generated public headers 
0, Line, //  GENERATE public ConventionMapping getConventionMapping() { 
0, Line, //  make sure we can store it in order or we'll have surprises on deserialization 
0, Line, //  <inputs-lvar> = <inputs-field> 
0, Line, //  default packages do not contain classes like these 
0, Line, //  Include the display name anyway 
0, Line, //  ...   end::custom-task-class[] 
0, Line, //  It's important that we do not block waiting for the lock while holding the project mutation lock.   Doing so can lead to deadlocks. 
0, Line, //  An @Ignored class, ignore the event. We don't get testIgnored events for each method, so we have   generate them on our own 
0, Line, //  Package private accessor used by MessageDigestHasher.putHash for performance reasons 
0, Line, //  FileCollection is-a Iterable, Buildable and TaskDependencyContainer, so check before checking for these things 
1, Line, //  TODO: projectDependency should be transformed based on defaultProject (and other context) elsewhere. 
0, Line, //  there is at least one candidate which does NOT provide this attribute 
0, Line, //  Matches: task <identifier>(<options-map>) 
0, Line, //  TODO validations on method: synthetic, bridge methods, varargs, abstract, native
0, Line, //  non leading ':' 
1, Line, //  TODO: This will have to be changed when we support setting credentials directly on the authentication 
0, Line, //  Already seen this class, skip it 
0, Line, //  Iterate over unicode characters 
0, Line, //  Get the metadata first to see if it's there 
0, Line, //  Should use some variation of DefaultClassMap below to associate values with classes, as currently we retain a strong reference to each value for one session after the ClassLoader   for the entry's key is discarded, which is unnecessary because we won't attempt to locate the entry again once the ClassLoader has been discarded
0, Block, /*      * When the artifacts declared in a component are modified for publishing (name/classifier/extension), then the     * Maven publication no longer represents the underlying java component. Instead of     * publishing incorrect metadata, we fail any attempt to publish the module metadata.     *     * In the long term, we will likely prevent any modification of artifacts added from a component. Instead, we will     * make it easier to modify the component(s) produced by a project, allowing the     * published metadata to accurately reflect the local component metadata.      */
0, Block, /*          * SourceSet has no access to configurations where we could ask for a lenient view. This                * means we have to deal with possible dependency resolution issues here. We catch and                * log the exceptions here so that the Eclipse model can be generated even if there are         * unresolvable dependencies defined in the configuration.         *         * We can probably do better by inspecting the runtime classpath and finding out which         * Configurations are part of it and only traversing any extra file collections manually.                 */
0, Line, //  Remove the "daemon starting" message 
0, Line, //  need to take copy to prevent ConcurrentModificationException 
0, Line, //  Ignore overrides of Object and GroovyObject methods 
0, Line, //  If this default is ever changed, ensure the documentation on PathSensitive is updated as well as this guide:   https://guides.gradle.org/using-build-cache/#relocatability 
0, Line, //  Index of the artifact set == the id of the artifact set, but reversed when sort order is dependency first 
0, Line, //  IMPORTANT: return must be closed when done with. 
0, Line, //  check Jar exists 
0, Line, //  Add all included builds from the command-line 
0, Line, //  Absolute coordinate system 
0, Line, // done writing data, release any resources 
0, Line, //  Assume all the other compilers are ok, if they happen to be installed 
0, Line, //  The public result for the configuration has been calculated.   It is an error to change anything that would change the dependencies or artifacts 
0, Line, //  JVM args that must be used for the build JVM 
0, Line, //  GENERATE getAsDynamicObject().invokeMethod(name, (args instanceof Object[]) ? args : new Object[] { args }) 
0, Line, //  tag name 
0, Line, //  GENERATE public MetaClass getMetaClass() { 
0, Line, //  This should pass 50% of the time 
1, Line, //  TODO: this is an approximation as we know swift currently supports only 64-bit runtimes - eventually, we'll want to query for this 
0, Line, //  GENERATE public Convention getConvention() { return getAsDynamicObject().getConvention(); } 
0, Line, //  Callable<? extends T> 
0, Line, //  Reuse parent label if possible 
0, Line, // We need to ensure that the conflict is orderly injected to the list of conflicts  Brand new conflict goes to the end  If we find any matching conflict we have to hook up with it 
0, Line, //  Any Swift 5.x compiler 
0, Line, //  Do nothing since the only side effect is that we wouldn't   be able to log the plugin descriptor file name.  Shouldn't   be a reasonable scenario where this occurs since these   descriptors should be generated from real files. 
1, Line, // TODO the async work tracker should wait for children of an operation to finish first.  It should not be necessary to call it here. 
0, Line, //  If there is no known last descriptor, associate it with the root test suite 
0, Block, /* This is an internal option, it's used in com.sun.tools.javac.util.Names#createTable(Options options). The -XD backdoor switch is used to set it, as described in a comment        in com.sun.tools.javac.main.RecognizedOptions#getAll(OptionHelper helper). This option was introduced in JDK 7 and controls if compiler's name tables should be reused.        Without this option being set they are stored in a static list using soft references which can lead to memory pressure and performance deterioration        when using the daemon, especially when using small heap and building a large project.        Due to a bug (https://builds.gradle.org/viewLog.html?buildId=284033&tab=buildResultsDiv&buildTypeId=Gradle_Master_Performance_PerformanceExperimentsLinux) no instances of        SharedNameTable are actually ever reused. It has been fixed for JDK9 and we should consider not using this option with JDK9 as not using it  will quite probably improve the        performance of compilation.        Using this option leads to significant performance improvements when using daemon and compiling java sources with JDK7 and JDK8. */
0, Line, //  cleanup 
0, Line, //  there is nothing to be done. 
0, Line, //  Note: used by generated subtypes 
0, Line, //  Invalid lock state, need to do a real resolution to gather locking failures 
0, Line, //  Apply strategies for "all variants" 
0, Line, //  not a single candidate 
1, Line, //  TODO - reduce duplication with C++ binary 
0, Line, //  exclude the dependencies already provided by SCALA_CONTAINER; prevents problems with Eclipse Scala plugin 
1, Line, //  TODO: This should be more specific to just the tasks that create the class files? 
0, Line, //  A sibling node 
0, Line, //  When the state changes to `SHOULD_RUN`, the dependencies need to be reprocessed since they also may be required now. 
0, Line, //  Node must be at the predecessor state before calculating dependencies 
0, Line, //  NOTE : locateOrBuildGenerationPlan populates the generationPlans map 
0, Line, //  Path == prefix 
0, Line, //  since we use the main source set, we need to make sure the compile classpath and runtime classpath are properly configured 
0, Line, //  -r : Add files to static archive, creating if required   -c : Don't write message to standard error when creating archive   -s : Create an object file index (equivalent to running 'ranlib') 
0, Line, //  Trailing slash on name indicates entry is a directory 
0, Line, //  Exclude tasks from `buildSrc` 
0, Line, //  Initialize and collect any new outgoing edges of this node 
0, Line, //  Don't need to do anything 
0, Line, //  Select the first variant 
0, Line, //  if we already hold the project lock for this project 
0, Line, //  Initial state. Only path and some projections are known here   All projections are defined   Private data has been created, initial rules discovered   Default values have been applied 
0, Line, //  if the worker has not reported memory usage yet for some reason, or does not support it, 
0, Line, // for example: ':hey' or ':a SKIPPED' or ':foo:bar:baz UP-TO-DATE' but not ':a FOO' 
0, Line, // without it, the parent hangs without receiving the message above (flushing does not help). 
1, Line, //  TODO: we aren't considering the filter 
0, Line, //  save name before redirect 
1, Line, //  Send a end-of-line. This is a workaround to convince the console that the cursor is at the start of the line to avoid indenting the next line of text that is displayed   It would be better for the console to listen for stuff read from stdin that would also be echoed to the output and update its state based on this
0, Line, //  Wrap the result processor chain up in a blocking actor, to make the whole thing thread-safe 
0, Line, //  HttpClient is used as a parameter of a public method 
0, Line, //  Path is a descendant of this 
0, Line, //  Overrides the global ClasspathFingerPrinter, currently need to have the parent parameter 
0, Line, //  Resolve the dependency graph 
0, Line, //  We have a matching component id that was rejected. These are handled later in the resolution process   (after conflict resolution), so it is not a failure at this stage. 
0, Line, //  Don't serialize the causes - we'll serialize them separately later 
0, Line, //  Variants 
1, Line, //  TODO - exception when type cannot be created 
0, Line, //  Nothing found - do a second pass 
0, Line, //  No auto-applied plugins available 
0, Line, //  Ignore, as the node in the other build's execution graph takes care of this 
1, Line, //  TODO bind with the sourceCompatibility property   TODO link to runtime configuration ? 
0, Line, //  only if there are no conf defined in sub elements 
0, Line, //  A new top level node, implicitly finish the previous node 
0, Line, //  Use an EclipseProject to reference a project 
1, Line, //  We track this as an input since the Scala compiler output may depend on it.   TODO: This should be replaced by a property in the Scala toolchain as soon as we model these. 
0, Line, //  When running a test in a daemon executer, the input is buffered until a   newline char is received 
0, Line, //  We could do a better job of figuring this out 
0, Line, //  end::options-of-dynamic-processor[] 
0, Line, //  in theory we don't need the synchronized here, but let's be safer in the beginning 
0, Line, //  Maven repos are handled by MavenPlugin 
0, Line, //  Ignore inner classes 
1, Line, //  TODO:LPTR Instead of the first view property, we should figure out these parameters from the actual property 
0, Line, //  Avoid iterating on candidates if there's no requested attribute 
0, Line, //  Fail fast 
0, Line, //  Run any actions to add/modify dependencies 
0, Line, //  Keep until the listener is created 
0, Line, //  need to wrap all dependencies to force them 
0, Block, /*      * Configures the project and all of its sub-projects, including task discovery and binding model rules.      */
0, Line, //  Since Java 9, version should be X instead of 1.X   However, to keep backward compatibility, we change from 11 
0, Line, // so that we don't miss out default tasks 
0, Line, //  On macOS, we assume co-located Xcode is installed into /opt/xcode and default location at /Applications/Xcode.app     We need to search for Clang differently on macOS because we need to know the Xcode version for x86 support. 
0, Line, //  Clean the interrupted status   because some test class processors do work here, e.g. JUnitPlatform 
0, Line, //  iterate from the inner most to the outer and check for classes   this check will ignore a .class property, for Example Integer.class will be   a PropertyExpression with the ClassExpression of Integer as objectExpression 
0, Line, //  There is no setter for this property 
0, Line, //  We know that we're running single-threaded here, so we can use lenient project locking 
0, Line, //  We use static private methods because private/protected methods are disallowed   in managed types. 
0, Line, //  Path is Iterable, but we don't want to unpack it 
0, Line, //  Source file has changed 
0, Line, //  Skip prebuilt libraries 
0, Line, //  ModelRegistrations.Builder methods 
0, Line, //  Not attached to a console 
0, Line, //  If we broke out of the comparison because there was a difference, we can reuse the snapshot of the new element 
0, Line, //  else, throw it away 
0, Line, //  any of the ansi sequences. 
0, Line, //  ModelRegistry methods 
0, Line, //  Add an assemble task for each binary and also wire the development binary in to the `assemble` task 
0, Line, // configure verbosely only if arguments do not specify any log level. 
0, Line, //  The selector failed or the module has been deselected. Do not attach. 
0, Line, // See: NameValidator.FORBIDDEN_CHARACTERS 
0, Line, //  Always assume a candidate from a lock will satisfy the latest version selector 
0, Line, //  Map the arguments of the argument from this expression 
0, Line, //  Mix in to Groovy DSL 
0, Line, //  class in root package - should not happen 
0, Line, //  with a lower case letter anymore 
0, Line, //  this is a published artifact 
0, Line, //  cancel OP_WRITE selection 
1, Line, //  TODO - DSL documentation? 
0, Line, //  User likely doesn't care about daemons that stopped a long time ago 
0, Line, //  Mappings between public and impl types   If the list of mappings grows we should move it to a data structure 
0, Line, //  Remove the handler 
0, Line, //  pre-compute the hashcode as it's going to be used anyway, and this object   is used as a key in several hash maps 
0, Line, //  Any available GCC implementation (including mingw, cygwin, but not clang) 
0, Line, //  Note: this may be a temporary measure while existing infrastructure is being ported to managed model elements 
0, Line, //  Invoke the setter method, to pick up type coercion 
0, Line, //  END 
0, Line, //  We know it's an archive, but not what kind of archive   We know it's an artifact, but that's all we know for sure 
0, Line, //  Adding an optional dependency: see if we already have a hard dependency on the same module 
0, Line, //  GENERATE public <return-type> <setter>(<type> v) { <return-type> v = super.<setter>(v); __<prop>__ = true; return v; } 
0, Line, //  Rewrite the method call to match TransformedModelDslBacking#create(String, Closure), which is what the delegate will be 
0, Line, //  Filter imported classes which are not available yet 
0, Block, /*          * This method returns the dependencies in buckets (projects first, then modules, then files),         * because that's what we used to do since 1.0. It would be better to return the dependencies         * in the same order as they come from the resolver, but we'll need to change all the tests for         * that, so defer that until later.          */
0, Line, //  Must be no higher than this scope as needs cache repository services. 
0, Line, //  guard against edge cases (e.g. JUnit 4 classes with custom runners that report the class as ignored after reporting it as started) 
1, Line, //  TODO We can probably now support more versions with `strictly` but we'll need more test coverage 
0, Line, //  Default Xcode installation 
0, Line, //  Another thread holds the lock, release the project lock and wait for the other thread to finish 
0, Line, //  Transitive dependency 
0, Line, //  All dependencies visited 
0, Line, //  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change, the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere.   WARNING: This code does not expect a class that has a static            inner class in DEFAULT_IMPORTS 
0, Line, //  started, update the log level 
0, Line, //  tag::isolating-annotation-processor[] 
0, Line, //  if not a number, i.e. 2.ABD 
0, Line, //  Same value 
0, Line, //  Else, ignore abstract methods on non-abstract classes as some other tooling (e.g. the Groovy compiler) has decided this is ok 
0, Line, //  Add the source of the source set to the include paths to resolve any headers that may be in source directories 
0, Line, //  have visited all consumers, so visit this node 
0, Line, //  check custom packaging 
1, Line, //  TODO: move this to ObjectFactory 
0, Line, //  Library or executable 
0, Line, //  Matches: task <arg> or task(<arg>) 
0, Line, //  End of the stream 
0, Line, //  Thrown when jna cannot initialize the native stuff 
0, Line, //  throws T 
0, Line, //  Check if type extends Factory<? extends ElementType> 
1, Line, // there are some exceptions attached to the suite. Let's make sure they are reported to the user.  this may happen for example when suite initialisation fails and no tests are executed 
0, Line, //  We could support an unfiltered DirectoryFileTree here as a cacheable root,   but because @OutputDirectory also doesn't support it we choose not to. 
0, Line, //  These are here just so that ProjectInternal can implement FileOperations to work around https://github.com/gradle/gradle/issues/6027 
1, Line, //  TODO: Does a static library have runtime elements? 
0, Line, //  This substitution is effectively a force 
0, Line, //  Without this, HTTP Client prohibits multiple redirects to the same location within the same context 
0, Line, //  not provided by older client versions 
0, Line, //  TODO: Locking around this state 
0, Line, //  Look for parameter substitutions 
0, Line, //  getProperty(this, name) 
0, Line, //  Eventually convert manifest content to UTF-8 before handing it to java.util.jar.Manifest 
0, Line, //  Resolve it now 
0, Line, //  The name of the test class 
0, Line, //  If an annotation processor is detected, we need to force Java stub generation, so the we can process annotations on Groovy classes   We are forcing stub generation by tricking the groovy compiler into thinking there are java files to compile.   All java files are just passed to the compile method of the JavaCompiler and aren't processed internally by the Groovy Compiler.   Since we're maintaining our own list of Java files independent of what's passed by the Groovy compiler, adding a non-existent java file   to the sources won't cause any issues. 
0, Line, //  Pass 2, compile everything except buildscript {}, pluginRepositories{}, and plugin requests, then run 
0, Line, //  Update timestamp so that working directory is not garbage collected 
0, Line, //  Find first position where values are different 
0, Line, //  keep the ordering we had in earlier gradle versions 
0, Line, //  All local/cached options failed, get directly 
0, Line, //  Should use stronger modelling for this and make the set of tools open, rather than hard-coding here 
0, Line, //  Remove .pdb file if present 
0, Line, //  TODO: Enable this by default when toolVersion >= 6.0.0 if it's stable enough. 
0, Line, //  Target module can change, if this is called as the result of a module replacement conflict. 
0, Line, //  ProjectEvaluationListener 
0, Line, //  For project dependencies de-duplication   Ignore scope on purpose   Ignore version because Maven doesn't support dependencies with different versions on different scopes   Ignore exclusions because we don't know how to choose/merge them   Consequence is that we use the highest version and the exclusions of highest priority dependency when de-duplicating   Use Maven Dependency "Management Key" as discriminator: groupId:artifactId:type:classifier
0, Line, //  import checks that stack is not empty 
0, Line, //  Write plain content to stdout and rich content to stderr 
0, Line, //  Allow the publication to participate in incremental build 
0, Line, //  Non-null when the result of visiting this file can be reused 
0, Line, //  Determine the actual sources to clean/compile 
0, Line, //  5) register fact that antlr should be run before compiling 
0, Line, //  Read and verify count 
0, Line, //  we have C[*:map] -> should become (C) map 
0, Line, //  These versions couldn't handle milestone patches 
0, Line, //  Only when this node has a transitive incoming edge 
0, Line, //  TODO given that all the closures are from the same file, we should do the relativising once.        that would entail adding location information to the model {} outer closure.
0, Line, //  avoiding us to implement a costly visitor and potentially missing edge cases 
1, Line, //  TODO:LPTR This ignores changes to Project.buildDir after model node has been created
0, Line, //  By default we assume your Unix tty can handle ANSI codes.   Just wrap it up so that when we get closed, we reset the 
0, Line, //  Else, ignore 
0, Line, //  Calculated on demand 
1, Line, //  TODO:LPTR Remove projection for reference node   This shouldn't be needed, but if there's no actual value referenced, model report can only   show the type of the node if we do this for now. It should use the schema instead to find 
0, Line, //  If the operation hasn't finished normally (because of a shortcut or an error), we close it without a cache key 
0, Line, //  isOpen was added in gradle 5.6. for 5.5 we default to true 
0, Line, //  used only as defaultconf, not used for 
0, Line, //  Context of the app under test. 
0, Line, //  We don't do anything here, as older consumers call this method when the project connection is closed but then later attempt to reuse the connection 
0, Line, //  GENERATE getAsDynamicObject().hasProperty(name); 
0, Line, //  Strategy changes in a parent configuration do not affect this configuration, or any of its children, in any way 
0, Line, //  Use the Jars when nothing has been requested 
0, Line, //  create our own metaInf which runs after mainSpec's files 
0, Line, //  Unrecognized expression or extra stuff after the expression, possibly another expression 
0, Line, //  Check each unique edge in the include file graph 
0, Line, //  Then use attribute specific mapping 
0, Line, //  toAdd is a child, so implies this configuration 
0, Line, //  Elements that may or may not be interesting only for build dependency calculation 
0, Line, //  Read-only nested property with managed type 
0, Line, //  Currently, we only track the major version. 
0, Line, //  convert the file urls to cached jar files 
0, Line, //  using a transforming classloader is only required for older buggy Groovy versions 
0, Line, // calling overloaded method with extra behavior: 
0, Line, //  there's an ambiguity, but we may have several variants matching the requested capabilities.   Here we're going to check if in the candidates, there's a single one _strictly_ matching the requested capabilities. 
0, Line, //  Add these as separate specs, so they are not affected by the changes to the main spec 
0, Line, //  path within its build (i.e. including project path)   path within the build tree (i.e. including project path)   path of the owning build 
1, Line, //  TODO: what if this errors? 
0, Line, //  No compatible daemons available - start a new daemon 
0, Line, //  probably facing JDK-8046686 
0, Line, //  GENERATE objectFactory.fileProperty() 
0, Line, //  Badly formed arguments 
0, Line, //  new value 
0, Line, //  Look for a provider with that name 
1, Line, //  TODO:instant-execution - remove this 
0, Line, //  List modules based on metadata files (artifact version is not considered in listVersionsForAllPatterns()) 
0, Line, //  This is a safety net, it's unsure whether this can happen, because it's likely (certain?)   that for a specific module resolve state, all selectors are of the same type 
0, Line, //  Do conflict resolution to choose the best out of current selection and candidate. 
0, Line, // remove SLF4J error out like 'Class path contains multiple SLF4J bindings.'  See: https://github.com/gradle/performance/issues/375#issuecomment-315103861 
0, Line, //  That is the state a node is in when it was selected but the selection violates a constraint (reject or strictly) 
0, Line, // Assuming that the diagnostics were printed out to the last line. It's not bullet-proof but seems to be doing fine. 
1, Line, //  TODO: remove this special case 
0, Line, //  Versions before 4.1 would log "CONFIGURE SUCCESSFUL" for model/action execution (but "BUILD FAILED" for task/test execution) 
1, Line, //  Need to move those implicit JVM args that contain a space to the Gradle command-line (if possible)   Note that this isn't strictly correct as some system properties can only be set on JVM start up.   Should change the implementation to deal with these properly
0, Line, //  On any line except the bottom most one, a new line simply move the cursor to the next row.   Note: the next row has a lower index. 
0, Line, //  Visit the edges after sorting the components in consumer-first order 
0, Line, //  Do not include implicit builds in workspace 
0, Line, //  Choose explicit variant 
1, Line, //  Doesn't really make sense 
0, Line, //  Preserve logging of headers for progress operations started outside of the build operation executor as was done in Gradle 3.x 
0, Line, //  exclusions optimizations 
0, Line, //  Use of a LinkedList for 2 reasons: `Set` proved to have a significant negative impact on performance   And list will see a lot of removals, which ArrayList isn't very well suited for. 
0, Line, //  Only keep track of removed options that were present in the command line 
1, Line, // "type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)",
0, Line, //  something happened, but we don't know what 
0, Line, //  We cannot clean in progress markers, or in progress files here because   the file system visitor stuff can't handle the file system mutating while visiting 
0, Line, //  tag::functional-test-junit[] 
0, Line, //  Use a GradleProject to reference a project 
0, Line, //  Check to see if there are any compatible idle daemons 
0, Line, //  Maven adds inherited dependencies last 
0, Line, //  A system class, skip it 
1, Line, //  TODO - exceptions thrown here should point to some extensive documentation on the concept of class rule sources 
0, Line, //  never swallow java.lang.Error 
0, Line, //  Remove the "Expiring Daemon" message 
0, Line, //  Make sure that map only contains Boolean.TRUE and Boolean.FALSE values and no other Boolean instances.   This is necessary because:   1. serialization/deserialization of the compile spec doesn't preserve Boolean.TRUE/Boolean.FALSE but creates new instances 
0, Line, //  The contract of useCache() means we have to provide some basic synchronization. 
0, Line, //  This means that the signature was not required and we couldn't generate the signature   (most likely project.required == false and there is no signatory)   So just noop 
0, Block, /*  Parsing state  */
0, Line, //  First step is to find an entry with the explicit inputs in the cache 
0, Line, //  try to deserialize the original exception 
0, Line, //  Special case some common combinations of names and paths 
0, Line, //     ((PropertyInternal)<getter>()).setFromAnyValue(p);   } 
0, Line, //  With multiple unclassified artifacts, choose the one with extension matching pom packaging 
0, Line, //  Disallow instance fields. This doesn't guarantee that the object is immutable, just makes it less likely   We might tighten this constraint to also disallow any _code_ on immutable types that reaches out to static state 
0, Line, //  restore only if there was a save operation first 
0, Line, //  Nothing found locally - try a remote search for all resolve states that were not yet searched remotely 
0, Line, //  Empty path, might match when more elements added 
0, Line, //  If implements MethodMixIn, do not attempt to locate opaque method, as this is expensive 
0, Line, //  We get only the first element here, nothing else. But Collection   forces us to use an iterator. 
0, Line, //    Add constructor   
0, Line, //  The changes about the interface's methods will be reported already 
0, Line, // we don't really need to launch the daemon to acquire information needed for BuildEnvironment 
0, Line, //  In order for the Groovy stubs to have annotation processors invoked against them, they must be compiled as source.   Classes compiled as a result of being on the -sourcepath do not have the annotation processor run against them 
0, Line, //  Provide an implicit empty argument 
0, Line, //  Create build configuration at the project level from all target's build configuration 
0, Line, //  When implementing PropertyMixIn, do not check for opaque properties, as this can be expensive 
0, Line, //  or all of them were rejected 
0, Line, //  Object methodMissing(String name, Object args) 
0, Line, //  not a 'Jar', not a 'test' 
0, Line, //  Redraw every entry of this area 
0, Line, //  This is fine, just ignore it 
0, Line, //  TODO some representation of state of the inputs 
0, Line, //  prefer to use the actual memory usage reported by the worker 
0, Line, //  In order to use a newer version of jna the resources must not be available in the old location 
0, Line, //  Exit early as we are reusing the create actions from the provider 
0, Line, //  This shouldn't be the case, however, start and complete events are filtered in the prior stage when the logging level is > lifecycle   Should instead move the filtering after this stage 
0, Line, //  Allow currently executing and enforced tasks to complete, but skip everything else. 
0, Line, //  GENERATE objectFactory.setProperty(type) 
0, Line, //  Target: x64 
0, Line, //  Generate: Object[] unpackState() { state = new Object[<size>]; state[x] = <prop-field>; return state; } 
0, Line, //  Callable 
0, Line, // after redirecting we need to add the new std out/err to the renderer singleton 
0, Line, //  Mark the connection has being handled 
0, Line, //  Remove classes from core Gradle API 
0, Line, //  Matches: task <method-call> 
0, Line, //  Largest free block is too small 
0, Line, //  This is a potential nested rule.   Visit method parameters 
1, Line, // (SF) this is a workaround until this story is completed. I'm hardcoding setting the idle timeout to be max X mins.  this way we avoid potential runaway daemons that steal resources on linux and break builds on windows.
0, Line, //  Generated script class name must be unique - take advantage of this to avoid delegation 
0, Line, //  count from left of screen, 0 = left most   count from bottom of screen, 0 = bottom most, 1 == 2nd from bottom 
0, Line, //  We need to update pending count outside of withLocks() so that we don't have a race   condition where the pending count is 0, but a child worker lease is still held when   the parent lease is released. 
0, Line, //  must be a @ClassRule; use the rule's class name instead 
0, Line, //  By default, we push to the local cache. 
0, Line, //  Copied from ToolProvider.defaultJavaCompilerName 
0, Line, //  will flush any unterminated lines out synchronously 
0, Line, //  no default mapping found for this configuration, map   configuration to itself 
0, Line, //  Check if there are any transitive incoming edges at all. Don't traverse if not. 
0, Line, //  <thead>     <tr>       <td>Block</td>       <td>Description</td>     </tr>   </thead> 
0, Line, //  we're asking for a runtime variant, prefer -jars first 
0, Line, //  GradleBuild tasks operate with their own build session and tree scope.   Therefore, they have their own RootBuildCacheControllerRef.   This prevents them from reusing the build cache configuration defined by the root.   There is no way to detect that a Gradle instance represents a GradleBuild invocation.   If there were, that would be a better heuristic than this. 
0, Line, //  Generate new Object[] { args } 
0, Line, // Logging exception here is only needed because by default Gradle does not show the stack trace 
0, Line, //  Add attributes to be applied given the extension 
0, Line, //  we're asking for an API variant, prefer -jars first for runtime 
0, Line, //  nothing to do 
1, Line, //  TODO - move this to a base plugin   Setup the dependency on the main binary   This should all be replaced by a single dependency that points at some "testable" variants of the main binary 
0, Line, //  Always append a new line at EOF 
0, Line, //  stop at super and this 
1, Line, //  TODO - should we support this?   Adds a void $propName(Object value) method that simply delegates to the converting setter method 
0, Line, //  Don't generate method if it's not part of the view schema 
1, Line, //  TODO: Send a message to workers to change their log level rather than stopping 
0, Line, //  We have to go through URIish and back to deal with differences between how   Java File and Git implement file URIs. 
0, Line, //  only check for the last byte of a multi-byte line separator   besides this, always check for '\n' 
1, Line, //  TODO - this should also be using the decorating instantiator but cannot for backwards compatibility 
0, Line, //  non-heap spaces are not garbage collected 
1, Line, //  TODO - visit the contents of this collection instead.   This is just a super simple implementation for now 
0, Line, //  Capture all output, lazily up until two new lines and an END_OF_TASK designation 
0, Line, //  in order to make sure that the CacheEntry is not collected   while the cached class loader is still in use, we need to keep a strong reference onto 0
0, Line, //  GENERATE new MixInExtensibleDynamicObject(this, getClass().getSuperClass(), super.getAsDynamicObject(), this.services()) 
0, Line, //  assume EJB is the most common kind of EAR deployment 
0, Line, //  Automatically substitute all available modules 
0, Line, //  Force back to configure so that task graph will get reevaluated 
0, Line, //  avoids creation of empty hashset 
0, Line, //  full match 
0, Line, //  copy one by one until the underflow has been resolved 
0, Line, //  Order is important! 
0, Line, //  static alias only for inner classes and must be at end of chain 
0, Line, //  Task has already been run. This can happen when the owning build is used both at configuration time and execution time   This should move earlier in task scheduling, so that a worker thread does not even bother trying to run this task 
0, Line, //  Disallow work-in-progress to take up more than half of the console display   If the screen size is unknown, allow 4 lines 
0, Line, //  repositories 
1, Line, //  TODO We should get rid of this reflection (will need to reimplement the parser to act on the metadata directly) 
0, Line, //  Badly form args list 
0, Line, //  By default, we do not push to the remote cache. 
0, Line, //  For a dependency from _another_ build to _this_ build, don't make the artifact buildable   Making these artifacts buildable leads to poor error reporting due to direct task dependency cycle (losing the intervening build dependencies) 
0, Line, //  this mimics the behavior of the Ant javac task (and therefore AntJavaCompiler),   which silently excludes files not ending in .java 
0, Line, //  Handle trivial cases with 0 or 1 elements in both current and previous 
0, Line, //  Latest is only given priority if it's in a require 
0, Line, //  Should run after edges only exist between tasks, so this cast is safe 
0, Line, //  Called from transformed DSL rules 
0, Line, // noinspection SimplifiableIfStatement 
1, Line, //  TODO: do we want to keep using SourceDirectorySet in the new API?   would feel more natural if dirs could be added directly to LanguageSourceSet   could also think about extending SourceDirectorySet 
0, Line, //  There was a breaking change after 0.8 
0, Line, //  Use the loaded settings if it includes the target project (based on build file, project dir or current dir) 
0, Line, //  Prefer having javac validate the location over us, by calling it first. 
0, Line, //  this.super() 
0, Line, //  Create a client that will match based on the daemon startup parameters. 
1, Line, //  TODO:LPTR This should be removed once BinaryContainer is a ModelMap   We need to also implement all the interfaces of the delegate type because otherwise   BinaryContainer won't recognize managed binaries as BinarySpecInternal
0, Line, // in case one wants to synchronize this method,  bear in mind that it is blocking so it cannot share the same lock as others 
0, Line, //  Write header 
0, Line, //  Implementation provided by decoration 
0, Line, //  should never happen 
0, Line, //  network authentication required 
0, Line, //  Determine the net exclusion for this node, by inspecting all transitive incoming edges 
0, Line, //  Failure 
0, Line, //  If we can detect that stdout is not a tty.. then setup 
0, Block, /*             The semantics of this method are that the given action should be notified if the            Daemon is going to be terminated at the end of this build.            It is not a generic outlet for “expiry events”.            Ideally, the value given would describe the problem and not be phrased in terms of why we are shutting down,            but this is a practical compromise born out of piggy backing on the expiration listener mechanism to implement it.          */
0, Line, //  Callable<String> 
0, Line, //  Same serialized content - value has not changed 
0, Line, //  Output events 
0, Line, //  Generate: static Class generatedFrom() { ... } 
0, Line, //  The hfs+ file system stores file names in decomposed form. Don't use precomposed characters on macOS, as way too few things normalise text correctly 
0, Line, //  skip the UTF-8 BOM 
0, Line, //  scan parent class 
0, Line, //  We temporarily want to allow skipping the publication of Gradle module metadata 
0, Line, //  old versions don't send a type 
0, Line, // quote ', ", \, $. Probably not perfect. TODO: identify non-working cases, fail-fast on them 
0, Line, //  CopySourceSpec overrides to broaden return type 
1, Line, //  todo - stream serialised value to file   todo - handle hash collisions (properly, this time)   todo - don't store null links to child blocks in leaf index blocks   todo - align block boundaries   todo - thread safety control   todo - merge small values into a single data block   todo - discard when file corrupt   todo - include data directly in index entry when serializer can guarantee small fixed sized data   todo - free list leaks disk space   todo - merge adjacent free blocks   todo - use more efficient lookup for free block with nearest size 
0, Line, //  This will be the left most property 
0, Line, //  A local, anonymous class or a private inner class - ignore the reference 
0, Line, //  Alternate appending packages at beginning and end until we reach max length 
0, Line, //  but all resolved ok 
0, Line, // jdk5 does not have days, hours or minutes, normalizing to millis 
1, Line, //  This is a workaround for https://issues.gradle.org/browse/GRADLE-3324.   Somehow the ArrayList 'result' in `org.sonatype.aether.impl.internal.Utils#sortMetadataGeneratorFactories` ends up   being a list of nulls on windows and IBM's 1.6 JDK.
0, Line, //  Failure to select the target variant/configurations from this component, given the dependency attributes/metadata. 
0, Line, //  All items are complete. Do not release project lock and simply collect failures. 
0, Line, //  Serialize configuration to daemon via the process' stdin 
0, Line, //  Adding a small set with no duplicates 
0, Line, //  We only need to hide "main", so only support short named symbols here. 
0, Line, //  TODO: Duplicated in DefaultFileLockManager 
0, Line, //  Write body 
1, Line, //  TODO - binaries aren't an input to this rule, they're an input to the action 
0, Line, //  Stop periodic checks 
0, Line, //  Wire the antlr configuration into all antlr tasks 
0, Line, //  A task created by a provider that does not understand launchables 
0, Line, //  Make sure tree is removed if it exists already 
0, Block, /*  how and what do we have to parse  */
0, Line, //  The identity check is intentional here, do not replace with .equals() 
0, Line, //  GENERATE <setter>(v) 
0, Line, //  That means if the current class is not an InnerClassNode 
1, JavaDoc, /*  * Specifies how to build and where to place a native executable file. * * <p>TODO:HH resolve naming conflict with existing NativeExecutableSpec</p>  */
0, Line, //  A ∩ (A ∪ B) ∩ (A ∪ C) -> A 
0, Line, //  Only use this for top level settings scripts 
0, Line, //  protocolVersion + lockId + type 
0, Line, //  Special case for events defined prior to InternalProgressEvent 
0, Line, //  element name 
0, Line, //  Else, already visited 
0, Line, //  boolean 
0, Line, //  Use preemptive authorisation if no other authorisation has been established 
0, Line, //  don't rename other types of dependencies 
0, Line, //  The 'is'-getter is ignored, we can skip it in favor of the 'get'-getter 
0, Line, //  if the return type doesn't use generics, then it's faster to just rely on the type name directly 
0, Line, //  Defer creation of failures list, assume dispatch will succeed 
1, Line, //  This should be replaced by some stronger modelling and made open rather than hardcoding a set of source languages here 
0, Line, //  When Groovy coerces a Closure into an SAM type, then it creates a Proxy which is backed by the Closure.   We want to track the implementation of the Closure, since the class name and classloader of the proxy will not change. 
0, Line, //  Virtual platforms require their constraints to be recomputed each time as each module addition can cause a shift in versions 
0, Line, //  Supports building 32-bit binaries 
1, Line, //  We moved the API back into internal, so this isn't really correct. 
0, Line, //  Remove the "Daemon will be shut down" message 
0, Line, //  Here, we try to avoid using the reg exp backed pattern step, as it is expensive in terms of performance and heap usage.   There are several special cases we handle here:   1. '*'   2. '*' <literal>   3. <literal> '*'   4. <literal> '*' <literal>   5. <literal>   Everything else uses a reg exp. 
1, Line, //  TODO - refactor this action out so it can be unit tested 
0, Line, // failed to instantiate BlockJUnitRunner. try deprecated JUnitRunner (for JUnit < 4.5) 
0, Line, //  we are at the first name part. This is the right most part.   If this part is in lower case, then we do not need a class   check. other parts of the property expression will be tested   by a different method call to this method, so foo.Bar.bar   can still be resolved to the class foo.Bar and the static   field bar. 
0, Line, //  ordinary Groovy Gradle script   Kotlin Gradle script 
0, Line, //  in the map, store a minimally populated LaunchableGradleTaskSelector that contains just the description and the path   replace the LaunchableGradleTaskSelector stored in the map iff we come across a task with the same name whose path has a smaller ordering   this way, for each task selector, its description will be the one from the selected task with the 'smallest' path 
0, Line, //  the enqueue and dequeue methods are used for performance reasons 
0, Line, //  remaining methods are here to make sure we didn't forget anything 
0, Line, //  An internal counter used to track the number of outgoing edges   that use this selector. Since a module resolve state tracks all selectors   for this module, when considering selectors that need to be used when   choosing a version, we must only consider the ones which currently have   outgoing edges pointing to them. If not, then it means the module was 
1, Line, //  TODO - error if there are unknowns? 
0, Line, //  Skip processing of any operations that both start and complete in the queue 
0, Block, /*         TODO change this so that we extract all the information at compile time.        At the moment we use the transform to:        1. validate/restrict the syntax        2. transform rules into something more robust (e.g. foo.bar.baz {} into configure("foo.bar.baz", {})) - no dynamic propertyMissing() nonsense        3. hoist out input references (i.e. $()) into an annotation on rule closure classes to make available        This means we actually have to execute the code block in order to find the rule information within.        This is also problematic because it means we have to serialize this information into some form that fits into annotations.        Later, we will extract all the “up-front” information we need to know during compile time.        This will mean that we only need to execute the rules themselves, and not any code to actually register the rules.      */
0, Line, //  Converts the binaries of a project library into regular binary instances 
0, Line, //  if there are only 3 or fewer known subtypes, render them   in a single column 
0, Line, //  not sure if this is required as its the parent of   deprecatedUsageLoader already
0, Line, //  Worker didn't crash 
0, Line, //  Classloader scope will be handled by the cache, class will be released when the classloader is. 
0, Line, //  Deserialize the old value and use the equals() implementation. This will be removed at some point 
0, Line, //  Time interval between the first event in the window and the last 
0, Line, //  copy in case any actions mutate the store   linked list because the underlying store may preserve order   We make best effort not to create an intermediate collection if this container   is empty. 
0, Line, //  Check ClassLoaders 
0, Line, //  Flush and clean up 
0, Line, //  Apache commons 
0, Line, //  Needed to use inside lambda below 
0, Line, //  Pad 
0, Line, //  (macOS) Looks like: Test Case '-[AppTest.PassingTestSuite testCanPassTestCaseWithAssertion]' started.   (Linux) Looks like: Test Case 'PassingTestSuite.testCanPassTestCaseWithAssertion' started. 
0, Line, //  Only initialize "name" child node if the schema has such a managed property.   This is not the case for a managed subtype of an unmanaged type that implements Named. 
0, Line, //  for all commons attributes, make sure they are compatible with each other 
1, Line, //  TODO:ADAM - using a UUID means we create a ClassLoader hierarchy for each daemon process we talk to. Instead, use the spec to decide whether to reuse a ClassLoader 
0, Line, //  Any ProgressOperation in the parent chain has a message, the operation is considered renderable. 
0, Block, /*      * Configures the project, discovers tasks and binds model rules.      */
0, Line, // html does not like <a name="..."/> 
0, Line, //  Missing parameter name 
0, Line, //  Visit the selectors 
0, Line, //  fallback to old behavior of always loading the resource 
0, Line, //  Not quite immutable, see ImmutablePatternSet 
0, Line, //  Should never get here, the last strategy should be a catch all
1, Line, //  TODO - should supply and check for the same parameters as passed to reserveNewClient() 
0, Line, //  Add JVM args that were explicitly requested 
0, Line, //  Before there was --scan, there was -Dscan or -Dscan=true or -Dscan=yes 
0, Line, //  Already seen this ClassLoader 
1, Line, //  TODO - should use the _install_ task for an executable 
0, Line, //  some capabilities are explicitly required (in other words, we're not _necessarily_ looking for the default capability   so we need to filter the configurations 
0, Line, //  there are still more than one candidate, but this time we know only a subset strictly matches the required attributes   so we perform another round of selection on the remaining candidates 
0, Line, //  There has been a GC event 
1, Line, //  Implement this if you need to specify individual toolchains via "org.gradle.integtest.versions" 
0, Line, //  No statements, or no statements that have an effect 
0, Line, // noinspection ForLoopReplaceableByForEach 
0, Line, //  if no installation can be located 
0, Line, //  Matches: task <arg>{1, 3} 
0, Line, //  Defaults 
0, Line, //  XML declarations must be located at first position of first line 
0, Line, //  2) we don't do progress logging for "downloading" 
0, Line, //  Filter unexisting files as FindBugs can't handle them. 
0, Line, //  CBZip2InputStream expects the opening "BZ" to be skipped 
0, Line, //  try simplify 
0, Line, //  We need to lock other processes out here because garbage collection can be under way in another process 
0, Line, // we're making an assumption that all <pre> elements contain java code  this should mostly be true :)  if it isn't true then the syntax highlighting won't spoil the view too much anyway 
1, Line, //  todo annotate as required 
0, Line, //  validate that the targetPlatform is valid 
0, Line, //  Universal CRT is required only for VS2015 
0, Line, //  GENERATE public boolean hasProperty(String name) { return getAsDynamicObject().hasProperty(name) } 
0, Line, // CHECKSTYLE:ON 
0, Line, //  We avoid using reflect, since that leads to class loading exceptions 
0, Line, //  skip over stack trace 
0, Line, //  <thead>     <tr>       <td>Method</td>       <td>Description</td>     </tr>   </thead> 
0, Line, //  return state.equals(((GeneratedView)arg).__view_state()); 
0, Line, //  When age == 0, verified since the start of this build, assume listing hasn't changed 
0, Line, //  Emulate secondary inputs as a single property for now 
0, Line, //  TODO - push all this stuff down to the tool chain and let it create the specific platform and provider 
0, Line, //    Add `boolean immutable() { return true }`   
0, Line, //  Don't know about this type 
0, Line, //  Add the block line-number as an argument to call `plugins(int lineNumber, Closure pluginsBlock)` 
0, Line, //  We check the params passed to the build factory 
1, Line, //  TODO: CC cannot enable this assertion because moduleSource is not serialized, so doesn't appear in the deserialized form  assert metadata.equals(forceRead);
0, Line, //  Failed in another thread 
1, Line, //  todo An ExcludeRule is a value object but we don't enforce immutability for DefaultExcludeRule as strong as we   should (we expose the Map). We should provide a better API for ExcludeRule (I don't want to use unmodifiable Map).   As soon as DefaultExcludeRule is truly immutable, we don't need to create a new instance of DefaultExcludeRule.
0, Line, //  Called when some other problem occurs 
0, Line, //  A project is involved, need to be aware of it
0, Line, //  Store this because Locale.default is mutable and we want the unchanged default   We are assuming this class will be initialized before any code has a chance to change the default 
0, Line, //  Only fire once 
0, Line, //  Not a leaf node. Move up an entry from a leaf node, then possibly merge the leaf node 
0, Line, //  If the configuration can still be mutated, we need to create a composite 
0, Line, //  Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars), at least not yet   ModelPath.validateName(name); 
0, Line, //  Last group; what ever is left take that replace all characters that are not alphanum or '_' or '-' 
0, Line, //  Else, the provider is of incompatible type, maybe we have a domain object collection of Provider, fallthrough 
0, Line, //  TODO: Default branch can be different from just master 
0, Line, //  only create an intermediate collection if there's something to copy 
0, Line, //  Convert the UTF-8 manifest bytes to the requested content charset 
0, Line, //  Same as above, if we have wrapped a closure in a WrappedConfigureAction or a ClosureBackedAction, we want to 
0, Line, //  If there's an explicit dependency from consuming node to destroyer,   then we accept that as the will of the user 
0, Line, //  check that groovy is visible. 
0, Line, //  but visible as the surrounding class is imported and the inner class is public/protected static 
0, Line, //  Wire the task into the library model 
0, Line, //  Set the context classloader the bootstrap classloader, to work around the way that JAXP locates implementation classes   This should ensure that the JAXP classes provided by the JVM are used, rather than some other implementation 
1, Line, //  production code should handle these exceptions more gracefully 
0, Line, //  Matches: task <expression> <operator> <expression> 
0, Line, //  TODO: Removing `debug` from variant name to keep parity with previous Gradle version in tooling models
0, Line, //  Use a random prefix to avoid reusing test directories 
0, Line, //  fast path for two 
0, Line, //  Ignore, deal with this problem later
0, Line, //  Looks in the correct project registry for this binary 
0, Line, //  Have visited this node's dependencies - add it to the graph 
0, Line, //  Same size and no differences 
0, Line, //  If textArea is on a status line but nothing was written, this means a new line was just written. While   we wait for additional text, we assume this row doesn't count as overlapping and use it as a status   line. In the opposite case, we want to scroll the progress area one more line. This avoid having an one 
0, Line, //  Add artifact format as an implicit attribute when all artifacts have the same format 
0, Line, //  TODO extract common stuff from this and ModelSet and reuse 
0, JavaDoc, /*      * Allow null as a valid input. The default is to disallow null.     *     * <p>When this is enabled, all converters must be null safe.     *     * TODO - attach the null safety to each converter and infer whether null is a valid input or not.      */
0, Line, //  (ia64 is no longer supported on later versions of Visual Studio) 
1, Line, //  TODO - this isn't quite right 
0, Line, //  TODO - this belongs with the 'var' data structure 
0, Line, //  Dependencies 
0, Line, //  See JLS3 "Binary Compatibility" (13.1) 
0, Line, //  This could probably be more efficient 
0, Line, //  else ignore 
0, Line, //  Not already known, attempt to self-close the parent 
0, Line, //  TODO - introduce a new 'var' data structure that allows these conventions to be configured explicitly 
0, Line, //  Calculate the actual type 
0, Line, //  Clear environment variables that might effect cl.exe & link.exe 
0, Line, //  Save the existing object being deserialized. 
0, Line, //  Does nothing 
0, Line, // it's possible that we receive an output for a suite here  in this case we will create the test result for a suite that normally would not be created  feels like this scenario should modelled more explicitly 
0, Line, //  Check the normal metadata first 
0, Line, //  Mark this version as rejected 
0, Line, //  let's override this so that delegate isn't created at autowiring time (which would mean on every build) 
0, Line, //  Was previously traversed, and no change to the set of modules that are linked by outgoing edges.   Don't need to traverse again, but hang on to the new filter since it may change the set of excluded artifacts. 
0, Line, //  Jansi is required to log errors when generating Groovydoc 
0, Line, //  For now just collect this as another dependency   TODO - collect this information and merge the metadata from the other module 
0, Line, //  Short-circuit selector merging for single selector without 'prefer' 
0, Block, /*         Note: the intention here is to work towards not having to create new objects        to meet the notification object interfaces.        Instead, the base types like BuildOperationDescriptor should implement them natively.        However, this will require restructuring this type and associated things such as        OperationStartEvent. This will happen later.      */
0, Line, //  We might be able to use a cached/locally available version 
0, Line, //  TODO: Combine with ProjectDependencyPublicationResolver
0, Line, //  Read shared packages 
0, Line, //  Do not forward events for rendering when there are no listeners to receive 
0, Line, //  Ignore some broken samples 
0, Line, //  <method>.getGenericReturnType() 
0, Line, // when test is completed we should redirect output for the parent  so that log events emitted during @AfterSuite, @AfterClass are processed 
0, Line, //  Add more data patterns to the default configuration to work around https://github.com/gradle/gradle/issues/1596 
0, Line, //  Build a strongly typed (mergeable) exclude spec for each supplied rule 
1, Line, //  The isEmpty check is not required, might look innocent, but Guava's performance bad for an empty immutable list   because it still creates an inner class for an iterator, which delegates to an Array iterator, which does... nothing.   so just adding this check has a significant impact because most components do not declare any capability 
0, Line, //  Otherwise, already have a result, so reuse it 
0, Line, //  End of path, might match when more elements added 
0, Line, //  all of the interfaces that we decorate have 100% void methods  noinspection ConstantConditions 
0, Line, //  TOOD:LPTR Should be just a relative path
0, Line, //  first match, just record the value. We can't use "null" as the candidate value may be null 
0, Line, //  TODO The scope information is superseded by test attributes. We can delete the corresponding code bits once we make sure that the majority of Buildship users use test sources.
0, Line, //  If this configuration's version is in conflict, do not traverse.   If none of the incoming edges are transitive, remove previous state and do not traverse.   If not traversed before, simply add all selected outgoing edges (either hard or pending edges)   If traversed before:        If net exclusions for this node have not changed, ignore        If net exclusions for this node not changed, remove previous state and traverse outgoing edges again. 
0, Line, //  Selected for the configuration 
1, Line, //  TODO we are relying on the registration having established these links, we should be checking
0, Line, //  Forward output immediately when the focus is on this operation group 
0, Line, //  Note that @CompileClasspath here is an approximation and must be fixed before de-incubating getAstTransformationClasspath()   See https://github.com/gradle/gradle/pull/9513 
0, Line, //  This means the client has not reported memory usage yet 
0, Line, //  first let antlr preprocess the grammars... 
0, Block, /*             Note: we currently extract this information from the execution plan because it's            buried under functions in #filter. This could be detangled/simplified by introducing            excludeTasks(Iterable<Task>) as an analog to addEntryTasks(Iterable<Task>).            This is too drastic a change for the stage in the release cycle were exposing this information            was necessary, therefore the minimal change solution was implemented.          */
0, Line, //  When cancelled, try to stop the download thread but don't attempt to wait for it to complete   Could possibly loop here for a while trying to force the thread to exit 
0, Line, //  possibly an inner class 
0, Line, //  File loop exceptions are ignored. When we encounter a loop (via symbolic links), we continue   so we include all the other files apart from the loop.   This way, we include each file only once. 
0, Line, //  When dependency resolution has failed, we don't want the build operation listeners to fail as well   because:   1. the `failed` method will have been called with the user facing error   2. such an error may still lead to a valid dependency graph 
0, Line, //  Recreate the invoker when deserialized, rather than serialize all its state 
0, Block, /*  method was only introduced in Groovy 1.8  */
0, Line, //  Generate: <init>(Object[] state) { } 
0, Line, //  make convention mapping work (at least for 'main'...   ...and for 'jvmArgs') 
0, Line, //  found more than one 
0, Line, //  Rely on the default linkage for providing the headers 
0, Line, //  Unrecognized extension 
0, Line, //  The CustomRunner class will fail this test if this class is initialized before its    run method is triggered.
0, Line, //  Cannot yet publish module metadata without component 
1, Line, // TODO SF add quotes to both formats (there will be *lots* of tests failing so I'm not sure if it is worth it). 
0, Line, //  in-process Groovy compilation throws a CompilationFailedException from another classloader, hence testing class name equality   TODO:pm Prefer class over class name for equality check once using WorkerExecutor for in-process groovy compilation 
0, Line, //  TODO - do not hold lock while computing value 
1, Line, //  TODO(ew): Consider whether this belongs in BuildProgressArea or here 
0, Line, //  Generate: int getFactoryId() { return <factory-id-field> } 
0, Line, //  Using the caches for these connections leaves the Jar files open. Don't use the cache, so that the Jar file is closed when the stream is closed below   There are other options for solving this that may be more performant. However a class is inspected this way once and the result reused, so this approach is probably fine
0, Line, //  for guessing right side part of a mapping 
0, Line, //  Update any previously known files with a bogus timestamp to force a rebuild 
1, Line, //  TODO It would be better if these were added via a separate managed view, rather than hard coded. 
0, Line, //  In case of getting a ConstructedClassWithPackage here we do not do checks for partial   matches with imported classes. The ConstructedClassWithPackage is already a constructed 
0, Line, //  See TestDataGeneratorTest for examples 
0, Line, //  The compilation will generate the new mapping file   Only merge old mappings into new mapping on incremental recompilation 
0, Line, //  Should be using ConfigureUtil (with DELEGATE_FIRST strategy), however for backwards compatibility need to use OWNER_FIRST 
0, Line, //  TODO - calculate this list of classes dynamically 
0, Line, //  Collect incremental input changes 
0, Line, //  for Groovy <1.6, we need to call org.codehaus.groovy.runtime.InvokerHelper#getVersion 
0, Line, //  Any configuring event received from nested or buildSrc builds before the root build starts configuring is ignored 
0, Line, // optional 
0, Line, //  First try to determine the artifacts in-memory (e.g using the metadata): don't use the cache in this case 
0, Line, //  experimentation shows the following, excluded modules are   inherited from parent POMs if either of the following is true:   the <exclusions> element is missing or the <exclusions> element 
0, Line, //  Chuck away the implicit target. It has already been executed 
0, Line, //  construct build invocations from task selectors and project tasks 
0, Block, /*                 val leftResult = result.left()                val errorSeq = left.get()                // convert errorSeq -> Java types              */
0, Line, //  Configure the binaries 
1, Line, //  Shouldn't really be here. Currently this goal is used by {@link #bindAllReferences} which also expects the subject to be bound 
0, Line, //  For legacy software model behaviour, which is to assume that any kind of runtime can be built when any compiler is available 
0, Line, //  Ensure that deploy jars are not also added into lib folder.   Allows the user to get transitive dependencies for a bean artifact by adding it to both earlib and deploy but only having the file once in the ear. 
0, Line, //  Versions before 5.1 would unpack the exception and throw part of it, losing some context 
0, Line, //  Maps from interned absolute path for a file to metadata for the file. 
1, Line, //  This doesn't work.   It used to because at the bottom of the hierarchy chain the object implemented methodMissing().   However, our normal “decorated” classes do not do this so it is not realistic. 
0, Line, //  Don't traverse path back to root when there is nothing that can possibly match 
0, Line, //  Find failure section 
0, Line, //  For example, when using a local access to resolve something remote 
0, Line, //  Do we have an 'is'-getter as well as a 'get'-getter?
0, Line, //  There are enough entries in this block and the right sibling to make up 2 blocks, so redistribute   the entries evenly between them 
0, Line, //  Capture the relative file 
0, Block, /*  if it's already OSGi compliant don't touch it  */
0, Line, //  Already visited this node 
0, Line, //  Collect a map from component to coordinates. This might be better to move to the component or some publications model 
0, Line, //  For each module participating in the conflict, deselect the currently selection, and remove all outgoing edges from the version. 
0, Line, //  Nothing accessible, always up to date 
0, Line, //  This is not the root block. Must have children >= minIndexChildNodes 
0, Line, //  Compile all main routes files last 
0, Line, //  This is necessary so that the watcher indicates its not running if the runnable gets cancelled 
0, Line, //  ok to use caller classloader 
0, Line, //  here, we need to check that applying the new resolution filter   we would actually exclude exactly the same dependencies as in   the previous visit. It is important that this is NOT a heuristic   (it used to be) because if the filters are _equivalent_, we would 
0, Line, //  Iterate through each page of results, and add them to our results list. 
0, Line, //  Note that the sourceSet is the sourceSet this pre-compiled header will be used with - it's not an   input sourceSet to the compile task. 
0, Line, //  Stop is very slow, clean it up later 
0, Line, //  Maximum pool size is fixed, so we should only need to get it from the first event 
0, Line, //  If no tasks is specified then the default tasks will be executed.   To work around this, we assign a new empty task for execution. 
0, Line, //  See the comment for {@link #createIsolatedClassLoader} above 
0, Line, // the unlock was confirmed we are waiting 
0, Line, //  First try to determine the artifacts locally before going remote 
0, Line, //  In case more descendants are added to downward hierarchy, make sure they'll notify us 
1, Line, //  TODO: This returns the wrong public type for domain objects   created with the eager APIs or added directly to the container.   This can leak internal types.   We do not currently keep track of the type used when creating   a domain object (via create) or the type of the container when   a domain object is added directly (via add). 
0, Line, //  implementation based on Spock's StackTraceFilter class 
0, Line, //  No C++ compiler, complain about it 
0, Line, //  Need to override as error message is hardcoded in constructor of public type ResolveException
1, Line, //  TODO:LPTR What happens when the property has multiple accessors in the same role but with different type? 
0, Line, //  MSVC doesn't allow a space between Fo and the file name 
0, Line, //  At this point we know that we have a match for pname. This may   mean, that name[pname.length()..<-1] is a static inner class.   For this the rest of the name does not need any dots in its name.   It is either completely a inner static class or it is not.   Since we do not want to have useless lookups we create the name   completely and use a ConstructedClassWithPackage to prevent lookups against the package. 
0, Line, //  BuildListener 
0, Line, //  Clean the interrupted status 
0, Line, //  A work around for not being able to skip the task when an input _file_ does not exist 
0, Line, //  Reserve 0 for null (to be added later) 
0, Line, //    Add factory method   
0, Line, //  Nothing - just return the highest version 
0, Line, //    Add `getFactoryId()` 
1, Line, //  TODO: Should not be ignoring DEPENDENCY_ATTRIBUTE modifications after resolve
0, Line, //  TODO: Register these mappings somewhere 
0, Line, //  AST transforms need their own class loader that shares compiler classes with the compiler itself 
0, Line, //  Replace absent Provider with null.   This is required for allowing optional provider properties - all code which unpacks providers calls Provider.get() and would fail if an optional provider is passed.   Returning null from a Callable is ignored, and PropertyValue is a callable. 
0, Line, //  Defer creation and resolution of configuration until required. Short-circuit when script does not require classpath 
0, Line, //  Fall back to serialization 
0, Line, //  If stdout and stderr are attached to the console 
0, Line, //  Equal values are compatible 
0, Line, //  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-BooleanLiteral 
0, Line, //  Zero or more * characters followed by literal followed by at least one * 
0, Line, //  classpath change?
0, Line, //  Use DirectInstantiator here to avoid setting up the instantiation infrastructure early 
1, Line, // TODO this should be a container of platforms 
0, Line, //  Versions before 5.1 would sometimes add some additional 'build cancelled' exceptions 
0, Line, //  References some fixed value expression, return it after macro expanding 
0, Line, //  Swift tests will always have a toolchain requirement for swiftc 
0, Line, //  else leading ':', this is ok 
0, Line, //  We don't have mutable access to the project, so we throw a deprecation warning and then continue with   lenient locking to prevent deadlocks in user-managed threads. 
0, Line, //  We don't really need to handle this.
0, Line, // btw. the ibm vm+winXP also has some issues detecting closed streams by the child but we handle this problem differently. 
0, Line, //  lists all the values a revision token listed by a given url lister 
0, Line, //  TODO - also close console when it is replaced 
0, Line, //  A sequence of tokens that look like a function call argument list. Should support an arbitrary token sequence 
0, Line, //  TODO: Decide if we want to push the gate concept into TAPI or other entry points   currently, a gate is only used by continuous build and can only be controlled from within the build.
0, Line, //  @Param({"md5.java", "md5.bc", "sha1.java", "sha1.bc", "blake2b.bc"}) 
1, JavaDoc, /*      * TODO - hack to avoid classloading issues. We should use org.gradle.util.TextUtil     *     * Currently we can't use it reliably because it causes CNF issues with cross version integration tests running against tooling api < 1.3.      */
0, Line, //  Visit the nodes prior to visiting the edges 
0, Line, //  Everything else treat as a generic operation 
0, Line, //  Native Services 
1, Line, //  TODO: else, verify that the build definition is the same 
0, Line, // Skip content download 
0, Line, //  Generate makeRule() method 
0, Line, // noinspection SwitchStatementWithTooFewBranches 
0, Line, //  Need to delete the previous archive, otherwise stale object files will remain 
0, Line, //  only set the TaskOperation as the parent if the Tooling API Consumer is listening to task progress events 
0, Line, //  TargetJDK does not include 1.1, 1.2 and 1.8;   Use same fallback as PMD 
0, Line, //  buffer has been fully read, start at the beginning 
0, Line, //  Exactly Visual Studio 2019 
0, Line, //  Note: this listener manager is scoped to the root Gradle object. 
0, Line, //  Default for everything else 
0, Line, //  Ignore the tag section of the comment 
0, Line, //  Matches: task <identifier> <arg-list> <operator> <expression>   Map to: passThrough(task('<identifier>', <arg-list>) <operator> <expression>) 
0, Line, //  performs a fast analysis of classes referenced in bytecode (method bodies) 
0, Line, //  If we have no caching options, just get the thing directly 
0, Line, //  Anything left over only exists in the new list 
0, Line, //  add the configurations from this temporary parser to this module descriptor 
0, Line, //  Old Scala Plugin does not specify a ScalaPlatform 
0, Line, //  The fingerprint hashes for non-regular files are slightly different to the snapshot hashes, we only need to compare them for regular files 
0, Line, //  Implementation is provided by 'plugin-use' module 
0, Line, //  Implementation is generated 
0, Line, // just returns the original object 
0, Line, //  Iterate over the metadata sources to see if they can provide the version list 
0, Line, //  No identifier, allow anything except '(' or ',' or ')' 
0, Line, //  Input events 
0, Line, //  File did not exist before locking, use some initial state 
0, Line, //  Start the pipeline in reverse order:   1. mark daemon as running   2. start handling incoming commands   3. start accepting incoming connections   4. advertise presence in registry 
0, Line, //  Corner case of Maven -SNAPSHOT compat 
1, Line, //  TODO - make this lazy 
0, Line, //  if the collection is a read-only property, it must be initialized first (it will never be null)   if the collection is *not* read-only, then we will initialize it only if the collection is the   subject of a rule, that is to say that it can be mutated. This may look strange, if a read-write   collection is null to initialize it to an empty list, but this is how the specs define reaw-write   collections of scalar types. 
0, Line, //  Make sure all entries are always written in the same order 
0, Line, //  we need to compute a hash for a constant, which is based on the name of the constant + its value   otherwise we miss the case where a class defines several constants with the same value, or when   two values are switched  non-private const 
0, Block, /*      * Tries to minimize the number of requests to the resolution engine by batching up requests     * for sources/javadoc.     *     * There is still some inefficiency because the ArtifactCollection interface does not provide     * detailed failure results, so we have to fall back to the more expensive ResolutionResult API.     * We should fix this, as other IDE vendors will face the same problem.      */
0, Line, //  Not sure this can happen, unless in error state 
0, Line, //  ignore these test suites 
0, Line, //  skip exact matches 
0, Line, //  runtime check because method is used from Groovy where type bounds are not respected 
0, Line, //  type, payload size 
0, Line, //  Check that ivy.xml isn't duplicated 
0, Line, //  When age == 0, verified since the start of this build, assume still missing 
1, Line, //  TODO should this take Object? 
0, Line, //  TODO - allow @InputFile and @SkipWhenEmpty to be attached to getExecutableFile() 
0, Line, //  Save a reference to the dependency that was written before 
1, Line, //  Used by the Kotlin-dsl base plugin   TODO - remove this 
0, Line, //  Maybe this type belongs in the same package as the node that is doing the   static import. In that case, the package may not have been explicitly specified.   Try with the node's package too. If still not found, revert to original type name. 
1, Line, //  TODO - sources is not actual an input to binaries, it's an input to each binary
0, Line, //  Not marked as @Nullable because of Groovy compiler bug: https://issues.apache.org/jira/browse/GROOVY-8505 
0, Line, //  This happens for IBM JDK 6 for nested interfaces -- see https://issues.apache.org/jira/browse/GROOVY-7010   Let's try to return something as close as possible to the intended value 
0, Line, //  Not public. Evaluation of these specs is a major hot spot for large builds, so use an array for iteration 
0, Line, //  Expire compatible, idle, not recently used Daemons after a short time 
0, Line, // The values are based on what I have found in sbt-compiler-maven-plugin.googlecode.com and zinc documentation  Hard to say what effect they have on the incremental build 
0, Line, //  Not a zip file 
0, Line, //  Cannot convert 
0, Line, //  static classes are used for the actions to avoid implicitly dragging project/tasks into the model registry 
0, Line, //  Add outgoing configurations and publications 
0, Line, //  eliminate the common root 
0, Line, //  The strategy for sharing build cache configuration across included builds in a composite,   requires that the cache configuration be finalized (and cache controller available)   before configuring them. This achieves that. 
0, Line, //  Pass build JVM args through to daemon via system property on the launcher JVM 
0, Line, //  look into the compile unit if there is a class with that name 
0, Line, //  When used as an input, add the producing tasks if known 
0, Line, //  no changes yet   handle case where monotonic clock isn't monotonic 
0, Line, //  type2 = ? extends S, never contained 
0, Line, //  There is a possibility that a platform version was selected before a new member   of the platform was discovered. In this case, we need to restart the selection,   or some members will not be upgraded 
0, Line, //  Serialize the worker config, this is consumed by SystemApplicationClassLoaderWorker 
0, Line, //  values from `JvmPackageNameTest` 
0, Line, //  We allow the gradle version to be overridden for tests that are sensitive   to the version and need to test with various different version patterns.   We use an env variable because these are easy to set on daemon startup,   whereas system properties are scrubbed at daemon startup.
0, Line, //  Ignore input received after the monitor operation has been completed 
0, Line, //  Restore the environment 
0, Line, // noinspection ConstantConditions 
0, Line, //  Create variants container only as required 
0, Line, //  Currently not supported 
0, Line, //  Different implementation - assume value has changed 
0, Line, //  Float f = (Float) tmp   f==null?0:f.floatValue() 
0, Line, //  if more than one conflicting project dependencies 
0, Line, //  acquiring the exclusive lock can fail in the rare case where another process is just doing or has just done the cache initialization 
0, Line, // started, enable 
0, Line, //  Copied from http://hc.apache.org/httpcomponents-client-ga/ntlm.html 
0, Line, //  return this.metaClass 
0, Line, //  Ignored 
0, Line, //  Reasonable default threshold bounds: between 384M and 1G 
0, Line, //  solution   IllegalAccessException 
0, Line, //  This can happen if this is used in a constructor or a @Before method. It also happens when using   @RunWith(SomeRunner) when the runner does not support rules. 
0, Line, //  Mark all affected configurations as observed 
0, Line, //  no filtering in place 
1, Line, //  TODO - mix in Groovy support using bytecode decoration instead   TODO - validate closure parameters to check they are within bounds
0, Line, //  These will also be copied across to any daemon used 
1, Line, // TODO this class attempts to mimic the behavior of the output of mvn help:effective-pom  instead of this class we should walk the maven project object model (instead of parsing the xml!)
1, Block, /*      * we have a name foo.bar and an import foo.foo. This means foo.bar is possibly     * foo.foo.bar rather than foo.bar. This means to cut at the dot in foo.bar and     * foo for import      */
1, Line, //  TODO - remove this once the above is removed 
0, Line, //  Exactly Visual Studio 2013 
0, Line, //  end::isolating-annotation-processor[] 
0, Line, // (SF) This approach should generally work because at the moment we reset capturing output per suite  (see CaptureTestOutputTestResultProcessor) and that reset happens earlier in the chain.  So in theory when suite is completed, the output redirector has been already stopped  and there shouldn't be any output events passed  See also GRADLE-2035 
0, Line, // when no daemon process has started yet 
1, Line, //  This is a workaround for https://github.com/gradle/gradle-private/issues/1690
0, Line, //  Dummy rule to cause the extension to be realized 
0, Line, //  The registered nodes may contain nodes which are no longer selected.   We don't remove them from the list in the first place because it proved to be   slower than filtering as needed. 
0, Line, //  This is necessary because for the Tooling Api compatibility runner, NativeServices   can get initialized in a different classloader, which then makes it broken and unusable   in the test class (because the native shared library is loaded from another classloader).   By initializing it here, we ensure that it is loaded from the classloader the test class   also uses. 
0, Line, //  GENERATE public ExtensionContainer getExtensions() { return getConvention(); } 
0, Line, //  Read server address and start connecting 
0, Line, //  Defer dependencies gathering as we need to resolve across project's boundaries 
0, Line, //    Add `name` field   
0, Line, //  Empty initial operation to trigger onStartWork calls 
0, Line, //  2.x and 3.0-milestone-1 work on Java 6 - 8 
0, Line, //  Use the highest preferred version that refines the chosen 'require' selector 
0, Line, //  When not running from a Gradle distro, need runtime impl for launcher plus the search path to look for other modules 
1, JavaDoc, /*  * TODO only here because Kotlin DSL uses this. Please remove once that is fixed.  */
0, Line, //  to avoid silent retry 
0, Line, //  end::aggregating-annotation-processor[] 
1, Line, //  Hold the lock while creating the connection. Not generally good form.   In this instance, blocks other threads from creating the connection at the same time 
0, Line, //  SkipWhenEmpty implies incremental.   If this file property is empty, then we clean up the previously generated outputs.   That means that there is a very close relation between the file property and the output. 
1, Line, //  Currently retains strong references to types that are not loaded using a VisitableURLClassLoader   This is fine for JVM types, but a problem when a custom ClassLoader is used (which should probably be deprecated instead of supported) 
0, Line, //  cannot compute at task execution time because we need association with source set 
0, Line, //  end::functional-test-junit[] 
0, Line, //  Ignore, this will be reported later 
0, Line, // the unlock was just requested but not yet confirmed, give it some more time 
1, Line, // We might fail hard here on the assumption that something weird happened to the daemon.  However, since we haven't yet started running the build, we can recover by just trying again... 
0, Line, // triggered through tooling API of Gradle <2.3 - native-platform.dll is shared by tooling client (<2.3) and daemon (current) and it is locked by the client (<2.3 issue) 
0, Line, //  Ignore all but the first recorded annotation 
0, Line, //  This factory should be injected but leaves non-daemon threads running when used from the tooling API client 
0, Line, //  the collection will only be initialized if more than one project candidate is found 
0, Line, //  Check if node was previously traversed with the same net exclusion when not a virtual platform 
1, Line, //  todo: improve configuration of reports 
0, Line, //  Read path to Gradle user home 
0, Line, //  Don't care, collect the files later (in the correct order) 
0, Line, //  Mandatory 
0, Line, //  Ensure we have a scope 
1, Line, //  TODO: Fix tests that rely on this being set before we process arguments like this...
0, Line, //  Used by generated code 
0, Line, //  This deals with the fact that in TestNG, there are no class-level events,   but we nevertheless want to see the class name. We use "." rather than   " > " as a separator to make it clear that the class is not a separate   level. This matters when configuring granularity. 
0, Line, //  Drain the buffer before returning end-of-stream 
0, Line, //  assume indentation uses spaces 
0, Line, //  Otherwise, we defer to the judgement of our internal backoff handler. 
0, Line, //  slowest path, full distribution   (A ∪ B) ∩ (C ∪ D) = (A ∩ C) ∪ (A ∩ D) ∪ (B ∩ C) ∪ (B ∩ D) 
0, Line, //  value 
0, Line, //  Reset security manager the tests seem to have installed 
0, Line, //  No supposed to happen 
0, Line, //  Sort of determinism 
0, Line, //  Keep the files and discard the origin values instead?
0, Line, //  Short lived process, don't cache in memory 
0, Line, //  Does not match element, will never match when more elements added 
0, Line, //  We know that Jvm binaries are BinarySpec instances 
0, Line, //  Search in the standard installation locations and construct 
0, Line, //  This is used to parse a YAML file 
0, Line, //  Check for duplicates 
0, Line, //  Any work execution happening in nested or buildSrc builds before the root build has started executing work is ignored 
0, Line, //  Write a line separator after any block 
0, Line, //  The usage pattern of this exception providing the rule identity and the cause providing the detail is the   way it is due to how we render chained exceptions on build failures.   That is, because the information is usually dense, splitting things up this way provides better output. 
0, Line, //  Take ownership 
0, Line, //  Exactly Visual Studio 2017 
1, Line, //  TODO: turn into Set? 
0, Line, //          mapping = new ConventionAwareHelper(this, getConvention());       }       return mapping;   } 
0, Line, //  If you update FILE_STORE, you may also need to update LocallyAvailableResourceFinderFactory 
0, Line, //  Optimize for the single entry case, makes findEntry faster 
0, Line, //  The following types can appear anywhere in the code   but say nothing about API or implementation usage 
0, Line, //  RC has position sensitive arguments, the output args need to appear before the source file 
0, Line, //  getMetaClass(..) 
1, Block, /*             There's a potential problem here in that DisconnectableInputStream reads from input in the background.            This won't automatically stop when the process is over. Therefore, if input is not closed then this thread            will run forever. It would be better to ensure that this thread stops when the process does.          */
0, Line, //  Use this instead of Description.getMethodName(), it is not available in JUnit <= 4.5 
0, Line, //  we don't currently hold the project lock 
0, Line, //  1) Add a new 'antlr' virtual directory mapping 
0, Line, //  Only called when node exists 
1, Line, //  TODO - need to do a better job of routing messages when there are multiple endpoints. This is just going to forward all queued messages to the first   waiting endpoint, even if there are multiple waiting to do work 
0, Line, //  1.5 
0, Line, //  Discard information region 
0, Line, //  hashcode will always be used, so we precompute it in order to make sure we   won't compute it multiple times during comparisons 
0, Line, //  created since last execution, possibly by another task 
0, Line, //  Lock-in explicitly included builds 
0, Line, //  Test Suite 'PassingTestSuite' started at 2017-10-30 10:45:47.828 
0, Line, //  check for star imports (import static pkg.Outer.*) matching static inner classes 
0, Line, //  Don't need to match on path 
0, Line, //  GENERATE (args instanceof Object[]) ? args : new Object[] { args } 
0, Line, //  Discard the calculated files collection too, but need to retain the display name for it 
0, Line, //  We consider only extra attributes which are NOT on every candidate:   Because they are EXTRA attributes, we consider that a   candidate which does NOT provide this value is a better match 
0, Line, //  nop if all ok 
0, Line, //  if a SHA-256 hash sum has been defined in gradle-wrapper.properties, verify it here 
0, Line, //  Since a single `Artifact` is shared between configurations, share the metadata type as well. 
0, Line, //  Currently only snapshot the console output listener. Should snapshot all output listeners, and cleanup in restore() 
0, Line, //  Setup component 
0, Line, //  TODO - lock this down 
0, Line, //  Exactly Visual Studio 2015 
0, Line, //  This should turn into a set of converters at some point 
0, Line, //  Important that this is constructed on the client so that it has the right gradleHomeDir and other state internally 
0, Line, //  Convention 
0, Line, //  1.4 
0, Line, //  4) set up convention mapping for default sources (allows user to not have to specify) 
0, Line, //  TODO: CC make capabilities accessible to rules
0, Line, // remove the last walked should run after edge and restore state from before walking it 
0, Line, //  Collect nodes as implicit capability providers if different than current node, selected and not having explicit capabilities 
0, Line, //  Ensure a clean end of the line when the area scrolls 
0, Line, //  same as default conf but is used 
0, Line, //  Capture changes to implementation 
0, Line, //  Broken meta-data, bail 
0, Line, //  1.3 
1, Line, //  Create test suite component   TODO - Reuse logic from Swift*Plugin   TODO - component name and extension name aren't the same   TODO - should use `src/xctest/swift` as the convention?   Add the test suite and extension 
0, Line, //  if we reach this point, no match was found, either because there are no versions matching the selector 
0, Line, //  Flags 
0, Line, //  Capture input files state 
0, Line, //  we have not root source folder information for the grammar files,   so we don't force relativeOutput as we can't calculate it.   This results in flat generated sources in the output directory 
1, Line, //  Do not use this. It's here because some of the services this type needs are not easily accessed in certain cases and will be removed ay some point. Use one of the other methods instead 
0, Line, //  Gradle stuff 
1, Line, //  TODO: should validate that clazz is of a non parameterized type
0, Line, //  These fields are not covered by mutation lock 
0, Line, //  Select all entry points. An entry point is a publication that does not contain a component whose parent is also published 
0, Line, //  stack traces are filtered in call order (from bottom to top) 
0, Line, //  TODO - this should be an input 
0, Line, // allow the daemon to be started concurrently 
0, Line, //  File.createTempFile sets the location of the temp directory to a static variable on the first call.  This prevents future   changes to java.io.tmpdir from having any effect in the same process.  We set this to use a common tmp directory for all   tests running in the same process so that we don't have a situation where one process initializes with a tmp directory   that it then removes, causing an IOException for any future tests that run in the same process and call File.createTempFile. 
0, Line, //  Capture and restore this in case the build code calls Locale.setDefault() 
0, Line, //  Ignore the version if the string cannot be read 
0, Line, //  See https://issues.gradle.org/browse/GRADLE-3470 
0, Line, //  Create a proxy 
0, Line, //  Ignore the other values 
0, Line, //  We can't use an immutable list here because some hashes can be null 
1, Line, //  Workaround for when the task is given an input file that doesn't exist
0, Line, //  Look for 'our' daemon among the busy daemons - a daemon will start in busy state so that nobody else will grab it. 
0, Line, // We cannot just delegate to the add method as we need the file content for checksum calculation here  and reexecuting the action isn't acceptable 
1, Line, //  TODO: Figure out how to get rid of origin scope id in snapshot outputs step 
0, Line, //  Read whether process info should be published 
0, Line, //  List modules with missing metadata files 
0, Line, //  Effectively read the manifest 
0, Line, //  Loaded from a classes dir - assume we're running from the ide or tests 
0, Line, //  for each source set we will: 
0, Line, //  skip built-in properties 
0, Line, //  this handles '\r' (MacOSX 9), '\r\n' (Windows) and '\n' (Linux/Unix/MacOSX 10) 
0, Line, //  Make a copy of the closure, attach inputs and execute 
0, Line, //  also check interfaces in case we have interfaces with nested classes 
1, Line, //  get rid of the ivy [] token, as [ ] are not valid URI characters 
0, Line, //  Use the timestamped version for all published artifacts:   The timestamped version is hidden deep in `Metadata.versioning.snapshotVersions` 
0, Line, //  Any Swift 4.x compiler 
0, Line, //  ignore 
1, Line, //  todo remove this property once configuration can handle normal file system dependencies 
0, Block, /*  @Nullable  */
0, Line, //  Register a builder for the custom tooling model 
0, Line, //  We need to check if the target version exists. For this, we have to try to get metadata for the aligned version.   If it's there, it means we can align, otherwise, we must NOT add the edge, or resolution would fail 
0, Line, //  this method should have been added to the class 
0, Line, //  @formatter:off 
0, Line, //  Any Swift 3.x compiler 
0, Line, //  Does not need to be redrawn 
0, Line, //  is present, but empty. 
0, Line, //  slowest path 
0, Line, //  Otherwise do deep compare of outputs 
0, Line, //  TODO - should attempt to flush the output stream prior to writing to the error stream (and vice versa)
0, Line, //  Choose the shortest match 
0, Line, //  Path is-a Iterable, so check before checking for Iterable 
0, Line, //  kept for backwards compatibility of plugins using internal APIs 
0, Line, //  GENERATE public Object invokeMethod(String name, Object params) { return getAsDynamicObject().invokeMethod(name, (Object[])params); } 
1, Line, //  This piece of ugliness copies the JAXP (ie XML API) provider, if any, from the system ClassLoader. Here's why:     1. When looking for a provider, JAXP looks for a service resource in the context ClassLoader, which is our isolated ClassLoader. If our classpath above does not contain a      provider, this returns null. If it does contain a provider, JAXP extracts the classname from the service resource.   2. If not found, JAXP looks for a service resource in the system ClassLoader. This happens to include all the application classes specified on the classpath. If the application      classpath does not contain a provider, this returns null. If it does contain a provider, JAXP extracts the implementation classname from the service resource.   3. If not found, JAXP uses a default classname   4. JAXP attempts to load the provider using the context ClassLoader. which is our isolated ClassLoader. This is fine if the classname came from step 1 or 3. It blows up if the      classname came from step 2.     So, as a workaround, locate and make visible XML parser classes from the system classloader in our isolated ClassLoader.     Note that in practise, this is only triggered when running in our tests 
0, Line, //  Fields used for performance optimizations: we avoid computing the derived dependencies (withConstraints, withoutConstraints, ...)   eagerly because it's very likely that those methods would only be called on the selected variant. Therefore it's a waste of time   to compute them eagerly when those filtering methods are called. We cannot use a dedicated, lazy wrapper over configuration metadata 
0, Line, //  This line MUST be last! 
0, Line, //  Replace deprecated usage values 
0, Line, //  Basically, if we see an operation with a logging header and it's not grouped, just log it 
0, Line, //  use reflection to support older JVMs while supporting Java 9 
0, Line, //  Big-endian 
0, Line, //  Apply any artifact type mappings to the attributes of the variant 
0, Line, //  Using DefaultTestClassDescriptor to fake JUnit test 
0, Line, //  Called under lock 
0, Line, //  Meta data artifacts are determined locally 
0, Line, //  GENERATE objectFactory.listProperty(type) 
0, Line, //  Collapse the set 
1, Line, //  TODO Will be implemented without hard-coded access to `$GRADLE_USER_HOME/gradle.properties` for 5.1 in #6084 
0, Line, //  Wait for any work still running in other threads 
0, Line, //  Since s3 transport supports only one type of credentials at a time, let's use the first one found. 
0, Line, //  @formatter:on 
0, Line, //  Could return true if all of the read only properties point to immutable objects, but at this stage there are no such types supported 
0, Line, //  add the module configuration's files 
0, Line, //  Matches: task <identifier>, <arg>? 
0, Line, //  Actual format: 'Apple Swift version 4.0.2 (...)' 
0, Line, //  Overwrite the source to exclude `LinuxMain.swift` 
0, Line, //  Unpack the provider 
0, Line, //  remains the same as the content in the existing file 
0, Line, //  No SDK information available in the registry 
1, Line, //  TODO: This hard-codes the assumption of a 'compile' configuration on the external module   Instead, we should be creating an API configuration for each resolved module 
0, Line, //  Logging configuration 
0, Line, //  Skip this for now 
1, Line, //  This is a legacy quirk.   Scans use this to determine that progress logging is indicating start/finish of tasks.   This can be removed in Gradle 5.0 (along with the concept of a “logging category” of an operation) 
0, Line, //  https://github.com/gradle/gradle/issues/5763 
0, Line, //  if we ask for "external" dependencies, it's still fine to bring a fat jar if nothing else is available 
0, Line, //  Arbitrarily select and mark all as rejected 
0, Line, //  Notify child configurations 
0, Line, //  IDEA adds the JDK's bootstrap classpath to the classpath it uses to run test - remove this 
0, Line, //  Can wait on request if previous handler allows waiting 
1, Line, //  See the comment in #taskCompleted, above, for why this is here and why this is a problem 
1, Line, //  TODO: CC the special casing of virtual platform should go away if we can implement   disambiguation of variants for a _single_ component 
0, Line, //  the order is strange logically but here for performance optimization 
0, Line, //  only interrupt poller thread if it's not current thread 
1, Line, //  TODO This should actually extend from the api dependencies, but since Swift currently   requires all dependencies to be treated like api dependencies (with transitivity) we just   use the implementation dependencies here.  See https://bugs.swift.org/browse/SR-1393. 
0, Line, //  Used to maintain timer 
1, Line, //  TODO: Replace this with `JvmAssembly` once that type is public 
0, Line, //  test default imports 
1, Line, // this is not very nice might be good enough until we get rid of ResolvedConfiguration and friends  avoid traversing the graph causing the full ResolvedDependency graph to be loaded for the most typical scenario 
0, Line, //  Should reuse the link parsing stuff from JavadocLinkConverter instead 
0, Line, //  if we are allowing unknowns, just pass through the whole arg 
0, Line, //  Use the result of previous rules as the input for dependency substitution 
0, Line, //  Not present in output, check error output. 
1, Line, //  Not implemented - not yet required. Please implement if required 
1, Line, //  TODO: Extract the non-filesystem parts of the FileSystemChangeWaiter into a separate interface   This isn't really tied to file system watching, we just need another type of waiter. 
0, Line, //  These could be injected directly to DefaultTransformerInvoker, too 
0, Line, //  Used by HasPrefixAndSuffixPatternStep to ensure the suffix isn't matching any part of the prefix. 
0, Line, //  Ignore future states of the input node 
0, Line, //  Could be precomputed, but we avoid doing so if attributes are never requested 
0, Line, //  It's often the case that all the candidate values are the same. In this case, we avoid   the creation of a set, and just iterate until we find a different value. Then, only in   this case, we lazily initialize a set and collect all the candidate values. 
0, Line, // adding custom test listeners before Gradle's listeners.  this way, custom listeners are more powerful and, for example, they can change test status. 
0, Line, // some validation: 
0, Line, //  TODO: match with status, order versions correctly 
0, Line, //  Check other behaviour still works 
0, Line, //  Check already resolved results for a compatible version, and use it for this dependency rather than re-resolving. 
0, Line, //  Evaluate init scripts 
0, Line, //  It's an intersection, and this method is always called on the remainder   of a reduction operation. If the remainder is empty then it means that   the intersection is empty 
0, Line, //  Any available GCC compatible implementation (including mingw, cygwin, and clang) 
0, Line, //  When annotation processing isn't required, it's better to add the Groovy stubs as part of the source path.   This allows compilations to complete faster, because only the Groovy stubs that are needed by the java source are compiled. 
0, Line, //  NOTE: There isn't much we can do about collection.matching { } filters as the spec requires a realized element, unless make major changes 
0, Line, //  Presence of capabilities is bound to the definition of a capabilities extension to the project 
0, Line, //  Do NOT change the order of members used in hash code here, it's been empirically   tested to reduce the number of collisions on a large dependency graph (performance test) 
0, Line, //  Have received all requests, or have released something, so downstream can wait. This isn't quite right 
0, Line, //  Avoid creating a copy if the resulting configuration is identical 
0, Line, //  Convert Scala Seq[RoutesCompilationError] -> Java List<RoutesCompilationError> 
0, Line, //  registry doesn't exist yet 
1, JavaDoc, /*  * TODO: This class sources Gradle metadata files, but there's no corresponding ModuleComponentResolveMetadata for this metadata yet. * Because of this, we will generate an empty instance (either a Ivy or Maven) based on the repository type.  */
1, Line, //  TODO - this isn't correct, assumes that a side effect is to add the element 
0, Block, /*  (non-Javadoc)         * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getArtifactId()          */
1, Line, //  TODO: `classes` should be a little more tied to the classesDirs for a SourceSet so every plugin   doesn't need to do this. 
0, Line, //  Some other meta-class implementation - fall back to the public API 
0, Line, //  A cycle, treat as resolved here 
0, Line, //  To determine the dependencies of the class, load up the byte code and look for CONSTANT_Class entries in the constant pool 
0, Line, //  There is some value to the other ways to locate MSBuild (aka matching the MSBuild installation with the VS installation), this is a last chance to try and locate a usable MSBuild installation which will just try to get the latest available MSBuild. We can refine this later. 
0, Line, //  TODO: convert output file checks to a resource lock 
1, Line, //  This is really not cool, but we cannot rely on `readAttributes` because it will   THROW AN EXCEPTION if the file is missing, which is really incredibly slow just   to determine if a file exists or not. 
0, Line, //  Gather the default tasks from this first group project 
0, Line, //  Not empty: may match any case above 
1, Line, // TODO: use Twirl library instead? 
0, Line, //  Host: x64 
0, Line, //  Remove the deprecations message: "Deprecated Gradle features...", "Use '--warning-mode all'...", "See https://docs.gradle.org...", and additional newline 
0, Line, //  we must add the implicit capability here because it is assumed that if there's a rule   "addCapability" would effectively _add_ a capability, so the implicit one must not be forgotten 
0, Line, //  1. Stop handling disconnects. Blocks until the handler has finished.   2. Stop the connection. This means that the thread receiving from the connection will receive a null and finish up.   3. Stop receiving incoming messages. Blocks until the receive thread has finished. This will notify the stdin and receive queues to signal end of input.   4. Stop the receive queue, to unblock any threads blocked in receive().   5. Stop handling stdin. Blocks until the handler has finished. Discards any queued input. 
0, Line, //  tries to relocate literals in the form of foo.bar.Bar 
0, Line, //  Based on https://github.com/playframework/playframework/blob/2.6.0/framework/src/build-link/src/main/java/play/TemplateImports.java 
0, Line, //  Make sure getters end up before the setters 
1, Line, //  DO NOT USE THIS CONSTRUCTOR DIRECTLY   It's only there for backwards compatibility with the Nebula plugin 
0, Line, //  GENERATE <method>(…, ConfigureUtil.configureUsing(v)); 
0, Line, //  default Scala version 
0, Line, //  TODO:ADAM - ARM only if the target OS is Windows 8 or later   TODO:MPUT - ARM also if the target OS is Windows RT or Windows Phone/Mobile/CE   TODO:ADAM - IA64 only if the target OS is Windows 2008 or earlier
0, Line, //  Exception has already been reported 
0, Line, //  Define some additional variants 
0, Line, //  TODO - mix this in using decoration. Also validate closure parameter types, if declared 
0, Line, // First, we replace slashes because they have special meaning in the javadoc options file  Then, we replace every linebreak with slash+linebreak. Slash is needed according to javadoc options file format 
0, Line, // we don't serialise the module dependencies at this stage so we need to keep track  of the mapping module dependency <-> resolved dependency 
0, Line, //  We intentionally consider “execution” done before doing afterEvaluate.   The Android plugin relies on this behaviour. 
0, Line, //  Other stuff 
1, Line, //  Groovy does something very strange here.   For some reason (probably because the class is Java), it won't employ any dynamism.   Even implementing invokeMethod at the Java level has no effect. 
0, Line, //  The following state needs to be tracked to consistently construct `ComponentOverrideMetadata` independent of the order dependencies are visited 
0, Line, //  create a new temporary parser to read the configurations from   the specified file. 
0, Line, //  Only called when node exists, therefore node is known 
0, Line, // CHECKSTYLE:OFF 
0, Line, //  TODO - the suffix should be a deterministic function of the known and enabled annotations   For now, just assign using a counter
0, Line, //  for tests using rich console standard out and error are combined in output of execution result 
0, Line, // there is already registered conflict with at least one matching participant, hook up to this conflict 
1, Line, //  TODO: We should see if we can go back to using HttpClient again.   This implementation is borrowed from the Apache HttpClient project   https://github.com/apache/httpclient/blob/4.2.2/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java#L246-L354
0, Line, //  Contract requires build events are delivered by a single thread. This is taken care of by the daemon client when not in embedded mode   Need to apply some synchronization when in embedded mode 
0, Line, //  end::custom-task-implementation[] 
1, Line, //  TODO Change to Set? 
0, Line, //  Explain that Groovy, for compile, also needs the resources (#9872) 
0, Line, //  no retry 
0, Line, //  There are 2 possibilities here:   1. the "platform" referenced is a real module, in which case we directly add it to the graph   2. the "platform" is a virtual, constructed thing, in which case we add virtual edges to the graph 
0, Line, // TODO reuse cached result from downstream users of our classes directory 
0, Line, //  standard doclet options 
0, Line, //  no luck 
1, Line, //  TODO(daniel): Should support in a better way multi file invocation.   Override this method to have multi file invocation 
0, Line, //  verify URL by making a HTTP call 
0, Line, //  this should really be <String, Object>, however properties loader signature expects a <String, String>   even if in practice it was never enforced (one can pass other property types, such as boolean) an   fixing the method signature would be a binary breaking change in a public API. 
0, Line, //  Ignore files 
1, Line, //  @Todo: refactor this task configuration to extend a copy task and use replace tokens 
0, Line, //  If the current target is a project component, it must be unmodified from the requested 
0, Line, // this means that we receive an output before even starting any class (or too late).  we don't have a place for such output in any of the reports so skipping.  Unfortunately, this happens pretty often with current level of TestNG support  because output events emitted by constructor, beforeTest, beforeClass   are sent before test start event is started and there is no parent class event emitted by TestNG.  In short, the TestNG support could be better. See also TestNGOutputEventsIntegrationTest
0, Line, //  After this point we only see getters 
0, Line, // target does not exist in the map, there's no cycle for sure 
0, Line, //  fine one or more project dependencies among conflicting modules 
0, Line, //  _state == ARTIFACT_EXCLUDE || EXCLUDE 
0, Line, //  barrier open, let it travel on 
0, Line, //  ignore this installation for validation, it will be caught later 
0, Line, //  On macOS, we assume co-located Xcode is installed into /opt/xcode and default location at /Applications/Xcode.app 
0, Line, // this shouldn't happen if you call check availability with #available first 
0, Line, //  Matches: task <name-value-pairs>, <identifier>, <arg>?   Map to: task(<name-value-pairs>, '<identifier>', <arg>?) 
0, Line, //  could be caused by https://bugs.openjdk.java.net/browse/JDK-8011537 ignore problems in stopping 
1, Line, //  TODO:REUSE Refactor after removing reuse   This is horrendously bad.   We need to set the platform, _before_ the @Defaults rules of NativeBinaryRules assign the toolchain.   We can't just assign the toolchain here because the initializer would be closing over the toolchain which is not reusable, and this breaks model reuse.   So here we are just closing over the safely reusable things and then using proper dependencies for the tool chain registry.   Unfortunately, we can't do it in the create action because that would fire _after_ @Defaults rules.   We have to use a @Defaults rule to assign the tool chain because it needs to be there in user @Mutate rules   Or at least, the file locations do so that they can be tweaked.   LD - 5/6/14 
0, Line, //  Forward special cases directly to consumer 
0, Line, //  can't delegate to compileClasspathLoader because this would result in ASTTransformation interface   (which is implemented by the transform class) being loaded by compileClasspathClassLoader (which is 
1, Line, //  Check enum equality without checking loading ClassLoader.   There is a slight risk that two versions of the same enum class are compared,   (that's why classloaders are used in equality checks), but checking both name   and ordinal should make this very unlikely. 
1, Line, // TODO version - could be different from main artifact's version 
0, Line, //  No 2.11 version of routes compiler published 
1, Line, //  Should really be a parameter to the 'withContent' methods or baked into the accessor 
0, Line, //  Default methods are public non-abstract instance methods declared in an interface. 
0, Line, //  this.getMetaClass() 
0, Line, //  The current filestore 
0, Line, //  This uses the system classloader and will not release any loaded classes for the life of the daemon process.   Do not use this to load any classes which are part of the build; it will not release them when the build is complete. 
0, Line, //  TODO - do not assume Maven layout 
1, Line, //  TODO - error messages   TODO - display names for this container and the Provider implementations 
1, Line, //  Not subtypes as we don't know whether they are immutable or not 
0, Line, //  when a selector changes from non forced to forced, we must reselect 
1, Line, //  TODO: This check should really be done in the compiler process 
1, Line, //  Forced dependencies are only supported for enforced platforms, so it is currently hardcoded.   Should we want to add this as a first class concept to Gradle metadata, then it should be available on the component variant   metadata as well. 
0, Line, //  check that the length of the reserved region is enough for storing our content 
1, Line, //  TODO Remove this attempt to guess packaging from artifacts. Packaging should come from component, or be explicitly set.
0, Line, //    Generate implementation class   
0, Line, // root should be the last entry 
0, Line, //  legacy mode 
0, Line, //  Print the header if:     we're in verbose mode OR we're in rich mode and some output has already been rendered     AND     we haven't displayed the header yet OR we've displayed the header but the status has since changed
0, Line, //          metaClass = GroovySystem.getMetaClassRegistry().getMetaClass(getClass());       }       return metaClass;   } 
0, Line, //  Don't need to do parameter substitution, return the value of the expression after macro expanding it 
0, Line, //  Simplifies (A ∪ ...) ∩ A = A 
0, Line, //  There is an inheritance hierarchy in play here, so the order   of the clauses is very important.
0, Line, //  Flush any buffered events and update the clock 
0, Line, // Ignore. It means the client has disconnected so no point sending him any log output.  we should be checking if client still listens elsewhere anyway. 
0, Line, //  Need to check that versions do match, mismatch indicates a force was used 
0, Line, //  else, already visited previously, skip 
0, Line, //  do this after wtp is configured because wtp config is required to update classpath properly 
0, Line, //  Implicit JVM args that should be used to fork a JVM 
0, Line, //  Unbox value 
1, Line, //  Was it created during execution? 
0, Line, //  Add included builds defined in settings 
0, Line, //  No target, or target is an ancestor of this node, so is already being handled 
0, Line, // one binary store per id+threadId 
0, Line, //  Remove any outgoing edges for the current selection 
0, Line, //  Expire after normal idle timeout 
0, Line, //  Generate sourceLocation() method 
0, Line, //  <inputs-lvar> = <inputs-field> ?: <parent-inputs-lvar> 
0, Line, //  Guava 
0, Line, //  used internally to determine if a rule effectively did something 
0, Line, //  TODO: Assumes there's a single 'main' C++ component 
0, Line, //  Else, something has changed in the include file graph for this source file, so analyse again 
0, Line, //  block until ready for write operations 
0, Line, //  Compile the interface to a temp file and then copy it to the cache folder.   This avoids sporadic cache lock timeouts when the compiler interface JAR takes   a long time to generate while avoiding starving multiple compiler daemons. 
0, Line, //  Any Swift compiler 
0, Line, // 3) new module has more than 1 version, register conflict and return 
0, Line, //  GENERATE public <returnType> <propName>(<type> v) { val = super.<propName>(v); __<prop>__ = true; return val; } 
0, Line, //  No-op 
0, Line, //  Foo can match both Foo and Foo$NestedClass 
0, Line, //  Duplicate, ignore 
0, Line, //  Always expand with trailing . 
0, Line, //  Trigger a replay on this node, to add new constraints to graph 
0, Line, //  not enough data points 
0, Line, //  Unresolved - we have a selector that was deferred but the constraint has been removed in between
0, Line, //  Called when the method throws an exception 
0, Line, //  Collect for later, do not add until the graph is known to have not changed 
0, Line, //  A further work around for missing ability to skip task when input file is missing (see #getInputFileIfExists below)
0, Line, //  Returns a fixed value expression 
0, Line, //  Try to move the file out of the way in case its permanently corrupt   Don't delete, so that it can be potentially used for debugging
0, Line, // given 
0, Line, //  note: it's not the role of this class to validate that the annotation is properly used, that   is to say only on a getter returning String or a Named instance, so we trust the result of   the call
0, Line, //  Replace '.' with '/' in organisation 
0, Line, // we don't like the assumption about the port very much 
1, Line, //  TODO: Deprecate and eventually prevent these mutations when already resolved
0, Line, //  Sort based on version 
0, Line, //  GetMethod is used in a private method, so doesn't belong to the API 
0, Line, //  If we aren't required and don't have a signatory then we just don't run 
0, Line, //  What actually shows up on the console 
0, Line, //  protects the following state 
0, Line, //  Expose the task to build logic (for now) 
0, Line, //  If no current test can be associated to the output, the last known descriptor is used.   See https://bugs.swift.org/browse/SR-1127 for more information. 
0, Line, //  A cached ClassLoader 
0, Line, //  super test class file not in test class directories 
0, Line, //  Deprecations (these should just be rendered on the client instead of being sent to the daemon to send them back again) 
0, Line, //  Capture the current state of things that we will change during execution 
0, Line, //  The iteration order of zip.getEntries() is based on the hash of the zip entry. This isn't much use   to us. So, collect the entries in a map and iterate over them in alphabetical order.
0, Line, //  Parent is a reference, need to resolve the target 
0, Line, //  ensure type is registered 
0, Line, //  We can compare here by length, because pname is always   a substring of name, so same length means they are equal. 
0, Line, //  We found the desired settings file, now build the associated buildSrc before loading settings.  This allows   the settings script to reference classes in the buildSrc. 
0, Line, //  in the binary inputs. 
0, Line, //  Exclude frameworks for CLang - they need to be handled differently 
0, Line, //  Should be final, and set in constructor 
0, Line, //  The directory is passed as an argument since File.createTempFile sets the location   of the temp directory to a static variable on the first call unless a directory is passed to the call.   Some tests change java.io.tmpdir and this is to ensure that the current value of java.io.tmpdir gets used here. 
1, Line, //  TODO: this doesn't quite guarantee immutability, because the source may be holding closures that are doing god knows what 
1, Line, //  TODO: Get rid of destinationDirectory entirely and replace it with a   collection of link outputs 
0, Line, //  Avoid initializing the list if there are no components requiring download (a common case) 
0, Line, //  Mix the implicit launcher JVM args in with the requested JVM args 
0, Line, //  An identifier with no separator, so this is not an #include or #import directive, it is some other directive 
0, Line, //  Make some assumptions about the console output 
0, Line, //  Order from most recent to least recent 
0, Line, //  Descriptor file has been deleted - ignore the entry 
0, Line, //  This can happen when, for example, a @BeforeClass or @AfterClass method fails 
0, Line, //  Use the resolved component id if available: this ensures that Maven Snapshot ids are correctly reported 
0, Line, //  and  (A ∩ ...) ∪ A = A 
0, Line, //  The `eclipse` task in the root project should generate Eclipse projects for all Gradle projects 
0, Line, //  This URL is not recognized by the Mac console (too few leading slashes). We solve   this be creating an URI with an empty authority. 
0, Line, //  Add in tools.jar to the systemClassloader parent 
0, Line, //  Java and Kotlin Lambdas are coerced to SAM types at compile time, so no unpacking is necessary there. 
0, Line, //  These methods return strings rather than types because it may be more complicated than what is able to be expressed via a ModelType.   Also, we don't want to encourage compatibility checking occurring by looping through such types as we have more options for optimising the compatibility check internally.   Also also, these methods are only called for reporting so values should typically not be precomputed. 
0, Line, //  This is only required to avoid adding a new public constructor to the public `PatternSet` type. 
0, Line, //  Based on https://github.com/playframework/playframework/blob/2.4.0/framework/src/build-link/src/main/java/play/TemplateImports.java 
1, Line, //  TODO: Migrate this to the worker API once the FileSystem and FileOperations services can be injected
0, Line, //  Supported, but unavailable. Nothing to do. 
0, Line, //  Could probably apply some caching and some immutable types 
0, Line, //  Confirms there is enough space in candidate to fit both suffix and prefix. 
1, Line, //  TODO:LPTR Have the paths of the projects serve as @Input maybe? 
1, Line, //  This could be handled, just not implemented yet 
0, Line, //  nothing to do, we don't store this 
0, Line, //  Target: x86 
0, Line, // model properties: 
0, Line, //  No Visual Studio information available in the registry 
0, Line, //  Ignore: All selectors failed, and will have failures recorded 
0, Line, // cut the pre and postfix of this url 
0, Line, //  Assume everything is loaded into the current classloader 
0, Line, //  Note: this is currently not visible on {@link org.gradle.api.internal.TaskInternal} to avoid it leaking onto AbstractTask and so on to the public API. 
0, Line, //  default value for older Gradle clients 
0, Line, //  Callable<? extends Callable<?>> 
0, Line, // override the params with the explicit settings provided by the tooling api 
0, Line, //  Check dynamic object behaviour still works 
0, Line, //  Cast to return type 
0, Line, //  Should be constructed with the default system ClassLoader as root 
1, Line, //  TODO: Wrong, using the full classpath of the application
0, Line, //  Ideally, we'd delegate directly to the AntBuilder, but its Closure class is different to our caller's   Closure class, so the AntBuilder's methodMissing() doesn't work. It just converts our Closures to String   because they are not an instanceof its Closure class. 
0, Line, //  Cached state is not copied, since dependency inputs are different. 
0, Line, //  Set the implicit system properties regardless of whether default JVM args are required or not, this should not interfere with tests' intentions 
0, Line, //  Setting the length improves upload performance 
0, Line, //  Ignore and fall back to growl notify 
0, Line, //  TODO:Cedric find out why if we use the same ID directly, it fails resolution by trying to get the artifacts   from the resolving metadata instead of the resolved metadata 
0, Line, //  according to JVM documentation 
0, Line, //  Ensure target project is configured 
1, Line, //  this is not very beautiful but at some point we will   get rid of ArchiveOutputStreamFactory in favor of the writable Resource 
0, Line, //  Lock protects the following state, using an intentionally simple locking strategy 
0, Line, //  The target may already be modified from the original requested 
0, Line, //  Skip properties with non-abstract getter or setter implementations 
0, Line, //  release 
0, Line, //  Taking the first selector here to determine the 'changing' status and 'client module' is our best bet to get the selector that will most likely be chosen in the end.   As selectors are sorted accordingly (see ModuleSelectors.SELECTOR_COMPARATOR). 
0, Line, //  This is only used for testing purposes so we can test handling of fluid dependencies without adding dependency substitution rule 
0, Line, //  Already seen this source file before. See if we can reuse the analysis from last time 
0, Line, //  literal followed by * followed by literal: matches #4 above 
0, Line, //  Now try each address 
1, Line, // this if is a bit cheesy but 1-letter classname surely means a generic type and the warning will be useless 
0, Line, //  We need to wrap the visitor so that the file seen by the visitor has already   been extracted from the archive and we do not try to extract it again.   It's unsafe to keep the FileVisitDetails provided by TarFileTree directly   because we do not expect to visit the same paths again (after extracting everything). 
0, Line, //  note: this method is on TaskInternal 
0, Line, //  When an artifact is being published it is first checked whether it is available.   If a transport returns `null` then it is assumed that artifact does not exist.   If we throw, an attempt to publish will fail altogether even if we use ResourceExceptions#getMissing(uri). 
0, Line, //  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change, the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere. 
0, Line, //  Serialize the worker, this is consumed by SystemApplicationClassLoaderWorker 
0, Line, //  Always use x86 as default on windows 
0, Line, //  Take a root worker lease, it won't ever be released as ProjectBuilder has no lifecycle 
0, Line, //  Otherwise, expand 
0, Line, //  List<? extends String>[] 
0, Line, //  we have C[] if the list is empty -> should be an array then! 
0, Line, // TODO:HH wire binary libs via executable 
0, Line, //  Do not cache Test task if Jacoco doesn't produce its output as files 
0, Line, //  do same decoration as in addListener to remove correctly 
1, JavaDoc, /*      * Creates an instance of the given task type without invoking its constructors. This is used to recreate a task instance from the instant execution cache.     *     * TODO:instant-execution - review this      */
0, Line, //  GENERATE getAsDynamicObject().getProperty(name); 
0, Line, //  everything excluded **only** applies to modules, not artifacts! 
1, Line, //  TODO - this selection should happen per target platform
0, Line, //  Assume changed if reading old file fails 
1, Line, //  TODO Resolve the JavaPlatform and ScalaPlatform from their PlatformResolvers, rather than instantiating directly
0, Line, //  Output reports per execution, not mixed.   Cross-project ModelRegistry operations do not happen concurrently. 
0, Line, //  asking for a fat jar. If everything available is a shadow jar, that's fine 
0, Line, //  Everything is an unmanaged struct that hasn't been handled before
0, Line, //  Construct a new Compiler class 
0, Line, //  It was no primitive type, so next we see if the name,   which is a vanilla name, starts with a lower case letter.   In that case we change it to a LowerCaseClass to let the   compiler skip the resolving at several places in this class. 
0, Line, //  Parse parallelism flags 
0, Line, //  Write the output 
0, Line, //  Use Jansi's detection mechanism 
1, Line, //  TODO should include some context on what the rule was trying to do (create vs. mutate) 
0, Line, //    Add `Object unpackState() { return name }`   
0, Line, //  Created only on demand 
0, Line, //  Callable<?> 
0, Line, //  Use the debug variant as the development binary   Prefer the host architecture, if present, else use the first architecture specified 
0, Line, //  Toolchains should be using default configuration 
0, Line, //  This instance ends up in build/gradle scoped services for nesteds   We don't want to invoke close at that time.   Instead, close it at the root. 
1, Line, //  TODO: Get this from somewhere else? 
0, Line, //  No matches - fall back to regexp 
0, Line, //  Capture output files state 
0, Line, //  If there is no previous state, then we do have output changes 
0, Line, //  Should reuse `GlobalScopeServices` here, however this requires a bunch of stuff in order to discover the plugin service registries   For now, re-implement the discovery here 
0, Line, //  This should apply some locking, but most access to the build state does not happen via this method yet 
0, Line, //  Do not cache the task if we are not writing execution data to a file 
0, Line, //  Not resolvable. Discard the body when the expression is not resolvable
0, Line, //  Adding an action that is not a duplicate 
0, Line, //  release the artifact to production 
0, Line, //  Some interesting type references 
0, Line, //  return this.name 
0, Line, // ignore 
0, Line, //  Lookup.defineClass can only define a class into same classloader as the lookup object   we have to use the fallback defineClass() if they're not same, which is the case of ManagedProxyClassGenerator 
0, Line, //  Note: `null` for `settingsFile` means explicitly no settings         A non null value can be a non existent file, which is semantically equivalent to an empty file
0, Line, //  Need another identifier 
0, Line, //  GENERATE objectFactory.property(type) 
0, Line, //  Download to temporary location 
0, Line, //  Convert properties for logging  object 
0, Line, //  Make sure it's always > 0 but without affecting the lower 32 bits 
0, Line, //  For tests 
0, Line, //  attempt resolution on all types, so don't short-circuit and stop if we've previously failed 
0, Line, //  Left over data from previous append is only possible when a multi-chars new line is   been processed and split across multiple append calls. 
0, Line, //  var = this.<field> 
0, Line, //  Add dependencies for this goal 
0, Line, //  the lock for this project is the only lock we hold 
0, Line, //  FIXME: Always build type name to keep parity with previous Gradle version in tooling API
0, Line, //  If there's more than one node selected for the same component, we need to add   the implicit capability to the list, in order to make sure we can discover conflicts   between variants of the same module. Note that the fact the implicit capability is   in general not included is not a bug but a performance optimization
0, Line, //  Without this, the URLConnection will keep the backing Jar file open indefinitely   This will have a performance impact for Jar-backed `UriTextResource` instances
0, Line, //  Wrap to prevent exposing Stoppable, as we don't want to stop at this scope 
0, Line, //  Other home dir in use, close these. Otherwise, keep the services for next time 
0, Line, //  Already realized, just run the action now 
1, Line, //  This is here to trigger creation of the ShutdownCoordinator. Could do this in a nicer way 
0, Line, //  Every selector was empty: simply 'resolve' one of them 
0, Line, //  Cannot be private due to reflective instantiation 
1, Line, //  TODO:pm Move this to RunAsBuildOperationBuildActionRunner when BuildOperationWorkerRegistry scope is changed 
0, Line, //  Required for MavenLocal to verify the presence of the artifact 
0, Line, //  Make sure more specific annotation doesn't get overwritten with less specific one 
0, Line, //  Versions before 5.1 would discard context on forced cancel 
0, Line, //  Register each child of each component 
0, Line, //  IDEA Module for project in current build: don't include any module that has been excluded from project 
0, Line, //  inverse process of resolveClasspath to make sure IncrementalResultStoringCompiler stores correct result 
0, Line, //  Summary of deprecations is considered a part of the build summary 
0, Line, //  A file that we can safely reuse the result for 
0, Line, //  Not using setOptional(optional) in order to avoid <optional>false</optional> in the common case 
0, Line, //  Caches the list of dependency states for dependencies 
0, Line, //  It won't for arbitrary scripts though. 
0, Line, //  TODO - prevent multiple threads from performing the same VCS populate operation at the same time 
0, Line, //  Task graph is not calculated yet. Plugins can add tasks to it. 
0, Line, //  since we might generate the deployment descriptor, record each top-level module 
0, Line, //  Log events 
0, Line, //  This import must be here due to a clash in Java 8 between this and java.util.Optional.   Be careful running “Optimize Imports” as it will wipe this out.   If there's no import below this comment, this has happened. 
1, Line, // TODO - outputEventListener and buildStandardInput are per-build settings  so down the road we should refactor the code accordingly and potentially attach them to BuildActionParameters 
0, Line, //  These two are here to work around https://github.com/gradle/gradle/issues/6027 
0, Line, //  remove leading '$', remove last child segment, use '/' as separator 
0, Line, //  Returns a parameter 
0, Line, //  Generate: Class immutable() { return <properties.empty> && <read-only-properties.empty> } 
0, Line, //  Discard event 
0, Line, //  Lock on demand 
0, Line, //  Use the jar when nothing has been requested 
0, Line, // InputStream originalIn = System.in; 
0, Line, //  Decoration takes care of the implementation 
1, JavaDoc, /*  * Exposes methods for those properties whose value is a closure. * * TODO: use composition instead of inheritance  */
0, Line, //  TODO hook this in to the (daemon) build lifecycle
1, Line, //  Platform specific arguments   TODO: Need to lazily configure compile task
1, Line, //  If this occurs while running gradle or running integration tests, it is indicative of a problem.   If this occurs while running unit tests, then either use the NativeServicesTestFixture or the '@UsesNativeServices' annotation. 
0, Line, //  If there's more than one module id, merge them into a module id set 
0, Line, //  In opposite to outgoing edges, virtual edges are for now pretty rare, so they are created lazily 
0, Line, //  this.services = AsmBackedClassGenerator.getServicesForNext() 
0, Line, //  make sure we don't interpret any tag while in description tag 
0, Line, //  Force graph resolution as this is required to calculate build dependencies 
0, Line, //  This generates a synthetic enforced platform variant with the same dependencies, similar to what the Maven variant derivation strategy does 
0, Line, //  Climb up the hierarchy looking for the highest parent 
0, Line, //  Netscape expires pattern 
0, Line, //  The path to the project's task container in the model registry 
0, Line, //  only one file 
0, Line, //  Maps from interned absolute path for a file to snapshot for the file. 
0, Line, //  Used by the JavaScript plugins 
0, Line, //  for non-java projects there are no source sets configured 
0, Line, //  If not set for >= JAXP 1.5 / Java8 won't allow referencing DTDs, e.g.   using http URLs, because Groovy's XmlParser requests FEATURE_SECURE_PROCESSING 
1, Line, //  Ugly, but there are a few places where we need to instantiate a JavaDebugOptions and a regular ObjectFactory service   is not available. 
0, Line, //  for performance, ignore flushes 
0, Line, //     naming conventions via call to sourceSet.getTaskName() 
0, Line, //  no common root 
0, Line, //  tag::aggregating-annotation-processor[] 
0, Line, //  If we're reaching this point, we're very likely going to iterate on the dependencies   several times. It appears that iterating using `dependencies` is expensive because of   the creation of an iterator and checking bounds. Iterating an array is faster. 
0, Line, //  Create test suite executable 
0, Line, //  TODO - reuse metaData if it was already fetched to select the component from the version list 
0, JavaDoc, /*      * Indicates whether the tests should be run in deterministic order. Preserving the order guarantees that the complete test     * (including @BeforeXXX and @AfterXXX) is run in a test thread before the next test is run.     *     * Not required.     *     * If not present, the order will not be preserved.      */
0, Line, //  ...   end::task-arg-method[] 
0, Line, //  check module node import packages 
0, Line, //  this allows us to generate the deployment descriptor after recording all modules it contains 
0, Line, //  Use the runtime when nothing has been requested 
0, Line, //  Unfortunate cast! see LibraryBinaryLocator 
0, Line, //  path(Type) { ... } 
0, Line, //  This means the client does not support reporting jvm memory info 
0, Line, //  TODO: synchronization with other methods 
0, Line, //  Discard this operation and all children 
0, Line, //  NOTE: We do not want/need a decorated version of JavaForkOptions or JavaDebugOptions because   these immutable instances are held across builds and will retain classloaders/services in the decorated object 
0, Line, //  Don't go up the parent chain.   Don't want to risk classes crossing “scope” boundaries and being non collectible. 
0, Line, // see GRADLE-3027 
0, Line, //  The name of the test method 
0, Line, // we should consider to change the return type to DirectDependency, which requires adjustment in Kotlin DSL 
0, Line, //  File resources are handled slightly differently at present.   file:// repos are treated differently   1) we don't cache their files
0, Line, //  tag::sample[] 
0, Line, //  Discard listeners 
0, Line, //  This doesn't take into account build dependencies of the SourceDirectorySet.   Should just ditch SourceDirectorySet from here since it's not really a great model, and drags in too much baggage.
0, Line, //  we don't know if the underlying collection can return a size in constant time 
0, Line, //  We always ignore line order for matching out of parallel builds 
0, Line, //  project.getDependencies().create(String) seems to be the only feasible way to create a Dependency with a classifier 
0, Line, //  Upgrade required 
0, Line, //  There is currently a requirement in the JDK9 javac implementation   that when javac is invoked with an explicitly empty sourcepath   (i.e. {@code --sourcepath ""}), it won't allow you to compile a java 9   module. However, we really want to explicitly set an empty sourcepath   so that we don't implicitly pull in unrequested sourcefiles which   haven't been snapshotted because we will consider the task up-to-date   if the implicit files change.     This implementation of hasLocation() pretends that the JavaFileManager   has no concept of a source path. 
0, Line, // @Input 
0, Line, //  Restarting this configuration after conflict resolution.   If this configuration belongs to the select version, queue ourselves up for traversal.   If not, then remove our incoming edges, which triggers them to be moved across to the selected configuration 
1, Line, // TODO adding the parent project first because the converter needs it this way ATM. This is oversimplified.  the converter should not depend on the order of reactor projects.  we should add coverage for nested multi-project builds with multiple parents. 
0, Line, //  No compilers available, complain about the missing C compiler 
0, Line, //  Task dependencies may be calculated more than once.   This guard is purely an optimisation. 
0, Line, //  Fields guarded by lock 
0, Line, //  Need to remember if a further element was matched by an earlier one, no need to consider it then 
0, Line, //  Once the root build starts executing work, we are in Executing phase 
0, Line, //  Use an OS selected port 
0, Line, //  Can wait if this handler has completed or if the previous handler allows waiting 
1, Line, //  there's a possibility that this listener is called concurrently with   the build finished listener. If the message happens to be a graceful expire   one, then there's a large risk that we create a deadlock, because we're trying to   remove the same listener from 2 different notifications. To avoid this, we just   set the reference to null, which says that we're taking care of removing the listener
1, Line, //  TODO: Need to track version/implementation of ar tool.
0, Line, //  Sort based on from component 
0, Line, // LOG_LEVEL_MAPPING.put(LogLevel.INFO, Level.CONFIG);  LOG_LEVEL_MAPPING.put(LogLevel.LIFECYCLE, Level.WARNING);  LOG_LEVEL_MAPPING.put(LogLevel.WARN, Level.WARNING);  LOG_LEVEL_MAPPING.put(LogLevel.QUIET, Level.SEVERE);  LOG_LEVEL_MAPPING.put(LogLevel.ERROR, Level.SEVERE); 
0, Line, //  Ends up with: 1 2 -> 3 <- 4 5 6 
0, Line, //  Supports building both 32-bit and 64-bit binaries 
0, Line, //  load the static type descriptor from class constants 
0, Line, //  We'd have created an EmptyCurrentFileCollectionFingerprint if there were no file fingerprints 
0, Line, //  we decided if we have a vanilla name starting with a lower case   letter that we will not try to resolve this name against .*   imports. Instead a full import is needed for these.   resolveAliasFromModule will do this check for us. This method   does also check the module contains a class in the same package   of this name. This check is not done for vanilla names starting 
0, Line, //  Need to do this here, so that the transfer is 'restarted' when HttpClient reopens the resource (DIGEST AUTH only) 
0, Line, //  Not an OpenJDK-compatible compiler or signature changed 
0, Line, //  TODO:ADAM - Deprecate 
0, Line, //  Ignore tasks created after not closed 
0, Line, //  Already reached this goal 
0, Line, //  We always want to include className, even if longer than max length 
0, Line, //  A kotlinc warning, ignore 
0, Line, //  Node must project item as S 
0, Line, //  flatten because we need to serialize 
0, Line, //  Add a JAVA_HOME if none provided 
0, Line, // for testing 
0, Line, //  when -Xmx1024m, Runtime.maxMemory() returns about 910   assume that Gradle itself uses about 150MB heap 
0, Block, /*        The GroovyObject interface defines dynamic property and dynamic method methods. Implementers       are free to implement their own logic in these methods which makes it invisible to the metaclass.       The most notable case of this is Closure.       So in this case we use these methods directly on the GroovyObject in case it does implement logic at this level.      */
0, Line, //  TODO: Stop all daemon services 
0, Line, //  for each level in the file path, add the path 
0, Line, // below could be better.  Throwing InvalidUserDataException here means that useful context information (including candidate formats, etc.) is not presented to the user 
0, Line, //  If nobody said anything about this variant's target platform, use whatever the convention says 
0, Line, //  Reference class via `ModelType` to avoid strong reference 
0, Line, //  Used for testing the plugins DSL 
0, Line, //  Create key manager 
0, Line, //  if the version string cannot be parsed 
0, Line, //  if exclusions == nothing, then the intersection will be "nothing" 
0, Line, //  Separate Java class because IBM JDK 6 -- See https://issues.apache.org/jira/browse/GROOVY-7010 
0, Line, //  Update the state region 
0, Line, //  Using an array here because we're going to iterate pretty often and it avoids the creation of an iterator   that checks for concurrent modification 
1, Line, //  This is copied from Ant (see org.apache.tools.ant.util.FileUtils.tryHardToDelete).   It mentions that there is a bug in the Windows JDK impls that this is a valid   workaround for. I've been unable to find a definitive reference to this bug.   The thinking is that if this is good enough for Ant, it's good enough for us.
1, Line, //  TODO Change this to only add SWIFT_API artifacts and instead parse modulemaps to discover compile task inputs
0, Line, //  The download thread may still be running. Ignore any further status events from it 
0, Line, //  Fall back to propertyMissing, if available 
0, Line, //  known value, only write index 
0, Line, //  Not supported on Java 6 
0, Line, //  avoid excess creation of Suggestion objects 
0, Line, //  TODO - set header dir for applications 
0, Line, //  Just an identifier, this is a token 
0, Line, //  Not the first top level node 
0, Line, //  tries to relocate literals in the form of foo/bar/Bar 
0, Line, //  both are strings, we compare them taking into account special meaning 
0, Line, //  This could very well be a zip (or something else we understand), but we can't know for sure.   The client may try to infer from the file extension. 
0, Line, //  Build `buildSrc`, load settings.gradle, and construct composite (if appropriate) 
0, Line, //  Check to see if we should adjust the level based on a set lifecycle log level 
0, Line, //  Check environment 
0, Line, //  Restart each configuration. For the evicted configuration, this means moving incoming dependencies across to the   matching selected configuration. For the select configuration, this mean traversing its dependencies. 
0, Line, //  A function-like macro 
0, Line, //  Object propertyMissing(String name, Object value) 
0, Line, //  The provider does not know how to produce the value, so use the value instead 
0, Line, //  Register capabilities for this node 
0, Line, //  Set this.name = param1 
0, Line, //  Milestone 4 was broken on the IBM jvm 
0, Line, //  Replace if higher priority or version with highest priority and version
0, Line, //  Serialize the shared packages, this is consumed by GradleWorkerMain 
0, Line, //  Send some messages 
0, Line, //  Could throw UncheckedIOException 
0, Line, //  handle consumer < 2.7 
0, Line, //      throw new IllegalStateException("Accessor already registered: " + type + " " + accessor);   } 
0, Line, // no operation, if there is no script code provided 
0, Line, //  this dependency is internal only 
0, Line, //  Will be overwritten by setIdle if not idle. 
0, Line, //  There is no script class when there are no statements or methods declared in the script 
0, Line, //  TODO(daniel): Swift compiler should extends from an abstraction of NativeCompiler (most of is applies to SwiftCompiler) 
0, Line, //  No services to be mixed in 
0, Line, //  Any available Visual Studio implementation 
0, Line, //  Here, we know that the user requested a specific classifier. There may be multiple   candidate variants left, but maybe only one of them provides the classified artifact   we're looking for. 
0, Line, //  Expected 
0, Line, //  non-serializable field 
0, Line, //  Can only set once: should really be part of the constructor 
0, Line, //  this.super(p0 .. pn) 
0, Line, //  We don't care about nodes whose output is not consumed by anyone anymore 
0, Line, //  throw new MissingMethodException(name, <view-type>.class, args) 
0, Line, //  Because these properties can be convention mapped we need special handling in here.   If you add another one of these “modelled” properties, you need to update:   - maybeAppendModelledInstruction()   - maybePrependModelledInstruction()   - maybeSetModelledInstruction()   - getModelledInstructions()   - instructionValue() 
0, Line, //  Milestone 3 
0, Line, //  Override this, so that the working directory is not canonicalised. Some int tests require that   the working directory is not canonicalised 
0, Line, //  Generate an authentication token, which must be provided by the client in any requests it makes 
0, Line, //  TODO - creating a bundle should be done by some general purpose plugin 
0, Line, //  Wire build dependent components tasks dependencies 
0, Line, // ibm vm 1.6 + windows XP gotchas:  we need to print something else to the stream after we print the daemon greeting. 
0, Line, //  TODO: Turn this into an `@implSpec` annotation on the comment above:   https://github.com/gradle/gradle/issues/7486 
0, Line, //  see IdeaScalaConfigurer which requires the ipr to be generated first 
1, Line, //  Rough implementation to get something to work 
0, Line, //  Map the arguments of this expression 
0, Line, // noinspection SuspiciousMethodCalls 
1, Line, //  TODO: remove these special cases
0, Line, //  Don't retain the value, to allow ClassLoader to be collected 
0, Line, //  Disallow custom services of type ServiceRegistry, as these are automatically provided 
1, Line, //  TODO: This is not a great paradigm for creating a temporary directory.   See http://guava-libraries.googlecode.com/svn/tags/release08/javadoc/com/google/common/io/Files.html#createTempDir%28%29 for an alternative. 
0, Line, //  Add a link task 
0, Line, //  Assume this is a class and so has implemented all properties and methods somewhere in the superclass hierarchy 
0, Line, //  This is so that VisualCpp has the object file of the generated source file available at link time 
0, Line, //  If no result from 'require', just use the highest preferred version (no range merging) 
0, Line, //  We are going to throw a CommandLineArgumentException below, but want the message   to reflect that we didn't recognise the first char (i.e. the option specifier) 
0, Line, //  Take a copy because adding to an idMappings value may result in new mappings being added (i.e. ConcurrentModificationException) 
0, Line, //  GENERATE super.<setter>(v) 
0, Line, //  At this point:   If in daemon mode, the process has started successfully and all streams to the process have been closed   If in fork mode, the process has completed and all cleanup has been done   In both cases, all asynchronous work for the process has completed and we're done 
0, Line, //  cache result because it is pretty expensive to compute 
0, Line, //  trailing / or \ assumes ** 
0, Line, //  https://github.com/gradle/gradle-private/issues/1368 
0, Line, //  Milestone 8 and 9 
0, Line, //  NOTE: meminfoMatcher is _not_ thread safe and access needs to be limited to a single thread. 
0, Line, // otherwise the stream.size() returns max integer and the offset is no longer correct 
0, Line, //  Broken in another thread 
0, Line, //  Not supported for now 
0, Line, //  end::host-and-path[] 
0, Line, //  Include file changed 
0, Line, //  Otherwise, try remotely 
0, Line, //  This is a little coincidental: if view attributes have not been accessed, don't allow no matching variants 
0, Line, //  TODO - we've already calculated the common prefix and calling plus() will calculate it again 
0, Line, //  Add the unit test and extension 
0, Line, //  Call this.super() 
0, Line, //  A macro function call 
0, Line, //  This ensures that subprojects are realized and register their project and project configuration IDE artifacts 
0, Line, //  1. org.codehaus.groovy.classgen.asm.WriterController makes identity comparisons 
0, Line, //  Milestone 6 
0, Line, //  By removing the leading "/", this is no longer a "path" as defined by Eclipse 
0, Line, //  Creates a control regexp pattern where extra revision tokens _must_ have the same value as the original one 
0, Line, //  Notify any waiting flush threads that the worker is done, possibly with a failure 
0, Line, //  Also use the generated class for itself 
0, Line, //  Task execution services at all levels needs this 
0, Line, //  no compatible variant found 
0, Line, //  Ant is optional dependency of groovy(-all) module but mandatory dependency of Groovy compiler;   that's why we add it here. The following assumes that any Groovy compiler version supported by Gradle   is compatible with Gradle's current Ant version. 
0, Line, //  usePluginsInInitScripts asserts using https://repo.gradle.org/gradle/repo 
1, Line, //  TODO: This should be part of the cached result? 
0, Line, //  used for log and date only 
0, Line, //  Milestone 7 
0, Line, //  Intentionally asymmetrical to getExecuted()   This prevents recursion on `project.afterEvaluate { project.evaluate() }` 
0, Line, // adding the properties from the super class onto the inheriting class 
0, Line, //  but should be 
0, Line, //  A member of the class breaks binary compatibility.   That will be handled when the member is passed to `maybeViolation`. 
1, Line, //  Implementation is currently dumb, can be made smarter 
0, Line, //  this.<services_method>() 
0, Line, //  Empty or only whitespace 
0, Line, //  re-use not possible across modules currently 
0, Line, //  for backwards compatibility, we use the last added description 
0, Line, //  On Linux, users cannot touch files they don't own but have write access to   because the JDK uses futimes() instead of futimens() [note the 'n'!]   see https://github.com/gradle/gradle/issues/7873 
0, Line, //  <thead>     <tr>       <td>Property</td>       <td>Description</td>     </tr>   </thead> 
0, Line, //  Read *.properties files 
0, Line, //  implicitly don't clean up if this throws 
0, Block, /*                              * For someone looking for the difference between this and the duplicate code above                             * this one uses the `testTaskProvider` and the `reportTask`. The other just                             * uses the `reportTask`.                             * https://github.com/gradle/gradle/issues/6343                              */
1, Line, //  TODO:RBO Clarify what it means and what's possible to do with it.   TODO:RBO E.g. Can the return value always be used to resolve back to the identified component? If so, how?   TODO:RBO Wouldn't it be better to define a proper type for project/model paths?
0, Line, //  disable jar file caching to prevent file locking 
0, Line, //  Add plugin implementation here 
0, Block, /*  * A performance test that compares Gradle's current performance against * some baseline and fails if it is slower.  */
0, Line, //  else, already visited or currently visiting (which means a cycle), skip 
1, Line, //  TODO: This can throw a NPE: will need an identifier for a variant without an owning component 
1, Line, //  This implementation is broken. It does not consider include and exclude patterns 
0, Line, //  Fix the source file name displayed in the error messages 
0, Line, //  we can tell for sure 
0, Line, //  When there is a class name match, return true for excluding it so that we can keep   searching in individual test methods for an exact match. If we return false here   instead, then we'll give up searching individual test methods and just ignore the   entire test class, which may not be what we want. 
0, Block, /*          * Linux 4.x: MemAvailable         * Linux 3.x: MemFree + Buffers + Cached + SReclaimable - Mapped          */
0, Line, //  These should come from the compiler classloader 
0, Line, //  Acquire an exclusive lock on the information region and write our details there 
0, Line, //  1.x works on Java 5 - 8 
0, Line, //  trailing EOL 
0, Line, //  Pom packaging doesn't matter when we have a single unclassified artifact 
0, Line, //  Try each address in turn. Not all of them are necessarily reachable (eg when socket option IPV6_V6ONLY   is on - the default for debian and others), so we will try each of them until we can connect 
0, Line, //  Use the display name anyway 
0, Line, //  Use java 7 APIs, if available 
0, Line, //  handle origin metadata 
1, Line, //  TODO LJA Using the root as the NodeState here is a bit of a cheat, investigate if we can track the proper NodeState 
0, Line, //  Determine which output to produce at development time. 
0, Line, //  BuildOperationListener dispatch is not serialized 
0, Line, //  When running from a Gradle distro, only need launcher jar. The daemon can find everything from there. 
0, Line, //  TODO - reuse graph, discard state once not required 
0, Line, //  Collect the components to sort in consumer-first order 
0, Line, //  replicate a little bit of AnnotationVisitor here   because we can't wait until later to do this 
0, Line, //  This is the highest parent in the hierarchy 
0, Line, //  No further mutation is allowed and there's no parent: the artifact set corresponds to this configuration own artifacts 
0, Line, //  Do nothing for now 
0, Line, //  Remove duplicates 
0, Line, //  From compile configuration, or when the target's runtime configuration does not extend from compile, include the compile dependencies 
0, Line, //  When creating the OSGi manifest, we must have a single view of all of the classes included in the jar. 
0, Line, //  TODO - visit dependencies of this collection instead 
0, Line, //  Don't write to the right-most column, as on some consoles the cursor will wrap to the next line and currently wrapping causes   layout weirdness 
0, Line, //  We do not store the history if there was a failure and the outputs did not change, since then the next execution can be incremental.   For example the current execution fails because of a compile failure and for the next execution the source file is fixed, so only the one changed source file needs to be compiled. 
0, Line, //  Check already-resolved dependencies and use this version if it's compatible 
0, Line, //  Perform conflict resolution 
0, Line, //  Caches the list of dependency states which are NOT excluded 
0, Line, //  Relative coordinate system 
0, Line, //  if the first call to getConfiguration is done before getDerivedVariants() is called   then it means we're using the legacy matching, without attributes, and that the metadata   we construct should _not_ include the constraints. We keep the constraints in the descriptors   because if we actually use attribute matching, we can select the platform variant which   does use constraints. 
0, Block, /*      * Synchronizes on the system properties, because IvySettings iterates     * over them without taking a defensive copy. This can fail if another     * process sets a system property at that moment.      */
0, Line, //  ANTLR 2 always returning 0 
0, Line, //  TODO - do this inside some 'testng' suite, so that failures and logging are attached to 'testng' rather than some 'test worker' 
0, Line, //  Progress events have no expensive logic of their own, so we don't do anything   with them. We only test the overhead of sending/receiving them 
0, Line, //  Have not seen this node before - add its dependencies to the head of the queue and leave this   node in the queue   Make sure it has been configured 
0, Line, //  Need tools.jar for compile tasks 
0, Line, //  we handle the property part as if it were not part of the property 
0, Line, //  We do not need to check instances of LowerCaseClass   to be a Class, because unless there was an import for   for this we do not lookup these cases. This was a decision   made on the mailing list. To ensure we will not visit this   method again we set a NO_CLASS for this name 
0, Line, //  Trigger download of file, if required 
0, Line, //  Do not substitute plugins from same build or builds that were not explicitly included 
1, JavaDoc, /*      * Produces an ArtifactIdentifier for this artifact (it's not actually an identifier - just a bucket of attributes).     * TODO:ADAM - remove this      */
0, Line, // noinspection ThrowFromFinallyBlock 
0, Line, //  this is an approximation: all "compiled" sources will use the same task dependency 
1, Line, //  TODO - property order needs to be deterministic across JVM invocations, i.e. sort the properties by name
0, Line, //  Shorten args and write out an options.txt file   This must be called only once per execute() 
0, Line, //  At this point, the work-in-progress area may or may not have been resized due to maximum size constraint. 
0, Line, //  Using a string instead of a plain ID here might look strange, but this turned out to be   the fastest of several experiments, including:        using ModuleIdentifier (initial implementation)      using ModuleIdentifier through ImmutableModuleIdentifierFactory (for interning)      using a 2-level map (by group, then by name)      using an interned string for the cachedId (interning turned out to cost as much as what we gain from faster checks in maps)     And none of them reached the performance of just using a good old string 
0, Line, //  Copy the raw form 
0, Line, //  Do not use a timestamp that is the same as the end of the last build or the start of this build 
0, Line, //  When using IncrementalTaskInputs, keep the old behaviour of all file inputs being incremental 
0, Line, //  unknown scope, defaulting to 'compile' 
0, Line, //  Encode the character using hex notation 
0, Line, //  Use an empty settings for a target build file located in the same directory as the settings file. 
0, Line, //  at this point we know the component exists 
0, Line, //  Any available Clang 
0, Line, //  we cannot use md5 instead of sha1 here because cache will get corrupted due to its expectation of sha1 hashes 
0, Line, //  discard static initializers 
0, Line, //  GENERATE ((MixInExtensibleDynamicObject)getAsDynamicObject()).getConvention() 
0, Line, //  If this Scala compile is published into a jar, generate a analysis mapping file 
0, Line, //  Consume content for non-successful, responses. This avoids the connection being left open. 
0, Line, //  Macro expand parameter 
0, Line, //  Already in something to uncompress it 
0, Line, //  Reset console mode 
0, Line, //  Do not macro expand parameter 
0, Line, //  gate hasn't been opened yet 
1, Line, //  TODO - this will leave invalid types in the cache when it fails 
0, Line, //  `getMaxWorkerCount() - 1` because main thread executes work as well. See https://github.com/gradle/gradle/issues/3273   TODO This could be more efficient, so that we only start a worker when there are none idle _and_ there is a worker lease available 
1, Line, //  Should repositories be able to participate in incremental?   At the least, they may be able to express themselves as output files   They *might* have input files and other dependencies as well though   Inputs: The credentials they need may be expressed in a file   Dependencies: Can't think of a case here 
0, Line, // don't synchronize value creation 
0, Line, //  TODO: Locate this tool from a tool provider 
0, Line, //  We have to keep this for a while: https://github.com/gradle/gradle/issues/4856 
0, Line, //  Wire build dependent binaries tasks dependencies 
0, Line, //  These files have an unreliable timestamp - discard any cached state for them and rehash next time they are seen 
0, Line, //  If the previous result is still not rejected, do not need to re-resolve. The previous result is still good. 
0, Line, // put the whole arguments string in single quotes, unless defaultJvmOpts was empty, 
0, Line, //  A CONSTANT_Class entry, read the class descriptor 
0, Line, //  we see a different value, or the set already exists, in which case we initialize   the set if it wasn't done already, and collect all values. 
0, Line, //  Assuming format: 'Swift version 4.0.2 (...)' 
1, Line, //  TODO - have to do much better here 
0, Line, //  The “remote” may have already given us the checksum 
0, Line, //  We need to resolve the classes into a set of files so @SkipWhenEmpty will work   Otherwise, a collection of empty directories is not seen as "empty" 
0, Line, //  Let's make sure we never need to reallocate 
0, Line, //  throws Exception 
0, Line, //  This set represents the order in which elements are inserted to the store, either actual   or provided.  We construct a correct iteration order from this set. 
0, Line, //  Yeah, setting the background intensity is not underlining.. but it's best we can do   using the Windows console API 
1, Line, //  TODO: these should be moved off to a separate type
0, Line, //  This could be more efficient; assume that removal happens much less often than addition 
0, Line, //  (<type>)<service> 
0, Line, //  Generate: Class publicType() { ... } 
0, Line, //  protects the following state   Contains only application owned ClassLoaders 
0, Line, //  These objects are going across the wire.   1. Convert any subclasses back to File in case the subclass isn't available in Gradle.   2. Make them absolute here to deal with a different root at the server 
0, Line, //  Serialize anything else 
0, Block, /*      * Does a defensive copy to avoid leaking class references through the MutablePropertyDetails     * contained in the maps values. The keyset would keep a strong reference back to the map     * and all its entries.      */
0, Line, //  Also available via play.japi.twirl.compiler.TwirlCompiler.DEFAULT_IMPORTS but we would have to grab it via reflection 
0, Line, //  extract exceptions 
0, Line, //  summary 
0, Line, //  TODO - mix Groovy DSL support in 
0, Line, //  Order is important here, because they will be searched in that order 
0, JavaDoc, /*      * Adds an action which is executed before this collection is mutated with the addition or removal of elements.     * Any exception thrown by the action will veto the mutation.     *     * TODO: Combine this with the MutationGuard or rework CompositeDomainObject to behave with MutationGuard/MutationValidator.     * The mutation validators used in DefaultConfiguration only expect to be used with add/remove methods and fail when we     * correctly try to also prevent all/withType/etc mutation methods.     *     * assertMutableCollectionContents is only used by add/remove methods, but we should remove this special handling and fix     * DefaultConfiguration and CompositeDomainObjects.      */
0, Line, //  Null is ok if the ConstructorSelector says it's ok 
0, Line, // create log file 
0, Line, //  show all operation output when debug is enabled 
0, Line, //  Transition any other nodes that depend on the predecessor state 
0, Line, //  element names can only contain 0 or 1 colon   See http://www.w3.org/TR/2004/REC-xml-names11-20040204/#Conformance   If the name has a prefix, evaluate both prefix and name 
0, Line, //  Coerce the value to the property type, if known 
1, Line, //  TODO:LPTR This should be @Defaults @Each PlayApplicationBinarySpecInternal 
0, Block, /*          * MetaClass.getMetaProperty(name) is very expensive when the property is not known.         * Instead, we reach into the meta class to call a much more efficient lookup method.         * Since we do this in a hot code path, we also reuse the argument array used for the         * reflective call to save memory.          */
0, Line, //  Don't collect build dependencies if not required 
0, Line, //  please keep the formatting below as it helps enabling or disabling stages   optimizes for nulls, 2-params, ... mandatory   caches the result of TL operations   performs algebra   caches the result of optimization operations   the end of the chain, mandatory   shares the same caches as the top level one as after reducing we can find already cached merge operations 
0, Line, //  Not part of the public API 
0, Line, //  Clean-up old HTML report directories 
0, Line, //  fix problems in updating jar files by disabling default caching of URL connections.   URLConnection default caching should be disabled since it causes jar file locking issues and JVM crashes in updating jar files.   Changes to jar files won't be noticed in all cases when caching is enabled.   sun.net.www.protocol.jar.JarURLConnection leaves the JarFile instance open if URLConnection caching is enabled. 
0, Line, //  Here it means that we have validated that the entry is still up-to-date, and that means a couple of things:   1. the cache policy said that the entry is still valid (for example, `--refresh-dependencies` wasn't called)   2. if the rule is cacheable, we have validated that its discovered inputs are still the same 
0, Line, // 2 gigs 
0, Line, //  From every configuration other than compile, include both the runtime and compile dependencies 
0, Line, //  Read serialized worker 
0, Line, //  Only add confs if they are specified. if they aren't, endElement will handle this only if there are no conf defined in sub elements 
0, Line, //  This is an empty root block, discard it 
0, Line, //  buffer was full, just call Thread.yield 
0, Line, //  These constants are defined here and not with the rest of their kind in HelpTasksPlugin because they are referenced   in the ‘core’ modules, which don't depend on ‘plugins’ where HelpTasksPlugin is defined. 
0, Line, //  overwrite rather than append dependencies 
0, Line, //  resolve constant-looking expressions statically (do here as gets transformed away later) 
0, Line, //  Currently need to resolve the file, so that the artifact can be used in both a script classpath and the main build. Instead, this should be resolved as required 
1, Line, //  TODO we should refactor this to general, compatibility mapping solution, as we have it for model loading. See HasCompatibilityMapping class. 
0, Line, //  Create unbuildable build configuration so the indexer can keep functioning 
0, Line, //  Turn the requested watch points into actual enclosing directories that exist 
0, Line, //  Need Transformer (part of AntBuilder API) from base services 
0, Line, //  Create trust manager 
0, Line, //  If we don't know what the max heap is, approximate it based on OS total memory 
0, Line, //  Check for presence as the domain object may have been replaced 
1, Line, //  This is a heuristic, more than truth: it is possible that the 2 long hashs   are identical AND that the sizes of collections are identical, but it's   extremely unlikely (never happened on test cases even on large dependency graph) 
1, Line, //  failing, seems to be that set method override doesn't work for iterables - GRADLE-2097  assertThat(call("{ bean, list -> bean.things(list) }", bean, new LinkedList<Object>()), nullValue());  assertThat(bean.getThings().size(), equalTo(0)); 
0, Line, //  Make convention mapping work 
0, Line, //  Convert a second time with only the published configurations: this ensures that the correct artifacts are included 
1, Line, //  TODO: This isn't quite right. We're leaking the _implementation_ type here.  But for tasks, this is usually right. 
0, Line, //  nothing to do if no EclipseRuntime is supplied. 
0, Line, //  Add separators before and after anything with a comment or that is a block or group of statements 
0, Line, //  try to get the name from EclipseProject.name 
0, Line, //  Shutdown the adapter Groovy system 
0, Line, // Discard the compile loader 
0, Line, //  Only report subject binding if target state is after node creation 
0, Block, /*          * Remembers the unresolved dependency for later logging and also adds a fake         * file dependency, with the file path pointing to the attempted component selector.         * This shows up in the IDE as a red flag in the dependencies view. That's not the best         * usability and it also muddies the API contract, because we disguise an unresolved         * dependency as a file dependency, even though that file really doesn't exist.         *         * Instead, when generating files on the command line, the logged warning is enough.         * When using the Tooling API, a dedicated "unresolved dependency" object would be better         * and could be shown in a notification. The command line warning should probably be omitted in that case.          */
0, Line, //  Set the visible included builds 
1, Line, //  TODO return a richer data structure that provides meta data about how the source was found, for use is diagnostics 
0, Line, //  Nested closure 
0, Line, //  Only cache non-overloaded methods by name 
0, Line, //  Artifacts are not known until the file collection is queried 
0, Line, //  Toolchains should be linking against stuff in the standard locations 
0, Line, //  Have to pass build JVM args directly to launcher JVM 
1, Line, //  The configuration has been used in a resolution, and it is an error for build logic to change any dependencies,   exclude rules or parent configurations (values that will affect the resolved graph).
0, Line, //  Can't acquire lock, get details of owner to include in the error message 
0, Line, //  Ignore things we know are empty 
0, Line, //  Ping the owner via all available local addresses 
0, Line, //  check our classpath 
0, Line, //  @Inject is allowed on fields only 
0, Line, // class file versions: 1.1 == 45, 1.2 == 46... 
0, Line, //  TODO: When we support multiple components or configurable dependencies, we'll need to merge the confs of multiple dependencies with same id. 
0, Line, //  ignore exception in shutdown 
0, Line, //  If the target is a project component, it has not been modified from the requested 
0, Line, //  GENERATE null 
0, Line, //  return 
0, Line, //  Detect anonymous static classes of enum constants with class body   See https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#d5e12300   And https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.1   "The optional class body of an enum constant implicitly defines an anonymous class declaration    that extends the immediately enclosing enum type." 
0, Line, //  Hackery to make closure execution faster, by short-circuiting the expensive property and method lookup on Closure
1, Line, //  This method is sometimes called directly (i.e. not via an operation executor).   In these cases, the context is null. 
0, Line, //  Only managed implementation and value types are allowed as a managed property type unless marked with @Unmanaged 
0, Block, /*  isInitialPass  */
0, Line, //  Read-only property with managed type 
0, Line, //  Do not traverse if seen already 
0, Line, //  Inject the launcher JVM args via one of the environment variables 
0, Line, //  If the classloader structure is flat, there's no need to send the classpath 
0, Line, // we could potentially avoid creating value that is already being created by a different thread. 
0, Line, //  Wait for the process' stdout to indicate that the process has been started successfully 
0, Line, //  currently single list of optionals 
0, Line, //  Expire under high JVM memory or GC pressure 
0, Line, //  scenarioList contains duplicate scenarios because of rerun 
1, Line, //  TODO:LPTR What is with the "metaClass" property here? 
0, Line, //  If the jansi.strip property is set, then we just strip the 
0, Line, //  i >= 1 makes sure that commonElements < stackTrace.size() 
0, Line, //  Use this instead of Description.getClassName(), it is not available in JUnit <= 4.5
0, Line, //  GENERATE __<prop>__ = true 
0, Line, //  Ignore any other outcome 
0, Line, //  public methods belongs to your API 
0, Line, //  TODO: Allow this to be added lazily 
0, Line, // then we want to validate strictly 
0, Line, //  Selection deferred as we know another selector will be added soon 
0, Line, //  when a selector changes from non lock to lock, we must reselect 
0, Line, //  Important that the launchables are unpacked on the client side, to avoid sending back any additional internal state that   the launchable may hold onto. For example, GradleTask implementations hold onto every task for every project in the build 
0, Line, //  retry after getting "Bad file descriptor" exception 
0, Line, //  Lambdas contain a name that's based on an index + timestamp at runtime and changes build-to-build.   This makes comparing two builds very difficult when a lambda is in the stack   changes SkipUpToDateStep$$Lambda$33.1050994387.apply -> SkipUpToDateStep$$Lambda$apply 
0, Line, //  MutableModelNode methods 
0, Line, // quote everything else 
0, Line, //  This severs the connection between from this debugOptions to the other debugOptions 
0, Line, //  just for reporting 
0, Line, //  If we have a single common resolution, no conflicts to resolve 
0, Line, //  must be an included build 
0, Line, //  This is a slight different condition than that used for a dependency declared in a Gradle project,   which is (targetHasVariants || consumerHasAttributes), relying on the fallback to 'default' for consumer attributes without any variants. 
0, JavaDoc, /*  * TODO - merge this and the component container  */
0, Line, //  lookup class in all classloaders 
0, Line, // Would typically use GetObjectMetadataRequest but it does not work with v4 signatures
0, Line, //  Either a macro function, a macro or token concatenation 
0, Line, //  GENERATE instantiator.newInstance(type) 
0, Line, //  1.8 
0, Line, //  if not null, is not empty 
0, Line, //  Read -D command line flags 
0, Line, //  Should not happen 
0, Line, //  0.9.1 couldn't handle anything with a timestamp whose timezone was behind GMT 
0, Line, //  Caching involves 2 distinct caches, so that 2 scripts with the same (hash, classpath) do not get compiled twice   1. First, we look for a cache script which (path, hash) matches. This cache is invalidated when the compile classpath of the script changes   2. Then we look into the 2d cache for a "generic script" with the same hash, that will be remapped to the script class name   Both caches can be closed directly after use because:   For 1, if the script changes or its compile classpath changes, a different directory will be used   For 2, if the script changes, a different cache is used. If the classpath changes, the cache is invalidated, but classes are remapped to 1. anyway so never directly used 
0, Line, //  Create a SourceFile object to represent the javascript file to compile 
0, Line, //  Remove all the methods from the main class 
1, Line, //  TODO this doesn't belong here, that java plugin should add an extension to this guy with this 
0, Line, //  We don't support shrinking at the moment 
0, Line, //  Create a synthetic id for the build, if the id is already used   Should instead use a structured id implementation of some kind instead 
0, Line, //  exists == has content 
1, Line, //  need to make this better 
0, Line, //  Do not process Object's or GroovyObject's methods 
0, Line, //  TODO - this should be applied to all methods, including delegating methods 
0, Line, //  Could potentially coordinate with a thread that is snapshotting an overlapping directory tree 
0, Line, //  Supported, nothing to do. 
0, Line, //  If the module matches, add the root component into the mix 
1, Line, //  TODO: maybe we need to allow additional dirs like SourceSetOutput does   (esp. for backwards compatibility). Wonder if it's still necessary to distinguish   between classes and resources dirs, instead of just maintaining a collection of dirs.   As far as generated resources are concerned, it might be better to model   them as an additional (Buildable) ResourceSet.
1, Line, //  workaround for bug in TestNG 6.2 (apparently fixed in some 6.3.x): listener is notified twice per event 
0, Line, //  Too many requests (not available through HttpStatus.XXX) 
0, Line, //  Unpacks the request to serialize across to the daemon and creates instance of   TestExecutionRequestAction 
0, Line, //  cleanup() will abort the process as desired 
1, Line, //  TODO: This isn't correct. This means that we've detected a cycle while determining the execution plan, but the graph walker did not find one.   https://github.com/gradle/gradle/issues/2293 
1, Line, //  TODO:Cedric The following validation should in theory happen in its own rule, but it is not possible now because   there's no way to iterate on the map as subject of a `@Validate` rule without Gradle thinking you're trying to mutate it
0, Line, //  Include file not found (but previously was found) 
0, Line, //  An empty capability list means that it's an implicit capability only 
0, Line, //  read-write-execute for user only   read-write for user only 
0, Block, /*          *  GROOVY-4009: when a normal variable is simply being used, there is no need to try to         *  resolve its type. Variable type resolve should proceed only if the variable is being declared.          */
0, Line, //  Only handle the command line for now 
0, Line, //  Turn off request logging unless debug mode is enabled 
0, Line, //  Unknown type - just inspect ourselves. Should instead share this with all registries 
0, Line, // fall back to default runner 
0, Line, //  Resolvable configurations 
0, Line, //  Based on the benchmark found in org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessorBenchmark   and the results in the PR https://github.com/gradle/gradle/pull/1183   we're using "native platform" for Mac OS and a  mix of File and NIO API for Linux and Windows   Once JDK 9 is out, we need to revisit the choice, because testing for file.exists() should become much   cheaper using the pure NIO implementation. 
0, Block, /*                 val rightResult = result.right()                val generatedFiles = right.get()                val empty = generatedFiles.isEmpty()                empty.booleanValue()              */
0, Line, //  Matches: task args?, <identifier>, args? or task(args?, <identifier>, args?)   Map to: task(args?, '<identifier>', args?) 
0, Line, //  Report fields with annotations that have not been seen while processing properties 
0, Line, //  Snarl is not running 
0, Line, //  If credential decides it can handle it, the return code or message indicated   something specific to authentication, and no backoff is desired. 
0, Line, //  Body is a simple expression, including a macro function call with no arguments 
0, Line, //  Enable the use of Gradle metadata. This is a temporary opt-in switch until available by default 
0, Line, //  this is cached because used very often in sorting selectors 
0, Line, //  ProviderInternal is-a TaskDependencyContainer, so check first 
0, Line, //  Implementations should not wrap exceptions, this is done in DefaultObjectConfigurationAction
0, Line, //  found an attribute with the same name, but they do not necessarily have the same type 
0, Line, //  Consumable configurations 
0, Line, //  Handle just empty string, single identifier or '(' params? ')', should handle more by parsing the tokens into an expression 
0, Line, //  TODO: Add handling for Test-only dependencies once https://github.com/gradle/gradle/pull/9484 is merged 
0, Line, //  No macro name 
0, Line, //  Does not take effect until after execution has completed 
0, Line, //  Only apply default locations when none explicitly configured 
0, Line, //  empty text nodes hinder subsequent formatting 
0, Line, //  Resolve it later 
0, Line, //  First look for a property known to the meta-class 
0, Line, //  component under test 
0, Line, //  Just move back 2 seconds 
0, Line, //  A first pass to do local resolves only 
0, Line, //  TODO Deprecate and eventually prevent these mutations in parent when already resolved
0, Line, //  Artifacts   Keep track of transformed artifacts as a given artifact may appear in multiple variants 
0, Line, //  Ignore exclusions for dependencies with `<optional>true</optional>`, but not for <dependencyManagement>. 
0, Line, //  JVM args that must be used to fork a JVM 
0, Line, //  custom type 
0, Line, // discovered java location 
0, Line, //  Include all 'optional' dependencies in "optional" configuration 
0, Line, //  ignored 
0, Line, //  Assume VS 2015 
0, Line, //  Create the and initialize the SSLContext 
0, Line, //  We use an identity hashmap for performance, because we know that our attributes   are generated by a factory which guarantees same instances 
0, Line, //  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-NullLiteral 
0, Line, //  Casts to Class below are to workaround Eclipse compiler bug   See: https://github.com/gradle/gradle/pull/200 
0, Line, //  Clean up old stop events 
0, Line, //  Exit code 0 = success   Exit code 1 = failed test(s)   anything else is considered an execution failure 
0, Line, //  On macOS, we assume co-located Xcode is installed into /opt/xcode 
0, Line, //  previous character is not a separator 
0, Line, //  Defer attaching the model until all components have been (most likely) configured   TODO - make this relationship explicit to make this more reliable and offer better diagnostics 
0, Block, /*                  * An extracted distribution usually looks like:                 * checksumDir/                 *      | gradle-5.5.1-bin.zip.ok                 *      | gradle-5.5.1-bin.zip.lck                 *      | gradle-5.5.1-bin.zip                 *      | gradle-5.5.1                  */
0, Line, //  check package this class is defined in. The usage of ConstructedClassWithPackage here   means, that the module package will not be involved when the   compiler tries to find an inner class. 
0, Line, //  4.x   2.x - 3.x   1.x 
0, Line, //  On windows we know the console does not interpret ANSI codes.. 
0, Line, //  following patterns are built upon constants above and should not be modified 
0, Line, //  ordered by how much they filter 
0, Line, //  By default the local cache is a directory cache 
0, Line, //  we just need to get the lock for this project 
0, Line, //  NOTE: When removing provider, we don't need to fireObjectRemoved as they were never added in the first place. 
0, Line, //  In the same situation with NATIVE_HEADER_OUTPUT, javac just NPEs.  Don't bother. 
0, Line, //  If the jansi.passthrough property is set, then don't interpret 
0, Block, /*  * Benchmark                     Mode  Cnt          Score         Error  Units * OptionalBenchmark.nullCheck  thrpt   20  107887111.061 ±  882182.482  ops/s * OptionalBenchmark.optional   thrpt   20   86746312.090 ± 1150860.296  ops/s * */
0, Line, //  we are currently adding a configuration to either an include, exclude or artifact   element   of a dependency. This means that we have to add this element to the corresponding   conf   of the current dependency descriptor 
0, Line, //  path { ... } 
0, Line, //  If the previous result was rejected, do not need to re-resolve (new rejects will be a superset of previous rejects) 
0, Line, //  MinGW requires the path to be set 
1, Line, // TODO: Simplify this class by busting it up into a locator for legacy SDKs and locator(s) for Windows 8 kits 
0, Line, //  superName can be null if what we are analyzing is `java.lang.Object`   which can happen when a custom Java SDK is on classpath (typically, android.jar) 
1, Line, //  TODO - this is all terribly lame. We need some proper reporting here (which means implementing Reporting). 
0, Line, //  See if all entry points have the same identifier 
0, Line, //  Unfortunately, we can't determine this at constructor time, because CacheBuilder   calls our constructor and it's not easy to pass arguments to it. 
0, Line, //  virtual components have no source 
1, Line, //  TODO - implement these cases 
0, Line, //  Collect any container level add actions added since the last call to configure() 
0, Line, //  DO NOT change the signature of this method: it is a convention used in   our internal performance testing infrastructure 
0, Line, //  Add the application and extension 
0, Line, //  Try to configure element 
0, Line, //  Pass 1, extract plugin requests and plugin repositories and execute buildscript {}, ignoring (i.e. not even compiling) anything else 
0, Line, //  another case we want to check here is if we are in a   nested class A$B$C and want to access B without   qualifying it by A.B. A alone will work, since that   is the qualified (minus package) name of that class   anyway. 
0, Line, //  First things first, retro compatibility 
0, Line, //  to strip the ANSI sequences.. 
0, Line, //  1.0-milestone-5 was broken where jna was not available  noinspection SimplifiableIfStatement 
0, Line, //  TODO: This is where the password information would go
0, Line, //  If unknown, try a remote search 
1, Line, //  TODO(daniel): Swift compiler should extends from an abstraction of NativeCompiler (most of it applies to SwiftCompiler) 
0, Line, //  For custom ivy pattern matchers, don't inspect the rule any more deeply: this prevents us from doing smart merging later 
1, Line, //  TODO: should use target platform to make this decision 
0, Line, // No conflict with matching participants found, create new 
0, Line, //  tag::options-of-dynamic-processor[] 
1, Line, //  TODO There should be a more explicit way to execute an action against existing services 
0, Line, //  if the included ivy file is not found on file system, tries to resolve using 
0, Line, //  TODO - display name 
1, Line, //  Have an unprocessed/new selector for this module. Need to re-select the target version. 
0, Line, //  Prevent further tests (ignored) from triggering start actions 
1, Line, //  TODO: Assets should probably be a source set too 
1, Line, // TODO:instant-execution - use the class generator instead 
0, Line, //  Known, but not buildable 
0, Line, //  Stop the pipeline:   1. mark daemon as stopped, so that any incoming requests will be rejected with 'daemon unavailable'   2. remove presence from registry   3. stop accepting new connections   4. wait for commands in progress to finish (except for abandoned long running commands, like running a build) 
0, Line, //  Example: http://repo2.maven.org/maven2/net/jini/jsk-platform/2.1/jsk-platform-2.1.pom 
0, Line, //  ExecuteBuild should be the last action, but in case we want to decorate the result in the future 
0, Line, //  GENERATE public <type> <getter>() { return (<type>)getConventionMapping().getConventionValue(super.<getter>(), '<prop>', __<prop>__); } 
1, Line, //  TODO - implement this by moving this resolver to live alongside the external resolvers 
0, Line, //  new entry 
0, Line, //  Else, has been removed by something else - ignore 
1, Line, //  TODO This should use the same `MutationValidator` infrastructure that we use for other mutation types 
0, Line, //  Need to use a 'foreign' build id to make BuildIdentifier.isCurrentBuild and BuildIdentifier.name work in dependency results 
0, Line, //  We use a set here because for excludes, order of edges is irrelevant   so we hit the cache more by using a set 
0, Line, //  NOTE: the space in the directory name is intentional
0, Line, // browsers dont understand <a name="..."/> 
0, Line, //  Is the cached version still current?
0, Line, //  Convert properties to ParallelismConfiguration object 
0, Line, //  Delegate class is not visible to managed view type -> view type is more general than delegate type, so use the delegate classloader instead 
0, Line, // module was already visited, there is a cycle 
0, Line, //  hot path; create as little as possible… 
1, Line, //  TODO: we should just cache these classloaders and eject/stop them when they are no longer in use 
0, Line, //  These are implemented as a system property, but don't really function like one   So we include it in this “no system property” set. 
0, Line, //  We need scala.util.parsing.input.Positional 
0, Line, //  There's no authentication involved, requests can be done concurrently 
0, Line, //  Start preparing the result 
0, Line, //  Deserialize the worker action 
0, Line, //  Add tasks created through rules to the actual task container 
0, Line, //  Can probably skip this 
0, Line, //  Split out up the output into main content and post build content 
0, Line, //  ... 
0, Line, //  Use a defensive copy of the build definition, as it may be mutated during build execution 
0, Line, //  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-Identifier 
0, Line, //  Can get duplicate finish events 
0, Line, //  This method is effectively part of a cross Gradle version contract. 
0, Line, //  Read worker implementation classpath 
0, Line, //  Any logging prior to this point will not end up in the daemon log file. 
0, Line, //  with normalized line endings 
0, Line, //  The following values are relatively expensive to create, so defer creation until required 
0, Line, //  Use java 7 APIs, if available, otherwise fallback to no-op 
0, Line, //  Move into cache 
0, Line, // iterate and stop all daemons 
0, Line, //  Read header 
0, Line, //  2 lines: 1 for BuildStatus and 1 for Cursor parking space 
0, Line, //  construct task selectors 
0, Line, //  Get the CompilationLevel.SIMPLE_OPTIMIZATIONS class and set it on the CompilerOptions class 
0, Line, //  The task dependencies for the configuration have been calculated using Configuration.getBuildDependencies(). 
0, Line, //  Consumer version is provided by client 1.2 and later 
1, Line, //  TODO - should be >= self closed 
0, Line, //  Write rich content to both stdout and stderr 
0, Line, //  Replace 'Returns the ...'/'Sets the ...' with 'The ...'
0, Line, //  it's rare that a component would declare more than 1 capability
1, Line, //  TODO:LPTR We should collect all source sets in the project source set, however this messes up ComponentReportRenderer 
0, Line, //  we don't want to add core classloader explicitly here. 
0, Line, //  The 'get'-getter was ignored, we can override it with the 'is'`-getter 
0, Line, // this rule is just here to ensure backwards compatibility for builds that create publications with model rules 
0, Line, //  Lock the state region, with the requested mode 
0, Line, //  Ignore private getters without annotations 
0, Line, //  Discard the node so it can be garbage collected. Some Ant tasks cache a potentially large amount of state   in fields. 
1, Line, //  TODO Only log expired workers count, log their "identity" once they are nameable/describable 
0, Line, //  for each remaining level in the relativeTo path, add a .. 
0, Line, //  Ends up with: 1 2 -> 3 <- 4 5 
0, Line, //  Not part of a normal visitor, see ClosureCreationInterceptingVerifier 
0, Line, //  Don't need to unpack the serialized failure. It will already have been reported and is not used by anything downstream of this action. 
0, Line, //  Flushing data coming only from current appending 
0, Line, // in theory this should not happen
0, Line, //  What is actually exposed 
0, Line, //  visible tasks are specified as those that have a non-empty group 
0, Line, //  Don't track publications to repositories configured without a base URL 
0, Line, //  GROOVY-3110: It may be an inner enum defined by this class itself, in which case it does not need to be   explicitly qualified by the currentClass name 
0, Line, //  Append to failures for locking and fail on version conflict 
0, Line, //  sort for determinism 
0, Line, //  Perform the work per repository 
0, Line, //  3) Set up the Antlr output directory (adding to javac inputs!) 
0, Line, //  GENERATE public <return type> <method>(Closure v) { return <method>(…, ConfigureUtil.configureUsing(v)); } 
0, Line, //  Now visit the result in order 
0, Line, //  TODO merge in IoActions
0, Line, // we need to filter at the level child runners because the suite is not doing the right thing here 
0, Line, //  So, we just ignore the exception if the dir doesn't exist anymore 
0, Line, //  block until the listener has finished notifying. 
0, Line, //  should never happen here
0, Line, //  Deduplicates the include file states, as these are often shared between source files 
0, Line, //  Currently the converter is stateless, doesn't need any external context, so for performance we return a singleton 
0, Line, //  0.9-rc-1 was broken for Java 5 
0, Line, //  Order dynamic selectors after static selectors 
1, Line, //  TODO This is not nice: work out a better way to collect the plugin requests from invoking the plugins block. 
0, Line, //  Callable<? super String> 
0, Line, //  Read logging config and setup logging 
0, Line, //  This has the downside of adding play-java-forms for all kind of play projects   including Scala based projects. Still, users can exclude the dependency if they   want/need. Maybe in the future we can enable users to have some flag to specify   if the project is Java or Scala based. 
0, Line, //  Self close parent in order to discover its children, or its target in the case of a reference 
0, Line, //  Do nothing 
0, Line, //  System types come from the system classloader and their classloader is null. 
0, Line, //  If there are different output properties compared to the previous execution, then we do have output changes 
0, Line, //  alternatively, we could return project.getLayout().files(Runnable)   would differ in at least the following ways: 1. live 2. no autowiring 
1, Line, //  TODO This is a brain-dead way to ensure that the reference project's model is ready to access 
0, Line, //  if the target was invalid 
0, Line, //  Coerce the value to the type accepted by the property setter and invoke the setter directly 
0, Line, //  release any other project locks we might happen to hold 
0, Line, //  add groovy-templates for Groovy 2.5+ 
0, Line, //  the main "Java" component 
1, Line, //  TODO - this is not quite right, eg given *,!A->A;*,!B->B the result should be B->A and A->B but will in fact be B-> and A-> 
0, Line, //  We are handling the root of the tree here 
0, Line, //  Try to use a new label 
0, Line, //  No wildcards: matches #5 above 
0, Line, //  Have not seen this node before - add its dependencies to the head of the queue and leave this   node in the queue 
0, Line, //  push back remaining bytes of multi-byte unicode character 
0, Line, //  BCPGOutputStream seems to do some internal buffering, it's unclear whether it's strictly required here though 
0, Line, //  Logging 
0, Line, // if we don't know the parent we will use the top suite  this way we always have and id to attach logging events for 
0, Line, //  the old value is a better fit than the new one, let's ignore the new one altogether 
0, Line, //  Important not to add until after it has been applied as there can be   plugins.withType() callbacks waiting to build on what the plugin did 
0, Line, //  Choose the 'main' artifact based on its type. 
0, Line, //  type1 = ? super T 
0, Line, //  whatever the exclude filter, there are no dependencies 
0, Line, //  5.x only supports up to Java 12, 5.6 was the last release 
0, Line, //  Use highest version on highest scope, keep highest scope exclusions only 
0, Line, //             new Inspector().inspectModel(result); 
0, Line, //  unboxing and boxing does the trick 
0, Line, //  Tasks graph is already calculated and tasks executed. Action or model builders can access tasks results. 
0, Line, //  From fork options 
0, Line, //  Tasks 
0, Line, //  only set a non-null task list on the operationParamsBuilder if at least one task has been given to this method,   this is needed since any non-null list, even if empty, is treated as 'execute these tasks before building the model'   this would cause an error when fetching the BuildEnvironment model 
0, Line, //  Overwrite property 
0, Line, //  the cached class loader as long as the action is executed 
0, Line, //  Defines all projections for the node   Initializes the node   Allows a mutation to setup default values for an element   Mutation action provided when an element is defined   Customisations   Post customisation default values   Post mutation validations 
0, Line, //  If these are not null, we are pessimistic (loaders asked for before locking) 
0, Line, //  Not known yet 
0, Line, //  TODO wolfs: We use `_Decorated` here, since IDEA import currently relies on this   See https://github.com/gradle/gradle/issues/8244
0, Line, //  Use the ANSIOutputStream to strip out the ANSI escape sequences. 
0, Line, //  A decorating factory 
0, Line, //  Host: x86 
0, Line, //  Exclude framework directories for GCC - they are added as system search paths but they are actually not 
1, Line, //  The very first event starts the Initializing phase   TODO - should use BuildRequestMetaData to determine the build start time 
0, Line, //  TODO: make build type configurable for components
0, Line, //  currently, we leave it to ZincScalaCompiler to also compile the Java code 
0, Line, //  Don't log 
0, Line, //  evicted, but it can still be reintegrated later in a different path.
0, Line, //  state, cachedResolvedConfiguration, and extendsFrom intentionally not copied - must re-resolve copy   copying extendsFrom could mess up dependencies when copy was re-resolved 
0, Line, //  tag::task-arg-method[] 
0, Line, //  GENERATE public Object getProperty(String name) { return getAsDynamicObject().getProperty(name); } 
0, Line, //  This method tries to minimize the number of volatile read/writes.   Do NOT try to inline the variables there. 
0, Line, //  shouldn't happen
0, Line, //  TODO: Configure 'eclipse' projects too
0, Line, //  do not delete parent dirs 
0, Line, //  unspecified 
0, Line, //  Synthesise a test for the broken configuration method 
0, Line, //  See https://blogs.msdn.microsoft.com/vcblog/2016/10/07/compiler-tools-layout-in-visual-studio-15/ 
0, Line, //  Should provide a Gradle version as parameter so this check can be more precise 
0, Line, //  We need to work with the 'String' version of the usage attribute, since this is expected for all providers by the `PreferJavaRuntimeVariant` schema 
0, Line, //  Queue this up for checking again later   This is done because we're checking what we have locally in cache, and there may be nothing   so we're queuing it back so that the next time we check in remote access. 
0, Line, //  JAR is compatible with classes or resources 
0, Line, //  Transform ProgressCompleteEvent into their corresponding progress OperationIdentifier. 
0, Line, // we expect that all options must be applicable for each task 
0, Line, //  no special validation 
0, Line, //  '\\\n' discarded from stream 
0, Line, //  The other is disambiguated by current, never consider other again 
0, Line, //  add the file name 
0, Line, //  Safety check: dispatching a message should not cause the thread to dispatch another message (eg should not do any logging) 
0, Line, //  This logger has been replaced (for example using `Gradle.useLogger()`), so don't log anything 
0, Line, // below does not help on windows environments. I was unable to get plain javadoc utility to work successfully with multiline options _in_ the options file.  at least, it will work out of the box on linux or mac environments.  on windows, the options file will have correct contents according to the javadoc spec but it may not work (the failure will be exactly the same as if we didn't replace line breaks) 
0, Line, // so that logging gets its way to the daemon log: 
0, Line, //  Only <function-call>+ <args-list> supported 
0, Line, //  Explicit flush, System.err is an auto-flushing PrintWriter unless it is replaced. 
0, Line, //  Don't need to generate a subclass
0, Line, //  Note: We can't conclude anything if the label scrolled so we leave the erasing to the parent widget. 
1, Line, //  one should really avoid using this constructor as it is totally inefficient   and reserved to spurious cases when the components have dots in names   (and this can happen if a task name contains dots)
0, Line, //  Already reported 
0, Line, //  GENERATE objectFactory.fileCollection() 
0, Line, // Is there any other parent properties?
0, Line, //  buffer is full, wait until it has been read 
0, Line, //  The same gatekeeper that opened it must close it 
1, Line, //  TODO - bust up this hierarchy and compose using interfaces instead 
0, Line, //  Write count 
0, Line, //  track the closure itself, not the action class. 
1, Line, //  Simulate a stuck worker. There's probably a way to inject this failure... 
0, Line, //  This is a performance optimization, dependency states are deduplicated 
0, Line, //  Rewrite the method call to match TransformedModelDslBacking#configure(String, Closure), which is what the delegate will be 
0, Line, //  Don't attach to any labels 
0, Line, //  Have visited this node's dependencies - add it to the end of the plan 
0, Line, //  Need gradle core to pick up ant logging adapter, AntBuilder and such 
0, Line, //  Ignore missing files 
0, Line, //  Don't care 
0, Line, //  tag::custom-task-implementation[] 
0, Line, // Find an existing matching conflict 
0, Line, //  Not present, assume no failure details 
0, Line, //  Suppress - checkstyle gets confused with type params on the outer type 
0, Line, //  Commit all changes in the working tree 
0, Line, //  Not yet supported for implicit included builds 
1, Line, //  TODO - this should be an outgoing variant of the component under test 
0, Line, //  Default behavior is to always be buildable.  Binary implementations should define what   criteria make them buildable or not. 
0, Line, //  Only merge if about the same capability, otherwise last wins 
0, Line, //  Goal has previously been achieved or is no longer required 
0, Line, //  Compare 2 dynamic selectors lexicographically 
0, Line, //  handle tree 
0, Line, //  get(<type>, <annotation>) 
1, Line, //  Add an install task   TODO - should probably not add this for all executables? 
0, Line, //  Once the root build starts configuring, we are in Configuring phase 
0, Line, //  Discard state that is no longer required 
0, Line, //  does not override equals() but hashCode() in order to cache the latter's   pre-computed value to improve performance when used in HashMaps 
0, Line, //  When this function has no parameters, we don't need to substitute parameters, so return the expression after macro expanding it   Also handle calling a zero args function, as we also don't need to substitute parameters 
0, Line, //  Use an options file to pass across application classpath 
1, Line, //  TODO:lptr why don't we check runningNodes here like we do in hasNodesRemaining()? 
0, Line, //  if the plugin has already been added 
0, Line, //  Empty RHS 
0, Line, //  If the event has no logging header, it doesn't manifest as console output. 
0, Line, //  same classes may be found in different classpath trees/jars   and we keep only the first one 
0, Line, //  We have to add these after the system properties so they can override any system properties   (identical properties later in the command line override earlier ones) 
0, Line, // we don't merge anything in the iws, yet.  I kept the logic for the sake of consistency   and compatibility with pre M4 ways of configuring IDEA information. 
0, Line, //  The last comment line is the timestamp 
0, Line, //  Don't need to lock anything until we use the caches 
0, Line, //  Handle failure 
0, Line, //  If we detect a transformation in the classpath, we need to recompile, because we could typically be facing the case where   2 entries are reversed in the order of classpath elements, and one class that was shadowing the other is now visible 
0, Line, //  Deserialize the class and parameters in the workerClassLoader (the context classloader) 
0, Line, // end of workaround. 
0, Line, //  If abortAll is set, also stop enforced tasks. 
0, Line, //  Don't map 
0, Line, //  Ignore for now 
0, Line, //  delivery was interrupted, return silently 
0, Line, //  Nothing special to check for UCRT 
0, Line, //  We have a conflict
0, Line, //  Have not visited the successor node, so add to the queue for visiting 
0, Line, //  Build events 
0, Line, //  would normally log at a level higher than (or equal to) lifecycle, but the Ant message priority is   actually lower than the set lifecycle log level 
0, Line, // Need to do parameter substitution, return the value of the expression after parameter substitutions and macro expanding the result 
0, Line, //  Prefer a selector that strictly matches the selected version
0, Line, //  Cached resolved executables 
0, Line, //  buffer was still full after non-blocking retries, now block 
0, Line, //  Capture or log all failures 
0, Line, //  If no authState has been established and this is a PUT or POST request, add preemptive authorisation 
0, Line, //  consumer didn't express any preferences, everything fits 
0, Line, //  Catch any unchecked io exceptions and add the file path for troubleshooting 
1, Line, //  Dumb terminal doesn't support ANSI control codes.   TODO - remove this when we use Terminal rather than JAnsi to render to console 
0, Line, //  Historic note: this class still uses the Groovy JsonBuilder, as it was originally developed as a Groovy class. 
1, Line, //  This is a workaround for https://github.com/gradle/gradle/issues/4241   Several early typed operations have `buildPath` property,   the value of which can only be determined after the settings file for the build has loaded.     The workaround is to buffer all operation notifications in memory until the root build's settings have loaded.   This works because all possible settings files have been evaluated by the time the root one has been.   This is not guaranteed to hold into the future.   A proper solution would be to change the operation details/results to be   truly immutable and convey values known at the time.
0, Line, //  Create a client that will not match any existing daemons, so it will always startup a new one 
0, Line, //  try the owner 
0, Line, //  Includes trailing '/' 
0, Line, //  Only share an ArtifactSet if the artifacts are not filtered by the dependency 
0, Line, //  Make sure hash codes are serializable with a single byte length 
0, Line, //  The first directory is the one created by JvmComponentPlugin.configureJvmBinaries()   to be used as the default output directory for processed resources 
1, JavaDoc, /*  * An amount is an immutable value of some quantity, such as duration or length. Each amount has a decimal value and associated units. * * TODO - need to sort out scaling when dividing or converting between units.  */
0, Line, //  For tests in default method of interface,   we might not be able to get the implementation class directly.   In this case, we need to retrieve test plan to get the real implementation class. 
0, Line, //  Just read the state region 
1, Line, //  TODO - move this to PropertyValue instead
0, Line, //  The value is true if it is an output file, false if it is a parent of an output file 
0, Line, //  Matches: task <identifier> or task(<identifier>) 
0, Line, //  Hackery

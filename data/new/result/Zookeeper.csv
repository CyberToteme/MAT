oracle, Pattern, NLP, TM, MAT, MAT_TM, MAT_NLP,Comments
1,0,0,0,0,0,0,//  BUG: Grizzly needs a doc root if you are going to register multiple adapters 
1,0,0,0,0,0,0,//  we don't need to retry this operation in the case of failure   as ZK will remove ephemeral files and we don't wanna hang   this process when closing if we cannot reconnect to ZK 
1,0,0,0,0,0,0,//  This is likely a problem, it means that file reloading is broken, probably because the   directory we are watching was deleted or otherwise became inaccessible (unmounted, permissions   changed, ???).   For now, we log an error and exit the watcher thread. 
1,0,1,1,1,1,1,//  FIXME this was originally 5 seconds, but realistically, on random/slow/virt hosts, there is no way to guarantee this 
1,0,0,0,0,0,0,//  This is a bit weird but we need to return the address and the number of   bytes (to distinguish between IPv4 and IPv6 
1,1,1,1,1,1,1,//  a bit of a hack, but delete(/) will never succeed and ensures   that the same semantics are maintained 
1,0,0,0,0,0,0,//  Everything is a go, simply start counting the ticks   WARNING: I couldn't find any wait statement on a synchronized   block that would be notified by this notifyAll() call, so   I commented it out  synchronized (this) {      notifyAll();  }   We ping twice a tick, so we only update the tick every other 
1,0,0,0,1,1,1,//  TODO(ivmaykov): Not sure if cnxn can be null here. It becomes null if channelInactive()   or exceptionCaught() trigger, but it's unclear to me if userEventTriggered() can run   after either of those. Check for null just to be safe ... 
1,0,0,0,0,0,0,//  could not create tmp directory to hold JAAS conf file : test will   fail now. 
1,0,0,1,1,1,1,//  FIXME this test is Assert.failing due to client close race condition fixing in separate patch for ZOOKEEPER-63      /**       * this test checks to see if the sessionid that was created for the       * first zookeeper client can be reused for the second one immidiately       * after the first client closes and the new client resues them.       * @throws IOException       * @throws InterruptedException       * @throws KeeperException       */ 
1,0,1,1,1,1,1,//  TODO: need to tune the default value of thread size 
1,0,1,1,1,1,1,//  TODO refactor QuorumBase to be special case of this 
1,0,0,0,0,0,0,//  This might not be 100% right, but it's only used for printing   connection info in the netty implementation so it's probably ok. 
1,0,0,0,0,0,0,//  Problem 2: Before fix, after session close the ephemeral node   was not getting deleted. But now after the fix after session close 
1,0,0,0,0,0,0,/*          * Observer should write to disk, so that the it won't request         * too old txn from the leader which may lead to getting an entire         * snapshot.         *         * However, this may degrade performance as it has to write to disk         * and do periodic snapshot which may double the memory requirements          */
1,0,0,0,0,0,0,/*          * Occasionally seen false negatives with a 5s timeout.          */
1,0,1,1,1,1,1,//  TODO - investigate why reconfig makes qps null. 
1,0,0,1,1,1,1,//  TODO: if zks.processPacket() is changed to take a ByteBuffer[],   we could implement zero-copy queueing. 
1,0,0,0,0,0,0,//  Note that this performance assumption might not hold true for architectures other than x86_64. 
1,0,0,0,0,0,0,//  Note: the new buffer size is a hint and socket implementation   is free to ignore it, so we don't verify that we get back the   same value. 
1,0,1,1,1,1,1,// TODO should this be synchronized? 
1,0,1,1,1,1,1,// TODO: use a factory rather than a switch 
1,0,1,0,1,1,1,//  XXX No need to do anything 
1,0,0,0,0,0,0,//  Session has not been re-validated ! 
1,0,1,0,0,0,0,//  It is sad that isro and srvr are used by ZooKeeper itself. Need fix this   before deprecating 4lw. 
1,0,1,1,1,1,1,//  TODO we need to figure out the security requirement for this! 
1,0,0,0,0,0,0,//  Problem 1: Follower had one extra ephemeral node /e1 
1,0,1,1,1,1,1,//  TODO: in the future, serverId should be validated for all cases, not just the extendedEphemeralTypesEnabled case   TODO: however, for now, it would be too disruptive 
1,0,0,0,0,0,0,/*              * Since requests are processed in order, we better get a response             * to the first request!              */
1,1,1,1,0,1,1,//  this is ugly, you have a better way speak up 
1,0,1,0,0,0,0,//  An authentication error occurred during authentication with the Zookeeper Server. 
1,0,1,1,1,1,1,/*  TODO: (br33d) we should either put a ConcurrentHashMap on restore()             *       or use Map on save()  */
1,0,1,1,1,1,1,//  TODO: this doesn't use a quorum verifier 
1,0,0,0,0,0,0,/*  a mocked ZK class that doesn't do client-side verification     * before/after calling removeWatches  */
1,0,1,1,1,1,1,//  this shouldn't be necessary (wrapping data with string)   but without it there are problems on the server - ie it   hangs for 30 seconds and doesn't get the data.   TODO investigate 
1,0,1,1,1,1,1,//  Try to provide hints to use about what went wrong so they can fix their configuration.   TODO: introspect about e: look for GSS information. 
1,0,1,1,1,1,1,// FIXME: I don't want to have to serialize it here and then         immediately deserialize in next processor. But I'm         not sure how else to get the txn stored into our list. 
1,0,0,0,0,0,0,// ////////////////   these internal classes are public, but should not generally be referenced. 
1,0,1,1,1,1,1,//  FIXME: IPv6 is not supported. Using something like Guava's HostAndPort          parser would be good. 
1,0,0,0,0,0,0,//  this is really a programmatic error and not something that can   happen at runtime 
1,0,0,0,1,1,1,//  We add backwards since we are pushing into the front   Only send if there's a pending watch   TODO: here we have the only remaining use of zooKeeper in   this class. It's to be eliminated! 
1,0,1,0,1,1,1,//  TODO: Rather than checking a disjunction here, should be a single member   variable or method in this class to determine whether the client is   configured to use SASL. (see also ZOOKEEPER-1455). 
1,0,1,1,1,1,1,//  TODO: maybe we should flush in the loop above every N packets/bytes?   But, how do we determine the right value for N ... 
1,0,0,0,0,0,0,//  Uh oh.  We need to upgrade before we can proceed. 
1,0,1,1,1,1,1,//  TODO: exit server at this point(?) 
1,0,0,0,0,0,0,//  only make a copy if this thread isn't already holding a lock 
1,0,0,0,0,0,0,//  Multiple bad arguments 
1,0,1,0,1,1,1,//  XXX this doesn't need to be volatile! (Should probably be final) 
1,0,0,0,0,0,0,//  test will still fail even though we just log/ignore 
1,0,1,1,1,1,1,//  FIXME ignore for now 
1,0,1,1,1,1,1,//  XXX We really should NOT need this!!!! 
1,1,1,1,1,1,1,//  XXX hack 
1,0,0,0,0,0,0,//  not sure about 3rd arg..what is it? 
1,0,1,1,1,1,1,// FIXME: need way to more cleanly serialize/deserialize exceptions 
1,0,0,0,0,0,0,//  small chance that an unexpected message was delivered    after this check, but we would catch that next time 
1,0,0,0,0,0,0,//  Warning: this will reset the x509Util 
1,1,1,1,1,1,1,//  a little hacky way to detect key type, but it works 
1,1,1,1,0,1,1,/*              * The following sequence of code is stupid! You would think that             * only sock.close() is needed, but alas, it doesn't work that way.             * If you just do sock.close() there are cases where the socket             * doesn't actually close...              */
1,0,1,1,1,1,1,//  todo not every tmp directory needs this file 
1,0,1,0,1,1,1,//  XXX This shouldn't be needed, but just in case 
1,0,1,1,1,1,1,/*  * A bunch of constants. * TODO: will get rid of it eventually.  */
1,0,1,1,1,1,1,//  TODO: can not name this method getState since Thread.getState()   already exists   It would be cleaner to make class SendThread an implementation of   Runnable 
1,0,0,0,0,0,0,//  handle below: might be harmless if the user doesn't intend to use JAAS authentication. 
1,0,1,1,1,1,1,//  Should never call this: SASL authentication is negotiated at session initiation.   TODO: consider substituting current implementation of direct ClientCnxn manipulation with   a call to this method (SASLAuthenticationProvider:handleAuthentication()) at session initiation. 
1,0,0,0,0,0,0,//  Note, we may exceed our max length by a bit when we add the last   watch in the batch. This isn't ideal, but it makes the code simpler. 
0,0,0,0,0,0,0,//  Make the snapshot directory read only 
0,0,0,0,0,0,0,//  Ensure that we can convert all valid integers to EventTypes 
0,0,0,0,0,0,0,/*  notify the client the session is closing and close/cleanup socket  */
0,0,0,0,0,0,0,//  shutdown previous zookeeper 
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#children()          */
0,0,0,0,0,0,0,/*      * Converting an observer into a participant may sometimes fail with a     * NewConfigNoQuorum exception. This test-case demonstrates the scenario.     * Current configuration is (A, B, C, D), where A, B and C are participant     * and D is an observer. Suppose that B has crashed (or never booted). If a     * reconfiguration is submitted where D is said to become a participant, it     * will fail with NewConfigNoQuorum since in this configuration, a majority     * of voters in the new configuration (any 3 voters), must be connected and     * up-to-date with the leader. An observer cannot acknowledge the history     * prefix sent during reconfiguration, and therefore it does not count towards     * these 3 required servers and the reconfiguration will be aborted. In case     * this happens, a client can achieve the same task by two reconfig commands:     * first invoke a reconfig to remove D from the configuration and then invoke a     * second command to add it back as a participant (follower). During the     * intermediate state D is a non-voting follower and can ACK the state     * transfer performed during the second reconfig command.      */
0,0,0,0,0,0,0,//  register most recent relogin attempt 
0,0,0,0,0,0,0,//  Check if client's current server is in the new list of servers 
0,0,0,0,0,0,0,//  read txnlog but this should be sufficient 
0,0,0,0,0,0,0,/*                  * Avoids running finish() twice.                  */
0,0,0,0,0,0,0,//  truncate the log 
0,0,0,0,0,0,0,/*          * Address of sender          */
0,0,0,0,0,0,0,//  We need to log the stuff that came in between the snapshot and the uptodate 
0,0,0,0,0,0,0,//  property is set to an valid int, we should get the set value 
0,0,0,0,0,0,0,//  If notification > current, replace and send messages out 
0,0,0,0,0,0,0,//  check for differences 
0,0,0,0,0,0,0,//  the clients may or may not have already reconnected   to the recovered cluster, force a check, but ignore 
0,0,0,0,0,0,0,//  zks cannot be null otherwise we would not have gotten here! 
0,0,0,0,0,0,0,//  check leader running status 
0,0,0,0,0,0,0,//  reconnect with the same session id 
0,0,0,0,0,0,0,//  delete the node in the trie.   we need to update the trie as well 
0,0,0,0,0,0,0,//  or diff 
0,0,0,0,0,0,0,//  10.10.10.4:1238, 10.10.10.3:1237, 10.10.10.2:1236 
0,0,0,0,0,0,0,//  lets assert that the first election is the leader 
0,0,0,0,0,0,0,//  for a dead peer                  
0,0,0,0,0,0,0,//  If a null Stat object is passed the create should still   succeed, but no Stat info will be returned. 
0,0,0,0,0,0,0,//  ignore connection loss 
0,0,0,0,0,0,0,//  Filter out the extra ENTRY_CREATE events that are   sometimes seen at the start. Even though we create the watcher   after the file exists, sometimes we still get a create event. 
0,0,0,0,0,0,0,//  connect to one of them 
0,0,0,0,0,0,0,//  Otherwise start worker threads to receive data. 
0,0,0,0,0,0,0,//  sets quorum sasl authentication configurations 
0,0,0,0,0,0,0,//  request.hdr is set for write requests, which are the only ones 
0,0,0,0,0,0,0,//  ensure thread is started once and only once 
0,0,0,0,0,0,0,//  Write the truststore 
0,0,0,0,0,0,0,//  This configuration section 'MyZookeeperClient', is missing from the JAAS configuration.   As a result, SASL authentication should fail, which is tested by this test (testAuth()).
0,0,0,0,0,0,0,//  find the last snapshot 
0,0,0,0,0,0,0,//  We didn't find \n, read the whole buffer into string buffer 
0,0,0,0,0,0,0,//  LocalPeerBean 
0,0,0,0,0,0,0,/*      * Listener thread      */
0,0,0,0,0,0,0,//  /e is unset, its acl should remain the same. 
0,0,0,0,0,0,0,//  good, expected that 
0,0,0,0,0,0,0,/*  The current vote for the leader. Initially me!  */
0,0,0,0,0,0,0,//  Oh well, never mind 
0,0,0,0,0,0,0,//  Width of the toster 
0,0,0,0,0,0,0,//  Verify lastProcessedZxid is set correctly 
0,0,0,0,0,0,0,//  By default, disable starting a JettyAdminServer in tests to avoid   accidentally attempting to start multiple admin servers on the 
0,0,0,0,0,0,0,/*                      * If the peer has done enough rounds, then consider joining. The thread                     * will only join if it is part of a quorum supporting the current                      * leader. Otherwise it will try again.                      */
0,0,0,0,0,0,0,/*  password is test  */
0,0,0,0,0,0,0,//  add watcher for each node and add node to collection of   watched nodes 
0,0,0,0,0,0,0,//  generate new config string 
0,0,0,0,0,0,0,//  do nothing special - stay with the current server 
0,0,0,0,0,0,0,//  Session has been re-validated 
0,0,0,0,0,0,0,//  exactly as it is now, except for role change 
0,0,0,0,0,0,0,//  make sure the watch is removed when the connection closed 
0,0,0,0,0,0,0,//  1. start up server and wait for leader election to finish 
0,0,0,0,0,0,0,//  Since SASL authentication has completed (if client is configured to do so),   outgoing packets waiting in the outgoingQueue can now be sent. 
0,0,0,0,0,0,0,//  objects holding a reference to this object. 
0,0,0,0,0,0,0,//  Handle situation of clientSection's being null: it might simply because the client does not intend to    use SASL, so not necessarily an error. 
0,0,0,0,0,0,0,//  Make sure the settings applied above before the socket was potentially upgraded to   TLS still apply. 
0,0,0,0,0,0,0,//  after restart 
0,0,0,0,0,0,0,//  Set the factor to high value so that this test case always   resync using txnlog 
0,0,0,0,0,0,0,//  Trying to load a PEM file with JKS loader should fail 
0,0,0,0,0,0,0,//  ok 
0,0,0,0,0,0,0,//  close the input stream 
0,0,0,0,0,0,0,//  lets wait for any previous leaders to die and one of our new   nodes to become the new leader 
0,0,0,0,0,0,0,//  do nothing. 
0,0,0,0,0,0,0,//  add the last logfile that is less than the zxid 
0,0,0,0,0,0,0,/*  If we've already failed one of the ops, don't bother                     * trying the rest as we know it's going to fail and it                     * would be confusing in the logfiles.                      */
0,0,0,0,0,0,0,//  waiting for child watchers to be notified 
0,0,0,0,0,0,0,//  ensure server started, give enough time, so that new leader election 
0,0,0,0,0,0,0,/*          * Proposed leader          */
0,0,0,0,0,0,0,//  snapshot files in snap dir 
0,0,0,0,0,0,0,//  If session has not been validated, there must be NO watches 
0,0,0,0,0,0,0,//  NO-OP. Adding a packet will already wake up a netty connection   so we don't need to add a dummy packet to the queue to trigger   a wake-up. 
0,0,0,0,0,0,0,//  expected behavior 
0,0,0,0,0,0,0,//  this addr won't even be used since we fake the Socket.connect 
0,0,0,0,0,0,0,//  protocolVersion 
0,0,0,0,0,0,0,//  Second address doesn't work, so we don't call onConnected() this time   StaticHostProvider should try to re-resolve the address in this case
0,0,0,0,0,0,0,/*              * Loop in which we exchange notifications until we find a leader              */
0,0,0,0,0,0,0,//  skip superhammer and clientcleanup as they are too expensive for quorum 
0,0,0,0,0,0,0,// avoid using literal IP address when security check fails 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer#     * nodeSelectionChanged(java.util.Set)      */
0,0,0,0,0,0,0,/*      * Pending sync requests      */
0,0,0,0,0,0,0,//  separate patch. 
0,0,0,0,0,0,0,// Updating version solves conflict -- order matters 
0,0,0,0,0,0,0,//  Creates principals in the KDC and adds them to a keytab file. 
0,0,0,0,0,0,0,//  If the client is asking to close the session then   mark as closing 
0,0,0,0,0,0,0,//  verify ClientCnxnSocketNetty creation 
0,0,0,0,0,0,0,//  After leader election, lastProcessedZxid will point to new epoch 
0,0,0,0,0,0,0,//  prepare for next test 
0,0,0,0,0,0,0,//  small chance that an unexpected message was delivered    after this check, but we would catch that next time    we check events 
0,0,0,0,0,0,0,//  Make delete fo fail, then verify cversion.   this doesn't happen anymore, we only set the cversion on create   LOG.info("Attempting to delete " + "/test/" + (count + 1));   doOp(logFile, OpCode.delete, "/test/" + (count + 1), dt, zk); 
0,0,0,0,0,0,0,//  Get default cipher suites from JDK 
0,0,0,0,0,0,0,//  not necessary to repeat this, expensive and not chroot related
0,0,0,0,0,0,0,//  inject problem in leader 
0,0,0,0,0,0,0,//  During startup of thread, thread name will be overridden to 
0,0,0,0,0,0,0,/*      * Make sure to pass an explicit Watcher because we could be sharing this     * zooKeeper instance with someone else.      */
0,0,0,0,0,0,0,//  make sure tostring works in both cases 
0,0,0,0,0,0,0,//  Deleting child using chRoot client. 
0,0,0,0,0,0,0,/*      * Tests that a conditional reconfig fails if the specified version doesn't correspond     * to the version of the current config.      */
0,0,0,0,0,0,0,/*          * ZOOKEEPER-1324. the leader sends the new config it must complete         *  to others inside a NEWLEADER message (see LearnerHandler where         *  the NEWLEADER message is constructed), and once it has enough         *  acks we must execute the following code so that it applies the         *  config to itself.          */
0,0,0,0,0,0,0,//  close connection 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.NodeListener#processEvent(java     * .lang.String, java.lang.String, java.util.Map)      */
0,0,0,0,0,0,0,/*                  * Processing committedRequests: check and see if the commit                 * came in for the pending request. We can only commit a                 * request when there is no other request being processed.                  */
0,0,0,0,0,0,0,//  accounted for 
0,0,0,0,0,0,0,//  ignore this one 
0,0,0,0,0,0,0,//  Zookeeper client: get username and password from JAAS conf (only used if using DIGEST-MD5). 
0,0,0,0,0,0,0,//  Packet of death! 
0,0,0,0,0,0,0,//  these tests are serial, we can speed up InterruptedException 
0,0,0,0,0,0,0,//  Add multiple child watches 
0,0,0,0,0,0,0,//  ..but still in progress, because there is a final SASL   message from server which must be received. 
0,0,0,0,0,0,0,//  watch for everyone to die 
0,0,0,0,0,0,0,// close the socket to make sure the  other side can see it being close 
0,0,0,0,0,0,0,//  Test that when we ask for recent snaps we get the number we asked for and 
0,0,0,0,0,0,0,//  from local session 
0,0,0,0,0,0,0,//  Unique identifier for each znode that we create. 
0,0,0,0,0,0,0,//  Follower is within commitLog range 
0,0,0,0,0,0,0,//  Strip off the surrounding quotes 
0,0,0,0,0,0,0,//  Global sessions handled on the leader; this call is a no-op if   not tracked as a local session so safe to call in both cases. 
0,0,0,0,0,0,0,//  were able to talk to the ensemble 
0,0,0,0,0,0,0,//  now lets kill the leader 
0,0,0,0,0,0,0,//  ignore duplicate create 
0,0,0,0,0,0,0,//  Since for each snapshot we have a log file with same zxid, expect same # logs as snaps to be kept 
0,0,0,0,0,0,0,//  should never be null but just to make   findbugs happy 
0,0,0,0,0,0,0,/*                      * When we call put later, if the directBuffer is to                     * small to hold everything, nothing will be copied,                     * so we've got to slice the buffer if it's too big.                      */
0,0,0,0,0,0,0,//  Stop selecting this key while processing on its   connection 
0,0,0,0,0,0,0,//  and restart leader election if config changed. 
0,0,0,0,0,0,0,//  send out the kill signal 
0,0,0,0,0,0,0,//  Propose /foo1 update 
0,0,0,0,0,0,0,//  min is higher   max is lower 
0,0,0,0,0,0,0,//  3. SendThread has not created the authenticating object yet, 
0,0,0,0,0,0,0,//  than 3. 
0,0,0,0,0,0,0,//  Command line args non-null.  Run what was passed. 
0,0,0,0,0,0,0,//  First, filter out votes from unheard-from machines. Then   make the views consistent. Sometimes peers will have 
0,0,0,0,0,0,0,//  Make sure the vote is reset to -1 after shutdown. 
0,0,0,0,0,0,0,//  we run through 100 snapshots (not all of them)   if we cannot get it running within 100 snapshots   we should  give up 
0,0,0,0,0,0,0,//  Verify the data in the first transaction 
0,0,0,0,0,0,0,//  In the DIFF case we don't need to do a snapshot because the transactions will sync on top of any existing snapshot   For SNAP and TRUNC the snapshot is needed to save that history 
0,0,0,0,0,0,0,//  this will cause everything to shutdown on   this learner handler and will help notify   the learner/observer instantaneously
0,0,0,0,0,0,0,//  there is only server in the quorum -- run as standalone 
0,0,0,0,0,0,0,//  Don't log an error for shutdown.
0,0,0,0,0,0,0,//  assuming that a version uniquely identifies a configuration, so if   version is the same, nothing to do here. 
0,0,1,0,0,0,0,//  third party customized getAppConfigurationEntry could throw IllegalArgumentException when JAAS   configuration isn't set. We can reevaluate whether to catch RuntimeException instead when more    different types of RuntimeException found 
0,0,0,0,0,0,0,//  Number of machines stayed the same, my server is not in the new 
0,0,0,0,0,0,0,//  skip the proposals the peer already has 
0,0,0,0,0,0,0,//  for Learner): 
0,0,0,0,0,0,0,//  Wait for request completion infinitely 
0,0,0,0,0,0,0,//  Id 
0,0,0,0,0,0,0,//  see ZOOKEEPER-3320 for more details 
0,0,0,0,0,0,0,// no candidate acked p, return the best candidate found so far 
0,0,0,0,0,0,0,//  "Connection reset by peer" 
0,0,0,0,0,0,0,//  convert from a server path to a client path 
0,0,0,0,0,0,0,//  The first time we are configured, it is just to tell   us which machine we are 
0,0,0,0,0,0,0,//  parts[i] == "host:leaderPort:leaderElectionPort;clientPort" 
0,0,0,0,0,0,0,//  does not send anything back when it is done. 
0,0,0,0,0,0,0,//  Convert windows path to UNIX to avoid problems with "\" 
0,0,0,0,0,0,0,//  reconfigMode = false (next shouldn't return null). 
0,0,0,0,0,0,0,//  closing so this is expected 
0,0,0,0,0,0,0,//  Watch status of ZooKeeper server. It will do a graceful shutdown 
0,0,0,0,0,0,0,//  lets start servers 2, 3, 4 with the new config 
0,0,0,0,0,0,0,//  remove hosts number 6 and 7 (the currently last two in the list) 
0,0,0,0,0,0,0,/*      * This is a simple test - try to connect two clients to a server     * accepting a maximum of one connection from each address. Check that     * only one is accepted. Close that connection, and check that the other     * eventually connects.     *     * There is a possibility of a false positive here, as when zk2 is tested     * for having connected it might not have been given enough time, and finish     * connecting after the test is done. Since the     * server doesn't tell the client why it hasn't connected, there's no     * obvious way to detect the difference.      */
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#getSessionTimeout()      */
0,0,0,0,0,0,0,//  Only the root path can end in a /, so strip it off every other prefix 
0,0,0,0,0,0,0,//  this server wasn't around during the configuration change   we should check that it is able to connect, finds out   about the change and becomes an observer. 
0,0,0,0,0,0,0,//  At this point, there might still be new packets appended to outgoingQueue. 
0,0,0,0,0,0,0,/*              * We no longer process NEWLEADER ack with this method. However,             * the learner sends an ack back to the leader after it gets             * UPTODATE, so we just ignore the message.              */
0,0,0,0,0,0,0,/*         * I'm done so joining.         */
0,0,0,0,0,0,0,//  Disable receiving data for all open connections ... 
0,0,0,0,0,0,0,//  important for x-DC scenarios. 
0,0,0,0,0,0,0,//  now make environment for client hang 
0,0,0,0,0,0,0,//  servers from the old list that appear in the new list 
0,0,0,0,0,0,0,//  simulate log file 
0,0,0,0,0,0,0,//  Zxids should always be in order for write requests 
0,0,0,0,0,0,0,//  indicates that a reconfig just committed 
0,0,0,0,0,0,0,//  Start up a new instance 
0,0,0,0,0,0,0,//  Check that all clients connect properly 
0,0,0,0,0,0,0,//  If preAllocSize is positive and we are within 4KB of the known end of the file calculate a new file size 
0,0,0,0,0,0,0,//  determine client principal from subject. 
0,0,0,0,0,0,0,//  superuser: use Java system property for password, if available. 
0,0,0,0,0,0,0,//  'B' 
0,0,0,0,0,0,0,//  consider as error
0,0,0,0,0,0,0,// good, wanted to see that, let's make sure we ran out of time 
0,0,0,0,0,0,0,//  create transactions to create the snapshot with create/delete pattern 
0,0,0,0,0,0,0,//  Construct a ConcurrentHashSet using a ConcurrentHashMap 
0,0,0,0,0,0,0,// 	    t3.start(); 
0,0,0,0,0,0,0,//  Should not happen, because we check for IPv6 address above 
0,0,0,0,0,0,0,// Let's make sure that we hit the code that ran the real assertion above 
0,0,0,0,0,0,0,//  together like in testNextGoesRound() 
0,0,0,0,0,0,0,//  The synchronized block here is for two purpose:   1. synchronize with the final cleanup() in SendThread.run() to avoid race   2. synchronized against each packet. So if a closeSession packet is added, 
0,0,0,0,0,0,0,//   "modprinc -maxlife 3mins <principal>" in kadmin. 
0,0,0,0,0,0,0,//  got results 
0,0,0,0,0,0,0,//  verify super with correct pass success 
0,0,0,0,0,0,0,//  cool this is what we want 
0,0,0,0,0,0,0,//  continuation 
0,0,0,0,0,0,0,//  Node 1 must be started first, before quorum is formed, to trigger the attempted invalid connection to 3 
0,0,0,0,0,0,0,//  Initialize with null vote 
0,0,0,0,0,0,0,//  Send back the ping with our session data 
0,0,0,0,0,0,0,//  We send DIFF to (6,0) and forward any packet starting at (4,1) 
0,0,0,0,0,0,0,/*      * ZOOKEEPER-2201 - OutputArchive.writeRecord can block for long periods of     * time, we must call it outside of the node lock.     * We call tree.serialize, which calls our modified writeRecord method that     * blocks until it can verify that a separate thread can lock the DataNode     * currently being written, i.e. that DataTree.serializeNode does not hold     * the DataNode lock while calling OutputArchive.writeRecord.      */
0,0,0,0,0,0,0,//  check to see if this user is in the user password database. 
0,0,0,0,0,0,0,//  during the tests we run with 100K prealloc in the logs.   on windows systems prealloc of 64M was seen to take ~15seconds   resulting in test Assert.failure (client timeout on first session).   set env and directly in order to handle static init/gc issues 
0,0,0,0,0,0,0,//  start two servers to form a quorum; client should detect this and 
0,0,0,0,0,0,0,//  we don't have an option specified.   just delete whole quota node 
0,0,0,0,0,0,0,/*          * We return true if one of the following three cases hold:         * 1- New epoch is higher         * 2- New epoch is the same as current epoch, but new zxid is higher         * 3- New epoch is the same as current epoch, new zxid is the same         *  as current zxid, but server id is higher.          */
0,0,0,0,0,0,0,// need to get the PID number of the process first 
0,0,0,0,0,0,0,//  Propose an update 
0,0,0,0,0,0,0,// Delete the leaves first and eventually get rid of the root  Delete all versions of the node with -1. 
0,0,0,0,0,0,0,//  child channels options 
0,0,0,0,0,0,0,//  ok lets find the leader and kill everything else, we have a few 
0,0,0,0,0,0,0,//  Prior to ZOOKEEPER-2249, attempting to pad in association with the second transaction will corrupt the first 
0,0,0,0,0,0,0,//  ensure no late arrivals 
0,0,0,0,0,0,0,//  count down to avoid infinite blocking call due to this latch, if   any. 
0,0,0,0,0,0,0,//  ignoring the interrupt 
0,0,0,0,0,0,0,// 3. Upgrade peer0,1,2 with quorum.auth.enableSasl=true and 
0,0,0,0,0,0,0,//  be propagated to the other servers in the ensemble. 
0,0,0,0,0,0,0,//  property is set but with white spaces 
0,0,0,0,0,0,0,//  generate old config string 
0,0,0,0,0,0,0,//  Authentication exchange has completed 
0,0,0,0,0,0,0,// server.# 
0,0,0,0,0,0,0,//  Create read-only server but don't start it immediately 
0,0,0,0,0,0,0,// Each op in a multi-op must have the same zxid! 
0,0,0,0,0,0,0,/*          * Write id (3.4.6 protocol). This previously caused a NPE in         * QuorumCnxManager.          */
0,0,0,0,0,0,0,/*         * Lists what threads haven't joined. A thread doesn't join if        * it hasn't decided upon a leader yet. It can happen that a        * peer is slow or disconnected, and it can take longer to        * nominate and connect to the current leader.         */
0,0,0,0,0,0,0,/*      * For ZOOKEEPER-1732 verify that it is possible to join an ensemble with     * inconsistent election round information.      */
0,0,0,0,0,0,0,/*          * if local session is not enabled or it used to be our local session         * throw sessions expires          */
0,0,0,0,1,1,1,//  things needed for waitForEpochAck to run (usually in leader.lead(), but we're not running leader here) 
0,0,0,0,0,0,0,//  same configs, and they should be equal to the config we get from QuorumPeer. 
0,0,0,0,0,0,0,//  Start sending packets 
0,0,0,0,0,0,0,//  before create otw race 
0,0,0,0,0,0,0,//  determined by whether we are currently throttled or not 
0,0,0,0,0,0,0,/*  Does it start with an IPv6 literal?  */
0,0,0,0,0,0,0,//  of expiring the session. 
0,0,0,0,0,0,0,//  don't call setup - we don't want to reassign ports/dirs, etc... 
0,0,0,0,0,0,0,//  If the thread is in the the grace period, interrupt   to come out of waiting. 
0,0,0,0,0,0,0,//  ... and close connection 
0,0,0,0,0,0,0,//  verify no auth 
0,0,0,0,0,0,0,// Expected 
0,0,0,0,0,0,0,//  shut the leader down 
0,0,0,0,0,0,0,// in milliseconds, socket should connect/read within this period otherwise SocketTimeoutException 
0,0,0,0,0,0,0,//  LOG.warn("Proposed leader: " +   proposedLeader); 
0,0,0,0,0,0,0,//  When it comes to this point, it guarantees that later queued   packet to outgoingQueue will be notified of death. 
0,0,0,0,0,0,0,//  get leader 
0,0,0,0,0,0,0,//  Verify that we have at least NUM_MESSAGES / SNAPCOUNT txnlog 
0,0,0,0,0,0,0,//  standalone starts with 0 epoch while quorum starts with 1 
0,0,0,0,0,0,0,/*                              * Try to obtain a challenge only if does not have                             * one yet                              */
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getParent()          */
0,0,0,0,0,0,0,//  Now we're adding it back as a participant and everything should work. 
0,0,0,0,0,0,0,//  Handle race condition where a node is listed   but gets deleted before it can be queried   ignore 
0,0,0,0,0,0,0,//  load the epochs 
0,0,0,0,0,0,0,//  resolve() call keeps the size of provider 
0,0,0,0,0,0,0,/*      * returns the string that maps to this stat tracking.      */
0,0,0,0,0,0,0,//  In the tests below, a "Strict" server means a UnifiedServerSocket that   does not allow plaintext connections (in other words, it's SSL-only).   A "Non Strict" server means a UnifiedServerSocket that allows both   plaintext and SSL incoming connections. 
0,0,0,0,0,0,0,//  If we get notified about possibly missed events, reload the key store / trust store just to be sure. 
0,0,0,0,0,0,0,//  NOP 
0,0,0,0,0,0,0,//  modify server's client port 
0,0,0,0,0,0,0,//  Receive challenge and store somewhere else 
0,0,0,0,0,0,0,//  Test that the path string is validated 
0,0,0,0,0,0,0,//  Set the margin 
0,0,0,0,0,0,0,//  2: inject network problem in one of the follower 
0,0,0,0,0,0,0,//  This is the "auth" id, so we have to expand it to the   authenticated ids of the requestor 
0,0,0,0,0,0,0,//  processResult() is used by ClientCnxn's sendThread to respond to   data[] contains the Zookeeper Server's SASL token.   ctx is the ZooKeeperSaslClient object. We use this object's respondToServer() method   to reply to the Zookeeper Server's SASL token 
0,0,0,0,0,0,0,//  Now we just start watching the assignments directory 
0,0,1,1,0,1,1,//  try to delete it now as we have done with the created file, why to   wait for deleteOnExit() deletion 
0,0,0,0,0,0,0,//  Leader.NEWLEADER 
0,0,0,0,0,0,0,//  8. check the node exist in previous leader but not others 
0,0,0,0,0,0,0,//  start with the initLimit, once the ack is processed   in LearnerHandler switch to the syncLimit 
0,0,0,0,0,0,0,//  Watcher function doesn't exists for the specified params 
0,0,0,0,0,0,0,//  See ZOOKEEPER-1161 for more details 
0,0,0,0,0,0,0,//  Divide the new servers into oldServers that were in the previous list 
0,0,0,0,0,0,0,/*              * Higher id              */
0,0,0,0,0,0,0,//  EventWatch is a simple, immutable type, so all we need to do   is make sure we can create all possible combinations of values. 
0,0,0,0,0,0,0,//  kill anything that was removed for the children 
0,0,0,0,0,0,0,//  Let the notifications timeout 
0,0,0,0,0,0,0,//  success 
0,0,0,0,0,0,0,//  test that all servers have: 
0,0,0,0,0,0,0,//  Force leader to use snapshot to sync with follower 
0,0,0,0,0,0,0,// No quorum in new config (1/2) 
0,0,0,0,0,0,0,//  If p is a reconfiguration, multiple other operations may be ready to be committed,   since operations wait for different sets of acks.   Currently we only permit one outstanding reconfiguration at a time   such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is   pending all wait for a quorum of old and new config, so its not possible to get enough acks   for an operation without getting enough acks for preceding ops. But in the future if multiple   concurrent reconfigs are allowed, this can happen and then we need to check whether some pending   ops may already have enough acks and can be committed, which is what this code does. 
0,0,0,0,0,0,0,// LOG.info("Defaulting to majority quorums"); 
0,0,0,0,0,0,0,//  When increment ... 
0,0,0,0,0,0,0,//  Check if we shutdown or doIO() closed this connection 
0,0,0,0,0,0,0,// Verify tree deleted 
0,0,0,0,0,0,0,//  used by ClientCnxn to know whether to emit a SASL-related event: either AuthFailed or SaslAuthenticated, 
0,0,0,0,0,0,0,//  We send SNAP 
0,0,0,0,0,0,0,//  If there isn't any version associated with the filename,   the default version is 0. 
0,0,0,0,0,0,0,//  and the stat and quota nodes 
0,0,0,0,0,0,0,/*  followers in its view                                     */
0,0,0,0,0,0,0,//  verify that joiner has up-to-date config, including all four servers. 
0,0,0,0,0,0,0,// //  // If you update the configuration parameters be sure  // to update the "conf" 4letter word  // 
0,0,0,0,0,0,0,//  ignore - can't find the path, will output "n/a" instead 
0,0,0,0,0,0,0,//  Assert that commands are getting forwarded correctly 
0,0,0,0,0,0,0,//  is disabled 
0,0,0,0,0,0,0,//  only previously existing records need to be rolled back. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer#     * getTitle()      */
0,0,0,0,0,0,0,//  Number of machines becomes smaller, my server is in the new cluster 
0,0,0,0,0,0,0,//  Just put the description in 
0,0,0,0,0,0,0,//  cleanup <path vs watchlist> 
0,0,0,0,0,0,0,//  Test that when asking for more snaps than we created, we still only get snaps 
0,0,0,0,0,0,0,//  Only include votes from machines that we heard from 
0,0,0,0,0,0,0,//  Integer representation of value 
0,0,0,0,0,0,0,//  1 day 
0,0,0,0,0,0,0,//  make sure a different leader was elected 
0,0,0,0,0,0,0,//  Populate DIGEST-MD5 user -> password map with JAAS configuration entries from the "QuorumServer" section.   Usernames are distinguished from other options by prefixing the username with a "user_" prefix. 
0,0,0,0,0,0,0,//  r[0] == "host:clientPort"   r[1] == "host:leaderPort:leaderElectionPort"   Appending ";clientPort" 
0,0,0,0,0,0,0,//  we do this in an attempt to ensure that not all of the servers   in the ensemble take a snapshot at the same time 
0,0,0,0,0,0,0,//  Since this is already a committed proposal, we need to follow 
0,0,0,0,0,0,0,//  required for compilation from C++ 
0,0,0,0,0,0,0,/*      * Mapping from Peer to Thread number      */
0,0,0,0,0,0,0,//  eof reached 
0,0,0,0,0,0,0,//  not a directory 
0,0,0,0,0,0,0,//  Don't expect to get the same stats for different creates. 
0,0,0,0,0,0,0,//  When reset ... 
0,0,0,0,0,0,0,//  Client-initiated renegotiation in TLS is unsafe and   allows MITM attacks, so we should disable it unless   it was explicitly enabled by the user.   A brief summary of the issue can be found at   https://www.ietf.org/proceedings/76/slides/tls-7.pdf 
0,0,0,0,0,0,0,//  Make space for length 
0,0,0,0,0,0,0,//  Peer has zxid in txnlog range 
0,0,0,0,0,0,0,//  check watches 
0,0,0,0,0,0,0,//  element could be removed by poll() 
0,0,0,0,0,0,0,//  that is rather innocuous. 
0,0,0,0,0,0,0,//  Log warning message if txn comes out-of-order 
0,0,0,0,0,0,0,//  reset acl (back to open) and verify accessible again 
0,0,0,0,0,0,0,/*                      * The leader executes the following block, which essentially shuts down                     * the peer if it is not the last round.                       */
0,0,0,0,0,0,0,//  Expiry time is (now/cnxnTimeout + 1)*cnxnTimeout   Range is (now + cnxnTimeout) to (now + 2*cnxnTimeout)   Add 1s buffer to be safe. 
0,0,0,0,0,0,0,//  currently shouldn't happen since there are only 2 learner types 
0,0,0,0,0,0,0,//  setup redirect out/err streams to get System.in/err, use this judiciously!   get current err 
0,0,0,0,0,0,0,//  Only participant need to get outstanding proposals 
0,0,0,0,0,0,0,// corrupting the data 
0,0,0,0,0,0,0,//  254 
0,0,0,0,0,0,0,//  Give things time to report; 
0,0,0,0,0,0,0,//  if we have a loopback and it has an address use it 
0,0,0,0,0,0,0,/*                                  * If this server is not looking, but the one that sent the ack                                 * is looking, then send back what it believes to be the leader.                                  */
0,0,0,0,0,0,0,// find out who is the leader and kill it 
0,0,0,0,0,0,0,//  port in static config file. 
0,0,0,0,0,0,0,//  Sketchy: We assume there will be a leader (probably us) in 3 seconds. 
0,0,0,0,0,0,0,//  Leader asks for epoch (mocking Leader.lead behavior)   First add to connectingFollowers 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorNodeManager#setData     * (java.lang.String, java.lang.String)      */
0,0,0,0,0,0,0,//  It's all over 
0,0,0,0,0,0,0,//  Test stat and watch of non existent node 
0,0,0,0,0,0,0,//  No need to synchronize since cnxns is backed by a ConcurrentHashMap 
0,0,0,0,0,0,0,//  quorum members 
0,0,0,0,0,0,0,//  The change should not have happened yet, since we haven't committed 
0,0,0,0,0,0,0,//  since they can't complete the reconfig 
0,0,0,0,0,0,0,//  Revocation checking is only supported with the PKIX algorithm 
0,0,1,0,0,0,0,/*      * This test wouldn't create any dynamic config.     * However, it adds a "clientPort=XXX" in static config file.     * It checks the standard way of standalone mode.      */
0,0,0,0,0,0,0,//  The stat parameter should be optional. 
0,0,0,0,0,0,0,/*  Create  */
0,0,0,0,0,0,0,//  if the weights are not above zero, things will get messed up 
0,0,0,0,0,0,0,//  Try to load a non-protected private key while providing a password 
0,0,0,0,0,0,0,/*          * Since Configuration initializes the key store and trust store related         * configuration from system property. Reading property from         * configuration will be same reading from system property          */
0,0,0,0,0,0,0,//  not able to truncate the log 
0,0,0,0,0,0,0,//  No more packets to send: turn off write interest flag.   Will be turned on later by a later call to enableWrite(),   from within ZooKeeperSaslClient (if client is configured   to attempt SASL authentication), or in either doIO() or   in doTransport() if not. 
0,0,0,0,0,0,0,//  If we're testing a follower, also check the session id on the 
0,0,0,0,0,0,0,//  I'm not in the view 
0,0,0,1,0,1,1,//  perhaps this is a V0 Create 
0,0,0,0,0,0,0,//  Since this is a rough sanity check, add some padding to maxBuffer to   make up for extra fields, etc. (otherwise e.g. clients may be able to   write buffers larger than we can read from disk!) 
0,0,0,0,0,0,0,//  Submit request directly to leader 
0,0,0,0,0,0,0,//  add the n recent snap files for assertion 
0,0,0,0,0,0,0,//  Update lastCommitted and Db's zxid to a value representing the new epoch 
0,0,1,0,0,0,0,//  this is an unlikely edge case, but check it just in case 
0,0,0,0,0,0,0,//  verify ClientCnxnSocketNIO creation 
0,0,0,0,0,0,0,//  since we have already acked an epoch equal to the leaders, we cannot ack   again, but we still need to send our lastZxid to the leader so that we can   sync with it if it does assume leadership of the epoch.   the -1 indicates that this reply should not count as an ack for the new epoch 
0,0,0,0,0,0,0,//  Here we create 3000 znodes 
0,0,0,0,0,0,0,//  Start the servers with a static config file, without a dynamic config file. 
0,0,1,0,0,0,0,//  This tests the case where ZK ensemble does not have the super user's password configured.   Reconfig should fail as the super user has to be explicitly configured via   zookeeper.DigestAuthenticationProvider.superDigest. 
0,0,0,0,0,0,0,//  Cut the connection, so the server will create closeSession as part 
0,0,0,0,0,0,0,//  Send diff when we see the follower's zxid in our history 
0,0,0,0,0,0,0,//  Peer has zxid (3, 1) 
0,0,0,0,0,0,0,//  Now check that other commands don't blow everything up 
0,0,0,0,0,0,0,//  RFC 2818, 3.1. Server Identity   "...Names may contain the wildcard   character * which is considered to match any single domain name   component or component fragment..."   Based on this statement presuming only singular wildcard is legal 
0,0,0,0,0,0,0,//  found path watcher 
0,0,0,1,0,1,1,//  we'll catch this later if it does happen after timeout, so   why waste the time on poll
0,0,0,0,0,0,0,//  override the defaults 
0,0,0,0,0,0,0,//  before expiration). 
0,0,0,0,0,0,0,//  determine how long to sleep from looking at ticket's expiry.   We should not allow the ticket to expire, but we should take into consideration   MIN_TIME_BEFORE_RELOGIN. Will not sleep less than MIN_TIME_BEFORE_RELOGIN, unless doing so   would cause ticket expiration. 
0,0,0,0,0,0,0,//  This is a relatively common exception that we can't avoid 
0,0,0,0,0,0,0,//  null StoreFileType means 'autodetect from file extension' 
0,0,0,0,0,0,0,//  When local flag is true, remove watchers for the given path   irrespective of rc. Otherwise shouldn't remove watchers locally   when sees failure from server. 
0,0,0,0,0,0,0,//  Queue up any outstanding requests enabling the receipt of   new requests 
0,0,0,0,0,0,0,//  (this is twice the timeout used in Leader#getEpochToPropose) 
0,0,0,0,0,0,0,//  Make create to fail, then verify cversion. 
0,0,0,0,0,0,0,//  n recent snap shots 
0,0,0,0,0,0,0,/*  Sequence numbers for messages  */
0,0,0,0,0,0,0,//  is also auth enabled while enabling quorum server require sasl. 
0,0,0,0,0,0,0,// clear up the kerberos state. But the tokens are not cleared! As per  the Java kerberos login module code, only the kerberos credentials 
0,0,0,0,0,0,0,//  if this is not in cnxns then it's already closed 
0,0,0,0,0,0,0,//  if \n is first char in buffer, leave the string buffer empty 
0,0,0,0,0,0,0,//  wait for new servers to be up running 
0,0,0,0,0,0,0,//  check and make sure the change is persisted 
0,0,0,0,0,0,0,//  verify super can do anything and ignores ACLs 
0,0,0,0,0,0,0,/*                              * Do nothing, just try again                              */
0,0,0,0,0,0,0,//  Round-robin assign this connection to a selector thread 
0,0,0,0,0,0,0,//  Warn about inconsistent peer type 
0,0,0,0,0,0,0,//  Text area for the message 
0,0,0,0,0,0,0,/*          * Start mock server 2          */
0,0,0,0,0,0,0,/*                                  * Global variable keeping track of                                  * how many peers have successfully                                  * joined.                                  */
0,0,0,0,0,0,0,/*  set socket linger to false, so that socket close does not block  */
0,0,0,0,0,0,0,//  clear the buf so we don't get something we read before we sought   number of entries skipped to get to the end of the iterator, less the number skipped to get to the start 
0,0,0,0,0,0,0,/*  Test that the majority quorum verifier only counts votes from  */
0,0,0,0,0,0,0,//  Use BufferedOutputStream to reduce the number of IP packets. This is 
0,0,0,0,0,0,0,//  the new server's config is going to include itself and the current leader 
0,0,0,0,0,0,0,//  verify that the truncation and subsequent append were processed 
0,0,0,0,0,0,0,//  client login 
0,0,0,0,0,0,0,//  We take advantage of the limited size of the length to look   for cmds. They are all 4-bytes which fits inside of an int 
0,0,0,0,0,0,0,//  add previously existing records back. 
0,0,0,0,0,0,0,//  now that the ack has been processed expect the syncLimit 
0,0,0,0,0,0,0,/*      * Determine how much time a process has to wait once it believes that it     * has reached the end of leader election.      */
0,0,0,0,0,0,0,//  if this Assert.fails it means we are not cleaning up after the closed   sessions. 
0,0,0,0,0,0,0,//  We might consider changing the processor behaviour of    Observers to, for example, remove the disk sync requirements.   Currently, they behave almost exactly the same as followers. 
0,0,0,0,0,0,0,//  The available port range that we use stays away from the ephemeral port   range, which the OS will assign to client socket connections.  We can't   coordinate with the OS on the assignment of those ports, so it's best to   stay out of that range to avoid conflicts.  Typical ranges for ephemeral   ports are:   - IANA suggests 49152 - 65535   - Linux typically uses 32768 - 61000   - FreeBSD modern versions typically use the IANA suggested range   - Windows modern versions typically use the IANA suggested range 
0,0,0,0,0,0,0,//  check for more than 2 children --   if zookeeper_stats and zookeeper_qutoas   are not the children then this path   is an ancestor of some path that 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event     * .ListSelectionEvent)      */
0,0,0,0,0,0,0,//  Generate transaction so we will have some txnlog 
0,0,0,0,0,0,0,//  Each session should see its cxids in order 
0,0,0,0,0,0,0,//  let qpconfig parse the file and then pull the stuff we are   interested in 
0,0,0,0,0,0,0,//  Look through the logs for output that indicates the falseLeader is LEADING, then LOOKING, then FOLLOWING 
0,0,0,0,0,0,0,//  in general we will see 1 connection from each   host, setting the initial cap to 2 allows us   to minimize mem usage in the common case   of 1 entry --  we need to set the initial cap   to 2 to avoid rehash when the first entry is added 
0,0,0,0,0,0,0,//  We use the order array to preserve the order of the commands   for help. The hashmap will not preserver order. (It may be overkill.) 
0,0,0,0,0,0,0,//  DIFF only 
0,0,0,0,0,0,0,/*  String subreport = reads + " "                                + (((double) rlatency) / reads) + " " + writes                                + " " + (((double) wlatency / writes));  */
0,0,0,0,0,0,0,//  Try creating some data. 
0,0,0,0,0,0,0,/*  * <p> * Abstraction that interprets the <code>ephemeralOwner</code> field of a ZNode. Originally, * the ephemeralOwner noted that a ZNode is ephemeral and which session created the node. * Through an optional system property (<code>zookeeper.extendedTypesEnabled</code>) "extended" * features such as TTL Nodes can be enabled. Special bits of the ephemeralOwner are used to * denote which feature is enabled and the remaining bits of the ephemeralOwner are feature * specific. * </p> * <p> * <p> * When the system property <code>zookeeper.extendedTypesEnabled</code> is true, extended types * are enabled. An extended ephemeralOwner is defined as an ephemeralOwner whose high 8 bits are * set (<code>0xff00000000000000L</code>). The two bytes that follow the high 8 bits are * used to denote which extended feature the ephemeralOwner represents. The remaining 5 bytes are * used by the feature for whatever purpose is needed * </p> * <p> * <p> * Currently, the only extended feature is TTL Nodes. It is denoted by the extended feature value of 0. * i.e. for TTL Nodes, the ephemeralOwner has the high byte set to 0xff and the next 2 bytes are 0 followed * by 5 bytes that represent the TTL value in milliseconds. So, an ephemeralOwner with a TTL value of 1 * millisecond is: <code>0xff00000000000001</code>. * </p> * <p> * <p> * To add new extended features: a) Add a new name to the enum, b) define a constant EXTENDED_BIT_XXXX that's next * in line (after TTLs, that would be <code>0x0001</code>), c) add a mapping to the extendedFeatureMap via the static * initializer * </p> * <p> * <p> * NOTE: "Container" nodes technically are extended types but as it was implemented before this feature they are * denoted specially. An ephemeral owner with only the high bit set (<code>0x8000000000000000L</code>) is by definition * a container node (irrespective of whether or not extended types are enabled). * </p>  */
0,0,0,0,0,0,0,/*  null StoreFileType means 'autodetect from file extension'  */
0,0,0,0,0,0,0,//  Recovery mode 
0,0,0,0,0,0,0,//  For backward compatibility test, some tests create dynamic configuration   without setting client port. 
0,0,0,0,0,0,0,//  ZOOKEEPER-2693 disables all 4lw by default. 
0,0,0,0,0,0,0,// reconfigure out leader and follower 1. Remaining follower 
0,0,0,0,0,0,0,//  and newServers that were not in the previous list 
0,0,0,0,0,0,0,//  zkServer has been started. So we don't need to start it again in secureCnxnFactory. 
0,0,0,0,0,0,0,//  Keep track of the latest zxid which already queued 
0,0,0,0,0,0,0,//  clear data structures used for auth 
0,0,0,0,0,0,0,//  Client is configured to use a valid login Configuration, so   authentication is either in progress, successful, or failed. 
0,0,0,0,0,0,0,//  check 
0,0,0,0,0,0,0,// The old port should be clear at this stage 
0,0,0,0,0,0,0,//  enable it if disabled 
0,0,0,0,0,0,0,//  Unlike with Krb5LoginModule, we don't do any actual login or credential passing here: authentication to Zookeeper   is done later, through the SASLClient object. 
0,0,0,0,0,0,0,//  The synchronized is to prevent the race on shared variable "sslEngine".   Basically we only need to create it once. 
0,0,0,0,0,0,0,//  Bring it back 
0,0,0,0,0,0,0,//  Do trigger an event to make sure that we do not get 
0,0,0,0,0,0,0,//  create session with min value 
0,0,0,0,0,0,0,//  Peer has newer zxid 
0,0,0,0,0,0,0,//  Height of the toster 
0,0,0,0,0,0,0,/*  we are going to say we last acked epoch 20  */
0,0,0,0,0,0,0,//  setup channel, variables, connection, etc. 
0,0,0,0,0,0,0,//  ZOOKEEPER-569:   If no votes are received for live peers, reset to voting    for ourselves as otherwise we may hang on to a vote  
0,0,0,0,0,0,0,//  this lock guarantees that channel won't be assigned after cleanup(). 
0,0,0,0,0,0,0,//  interval. 
0,0,1,0,0,0,0,//  maintain semantics even in chroot case   specifically - root cannot be deleted   I think this makes sense even in chroot case. 
0,0,0,0,0,0,0,//  pzxid updated with deleteNode on higher zxid 
0,0,0,0,0,0,0,//  make sure the leader has the subsequent changes that were made while it was offline 
0,0,0,0,0,0,0,//  Validate that we don't see any txn from the first session 
0,0,0,0,0,0,0,//  If not null then shutdown this leader 
0,0,0,0,0,0,0,// leader election time, unless the designated leader fails                              
0,0,0,0,0,0,0,//  CommmitedLog is empty, we will use txnlog up to lastProcessZxid 
0,0,0,0,0,0,0,//  Kill server 1 to avoid it interferences with FLE of the quorum {2, 3, 4}. 
0,0,0,0,0,0,0,//  let's be conservative on the typical number of children 
0,0,0,0,0,0,0,//  We take advantage of the limited size of the length to look 
0,0,0,0,0,0,0,//  The create will trigger the get children and the exist   watches 
0,0,0,0,0,0,0,//  There should be 2000 create requests 
0,0,0,0,0,0,0,//  only take in the first 3 servers as old quorum config. 
0,0,0,0,0,0,0,/*  Delete of a node folowed by an update of the (now) deleted node  */
0,0,0,0,0,0,0,//  Convert WatchedEvent to a type that can be sent over the wire 
0,0,0,0,0,0,0,//  throws a LoginException: see startConnect() below. 
0,0,0,0,0,0,0,//  send 0 if session is no 
0,0,0,0,0,0,0,//  This method gets the version from the end of dynamic file name.   For example, "zoo.cfg.dynamic.0" returns initial version "0".   "zoo.cfg.dynamic.1001" returns version of hex number "0x1001".   If a dynamic file name doesn't have any version at the end of file, 
0,0,0,0,0,0,0,//  Verify each quorum peer has expected config in its config zNode. 
0,0,0,0,0,0,0,//  returns all configuration servers -- participants and observers 
0,0,0,0,0,0,0,//  first convert participant to observer, then observer to participant, 
0,0,0,0,0,0,0,//  convince falseLeader that it is the leader 
0,0,0,0,0,0,0,/*  version - version of config from which we want to reconfigure - if current config is different     * reconfiguration will fail. Should be committed from the CLI to disable this option.      */
0,0,0,0,0,0,0,//  Update the node on the leader 
0,0,0,0,0,0,0,// check for the code path that throws at server 
0,0,0,0,0,0,0,//  Number of machines increases, my server is not in the new cluster   load on old servers must be decreased, so must connect to one of the   new servers   i.e., pNew = 1. 
0,0,0,0,0,0,0,//  set watches on child 
0,0,0,0,0,0,0,//  take a snapshot 
0,0,0,0,0,0,0,//  65537 
0,0,0,0,0,0,0,//  We have the request, now process and setup for next 
0,0,0,0,0,0,0,//  512k 
0,0,0,0,0,0,0,//  check that static config file doesn't include membership info   and has a pointer to the dynamic configuration file 
0,0,0,0,0,0,0,//  Fallthrough and log errors outside the synchronized block 
0,0,0,0,0,0,0,//  we are going to have to extrapolate the epoch information 
0,0,0,0,0,0,0,//  best effort to print the path assoc with this request 
0,0,0,0,0,0,0,//  and close the connection to the leader 
0,0,0,0,0,0,0,// if neither option -n or -b is specified, we delete   the quota node for thsi node. 
0,0,0,0,0,0,0,//  shutdown() has to be explicitly called for every thread to   make sure that resources are freed properly and all fixed network ports   are available for other test cases 
0,0,0,0,0,0,0,//  we are now going to start getting transactions to apply followed by an UPTODATE 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event     * .TreeSelectionEvent)      */
0,0,0,0,0,0,0,//  hdm.addLoggerMBean(logger.getName()); 
0,0,0,0,0,0,0,//  2 followers out of 3 are a majority of the voting view 
0,0,0,0,0,0,0,//  its supposed to be the first server on serverList.   we'll set it later, see below (*) 
0,0,0,0,0,0,0,//  config file. 
0,0,0,0,0,0,0,//  don't overwrite with "special" xids - we're interested   in the clients last real operation 
0,0,0,0,0,0,0,/* election port */
0,0,0,0,0,0,0,/*                 cversion > 0: keep newly created containers from being deleted                before any children have been added. If you were to create the                container just before a container cleaning period the container                would be immediately be deleted.              */
0,0,0,0,0,0,0,//  interesting to see what's there... 
0,0,0,0,0,0,0,//  During session upgrade 
0,0,0,0,0,0,0,//  Construct a connection request 
0,0,0,0,0,0,0,//  create a /test znode and check that read/write works before 
0,0,0,0,0,0,0,//  Next the old servers 
0,0,0,0,0,0,0,//  during second iteration leavingIndex will be the index of the leader 
0,0,0,0,0,0,0,/*  password is 'test' */
0,0,0,0,0,0,0,//  org.apache.log4j.LogManager.getLoggerRepository(); 
0,0,0,0,0,0,0,//  Make sure nothing is straggling! 
0,0,0,0,0,0,0,/* quorum port */
0,0,0,0,0,0,0,//  Attempting to load with the wrong key password should fail 
0,0,0,0,0,0,0,//  there can be extra sessionClose proposals 
0,0,0,0,0,0,0,//  create 5 servers 
0,0,0,1,0,1,1,//  Trigger the watches and ensure they properly propagate to the client 
0,0,0,0,0,0,0,/*  4 MB  */
0,0,0,0,0,0,0,//  Get the string that is being dropped. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNodeChild(java.lang.String, int)      */
0,0,0,0,0,0,0,//  Get memory information. 
0,0,0,0,0,0,0,//  Make all zxids for a given vote id equal to the largest zxid seen for 
0,0,0,0,0,0,0,//  use async, otherwise it will block the logLock in   ZKDatabase and the setData request will timeout 
0,0,0,0,0,0,0,//  10.10.10.2:1236, 10.10.10.1:1235 
0,0,0,0,0,0,0,//  create ephemeral node 
0,0,0,0,0,0,0,/*              * We match with nextPending so that we can move to the             * next request when it is committed. We also want to             * use nextPending because it has the cnxn member set             * properly.              */
0,0,0,0,0,0,0,// set that we have been interrupted. 
0,0,0,0,0,0,0,/*          * First make the views consistent. Sometimes peers will have different         * zxids for a server depending on timing.          */
0,0,0,0,0,0,0,//  Verify that FinalRequestProcessor hasn't changed the original ACL objects 
0,0,0,0,0,0,0,//  first address worked 
0,0,0,0,0,0,0,//  cause disconnection - this will cause next to be called   which will in turn call nextReconfigMode
0,0,0,0,0,0,0,//  Try to reduce memory consumption by freeing up buffer space   which is no longer needed. 
0,0,0,0,0,0,0,//  wait until followers time out in getEpochToPropose - they shouldn't return   normally because the leader didn't execute getEpochToPropose and so its epoch was not 
0,0,0,0,0,0,0,//  seconds, so it should be plenty of time 
0,0,0,0,0,0,0,//  add all to commandMap 
0,0,0,0,0,0,0,//  Assume this is an existing cluster. 
0,0,0,0,0,0,0,//   we check events 
0,0,0,0,0,0,0,//  If there is only one createSession request in between, zxid diff   will be exactly 2. The alternative way of checking is to actually 
0,0,0,0,0,0,0,//  verify all the servers reporting same number of nodes 
0,0,0,0,0,0,0,//  increase the tick time to delay the leader going to looking 
0,0,0,0,0,0,0,//  server ids are 1, 2 and 3 
0,0,0,0,0,0,0,//  However, we should be able to disconnect and reconnect to the same   server with the same session id (as long as we do it quickly 
0,0,0,0,0,0,0,//  waiting time for expected condition 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#getACLs     * (java.lang.String)      */
0,0,0,0,0,0,0,/*              * Wait until leader starts up              */
0,0,0,0,0,0,0,//  6. exit follower A after taking snapshot 
0,0,0,0,0,0,0,//  the dynamic file pointer. 
0,0,0,0,0,0,0,//  Append and commit 2 transactions to the log 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see java.lang.Object#hashCode()      */
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *         * @see org.apache.zookeeper.server.RequestProcessor#processRequest(org.apache.zookeeper.server.Request)          */
0,0,0,0,0,0,0,//  try sync zk exists  
0,0,0,0,0,0,0,//  Attempt to renegotiate after establishing the connection 
0,0,0,0,0,0,0,//  Verify AlwaysOnTop Flag... 
0,0,0,0,0,0,0,//  Leader and learner will control the zookeeper server and pass it into QuorumPeer. 
0,0,0,0,0,0,0,//  /foo 
0,0,0,0,0,0,0,//  We don't want to do this check since the session expiration thread   queues up this operation without being the session owner.   this request is the last of the session so it should be ok  zks.sessionTracker.checkSession(request.sessionId, request.getOwner()); 
0,0,0,0,0,0,0,//  ok we have some match and need to update 
0,0,0,0,0,0,0,//  object created but start() not called yet   start() called but background thread has not entered main loop   background thread is running   stop() called but background thread has not exited main loop   stop() called and background thread has exited, or background thread crashed 
0,0,0,0,0,0,0,//  if it is already simple, just return it 
0,0,0,0,0,0,0,//  waiting for re-election. 
0,0,0,0,0,0,0,//  ************** target file does not exist 
0,0,0,0,0,0,0,//  note that clientToken might be empty (clientToken.length == 0):   if using the DIGEST-MD5 mechanism, clientToken will be empty at the beginning of the   SASL negotiation process. 
0,0,0,0,0,0,0,// check that membership makes sense; leader will make these checks again  don't check for leader election ports since   client doesn't know what leader election alg is used 
0,0,0,0,0,0,0,//  we've already validated, therefore if the path is of length 1 it's the root 
0,0,0,0,0,0,0,// PASS 
0,0,0,0,0,0,0,//  this replicates NC - close the output stream before reading 
0,0,0,0,0,0,0,//  No command specified, print links to all commands instead 
0,0,0,0,0,0,0,//  a session should automatically expire after an amount of time 
0,0,0,0,0,0,0,//  with 0-padding in the filename 
0,0,0,0,0,0,0,//  we are the final link in the chain 
0,0,0,0,0,0,0,//  done checking - it's the root 
0,0,0,0,0,0,0,//  Set default font... 
0,0,0,0,0,0,0,/*  leaving - comma separated list of server IDs to be removed from the ensemble. Only used for     * incremental reconfigurations.      */
0,0,0,0,0,0,0,//  try node creation for around 15 second, 
0,0,0,0,0,0,0,//  If the user explicitly overrides the default Login Context, they probably expected SASL to   succeed. But if we got here, SASL failed. 
0,0,0,0,0,0,0,//  Servers have been set up. Now go test if secure connection is successful. 
0,0,0,0,0,0,0,//  assert remotePeerBean.1 of ReplicatedServer_2 
0,0,0,0,0,0,0,//  The leader is going to dump the database 
0,0,0,0,0,0,0,//  for a dead peer 
0,0,0,0,0,0,0,//  VisibleForTesting 
0,0,0,0,0,0,0,// login and also update the subject field of this instance to 
0,0,0,0,0,0,0,/*      * Process a sync request      */
0,0,0,0,0,0,0,//  However a failure is still expected as user is not authenticated, so ACL check will fail. 
0,0,0,0,0,0,0,//  Thread.sleep(100);   } 
0,0,0,0,0,0,0,//  Note that this thread isn't going to be doing anything else,   so rather than spawning another thread, we will just call   run() in this thread. 
0,0,0,0,0,0,0,// dumpConnections connection is implemented only in NIOServerCnxnFactory 
0,0,0,0,0,0,0,//  make sure that they timed out and didn't return normally   
0,0,0,0,0,0,0,//  we don't need to roll back any records because there is nothing left. 
0,0,0,0,0,0,0,//  & 0xFFFFFFFFL;   >> 32; 
0,0,0,0,0,0,0,// incremental change - must be a majority quorum system    
0,0,0,0,0,0,0,//  assert remotePeerBean.1 of ReplicatedServer_3 
0,0,0,0,0,0,0,//  Exception is set when local session failed to upgrade   so we just need to report the error 
0,0,0,0,0,0,0,//  Have to check !closingChannel, because an error in   receiveMessage() could have led to close() being called. 
0,0,0,0,0,0,0,//  -2 is the xid for pings 
0,0,0,0,0,0,0,//  concurrent reconfigs are allowed, this can happen. 
0,0,0,0,0,0,0,//  Oldest log is already remove, so this should point to the start of 
0,0,0,0,0,0,0,//  reconstructing transaction with the chroot prefix 
0,0,0,0,0,0,0,//  Verify the data in the second transaction 
0,0,0,0,0,0,0,//  now check if the bytes match the quota 
0,0,0,0,0,0,0,//  Step for the toaster 
0,0,0,0,0,0,0,/*              * Higher zxid              */
0,0,0,0,0,0,0,//  the list is already removed from the ephemerals   so we do not have to worry about synchronizing on   the list. This is only called from FinalRequestProcessor   so there is no need for synchronization. The list is not   changed here. Only create and delete change the list which   are again called from FinalRequestProcessor in sequence. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent     * )      */
0,0,0,0,0,0,0,//  authentication packet. 
0,0,0,0,0,0,0,//  This should never happen! 
0,0,0,0,0,0,0,//  But still, what's valid in white list will get through. 
0,0,0,0,0,0,0,//  we need to make sure that we don't take the snapshot twice. 
0,0,0,0,0,0,0,//  if so, I'll remain the leader     
0,0,0,0,0,0,0,//  or fails. 
0,0,0,0,0,0,0,//  DIFF + 4 proposals + 4 commit 
0,0,0,0,0,0,0,//  If the connect attempt was cancelled but succeeded   anyway, make sure to close the channel, otherwise   we may leak a file descriptor. 
0,0,0,0,0,0,0,//  Reset to MIN_SNAP_RETAIN_COUNT if invalid (less than 3)   PurgeTxnLog.purge(File, File, int) will not allow to purge less 
0,0,0,0,0,0,0,//  2) verify that empty child name success if sequential  
0,0,0,0,0,0,0,//  We send TRUNC to 3 and forward any packet starting 5 
0,0,0,0,0,0,0,//  if node is created successfully then it means that ZooKeeper service 
0,0,0,0,0,0,0,//  @VisibleForTesting 
0,0,0,0,0,0,0,//  Throttle acceptance of new requests. If this entailed a state change, 
0,0,0,0,0,0,0,/*              * Main loop              */
0,0,0,0,0,0,0,//  This should never happen, but we should fall back to sending   snapshot just in case. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getSessionMeta()      */
0,0,0,0,0,0,0,//  Add all the removed watch events to the event queue, so that the   clients will be notified with 'Data/Child WatchRemoved' event type. 
0,0,0,0,0,0,0,//  The pattern is holding so far.  Let's run the counter a bit   to be sure it continues to spit out the correct answer 
0,0,0,0,0,0,0,/*          * Creates list of peers.          */
0,0,0,0,0,0,0,//  Use a single listener instance to reduce GC   Note: this listener is only added when LOG.isTraceEnabled() is true, 
0,0,0,0,0,0,0,//  last op committed was a leader change - from now on    the new leader should commit         
0,0,0,0,0,0,0,//  New Watcher which will be used for removal 
0,0,0,0,0,0,0,//  3: close the session so that ephemeral node is deleted 
0,0,0,0,0,0,0,//  CN matching has been deprecated by rfc2818 and can be used   as fallback only when no subjectAlts are available 
0,0,0,0,0,0,0,//  content changed 
0,0,0,0,0,0,0,//  write extra configurations 
0,0,0,0,0,0,0,//  During connection expiry the server will close the connection.   After the socket is closed, when the client tries to read a   line of text it will throw java.net.SocketException.   @see jira issue ZOOKEEPER-1862 
0,0,0,0,0,0,0,//  if session creation Assert.fails dump the thread stack   and try the next server 
0,0,0,0,0,0,0,//  extract server id x from first part of joiner: server.x 
0,0,0,0,0,0,0,//  learner with ipaddress in principal 
0,0,0,0,0,0,0,//  This is expected case since server 0 is down and 3 can't vote   (observer in current role) and we need 3 votes from 0, 1, 2, 3, 
0,0,0,0,0,0,0,//  remove watcher for each node and remove node from   collection of watched nodes 
0,0,0,0,0,0,0,//  Create the NIOServerCnxn that will handle the client requests 
0,0,0,0,0,0,0,//  ok this is the limit node   get the real node and update   the count and the bytes 
0,0,0,0,0,0,0,// wait for servers to be up 
0,0,0,0,0,0,0,//  try it again 
0,0,0,0,0,0,0,//  Set to true when connected to a quorum server. 
0,0,0,0,0,0,0,//  worst case here the tmp file/resources(fd) are not cleaned up   and the caller will be notified (IOException) 
0,0,0,0,0,0,0,//  Test child watch and create with sequence 
0,0,0,0,0,0,0,/*  return a zxid of zero, since we the database is empty  */
0,0,0,0,0,0,0,//  Start 3rd peer and check if it joins the quorum 
0,0,0,0,0,0,0,//  Authenticate client certificate 
0,0,0,0,0,0,0,//  Use setData instead of sync API to force a view update.   Check ZOOKEEPER-2137 for details. 
0,0,0,0,0,0,0,//  Color for toaster 
0,0,0,0,0,0,0,//  now check if the counts match the quota 
0,0,0,0,0,0,0,//  Here we enable the 4lw which ZooKeeper tests depends. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * setLastConnectionProps(java.util.Properties)      */
0,0,0,0,0,0,0,//  this is the only child node. 
0,0,0,0,0,0,0,//  make sure it has a chance to write it to disk 
0,0,0,0,0,0,0,//  Start and schedule the the purge task 
0,0,0,0,0,0,0,//  Peer is within committedLog range 
0,0,0,0,0,0,0,// empty logs 
0,0,0,0,0,0,0,//  Close the client without changing the node 
0,0,0,0,0,0,0,//  We don't need to worry about removing empty sets,   they'll eventually be removed when they expire. 
0,0,0,0,0,0,0,//  shouldn't happen without filter 
0,0,0,0,0,0,0,//  -1 means notification 
0,0,0,0,0,0,0,//  Kill half the servers, make a change, restart the dead 
0,0,0,0,0,0,0,/*                  * Sends more notifications if haven't received enough.                 * Otherwise processes new notification.                  */
0,0,0,0,0,0,0,/*      * Shutdown flag      */
0,0,0,0,0,0,0,//  Assert 
0,0,0,0,0,0,0,/*      * getZNodeList and getZNodeListJSON are bogus - but necessary.     * Unfortunately Jersey 1.0.3 is unable to render both xml and json properly     * in the case where a object contains a list/array. It's impossible to get     * it to render properly for both. As a result we need to split into two     * jaxb classes.      */
0,0,1,1,1,1,1,//  TODO test octet fully 
0,0,0,0,0,0,0,//  This can happen in state transitions,   just ignore the request 
0,0,0,0,0,0,0,//  http://docs.oracle.com/javase/6/docs/technotes/guides/security/jgss/jgss-features.html   """   In addition, when performing operations as a particular   Subject, e.g. Subject.doAs(...) or   Subject.doAsPrivileged(...),   the to-be-used GSSCredential should be added to Subject's   private credential set. Otherwise, the GSS operations will   fail since no credential is found.   """ 
0,0,0,0,0,0,0,//  Local session 
0,0,0,0,0,0,0,/*                      * Building notification packet to send                      */
0,0,0,0,0,0,0,//  2 followers out of 5 is not a majority 
0,0,0,0,0,0,0,//  ignore 
0,0,0,0,0,0,0,//  do authenticating learner 
0,0,0,0,0,0,0,//  SASL authentication is completed, successfully or not:   enable the socket's writable flag so that any packets waiting for authentication to complete in 
0,0,0,0,0,0,0,//  Assert   Resolver called 10 times, because we shouldn't cache the resolved addresses 
0,0,0,0,0,0,0,//  stat, ruok and isro are white listed. 
0,0,0,0,0,0,0,//  the response 
0,0,0,0,0,0,0,//  getting a quorum from all necessary configurations. 
0,0,0,0,0,0,0,//  ignore for purposes of this test 
0,0,0,0,0,0,0,//  1. Matches authenticationID and authorizationID 
0,0,0,0,0,0,0,/*  In the following IF-THEN-ELSE block, we process syncs on the leader.         * If the sync is coming from a follower, then the follower         * handler adds it to syncHandler. Otherwise, if it is a client of         * the leader that issued the sync command, then syncHandler won't         * contain the handler. In this case, we add it to syncHandler, and         * call processRequest on the next processor.          */
0,0,0,0,0,0,0,//  check for well formed ACLs   This resolves https://issues.apache.org/jira/browse/ZOOKEEPER-1877 
0,0,0,0,0,0,0,//  make sure everything is consistent 
0,0,0,0,0,0,0,//  2. kill all followers 
0,0,0,0,0,0,0,/*      * Class to verify of the thread has become a follower      */
0,0,0,0,0,0,0,//  Exists only to defeat instantiation. 
0,0,0,0,0,0,0,//  we should see that now all servers have the same config of 5 servers 
0,0,0,0,0,0,0,//  possible 
0,0,0,0,0,0,0,//  Test synchronous API 
0,0,0,0,0,0,0,//  2nd read is after the renegotiation attempt and will fail 
0,0,0,1,1,1,1,//  TODO Write the v6addr2Bytes 
0,0,0,0,0,0,0,//  wait up to 30 seconds for the disco to be delivered 
0,0,0,0,0,0,0,/*                      * Return message to queue for another attempt later if                     * epoch hasn't changed.                      */
0,0,0,0,0,0,0,//  if not RSA, assume EC 
0,0,0,0,0,0,0,/*  This file copied from Hadoop's security branch,  * with the following changes:  * 1. package changed from org.apache.hadoop.security to  *    org.apache.zookeeper.server.auth.  * 2. Usage of Hadoop's Configuration class removed since  *    it is not available in Zookeeper: instead, system property  *    "zookeeper.security.auth_to_local" is used.   */
0,0,0,0,0,0,0,//  note that we should run the server, shut it down and only then   simulate a reconfig in progress by writing the temp file, but here no   other server is competing with them in FLE, so we can skip this step 
0,0,0,0,0,0,0,/*      * We populate the necessary data structures in the CommitProcessor     * instance and run processCommitted      */
0,0,0,0,0,0,0,//  create persistent sequential node 
0,0,0,0,0,0,0,//  pick a reasonable epoch number   this should only happen once when moving to a   new code version 
0,0,0,0,0,0,0,//  Set the joining/leaving/members values based on the mode we're in 
0,0,0,0,0,0,0,/*                  * Processing queuedRequests: Process the next requests until we                 * find one for which we need to wait for a commit. We cannot                 * process a read request while we are processing write request.                  */
0,0,0,0,0,0,0,/*  * This code is originally from HDFS, see the similarly named file there * in case of bug fixing, history, etc. * * Branch : trunk * Github Revision: 1d1ab587e4e92ce3aea4cb144811f69145cb3b33  */
0,0,0,0,0,0,0,//  Try to remove follower2, which is the only remaining server. This should fail. 
0,0,0,0,0,0,0,//  Write to txnlog and take periodic snapshot 
0,0,0,0,0,0,0,//  This test simulate the use case of change of membership through rolling   restart. For a 3 node ensemble we expand it to a 5 node ensemble, verify   during the process each node has the expected configuration setting pushed   via updating local zoo.cfg file. 
0,0,0,0,0,0,0,//  validate upper limit 
0,0,0,0,0,0,0,//  Wait for the listener to terminate. 
0,0,0,0,0,0,0,//  8. now we have invalid data on disk, let's load it and verify 
0,0,0,0,0,0,0,//  don't do anything 
0,0,0,0,0,0,0,//  simply return don't require auth 
0,0,0,0,0,0,0,//  set saslLoginFailed to true to simulate the LoginException 
0,0,0,0,0,0,0,//  aborting multi shouldn't leave any record. 
0,0,0,0,0,0,0,//  The only requests that should be on toBeApplied are write   requests, for which we will have a hdr. We can't simply use   request.zxid here because that is set on read requests to equal   the zxid of the last write op. 
0,0,0,0,0,0,0,/*                              * If don't have challenge yet, skip sending                             * notification                              */
0,0,0,0,0,0,0,//  things needed for waitForNewLeaderAck to run (usually in leader.lead(), but we're not running leader here) 
0,0,0,0,0,0,0,//  also clears the wantClientAuth flag according to docs 
0,0,0,0,0,0,0,//  ..but consume (with a log message) all other types of exceptions. 
0,0,0,0,0,0,0,//  Member variables for mocking ZkDatabase 
0,0,0,0,0,0,0,//  else there is no need to clear the database    * When a new quorum is established we can still apply the diff      on top of the same zkDb data    * If we fetch a new snapshot from leader, the zkDb will be      cleared anyway before loading the snapshot 
0,0,0,0,0,0,0,// One time scheduling. 
0,0,0,0,0,0,0,//  Regardless of TICKET_RENEW_WINDOW setting above and the ticket expiry time,   thread will not sleep between refresh attempts any less than 1 minute (60*1000 milliseconds = 1 minute). 
0,0,0,0,0,0,0,//  by whether we have any pending buffers on the output queue or not 
0,0,0,0,0,0,0,//  we are throttled, so we need to queue 
0,0,0,0,0,0,0,//  remember these servers so we can add them back later 
0,0,0,0,0,0,0,/*  DNS resolution tests  */
0,0,0,0,0,0,0,//  Try to load a password-protected private key with the wrong password 
0,0,0,0,0,0,0,//  force a buffer fill on next read 
0,0,0,0,0,0,0,//  Test view contains other servers 
0,0,0,0,0,0,0,//  Make sure the first handshake completed and only the second   one failed. 
0,0,0,0,0,0,0,//  The value of callCount can exceed 1 only if the callback thread 
0,0,0,0,0,0,0,// we will get a checksum failure 
0,0,0,0,0,0,0,//  Read the log back from disk, this will throw a java.io.IOException: CRC check failed prior to ZOOKEEPER-2249 
0,0,0,0,0,0,0,//  Account for running within IKVM and create a new MBeanServer   if the PlatformMBeanServer does not exist. 
0,0,0,0,0,0,0,//  Registers shutdown handler which will be used to know the 
0,0,0,0,0,0,0,//  session moved is a connection level error, we need to tear   down the connection otw ZOOKEEPER-710 might happen   ie client on slow follower starts to renew session, fails   before this completes, then tries the fast follower (leader)   and is successful, however the initial renew is then   successfully fwd/processed by the leader and as a result   the client and leader disagree on where the client is most   recently attached (and therefore invalid SESSION MOVED generated) 
0,0,0,0,0,0,0,//  If have received from all nodes, then terminate 
0,0,0,0,0,0,0,//  we're done; don't expect to send another BIND 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.WatcherEvent)      */
0,0,0,0,0,0,0,//  write length of message 
0,0,0,0,0,0,0,/*  Reconfig tests with IP addresses  */
0,0,0,0,0,0,0,/*      * Flag to determine whether to authenticate or not      */
0,0,0,0,0,0,0,//  Since the proposal has been committed we need to send the   commit message also 
0,0,0,0,0,0,0,//  now corrupt the snapshot 
0,0,0,0,0,0,0,//  reset cnxn factory 
0,0,0,0,0,0,0,/*      * To enable observers to have no identifier, we need a generic identifier     * at least for QuorumCnxManager. We use the following constant to as the     * value of such a generic identifier.      */
0,0,0,0,0,0,0,//  Try connecting with the same session id on a different 
0,0,0,0,0,0,0,//  A session can both be a local and global session during   upgrade 
0,0,0,0,0,0,0,//  directories 
0,0,0,0,0,0,0,//  Ignoring exception. If there is an interrupted exception   then one of the following assertion will fail 
0,0,0,0,0,0,0,//  and try to renew the ticket. 
0,0,0,0,0,0,0,//  finally, we should also check that the lag-off server has updated 
0,0,0,0,0,0,0,//  create 3 servers 
0,0,0,0,0,0,0,// CheckedOutputStream cout = new CheckedOutputStream() 
0,0,0,0,0,0,0,//  @see jira issue ZOOKEEPER-961 
0,0,0,0,0,0,0,//  We start at 1 because / will create an empty part first 
0,0,0,0,0,0,0,// If wins the challenge, then close the new connection. 
0,0,0,0,0,0,0,//  Thrown if the caller does not have permission to retrieve the Configuration.   In this case, simply returning false is correct. 
0,0,0,0,0,0,0,//  this is ok, it just means that the session revalidation failed. 
0,0,0,0,0,0,0,//  this is fine 
0,0,0,0,0,0,0,//  verify that now ZooKeeper service is up and running 
0,0,0,0,0,0,0,//  it should exist 
0,0,0,0,0,0,0,//  change everyone's leader election port 
0,0,0,0,0,0,0,//  the files we expected 
0,0,0,0,0,0,0,//  verify access using original auth 
0,0,0,0,0,0,0,//  specific election address 
0,0,0,0,0,0,0,//  node doesn't exists 
0,0,0,0,0,0,0,//  truncate it 
0,0,0,0,0,0,0,//  Snapshot containing 5000-byte znode and logfile containing create txn 
0,0,0,0,0,0,0,//  leader goes in looking state 
0,0,0,0,0,0,0,/*                      * This sleep time represents the time a follower                     * would take to declare the leader dead and start                     * a new leader election.                      */
0,0,0,0,0,0,0,//  Number of machines increased, my server is not in the new cluster 
0,0,0,0,0,0,0,/*          * peer1 and peer2 are A and B in the above example.          */
0,0,0,0,0,0,0,//  init connection executors 
0,0,0,0,0,0,0,/*      * Verify that all of the servers see the same number of nodes     * at the root      */
0,0,0,0,0,0,0,//  property is not set we should get the default value 
0,0,0,0,0,0,0,/*                      * Building challenge packet to send                      */
0,0,0,0,0,0,0,// tried all servers and couldn't connect 
0,0,0,0,0,0,0,//  This is the only place that can throw IO exception 
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getAllowsChildren()          */
0,0,0,0,0,0,0,/*      * Generates 3 ports per server      */
0,0,0,0,0,0,0,//  is a CA 
0,0,0,0,0,0,0,//  Now do the tally 
0,0,0,0,0,0,0,/*  Pretend that any watcher exists  */
0,0,0,0,0,0,0,//  10.10.10.4:1238, 10.10.10.3:1237, 10.10.10.2:1236, 10.10.10.1:1235   10.10.10.3:1237, 10.10.10.2:1236, 10.10.10.1:1235 
0,0,0,0,0,0,0,//  This server should fail to join the quorum as it is not using TLSv1.2 
0,0,0,0,0,0,0,//  This method is to maintain compatiblity of startup(zks) and enable sharing of zks 
0,0,0,0,0,0,0,//  Assuming the packet will be sent out successfully. Because if it fails,   the channel will close and clean up queues. 
0,0,0,1,0,1,1,//  See ZooKeeper.java for an explanation of why we need @SuppressWarnings("try") 
0,0,0,0,0,0,0,//  create with CreateMode 
0,0,0,0,0,0,0,//     which means it acked from itself 
0,0,0,0,0,0,0,/*              * There are two things going on in the logic below:             *              * 1. skip comparing the zxid and electionEpoch for votes for servers              *    out of election.              *                 *    Need to skip those because they can be inconsistent due to               *    scenarios described in QuorumPeer.updateElectionVote.              *             *    And given that only one ensemble can be running at a single point              *    in time and that each epoch is used only once, using only id and              *    epoch to compare the votes is sufficient.             *             *    {@see https://issues.apache.org/jira/browse/ZOOKEEPER-1805}             *             * 2. skip comparing peerEpoch if if we're running with mixed ensemble              *    with (version > 0x0) and without the change (version = 0x0)              *    introduced in ZOOKEEPER-1732.             *             *    {@see https://issues.apache.org/jira/browse/ZOOKEEPER-1732}             *             *    The server running with and without ZOOKEEPER-1732 will return              *    different peerEpoch. During rolling upgrades, it's possible             *    that 2/5 servers are returning epoch 1, while the other 2/5             *    are returning epoch 2, the other server need to ignore the              *    peerEpoch to be able to join it.              */
0,0,0,0,0,0,0,//  we are done with deserializing the   the datatree   update the quotas - create path trie   and also update the stat nodes 
0,0,0,0,0,0,0,//  Restore the System property if it was set previously 
0,0,0,0,0,0,0,//  Do a simple operation to make sure the connection is fine. 
0,0,0,0,0,0,0,//  Current number of toaster... 
0,0,0,0,0,0,0,//  Check that the servers are up, have the right config and can process operations. 
0,0,0,0,0,0,0,//  need to cancel this selection key from the selector 
0,0,0,0,0,0,0,//  Data should get updated 
0,0,0,0,0,0,0,//  We throw LoginExceptions... 
0,0,0,0,0,0,0,//  materialize the watchers based on the event 
0,0,0,0,0,0,0,//  9. start follower A, after it's in broadcast state, make sure 
0,0,0,0,0,0,0,//  quorum as this needs auth. 
0,0,0,0,0,0,0,//  validate that the old value is there and not the new one 
0,0,0,0,0,0,0,//  read error and input streams as this would free up the buffers 
0,0,0,0,0,0,0,//  new RuntimeException("Calling shutdown").printStackTrace(); 
0,0,0,0,0,0,0,/*  Useful for testing watch handling behavior  */
0,0,0,0,0,0,0,//  SASL authentication completes. 
0,0,0,0,0,0,0,/*                      * We only partially sent this buffer, so we update                     * the position and exit the loop.                      */
0,0,0,0,0,0,0,//  Add multiple data watches 
0,0,0,0,0,0,0,//  create ephemeral znode 
0,0,0,0,0,0,0,//  This is a severe error that we cannot recover from,   so we need to exit 
0,0,0,0,0,0,0,//  but written out to the transaction log 
0,0,0,0,0,0,0,//  Rest of commands fail. 
0,0,0,0,0,0,0,//  no principals: must not be GSSAPI: use DIGEST-MD5 mechanism   instead. 
0,0,0,0,0,0,0,//  This is the same object as this.zk, but we cache the downcast op 
0,0,0,0,0,0,0,//  the version appended to filename should be the same as   the one of quorum verifier. 
0,0,0,0,0,0,0,//  Override setting in ZKTestCase 
0,0,0,0,0,0,0,// should not be able to remove follower 2 
0,0,0,0,0,0,0,//  1246, 1245, 1244, 1243, 1242, 1241,   1240, 1239, 1238, 1237 
0,0,0,0,0,0,0,//  lets either become the leader or watch the new/updated node 
0,0,0,0,0,0,0,//  servers list, but there's no "peerType=observer" token in config 
0,0,0,0,0,0,0,//  to be started (which should take one tickTime (2 seconds)) 
0,0,0,0,0,0,0,//  4. on the customized leader catch the startForwarding call      (without synchronized), set the node to value v1, then      call the super.startForwarding to generate the ongoing 
0,0,0,0,0,0,0,//  Let's just make sure it can still move 
0,0,0,0,0,0,0,//  ok, exception as expected. 
0,0,0,0,0,0,0,//  use out-of-band method to verify 
0,0,0,0,0,0,0,//  We track totals by seconds 
0,0,0,0,0,0,0,//  check that the dynamic configuration file contains the membership info 
0,0,0,0,0,0,0,//  get the args 
0,0,0,0,0,0,0,//  is available 
0,0,0,0,0,0,0,//  e.g. serviceHostnameAndKerbDomain := 
0,0,0,0,0,0,0,//  start taking old servers 
0,0,0,0,0,0,0,/*          * When leader election is completed, the leader will set its         * lastProcessedZxid to be (epoch < 32). There will be no txn associated         * with this zxid.         *         * The learner will set its lastProcessedZxid to the same value if         * it get DIFF or SNAP from the leader. If the same learner come         * back to sync with leader using this zxid, we will never find this         * zxid in our history. In this case, we will ignore TRUNC logic and         * always send DIFF if we have old enough history          */
0,0,0,0,0,0,0,//  Remove all the watchers for the given path 
0,0,0,0,0,0,0,//  we don't backup static config for standalone mode.   we also don't backup if reconfig feature is disabled. 
0,0,0,0,0,0,0,//  wait for the the request processor to do his job 
0,0,0,0,0,0,0,//  We should be able to reconnect with the same session id on a 
0,0,0,0,0,0,0,//  just make sure that we actually did get it in process at the 
0,0,0,0,0,0,0,/*          * Send follower info, including last zxid and sid          */
0,0,1,0,0,0,0,//  On Java 9 and later, prefer GCM ciphers due to improved AES-NI support. 
0,0,0,0,0,0,0,//  simulate the upgrading scenario, where the reconfig znode 
0,0,0,0,0,0,0,//  Another client deleted the node first. 
0,0,0,0,0,0,0,//  Clean up the dead machines 
0,0,0,0,0,0,0,//  Since we preallocate, we define EOF to be an 
0,0,0,0,0,0,0,//  This test takes too long tos run! 
0,0,0,0,0,0,0,//  changing a server's role / port is done by "adding" it with the same 
0,0,0,0,0,0,0,//  We send TRUNC to 3 and forward any packet starting at 
0,0,0,0,0,0,0,//  need to wake on connect success or failure to avoid   timing out ClientCnxn.SendThread which may be   blocked waiting for first connect in doTransport(). 
0,0,0,0,0,0,0,//  file should not exist 
0,0,0,0,0,0,0,//  start old cluster 
0,0,0,0,0,0,0,//  Since client's authentication with server is in progress,   send only the null-header packet queued by primeConnection().   This packet must be sent so that the SASL authentication process   can proceed, but all other packets should wait until 
0,0,0,0,0,0,0,//  We send TRUNC to 3 and forward any packet starting at maxCommittedLog 
0,0,0,0,0,0,0,//  set shutdown flag 
0,0,0,0,0,0,0,//  everything went ok 
0,0,0,0,0,0,0,//  first line should be version info 
0,0,0,0,0,0,0,//  Push an update request on the queue to resume selecting   on the current set of interest ops, which may have changed 
0,0,0,0,0,0,0,//  Inform /foo2 update 
0,0,0,0,0,0,0,/*      * Negative counter for observer server ids.      */
0,0,0,0,0,0,0,//  to keep the quorum peer running and force it to go into the looking state, we kill leader election 
0,0,0,0,0,0,0,//  1. set up an ensemble with 3 servers 
0,0,0,0,0,0,0,// Anything after this needs to go to the transaction log, not applied directly in memory 
0,0,0,0,0,0,0,//  servers 0 and 1 should connect to all servers, including the one in 
0,0,0,0,0,0,0,//  make sure we have all servers listed 
0,0,0,0,0,0,0,/*          * Current state;          */
0,0,0,0,0,0,0,//  Property value takes precedence if provided 
0,0,0,0,0,0,0,/*      * Counter to count connection processing threads.      */
0,0,0,0,0,0,0,//  Delaying the zk server startup so that   ZooKeeperServer#sessionTracker reference won't be   initialized. In the defect scenario, while processing the   connection request zkServer needs sessionTracker reference,   but this is not yet initialized and the server is still in   the startup phase, resulting in NPE. 
0,0,0,0,0,0,0,/*      * Default value of peer is participant      */
0,0,0,0,0,0,0,//  Now, try an ephemeral node. This will trigger session upgrade   so there will be createSession request inject into the pipeline 
0,0,0,0,0,0,0,//  2. SASL authentication has succeeded or failed.. 
0,0,0,0,0,0,0,//  is older than on-disk txnlog 
0,0,0,0,0,0,0,//  Header   Base64 text   Footer 
0,0,0,0,0,0,0,//  just move it to the new list 
0,0,0,0,0,0,0,/*  members - comma separated list of new membership information (e.g., contents of a membership     * configuration file) - for use only with a non-incremental reconfiguration. This may be specified     * manually via the -members flag or it will automatically be filled in by reading the contents     * of an actual configuration file using the -file flag.      */
0,0,0,0,0,0,0,//  if the server is not running or hits an internal error. 
0,0,0,0,0,0,0,/*      * Reception queue      */
0,0,0,0,0,0,0,//  Simple error checking for conflicting modes 
0,0,0,0,0,0,0,//  Prime the server that is going to come in late with 50 txns 
0,0,0,0,0,0,0,//  Validate that we don't see any txn from the second session 
0,0,0,0,0,0,0,//  could not create tmp directory to hold JAAS conf file : test will fail now. 
0,0,0,0,0,0,0,//  If running outside the context of Ant or Ant is using a single   test process, then use all valid ports. 
0,0,0,0,0,0,0,//  this is the backwardCompatibility mode in place before ZK-107   It is for a version of the protocol in which we didn't send peer epoch 
0,0,0,0,0,0,0,//  Data watcher 
0,0,0,0,0,0,0,//  1 follower out of 3 is not a majority 
0,0,0,0,0,0,0,//  Check that the first operation is successful in all request 
0,0,0,0,0,0,0,//  check throttling 
0,0,0,0,0,0,0,//  start servers 
0,0,0,0,0,0,0,/*          * Epoch          */
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getChildren(java.lang.String)      */
0,0,0,0,0,0,0,//  current leader candidate 
0,0,0,0,0,0,0,//  disconnect the client by killing the socket, not sending the   session disconnect to the server as usual. This allows the test   to verify disconnect handling 
0,0,0,0,0,0,0,//  Delete the first log file, so we will fail to read it back from disk 
0,0,0,0,0,0,0,//  since user has provided sessionId 
0,0,0,0,0,0,0,//  the outgoing queue will be sent to the Zookeeper server. 
0,0,0,0,0,0,0,//  Nothing needed 
0,0,0,0,0,0,0,//  Peer miss the committedLog and txnlog is disabled 
0,0,0,0,0,0,0,//  Didn't read anything within the timeout, fallthrough and assume the connection is plaintext. 
0,0,0,0,0,0,0,//  to the start of the txn 
0,0,0,0,0,0,0,//  Number of znodes this test creates in each snapshot. 
0,0,0,0,0,0,0,/*          * Message tag          */
0,0,0,0,0,0,0,//  add itself 
0,0,0,0,0,0,0,//  this node does not have a child   is the leaf node   check if its the leaf node 
0,0,0,0,0,0,0,//  This will wake up the accept thread and the other selector   threads, and tell the worker thread pool to begin shutdown. 
0,0,0,0,0,0,0,//  fle = fast leader election 
0,0,0,0,0,0,0,//  add a new node, should trigger a watch 
0,0,0,0,0,0,0,//  scenario where only three parameter are passed 
0,0,0,0,0,0,0,//  servers without any authentication configured 
0,0,0,0,0,0,0,//  Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally   when reconfig feature flag is off by default. 
0,0,0,0,0,0,0,//  visible for testing 
0,0,0,0,0,0,0,//  we are setting the num quota 
0,0,0,0,0,0,0,//  this should flush the config to servers 2, 3, 4 and 5 
0,0,0,0,0,0,0,// Create a DataTree with quota nodes so PathTrie get updated 
0,0,0,0,0,0,0,//  handshake. 
0,0,0,0,0,0,0,//  2 servers in current config, 3 in next config 
0,0,0,0,0,0,0,//  have we read length bytes?
0,0,0,0,0,0,0,//  this is normal. For example - server found out about new config through FastLeaderElection gossiping   and then got the same config in UPTODATE message so its already known 
0,0,0,0,0,0,0,//  Simulating FinalRequestProcessor logic: create session request has   delayed and now reaches FinalRequestProcessor. Here the leader zk 
0,0,0,0,0,0,0,//  Note: SimpleChannelInboundHandler releases the ByteBuf for us   so we don't need to do it. 
0,0,0,0,0,0,0,//  scenario where four parameter are passed 
0,0,0,0,0,0,0,// 4. Restart peer2 with quorum.auth.learnerEnableSasl=false and   quorum.auth.serverRequireSasl=false. It should fail to join the 
0,0,0,0,0,0,0,//  new members are initialized with current config + the new server 
0,0,0,0,0,0,0,//  Port changes after bind() if the original port was 0, update   localAddress to get the real port. 
0,0,0,0,0,0,0,//  Member variables for mocking Leader 
0,0,0,0,0,0,0,//  case-1) 'quorum.auth.enableSasl' is off. Tries to enable server sasl. 
0,0,0,0,1,1,1,//  second add to electingFollowers, verifier.containsQuorum=true, waitForEpochAck returns without exceptions 
0,0,0,0,0,0,0,//  should cause "/foo/bar" and "/foo" to get deleted when checkContainers() is called 
0,0,0,0,0,0,0,//  Remove "server.x=" prefix which quorum peer does not include. 
0,0,0,0,0,0,0,//  Extract keyword arguments to command from request parameters 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#sendResponse(org.apache.zookeeper.proto.ReplyHeader,     *      org.apache.jute.Record, java.lang.String)      */
0,0,0,0,0,0,0,//  we don't have a designated leader - need to go into leader   election 
0,0,0,0,0,0,0,//  localPeerBean.1 of ReplicatedServer_1 
0,0,0,0,0,0,0,//  cannot create ephemeral nodes on a local session. 
0,0,0,0,0,0,0,//  Got expected exception 
0,0,0,0,0,0,0,//  for i < (numClients/2) this tests the case currentHost == null &&   reconfigMode = true   for i >= (numClients/2) this tests the case currentHost!=null &&   reconfigMode = true 
0,0,0,0,0,0,0,//  Test that sequential filenames are being created correctly, 
0,0,0,0,0,0,0,//  Don't schedule the purge task with zero or negative purge interval. 
0,0,0,0,0,0,0,//  We may get the correct exception but the txn may go through 
0,0,0,0,0,0,0,//  We send DIFF to (6,0) and forward any packet starting at (5,0) 
0,0,0,0,0,0,0,//  ensemble and will reject it. 
0,0,0,0,0,0,0,//  ValidateProcessor is set up in a similar fashion to ToBeApplied   processor, so it can do pre/post validating of requests 
0,0,0,0,0,0,0,//  Returned empty set must not be modifiable 
0,0,0,0,0,0,0,//  not writing them back to static file 
0,0,0,0,0,0,0,//  shut servers 0..2 down 
0,0,0,0,0,0,0,//  notifies watcher removal 
0,0,0,0,0,0,0,//  We'll fill this in later 
0,0,0,0,0,0,0,//  Exists watcher 
0,0,0,0,0,0,0,//  shutdown the previous zk 
0,0,0,0,0,0,0,//  Mark this connection as once again ready for selection 
0,0,0,0,0,0,0,//  the following statement will throw. 
0,0,0,0,0,0,0,/*      * Test that a reconfiguration fails if the proposed change would leave the     * cluster with less than 2 participants (StandaloneEnabled = true).     * StandaloneDisabledTest.java (startSingleServerTest) checks that if     * StandaloneEnabled = false its legal to remove all but one remaining     * server.      */
0,0,0,0,0,0,0,// Process has not terminated.  So check if it has completed   if not just destroy it. 
0,0,0,0,0,0,0,//  "myhost.foo.com@FOO.COM" 
0,0,0,0,0,0,0,//  On entry to this method, qcm must be non-null and the locks on both qcm and QV_LOCK   must be held.  We don't want quorumVerifier/lastSeenQuorumVerifier to change out from   under us, so we have to hold QV_LOCK; and since the call to qcm.connectOne() will take   the lock on qcm (and take QV_LOCK again inside that), the caller needs to have taken 
0,0,0,0,0,0,0,//  If we already started writing p, p.bb will already exist 
0,0,0,0,0,0,0,//  by default create this directory, but otherwise complain instead   See ZOOKEEPER-1161 for more details 
0,0,0,0,0,0,0,//  2 is down. 
0,0,0,0,0,0,0,//  Must be Java 1.8 or earlier 
0,0,0,0,0,0,0,//  Client only has 1 outgoing socket, so the event loop group only needs   a single thread. 
0,0,0,0,0,0,0,//  this is valid node for quota 
0,0,0,0,0,0,0,// 10 seconds 
0,0,0,0,0,0,0,/*      * Tests that an incremental reconfig fails if the current config is hiearchical.      */
0,0,0,0,0,0,0,// are cleared 
0,0,0,0,0,0,0,//  zxid should be non-null too 
0,0,0,0,0,0,0,//  shut them down and then simulate a reboot with a reconfig in progress 
0,0,0,0,0,0,0,//  new followers. 
0,0,0,0,0,0,0,/*      * Socket options for TCP keepalive      */
0,0,0,0,0,0,0,//  Possible since it's just deserialized from a packet on the wire. 
0,0,0,0,0,0,0,//  all clients should be connected 
0,0,0,0,0,0,0,//  When Leader.shutdown() calls ss.close(),   the call to accept throws an exception.   We catch and set stop to true. 
0,0,0,0,0,0,0,//  Visible for testing 
0,0,0,0,0,0,0,/*          * Reset incomingBuffer          */
0,0,0,0,0,0,0,//  tests the case currentHost == null && lastIndex == -1   calls next for clients with index < numClients/2 
0,0,0,0,0,0,0,//  make sure we have these 5 servers listed 
0,0,0,0,0,0,0,//  accepted epoch = 5 it should now have 6 
0,0,0,0,0,0,0,//  Trying to load a PEM file with PKCS12 loader should fail 
0,0,0,0,0,0,0,//  Sun doesn't include the address that causes this   exception to be thrown, also UAE cannot be wrapped cleanly   so we log the exception in order to capture this critical   detail. 
0,0,0,0,0,0,0,//  maximum retry count while trying to bind to election port 
0,0,0,0,0,0,0,//  Font used to display message 
0,0,0,0,0,0,0,//  server login 
0,0,0,0,0,0,0,//  Both servers 0 and 1 will have the .next config file, which means 
0,0,0,0,0,0,0,//  if the close operation (rename) fails we'll get notified.   worst case the tmp file may still exist 
0,0,0,0,0,0,0,//  the scenario that inspired this unit test 
0,0,0,0,0,0,0,//  Test that with no snaps, findNRecentSnapshots returns empty list 
0,0,0,0,0,0,0,// check if I'm in the new configuration with the same quorum address -  
0,0,0,0,0,0,0,// using linux bash commands to retrieve info 
0,0,0,0,0,0,0,//  Map the elem to the new expiry time. If a different previous 
0,0,0,0,0,0,0,//  We don't validate right away, will do another session create first 
0,0,0,0,0,0,0,//  lower-bound grace period to 2 secs 
0,0,0,0,0,0,0,/*              * The default QuorumVerifier is QuorumMaj              */
0,0,0,0,0,0,0,//  Java 8 default should have the CBC suites first 
0,0,0,0,0,0,0,//  find some server that's staying 
0,0,0,0,0,0,0,//  
0,0,0,0,0,0,0,//  number of servers stayed the same or decreased 
0,0,0,0,0,0,0,//  closing the resources 
0,0,0,0,0,0,0,// LOG.info("Closed client: " + zk.describeCNXN()); 
0,0,0,0,0,0,0,//  this is ok -- just a packet from an old server which   doesn't contain readOnly field 
0,0,0,0,0,0,0,//  Arrange & Act 
0,0,0,0,0,0,0,//  110 character base path 
0,0,0,0,0,0,0,//  Do 25% write / 75% read request mix 
0,0,0,0,0,0,0,//  to send the watches 
0,0,0,0,0,0,0,//  before restart 
0,0,0,0,0,0,0,//  delete any already existing .next file 
0,0,0,0,0,0,0,//  setData using chRoot client. 
0,0,0,0,0,0,0,//  Default white list for 3.5.x is empty, so all command should fail. 
0,0,0,0,0,0,0,//  This will add to local session tracker if it is enabled 
0,0,0,0,0,0,0,//  wait some time to let this get written to disk 
0,0,0,0,0,0,0,//  The leader should time out and remaining servers should go into   LOOKING state. A new leader won't be established since that   would require completing the reconfig, which is not possible while 
0,0,0,0,0,0,0,/*  Rollback change records from failed multi-op  */
0,0,0,0,0,0,0,//  Returns the serverId from the sessionId (the high order byte) 
0,0,0,0,0,0,0,//  SessionExpiredException as the previous local session was not persisted). 
0,0,0,0,0,0,0,//  2 servers in current config, 5 in next config 
0,0,0,0,0,0,0,//  We need to set isLocalSession to tree for these type of request   so that the request processor can process them correctly. 
0,0,0,0,0,0,0,//  Arrange   [testhost-3.testdomain.com:1237, testhost-2.testdomain.com:1236, testhost-1.testdomain.com:1235] 
0,0,0,0,0,0,0,//  Read the uptodate ack 
0,0,0,0,0,0,0,//  observer calls waitForNewLeaderAck, should fail verifier.containsQuorum 
0,0,0,0,0,0,0,//  ensure all servers started 
0,0,0,0,0,0,0,//  stop() called shortly after start(), before   this thread started running. 
0,0,0,0,0,0,0,//  Strip leading "/" 
0,0,0,0,0,0,0,//  machine is under load 
0,0,0,0,0,0,0,//  wait for the falseLeader to disconnect 
0,0,0,0,0,0,0,//  2. Verify whether the connecting host is present in authorized hosts.   If not exists, then connecting peer is not authorized to join the 
0,0,0,0,0,0,0,//  newly elected zookeeper quorum. 
0,0,0,0,0,0,0,//  compatibility. 
0,0,0,0,0,0,0,//  rethrow exception 
0,0,0,0,0,0,0,//  cool now make it V1. a -1 parentCVersion will   trigger fixup processing in processTxn 
0,0,0,0,0,0,0,//  Disable sending DIFF using txnlog, so that this test still   testing the ZOOKEEPER-962 bug 
0,0,0,0,0,0,0,//  4. authenticating object exists, so ask it for its progress. 
0,0,0,0,0,0,0,//  Use txnlog and committedLog to sync 
0,0,0,0,0,0,0,//  execute writer operation and flush 
0,0,0,0,0,0,0,//  EOF or corrupted record 
0,0,0,0,0,0,0,//  set peer's server to null 
0,0,0,0,0,0,0,//  Check that the second operation failed after the first request 
0,0,0,0,0,0,0,//  restore socket timeout to the old value 
0,0,0,0,0,0,0,//  ensure at least the two clients we created are accounted for 
0,0,0,0,0,0,0,//  don't delete tmpFile - this ensures we don't attempt to create   a tmpDir with a duplicate name 
0,0,0,0,0,0,0,//  disable it if enabled 
0,0,0,0,0,0,0,//  close the session and newly created ephemeral node should be deleted 
0,0,0,0,0,0,0,//  only 1 commit, otherwise it will be flaky   Then ... verify serverStats is updated to the number of commits (as threshold is set to 0) 
0,0,0,0,0,0,0,//  Clean up dead sessions 
0,0,0,0,0,0,0,/*      * Max buffer size to be read from the network.      */
0,0,0,0,0,0,0,//  Send a diff 
0,0,0,0,0,0,0,//  This server should fail to join the quorum as it is not using one of the supported suites from the other 
0,0,0,0,0,0,0,//  before connecting to quorum, servers should have set up dynamic file   version and pointer. And the lag-off server is using the older   version dynamic file. 
0,0,0,0,0,0,0,//  This should never happen when executing reconfig command line,   because it is guaranteed that we have a ZooKeeperAdmin instance ready   to use in CliCommand stack.   The only exception would be in test code where clients can directly set   ZooKeeper object to ZooKeeperMain. 
0,0,0,0,0,0,0,//  Using the old PlainSocketImpl (prior to JDK 13) we expect to get Socket Exception 
0,0,0,0,0,0,0,//  when a reconfig occurs where the leader is removed or becomes an observer,  
0,0,0,0,0,0,0,//         ZooKeeper zk = createClient();            long sessionId = zk.getSessionId();          byte[] passwd = zk.getSessionPasswd();          zk.close();            zk.close();            LOG.info("Closed first session");            startSignal = new CountDownLatch(1);          zk = new ZooKeeper(HOSTPORT, CONNECTION_TIMEOUT, this,                  sessionId, passwd);          startSignal.await();            LOG.info("Opened reuse");            Assert.assertEquals(sessionId, zk.getSessionId());            zk.close();      } 
0,0,0,0,0,0,0,//  we're good 
0,0,0,0,0,0,0,//  we do not want to wait for a session close. send it as soon as we   detect it! 
0,0,0,0,0,0,0,//  we can just ignore because the child watcher takes care of this 
0,0,0,0,0,0,0,/*          * current state of sender          */
0,0,0,0,0,0,0,//  get path [watch] 
0,0,0,0,0,0,0,//  SSL prohibits unilateral half-close 
0,0,0,0,0,0,0,//  try to access it with different user (myuser) 
0,0,0,0,0,0,0,//  test failed somehow. 
0,0,0,0,0,0,0,//  guarded by sync 
0,0,0,0,0,0,0,//  Close the session. 
0,0,0,0,0,0,0,//  for self-signed certs, issuer == subject 
0,0,0,0,0,0,0,//  connect to it 
0,0,0,0,0,0,0,//  of updates; see the implementation comment at setLastSeenQuorumVerifier(). 
0,0,0,0,0,0,0,//  close the bad client socket immediately 
0,0,0,0,0,0,0,/*      * Test if a receiveConnection is able to timeout on socket errors      */
0,0,0,0,0,0,0,//  Verify that server is following and has the same epoch as the leader 
0,0,0,0,0,0,0,//  For tests and NettyServerCnxnFactory only, thus package-private. 
0,0,0,0,0,0,0,/*                              * We want to make sure we implement the state machine                             * correctly. If we are a PARTICIPANT, once a leader                             * is elected we can move either to LEADING or                              * FOLLOWING. However if we are an OBSERVER, it is an                             * error to be elected as a Leader.                              */
0,0,0,0,0,0,0,//  Change the election round for one of the members of the ensemble 
0,0,0,0,0,0,0,//  log warning message if there is no matching commit   old leader send outstanding proposal to observer 
0,0,0,0,0,0,0,//  Validate data on both follower and leader 
0,0,0,0,0,0,0,//  start all the servers 
0,0,0,0,0,0,0,//  [testhost-3.testdomain.com:1237, testhost-2.testdomain.com:1236, testhost-1.testdomain.com:1235] 
0,0,0,0,0,0,0,//  If we explicitly close the session, then the session id should no 
0,0,0,0,0,0,0,/*                                  * Send a notification back if the peer that sent this                                 * message is also looking and its logical clock is                                 * lagging behind.                                  */
0,0,0,0,0,0,0,//  e.g. servicePrincipalName := "zookeeper" 
0,0,0,0,0,0,0,//  validate typical case - requested == negotiated 
0,0,0,0,0,0,0,//  server and the local session was not persisted). 
0,0,0,0,0,0,0,//  the connecting peer (id = 2) is a 3.4.6 observer 
0,0,0,0,0,0,0,//  GSSAPI: server sends a final packet after authentication succeeds 
0,0,0,0,0,0,0,//  Peer has zxid of epoch 3 
0,0,0,0,0,0,0,//  Force snapshot and restore 
0,0,0,0,0,0,0,//  Do Nothing 
0,0,0,0,0,0,0,//  hdm.addLoggerMBean(rootLogger.getName()); 
0,0,0,0,0,0,0,//  If version can't be parsed, use the more conservative Java 8 default 
0,0,0,0,0,0,0,//  ZOOKEEPER-2467 : Testing negative number for redo command 
0,0,0,0,0,0,0,//  @see jira issue ZOOKEEPER-706. Test auto reset of a large number of 
0,0,0,0,0,0,0,//  If we are in read-only mode, seek for read/write server 
0,0,0,0,0,0,0,//  Lost quorum of last committed and/or last proposed   config, set shutdown flag 
0,0,0,0,0,0,0,/*              * Have to wait for the first ACK, wait until             * the leader is ready, and only then we can             * start processing messages.              */
0,0,0,0,0,0,0,//  Shutdown Zookeeper. 
0,0,0,0,0,0,0,//  second chance...   in some cases, leader change in particular, the timing is   very tricky to get right in order to assure that the client has   disconnected and reconnected. In some cases the client will   disconnect, then attempt to reconnect before the server is   back, in which case we'll see another connloss on the operation   in the try, this catches that case and waits for the server   to come back 
0,0,0,0,0,0,0,//  force the zxid to be behind the content 
0,0,0,0,0,0,0,//  different zxids for a server depending on timing. 
0,0,0,0,0,0,0,//  Sends connection request asynchronously if the quorum   sasl authentication is enabled. This is required because   sasl server authentication process may take few seconds to   finish, this may delay next peer connection requests. 
0,0,0,0,0,0,0,//  suppose that this new server never heard about the reconfig proposal 
0,0,0,0,0,0,0,/*      * Test if Worker threads are getting killed after connection loss      */
0,0,0,0,0,0,0,//  With the defect, leader hangs here also, but with fix   it does not 
0,0,0,0,0,0,0,//  Capture the command name from the URL 
0,0,0,0,0,0,0,//  clear pending revalidations 
0,0,0,0,0,0,0,//  expected, sort of 
0,0,0,0,0,0,0,/*              * Later epoch              */
0,0,0,0,0,0,0,//  Start with 9 servers and 10000 clients 
0,0,0,0,0,0,0,//  Initialize 'lastLogin' to do a login at first time 
0,0,0,0,0,0,0,//  accept, maxClientCnxns, configureBlocking 
0,0,0,0,0,0,0,//  start server again with corrupted database 
0,0,0,0,0,0,0,//  Don't leak sockets on errors 
0,0,0,0,0,0,0,//  determine whether we need to send an AuthFailed event. 
0,0,0,0,0,0,0,//  disable Client Sasl 
0,0,0,0,0,0,0,//  create transaction and snapshot files in data directory 
0,0,0,0,0,0,0,//  the first poll is just a session delivery 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * saveDefaultConnectionFile(java.util.Properties)      */
0,0,0,0,0,0,0,//  different server, since it has been propagated. 
0,0,0,0,0,0,0,//  correct 
0,0,0,0,0,0,0,//  Connection set is relied on heavily by four letter commands 
0,0,0,0,0,0,0,//  compare http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html 
0,0,0,0,0,0,0,//  ... then disable throttling after 2 seconds. 
0,0,0,0,0,0,0,//  Using the NioSocketImpl after JDK 13, the expected behaviour on the client side   is to reach the end of the stream (bytesRead == -1), without a socket exception. 
0,0,0,0,0,0,0,//  Utility method that recreates a new ZooKeeperAdmin handle, and wait for the handle to connect to 
0,0,0,0,0,0,0,//  number of servers increased 
0,0,0,0,0,0,0,//  ensure it closes - in particular wait for thread to exit 
0,0,0,0,0,0,0,//  reset for next run 
0,0,0,0,0,0,0,//  Populate DIGEST-MD5 user -> password map with JAAS configuration entries from the "Server" section.   Usernames are distinguished from other options by prefixing the username with a "user_" prefix. 
0,0,0,0,0,0,0,//  First test to see if the watch survives across reconnects 
0,0,0,0,0,0,0,//  getters 
0,0,1,0,0,0,0,//  Imp: Safer side catching all type of exceptions and remove 'sid'   from inprogress connections. This is to avoid blocking further   connection requests from this 'sid' in case of errors. 
0,0,0,0,0,0,0,//  lets change leader to observer 
0,0,0,0,0,0,0,//  ensure server started 
0,0,0,0,0,0,0,//  Peer has zxid of epoch 1 
0,0,0,0,0,0,0,//  prevent untyped construction 
0,0,0,0,0,0,0,//  renewal thread's main loop. if it exits from here, thread will exit. 
0,0,0,0,0,0,0,//  the start of second log, since the first one is removed 
0,0,0,0,0,0,0,//  nextProcessor returns. 
0,0,0,0,0,0,0,/*      * See <a href="{@docRoot}/../../../docs/zookeeperAdmin.html#sc_zkCommands">     * Zk Admin</a>. this link is for all the commands.      */
0,0,0,0,0,0,0,//  Getting NEWLEADER here instead of in discovery    means this is Zab 1.0 
0,0,0,0,0,0,0,//  Guarantee that the final token is the one we're expanding 
0,0,0,0,0,0,0,//  already has quota 
0,0,0,0,0,0,0,//  Verify ACLs in the response 
0,0,0,0,0,0,0,//  ZooKeeper server supports two kinds of connection: unencrypted and encrypted. 
0,0,0,0,0,0,0,//  make sure that the error thread exits 
0,0,0,0,0,0,0,//  Unknown session 
0,0,0,0,0,0,0,//  quorum servers. 
0,0,0,0,0,0,0,//  Peer has zxid of epoch 0 
0,0,0,0,0,0,0,//  test old cluster 
0,0,0,0,0,0,0,/*      * Thread to run an instance of leader election for      * a given quorum peer.      */
0,0,0,0,0,0,0,// the directory containing the 
0,0,0,0,0,0,0,// Spy on ZK so we can check if a snapshot happened or not. 
0,0,0,0,0,0,0,//  verify no access 
0,0,0,0,0,0,0,//  This should fail since the buffer size > the data size due to extra fields 
0,0,0,0,0,0,0,//  if we can get here, it is a valid global session 
0,0,0,0,0,0,0,//  session is setup 
0,0,0,0,0,0,0,//  Set currentlyCommitting so we will block until this   completes. Cleared by CommitWorkRequest after 
0,0,0,0,0,0,0,//  expiry is before next scheduled refresh). 
0,0,0,0,0,0,0,//  New server type need to handle in-flight packets 
0,0,0,0,0,0,0,//  This will remove the cnxn from cnxns 
0,0,0,0,0,0,0,//  open a connection 
0,0,0,0,0,0,0,//  Use them all except one to build the ensemble 
0,0,0,0,0,0,0,//  modify follower's client port 
0,0,0,0,0,0,0,//  read "is read-only" flag 
0,0,0,0,0,0,0,//  Send closeSession request. 
0,0,0,0,0,0,0,//  the server should respond within 10s 
0,0,0,0,0,0,0,//  element, take, and remove follow the same pattern.   We want to return the child node with the smallest sequence number.   Since other clients are remove()ing and take()ing nodes concurrently,    the child with the smallest sequence number in orderedChildren might be gone by the time we check.   We don't call getChildren again until we have tried the rest of the nodes in sequence order. 
0,0,0,0,0,0,0,//  Make a clean snapshot 
0,0,0,0,0,0,0,//  clear out the ref to ensure no reuse 
0,0,0,0,0,0,0,//  servers 1 and 2 should be able to work independently 
0,0,0,0,0,0,0,//  setup session tracker 
0,0,0,0,0,0,0,//  This has to be set to null when the same instance of this class is reused between test cases 
0,0,0,0,0,0,0,//  "zookeeper/myhost.foo.com@FOO.COM" 
0,0,0,0,0,0,0,//  Do nothing, Observers keep themselves to   themselves. 
0,0,0,0,0,0,0,//  when local=true, here if connection not available, simply removes 
0,0,0,0,0,0,0,//  backward compatibility - dynamic configuration in the same file as 
0,0,0,0,0,0,0,//  access only inside synchronized(handshakeCompletedLock) { ... } blocks 
0,0,0,0,0,0,0,//  trigger the watches 
0,0,0,0,0,0,0,//  sleep for 10 seconds. 
0,0,0,0,0,0,0,//  including the lag-off server. 
0,0,0,0,0,0,0,//  Code unfortunately must be duplicated below since we can't assign   anything   before calling super 
0,0,0,0,0,0,0,//  Setup a database with two znodes 
0,0,0,0,0,0,0,//  Find the log file that starts before or at the same time as the   zxid of the snapshot 
0,0,0,0,0,0,0,//  mutators 
0,0,0,0,0,0,0,//  Handshake will take place, and then X509AuthenticationProvider should reject the untrusted cert 
0,0,0,0,0,0,0,//  Make the transaction log directory read only 
0,0,0,0,0,0,0,//  expecting close to log session closure 
0,0,0,0,0,0,0,//  1: create ephemeral node 
0,0,0,0,0,0,0,//  The QuorumCnxManager is held through an AtomicReference to ensure cross-thread visibility 
0,0,0,0,0,0,0,//  For Invalid dataversion number should not throw exception 
0,0,0,0,0,0,0,//  expected 
0,0,0,0,0,0,0,//  if idx is the the leader then everyone will get disconnected,   otherwise if idx is a follower then just that client will get 
0,0,0,0,0,0,0,//  This will wake up the selector threads, and tell the   worker thread pool to begin shutdown. 
0,0,0,0,0,0,0,//  again after leader election 
0,0,0,0,0,0,0,//  Trigger a GC. This will hopefully (but not necessarily) print   details about detected leaks to standard error before the error   is thrown. 
0,0,0,0,0,0,0,//  Need check if the record is a DataNode instance because of changes in ZOOKEEPER-2014   which adds default ACL to config node. 
0,0,0,0,0,0,0,//  Peer has zxid that we have never seen 
0,0,0,0,0,0,0,/*      * Start up the ZooKeeper server.     *     * @param args the configfile or the port datadir [ticktime]      */
0,0,0,0,0,0,0,//  Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3, fails, returns to LOOKING state 
0,0,0,0,0,0,0,//  unregister from JMX 
0,0,0,0,0,0,0,//  Change the quorum system from majority to hierarchical. 
0,0,0,0,0,0,0,//  check session close request 
0,0,0,0,0,0,0,//  returns whether we are interested in writing, which is determined 
0,0,1,0,0,0,0,//  Expect this to fail, the trust store does not contain a private key 
0,0,0,0,0,0,0,//  Use the odd one out for the client 
0,0,0,0,0,0,0,//  verify node delete watcher 
0,0,0,0,0,0,0,//  this case is not tested so throw the expected exception 
0,0,0,0,0,0,0,//  and so on 
0,0,0,0,0,0,0,//  not logs or anything else (per ZOOKEEPER-2420) 
0,0,0,0,0,0,0,//  0xff = Extended feature is ON   0x0000 = Extended type id TTL (0) 
0,0,0,0,0,0,0,//  longer be valid. 
0,0,0,0,0,0,0,//  And now it goes back to normal next() so it should be everything 
0,0,0,0,0,0,0,//  Mutation packets will be queued during the serialize,   so we need to mark when the peer can actually start   using the data 
0,0,0,0,0,0,0,//  Shutdown for the last time. 
0,0,0,0,0,0,0,//  queue 
0,0,0,0,0,0,0,// update the current candidate, and if it is the only one remaining, return it 
0,0,0,0,0,0,0,//  should never ever happen 
0,0,0,0,0,0,0,//  check get 
0,0,0,0,0,0,0,/*         * If we have a majority, then we are good to go.         */
0,0,0,0,0,0,0,//  Label to store Icon 
0,0,0,0,0,0,0,//  waiting for the session expiry 
0,0,0,0,0,0,0,//       throw new RuntimeException("My id " + myid + " not in the peer list");  } 
0,0,0,0,0,0,0,//  Additional sanity checks on content selected by wildcard can be done here 
0,0,0,0,0,0,0,/*  nada  */
0,0,0,0,0,0,0,// have the new credentials (pass it to the LoginContext constructor) 
0,0,0,0,0,0,0,//  protected by synchronized(this) 
0,0,0,0,0,0,0,//  4. wait one of the follower to be the new leader 
0,0,0,0,0,0,0,//  Exception is expected 
0,0,0,0,0,0,0,//  Just create some node so that we know the current zxid 
0,0,0,0,0,0,0,//  wait for the setData txn being populated 
0,0,0,0,0,0,0,//  wrap SASL response token to client inside a Response object. 
0,0,0,0,0,0,0,//  ensure no beans are leftover 
0,0,0,0,0,0,0,//  Reconfig node is access controlled by default (ZOOKEEPER-2014). 
0,0,0,0,0,0,0,//  initializing it for new connection 
0,0,0,0,0,0,0,// 2 should elect itself as leader and run by itself 
0,0,0,0,0,0,0,//  next) 
0,0,0,0,0,0,0,//  give dataTree a chance to sync its lastProcessedZxid 
0,0,0,0,0,0,0,//  The child might already be deleted during taking fuzzy snapshot,   but we still need to update the pzxid here before throw exception 
0,0,0,0,0,0,0,//  lets kill the leader and see if a new one is elected 
0,0,0,0,0,0,0,// When we lock markerNode, allow writeRecord to continue 
0,0,0,0,0,0,0,//  Below commands all need a live connection 
0,0,0,0,0,0,0,//  org.apache.log4j.Logger.getRootLogger(); 
0,0,0,0,0,0,0,// do nothing 
0,0,0,0,0,0,0,//  should not happen 
0,0,0,0,0,0,0,//  Check for a valid snapshot 
0,0,0,0,0,0,0,//  close() could have been called if receiveMessage() failed 
0,0,0,0,0,0,0,//  Move back to the old port 
0,0,0,0,0,0,0,//  Register a watch on the node 
0,0,0,0,0,0,0,//  do not add non quorum packets to the queue. 
0,0,0,0,0,0,0,//  false means that the session has expired 
0,0,0,0,0,0,0,//  check if all the followers are alive 
0,0,0,0,0,0,0,//  Adding pre-created watcher 
0,0,0,0,0,0,0,//  Since sessionTracker and syncThreads poll we just have to   set running to false and they will detect it during the poll 
0,0,0,0,0,0,0,// this.numRequestsProcessing.incrementAndGet(); 
0,0,0,0,0,0,0,// we do not need to make a copy of node.data because the contents  are never changed 
0,0,0,0,0,0,0,//  Set to true when connected to a read-only server, or a read-write (quorum) server. 
0,0,0,0,0,0,0,//  parse out chroot, if any 
0,0,0,0,0,0,0,//  Prepare a thread that will create znodes. 
0,0,0,0,0,0,0,//  thread object 't' will be null if a refresh thread is not needed. 
0,0,0,0,0,0,0,//  Just in case 
0,0,0,0,0,0,0,//  GSSAPI. 
0,0,0,0,0,0,0,//  The bug will manifest itself here because zkIdle will expire 
0,0,0,0,0,0,0,//  1. Authentication hasn't finished yet: we must wait for it to do so. 
0,0,0,0,0,0,0,//  Re-connect the client (in case we were connected to the shut down 
0,0,0,0,0,0,0,//  ignore connectionloss when removing from local   session 
0,0,0,0,0,0,0,//  assuming the first packet is the priming packet. 
0,0,0,0,0,0,0,//  since this is single buffer being resused   we need   to truncate the previous bytes of string. 
0,0,0,0,0,0,0,/*      * Does create/delete depending on the type and verifies     * if cversion before the operation is 1 less than cversion afer.      */
0,0,0,0,0,0,0,//  Just make sure we are good when admin made some mistakes in config file. 
0,0,0,0,0,0,0,//  file when they boot 
0,0,0,0,0,0,0,/*  Delete  */
0,0,0,0,0,0,0,//  Receive challenge request 
0,0,0,0,0,0,0,//  Ensure that we can convert all valid integers to KeeperStates 
0,0,0,0,0,0,0,//  shutdown the server 
0,0,0,0,0,0,0,// if this server is voter in new config with the same quorum address,   then it will remain the leader  otherwise an up-to-date follower will be designated as leader. This saves 
0,0,0,0,0,0,0,//  cluster 
0,0,0,0,0,0,0,//  if the client is not currently connected to any server 
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getChildCount()          */
0,0,0,1,1,1,1,//  TODO partitioning of peers and clients 
0,0,0,0,0,0,0,//  Run servers 0..2 for a while 
0,0,0,0,0,0,0,//  HBase currently adds a single server line to the config, for   b/w compatibility reasons we need to keep this here. If standaloneEnabled   is true, the QuorumPeerMain script will create a standalone server instead   of a quorum configuration 
0,0,0,0,0,0,0,//  now check if its one of the zookeeper node child 
0,0,0,0,0,0,0,//  even though followers timed out, their ids are in connectingFollowers, and their   epoch were accounted for, so the leader should not block and since it started with  
0,0,0,0,0,0,0,//  channel disconnection happened 
0,0,1,0,0,0,0,/*  This file copied from Hadoop's security branch,  * with the following changes:  * 1. package changed from org.apache.hadoop.util to  *    org.apache.zookeeper.  * 2. Usage of Hadoop's Configuration class removed since  *    it is not available in Zookeeper: instead, system properties  *    are used.  * 3. The deprecated getUlimitMemoryCommand() method removed since  *    it is not needed.   */
0,0,0,0,0,0,0,//  multi record:     set "/foo" => succeed, leave a outstanding change     delete "/foo" => fail, roll back change 
0,0,0,0,0,0,0,//  independently of the client socket implementation details, we always make sure the   server didn't receive any data during the test 
0,0,0,0,0,0,0,//  single address not extracted 
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getIndex(javax.swing.tree.TreeNode)          */
0,0,0,0,0,0,0,/*      * Counter to count worker threads      */
0,0,0,0,0,0,0,//  serialize the data with one znode with acl 
0,0,0,0,0,0,0,// addr should never be null, but just to make sure 
0,0,0,0,0,0,0,//  1. SASL client is disabled. 
0,0,0,0,0,0,0,//  cut the tree till their is more than one child 
0,0,0,0,0,0,0,//  Start Admin server 
0,0,0,0,0,0,0,/*                  * Decrement outstanding request count. The processor may be                 * blocked at the moment because it is waiting for the pipeline                 * to drain. In that case, wake it up if there are pending                 * requests.                  */
0,0,0,0,0,0,0,//  config + itself 
0,0,0,0,0,0,0,// the timeout thread handling 
0,0,0,0,0,0,0,//  zxid should still be previous result because record's not changed. 
0,0,0,0,0,0,0,//  6 is not in the view - its vote shouldn't count 
0,0,0,0,0,0,0,/*      * The control sequence sent by the telnet program when it closes a     * connection. Include simply to keep the logs cleaner (the server would     * close the connection anyway because it would parse this as a negative     * length).      */
0,0,0,0,0,0,0,//  DIFF + 1 proposals + 1 commit 
0,0,0,0,0,0,0,//  org.apache.log4j.jmx.HierarchyDynamicMBean hdm = new org.apache.log4j.jmx.HierarchyDynamicMBean(); 
0,0,0,0,0,0,0,/*  to be safe we just create a new         * datatree.          */
0,0,0,0,0,0,0,// add partcipants  change to observers 
0,0,0,0,0,0,0,// LOG.trace(e); 
0,0,1,0,0,0,0,//  This test simulate the usual rolling restart with no membership change:   1. A node is shutdown first (e.g. to upgrade software, or hardware, or cleanup local data.).   2. After upgrade, start the node.   3. Do this for every node, one at a time. 
0,0,0,0,0,0,0,//  any reconfig is invoked 
0,0,0,0,0,0,0,// Thread.sleep(60000);  assertTrue(message, fdCount <= initialFdCount); 
0,0,0,0,0,0,0,//  limited number of retries. 
0,0,0,0,0,0,0,//  Else what we are expecting since there are no outstanding watches 
0,0,0,0,0,0,0,//  Note: we don't care about delete events 
0,0,0,0,0,0,0,//  set auth using digest 
0,0,0,0,0,0,0,//  lets force the recreation of the id 
0,0,0,0,0,0,0,//  find most idle node 
0,0,0,0,0,0,0,//  four letter words take care   need not do anything else 
0,0,0,0,0,0,0,//  prior to this request 
0,0,0,0,0,0,0,//  watches set below exceeds 1MB. 
0,0,0,0,0,0,0,//    test get/exists with single set of watchers     get all, then exists all 
0,0,0,0,0,0,0,//  After leaving listener thread, the host cannot join the   quorum anymore, this is a severe error that we cannot   recover from, so we need to exit 
0,0,0,0,0,0,0,//  Both servers 0 and 1 will have the .next config file, which means   for them that a reconfiguration was in progress when they failed 
0,0,0,0,0,0,0,//  send error message to the learner 
0,0,0,0,0,0,0,//  Tells whether SSL is enabled on this ServerCnxnFactory 
0,0,0,0,0,0,0,//  iteration 
0,0,0,0,0,0,0,//  Peer has 0 zxid (new machine turn up), txnlog 
0,0,0,0,0,0,0,//  Make sure we can't convert from an invalid wrapper 
0,0,0,0,0,0,0,//  static configuration params see writeDynamicConfig() 
0,0,0,0,0,0,0,/*      * Object to synchronize access to recvQueue      */
0,0,0,0,0,0,0,//  list of followers that are ready to follow (i.e synced with the leader) 
0,0,0,0,0,0,0,//  and the leader will complete it. 
0,0,0,0,0,0,0,//  Set a small preAllocSize (.5 MB) 
0,0,0,0,0,0,0,//  Since JettyAdminServer reads a system property to determine its port,   make sure it initializes itself before setting the system property   again with the second port number 
0,0,0,0,0,0,0,//  the leader 
0,0,0,0,0,0,0,//  Verify correctness of data and whether sequential znode creation 
0,0,0,0,0,0,0,//  Node 1 is started without the leader (3) in its config view 
0,0,0,0,0,0,0,// noinspection PointlessBitwiseExpression   TTL_RESERVED_BIT is actually zero - but it serves to document that the proper extended bit needs to be set 
0,0,0,0,0,0,0,/*      * A peer can either be participating, which implies that it is willing to     * both vote in instances of consensus and to elect or become a Leader, or     * it may be observing in which case it isn't.     *     * We need this distinction to decide which ServerState to move to when     * conditions change (e.g. which state to become after LOOKING).      */
0,0,1,1,0,1,1,//  better: actions/help-about, but not in tango 
0,0,0,0,0,0,0,//  The password here is 'test'. 
0,0,0,0,0,0,0,//  Always treat packet from the client as a possible   local request. 
0,0,0,0,0,0,0,//  And the ephemeral nodes will be gone since the session died. 
0,0,0,0,0,0,0,//  commit (writes the new config to ZK tree (/zookeeper/config)                      
0,0,0,0,0,0,0,//  Form a quorum without ssl 
0,0,0,0,0,0,0,//  if there are multiple hostports, just take the first one 
0,0,0,0,0,0,0,//  Close connections still pending on the selector. Any others   with in-flight work, let drain out of the work queue. 
0,0,0,0,0,0,0,//  Again failure is expected because no ACL is associated with this user. 
0,0,0,0,0,0,0,/*  * This code is originally from HDFS, see the similarly named files there * in case of bug fixing, history, etc...  */
0,0,0,0,0,0,0,// set the session owner   as the follower that   owns the session 
0,0,0,0,0,0,0,//  simply return as there is a connection request to   server 'sid' already in progress. 
0,0,0,0,0,0,0,//  start server again 
0,0,0,0,0,0,0,//  Leave the bad client socket idle 
0,0,0,0,0,0,0,//  Add as global before removing as local 
0,0,0,0,0,0,0,//  respective reconnection interval 
0,0,0,0,0,0,0,//  append "am-I-allowed-to-be-readonly" flag 
0,0,0,0,0,0,0,//  read operation during r/o mode 
0,0,0,0,0,0,0,//  add it to pendingSyncs. 
0,0,0,0,0,0,0,//  Peer has zxid of epoch 2, so it is already sync 
0,0,0,0,0,0,0,//  add transaction log files to the snap version dir 
0,0,0,0,0,0,0,/*      * Creates a configuration string for servers 0..numServers-1 Ids in     * observerIds correspond to observers, other ids are for participants.      */
0,0,0,0,0,0,0,//  Find leader id. 
0,0,0,0,0,0,0,//  We now ship the request to the leader. As with all   other quorum operations, sync also follows this code   path, but different from others, we need to keep track   of the sync operations this Observer has pending, so we 
0,0,0,0,0,0,0,//  Act 
0,0,0,0,0,0,0,//  Empty snapshot and logfile containing a 5000-byte create 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#removeWatchers     * (java.util.Collection)      */
0,0,0,0,0,0,0,//  5. send a create request to old leader and make sure it's synced to disk, 
0,0,0,0,0,0,0,//  quorum.auth.learnerRequireSasl=true, quorum.auth.serverRequireSasl=false 
0,0,0,0,0,0,0,//  make sure this is always synchronized with Zoodefs!! 
0,0,0,0,0,0,0,//  we know this from the data files   this node is the last node in the snapshot 
0,0,0,0,0,0,0,//  ZOOKEEPER-569:   If no votes are received for live peers, reset to voting   for ourselves as otherwise we may hang on to a vote 
0,0,0,0,0,0,0,//  close listen socket and signal selector threads to stop 
0,0,0,0,0,0,0,//  checking the child version using chRoot client. 
0,0,0,0,0,0,0,//  Setting this to "true" will enable encrypted client-server communication. 
0,0,0,0,0,0,0,//  Local session from other server 
0,0,0,0,0,0,0,//  assertFalse(log.hasWarned); 
0,0,0,0,0,0,0,/*          * Start server 0          */
0,0,0,0,0,0,0,//  Ignoring exception. If there is an ioexception   then one of the following assertion will fail 
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getChildAt(int)          */
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#getSessionId()      */
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.proto.WatcherEvent)      */
0,0,0,0,0,0,0,//  create DataNode and call getChildren 
0,0,0,0,0,0,0,// that we can reconfigure down to one participant with observers. 
0,0,0,0,0,0,0,// make that testData exists otherwise it fails on windows 
0,0,0,0,0,0,0,//  Receive new message 
0,0,0,0,0,0,0,// 1000(1 second) is to prevent race condition missing to send the second ping  also make sure not to send too many pings when readTimeout is small  
0,0,0,0,1,1,1,//  normally because the leader didn't execute waitForEpochAck 
0,0,0,0,0,0,0,/*              * A snapshot might be in progress while we are modifying the data             * tree. If we set lastProcessedZxid prior to making corresponding             * change to the tree, then the zxid associated with the snapshot             * file will be ahead of its contents. Thus, while restoring from             * the snapshot, the restore method will not apply the transaction             * for zxid associated with the snapshot file, since the restore             * method assumes that transaction to be present in the snapshot.             *             * To avoid this, we first apply the transaction and then modify             * lastProcessedZxid.  During restore, we correctly handle the             * case where the snapshot contains data ahead of the zxid associated             * with the file.              */
0,0,0,0,0,0,0,//  succeed. We explicitly disable it at the top of X509Util.java. 
0,0,0,0,0,0,0,//  make sure the updates indeed committed. If it is not 
0,0,0,0,0,0,0,//  Simulating close session request: removeSession() will be executed 
0,0,0,0,0,0,0,//  note that the login object is static: it's shared amongst all zookeeper-related connections.   in order to ensure the login is initialized only once, it must be synchronized the code snippet. 
0,0,0,0,0,0,0,//  Some tests may not have a static config file. 
0,0,0,0,0,0,0,//    test get/exists with single set of watchers    get/exists together 
0,0,0,0,0,0,0,/*      * Local IP address      */
0,0,0,0,0,0,0,//  Stops automatic reads of incoming data on this channel. We don't   expect any more traffic from the client when processing a 4LW 
0,0,0,0,0,0,0,//  If previous state was not NEW, start() has already been called. 
0,0,0,0,0,0,0,// $NON-NLS-1$ 
0,0,0,0,0,0,0,//  Start up two of the quorum and add 10 txns 
0,0,0,0,0,0,0,//  Do some other update, so we bump the maxCommttedZxid 
0,0,0,0,0,0,0,//  remove hosts 7 and 8 (the last two in a list of 9 hosts) 
0,0,0,0,0,0,0,//  for sending over wire 
0,0,0,0,0,0,0,/*                      * Done with the election round, so now we set the vote in                     * the peer. A real zookeeper would take care of setting the                     * current vote. Here we do it manually.                      */
0,0,0,0,0,0,0,// commit and send some info 
0,0,0,0,0,0,0,//  close all open connections 
0,0,0,0,0,0,0,//  Follower is already sync with us, send empty diff 
0,0,0,0,0,0,0,//  roll the log 
0,0,0,0,0,0,0,//  this is negative, so that if a learner that does auth, connects to a   server, it'll think the received packet is an authentication packet 
0,0,0,0,0,0,0,//  The last valid ASCII character 
0,0,0,0,0,0,0,//  srvr is enabled by default due to the sad fact zkServer.sh uses it. 
0,0,0,0,0,0,0,/*      * Maximum capacity of thread queues      */
0,0,0,0,0,0,0,//  Creating chRoot client. 
0,0,0,0,0,0,0,//  Make sure we can instantiate a key manager from the PKCS12 file on disk 
0,0,0,0,0,0,0,//  This could happen both in static file or dynamic file. 
0,0,0,0,0,0,0,//  standalone server doesn't need myid file. 
0,0,0,0,0,0,0,//                 LOG.info("Testing " + i + " connections");              }              // We want to make sure socket descriptors are going away              zk = new ZooKeeper(hostPort, 30000, this);              zk.getData("/", false, new Stat());              zk.close();          }      } 
0,0,0,0,0,0,0,//  doesn't exist and the acl cache is empty 
0,0,0,0,0,0,0,/*                      * Get the current value of the logical clock for this peer                     * so that we know in which round this peer has executed.                      */
0,0,0,0,0,0,0,//  4 and 5 are observers, their vote shouldn't count 
0,0,0,0,0,0,0,//  refresh interval in msec   last time the command was performed   env for the command execution 
0,0,0,0,0,0,0,//  Add some timing margin for the quorum to elect a leader   (without this margin, timeouts have been observed in parallel test runs) 
0,0,0,0,0,0,0,//  authorized host lists 
0,0,0,0,0,0,0,//  Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up 
0,0,1,0,0,0,0,/*                  * Remove next notification from queue, times out after 2 times                 * the termination time                  */
0,0,0,0,0,0,0,//  children have changed, so read in the new list 
0,0,0,0,0,0,0,//  should be numClients/10 in expectation, we test that its numClients/10 +- slackPercent
0,0,0,0,0,0,0,//  Arrange   [testhost-4.testdomain.com:1238, testhost-3.testdomain.com:1237, testhost-2.testdomain.com:1236, testhost-1.testdomain.com:1235] 
0,0,0,0,0,0,0,//  The current protocol and two previous generations all send at least 28 bytes 
0,0,0,0,0,0,0,//  great this is what we want! 
0,0,0,0,0,0,0,/*              * The commit workers will have to execute this line before they             * wake up the commit processor. So this value is up-to-date when             * variant check is performed              */
0,0,0,0,0,0,0,//  send 0 if session is no   longer valid 
0,0,0,0,0,0,0,//  Restart ZK and observe a failure 
0,0,0,0,0,0,0,//  RemotePeerBean 
0,0,0,0,0,0,0,//  we are connected to a 1.0 server so accept the new epoch and read the next packet 
0,0,0,0,0,0,0,//  3 servers still up so this should work 
0,0,0,0,0,0,0,/*              * ZOOKEEPER-1863: continue only if there is no new request             * waiting in queuedRequests or it is waiting for a             * commit.               */
0,0,0,0,0,0,0,//  if we don't suspend a peer it will rejoin a quorum 
0,0,0,0,0,0,0,//  now lets stop the server 
0,0,0,0,0,0,0,//  zkServer.sh depends on "srvr". 
0,0,0,0,0,0,0,/*              * If using FLE, then every server requires a separate election             * port.              */
0,0,0,0,0,0,0,//  Since we don't check on the futures created by write calls to the channel complete we need to make sure   that all writes have been completed before closing the channel or we risk data loss   See: http://lists.jboss.org/pipermail/netty-users/2009-August/001122.html 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.encryption.DataEncryptionManager#decryptData     * (byte[])      */
0,0,0,0,0,0,0,//  We don't want to sleep on the first ever connect attempt. 
0,0,0,0,0,0,0,//  3 followers out of 5 are a majority of the voting view 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNodeIndex(java.lang.String)      */
0,1,0,0,0,0,0,/*          * Things we can only update after the whole txn is applied to data         * tree.         *         * If we update the lastProcessedZxid with the first sub txn in multi         * and there is a snapshot in progress, it's possible that the zxid         * associated with the snapshot only include partial of the multi op.         *         * When loading snapshot, it will only load the txns after the zxid         * associated with snapshot file, which could cause data inconsistency         * due to missing sub txns.         *         * To avoid this, we only update the lastProcessedZxid when the whole         * multi-op txn is applied to DataTree.          */
0,0,0,0,0,0,0,//  Directories are not used but we need it to avoid NPE 
0,0,0,0,0,0,0,//  queue the pair (watch set & event) for later processing 
0,0,0,0,0,0,0,/*      * getXid() is called externally by ClientCnxnNIO::doIO() when packets are sent from the outgoingQueue to     * the server. Thus, getXid() must be public.      */
0,0,0,0,0,0,0,//  Dump data to peer 
0,0,0,0,0,0,0,/*  Send a connect request. Any socket that has been closed (or at least                 * not added to the cnxn list on the server) will not have any bytes to                 * read and get an eof.                 *                 *  The trick here was finding a call that caused the server to put                 *  bytes in the input stream without closing the cnxn. None of                 *  the four letter commands do that, so we actually try to create                 *  a session which should send us something back, while maintaining                 *  the connection.                  */
0,0,0,0,0,0,0,//  run through till the counts no longer change on each server   max 15 tries, with 2 second sleeps, so approx 30 seconds 
0,0,0,0,0,0,0,//  also check to update the quotas for this node 
0,0,0,0,0,0,0,//  Test a hostname that resolves to a single address 
0,0,0,0,0,0,0,//  assertTrue(log.hasWarned); 
0,0,0,0,0,0,0,//  next scheduled refresh is sooner than (now + MIN_TIME_BEFORE_LOGIN). 
0,0,0,0,0,0,0,//  We send TRUNC and forward any packet starting lastProcessedZxid 
0,0,0,0,0,0,0,//  db is clear as part of deserializeSnapshot() 
0,0,0,0,0,0,0,/*              * Write a number of times until it             * detects that the socket is broken.              */
0,0,0,0,0,0,0,/*      * This class parses the initial identification sent out by peers with their     * sid & hostname.      */
0,0,0,0,0,0,0,//  Trying to get a first txn on the third give us the 
0,0,0,0,0,0,0,//  will do sessionTracker.addSession(id, timeout) 
0,0,0,0,0,0,0,/*  this means that we couldn't find any snapshot, so we need to             * initialize an empty database (reported in ZOOKEEPER-2325)  */
0,0,0,0,0,0,0,// check to see if zkDb is not null 
0,0,0,0,0,0,0,//  Upon reception of an ack message, remove it from the 
0,0,0,0,0,0,0,//  When ... 
0,0,0,0,0,0,0,//  when we add secureCnxnFactory. 
0,0,0,0,0,0,0,//  ... then force a throttled read after 1 second (this puts the read into queuedBuffer) ... 
0,0,0,0,0,0,0,/*              * Otherwise send to the corresponding thread to send.              */
0,0,0,0,0,0,0,//  Stop queuing connection attempts 
0,0,0,0,0,0,0,//  if we went to the next log file, we should call next() again 
0,0,0,0,0,0,0,//  The user did not override the default context. It might be that they just don't intend to use SASL,   so log at INFO, not WARN, since they don't expect any SASL-related information. 
0,0,0,0,0,0,0,//  this should only be for the beginning of the path   i.e. "/..." - split(path)[0] is empty string before first '/' 
0,0,0,0,0,0,0,//  so it should not do any work other than trace logging. 
0,0,0,0,0,0,0,//  Since pNew = 1 we should first try the new servers 
0,0,0,0,0,0,0,//  ZOOKEEPER-558:   In some cases the server does not close the connection (e.g., closeconn buffer   was not being queued — ZOOKEEPER-558) properly. This happens, for example,   when the client closes the connection. The server should still close the session, though. 
0,0,0,0,0,0,0,//  ignore exception 
0,0,1,1,1,1,1,//  TODO: introspect about runtime environment (such as jaas.conf) 
0,0,0,0,0,0,0,//  Resolve hostname for the remote server before attempting to   connect in case the underlying ip address has changed. 
0,0,0,0,0,0,0,// Another client removed the node first, try next 
0,0,0,0,0,0,0,//  Enumeration enumer = r.getCurrentLoggers(); 
0,0,0,0,0,0,0,//  Note: need to create a new ClientX509Util each time to pick up modified property value 
0,0,0,0,0,0,0,//  should cause "/foo" to get deleted when checkContainers() is called 
0,0,0,0,0,0,0,//  let it through, we don't require auth 
0,0,0,0,0,0,0,//  note that we should run the server, shut it down and only then   simulate a reconfig in progress by writing the temp file, but here no   other server is competing with them in FLE, so we can skip this step   (server 2 is booted after FLE ends) 
0,0,0,0,0,0,0,//  Last opened toaster 
0,0,0,0,0,0,0,//  take the first server on the list 
0,0,0,0,0,0,0,//  start server 2 with old config, where it is an observer 
0,0,0,0,0,0,0,//  Wait for the old leader to start completely 
0,0,0,0,0,0,0,//  lost the race, another thread already set the value 
0,0,0,0,0,0,0,//  DIFF + 3 proposals + 3 commit 
0,0,0,0,0,0,0,//  Initialized to 1 to prevent sending   stale notifications to peers 
0,0,0,0,0,0,0,// Add two participants and change them to observers to check 
0,0,0,0,0,0,0,//  this request came from someone else so just   send the commit packet 
0,0,0,0,0,0,0,//  track the number of records written to the log 
0,0,0,0,0,0,0,//  int percent = Integer.parseInt(timePercentCount[1]); 
0,0,0,0,0,0,0,//  OK to wait until socket disconnects while reading. 
0,0,0,0,0,0,0,//  Start thread that blast packets in the queue to learner 
0,0,0,0,0,0,0,//  '/multi' should have been deleted 
0,0,0,0,0,0,0,//  Assert   no exception thrown 
0,0,0,0,0,0,0,/* 	  Count number of log entries. Any line starting with a timestamp counts as an entry	 */
0,0,0,0,0,0,0,//  remotePeerBean.1 shouldn't exists in ReplicatedServer_3 
0,0,0,0,0,0,0,// votes[i] = v; 
0,0,0,0,0,0,0,//  revert back the error 
0,0,0,0,0,0,0,//  generate some transactions that will get logged 
0,0,0,0,0,0,0,//  and ensure trueLeader is still the leader 
0,0,1,0,0,0,0,//  sockKey may be concurrently accessed by multiple   threads. We use tmp here to avoid a race condition 
0,0,1,1,1,1,1,//  JAAS non-GSSAPI authentication: assuming and supporting only   DIGEST-MD5 mechanism for now.   TODO: use 'authMech=' value in zoo.cfg.
0,0,0,0,0,0,0,/*  *  Used to perform an atomic write into a file. *  If there is a failure in the middle of the writing operation,  *  the original file (if it exists) is left intact. *  Based on the org.apache.zookeeper.server.quorum.QuorumPeer.writeLongToFile(...) idiom *  using the HDFS AtomicFileOutputStream class.  */
0,0,0,0,0,0,0,/*          * If everyone else thinks I'm the leader, I must be the leader.         * The other two checks are just for the case in which I'm not the         * leader. If I'm not the leader and I haven't received a message         * from leader stating that it is leading, then predicate is false.          */
0,0,0,0,0,0,0,//  Create a new follower 
0,0,0,0,0,0,0,//  setup the messages to be streamed to follower 
0,0,0,0,0,0,0,//  Then ... 
0,0,0,0,0,0,0,//  nothing to prepend 
0,0,0,0,0,0,0,//  Verify serverStats is 0 before any commit 
0,0,0,0,0,0,0,//  If we cannot guarantee that this is strictly the starting txn   after a given zxid, we should fail. 
0,0,0,0,0,0,0,//  their are more child nodes   so just reset property. 
0,0,0,0,0,0,0,//  filter read requests 
0,0,0,0,0,0,0,//  we need to shutdown and start back up to make sure that the create session isn't the first transaction since 
0,0,0,0,0,0,0,//  find a follower 
0,0,0,1,1,1,1,//  XXX: Is lastProcessedZxid really the best thing to use? 
0,0,0,0,0,0,0,//  revert redirect of out/err streams - important step! 
0,0,0,0,0,0,0,//  transport 
0,0,0,0,0,0,0,//  old list (just the ports): 1238, 1237, 1236, 1235 
0,0,0,0,0,0,0,//  Remove all outstanding changes for paths of this multi.   Previous records will be added back later. 
0,0,0,0,0,0,0,//  When we explicitly close the session, we should not be able to 
0,0,0,0,0,0,0,//  Commit proposal may lag behind data tree, but it shouldn't affect   us in any case 
0,0,0,0,0,0,0,//  Check for race condition with session upgrading 
0,0,0,0,0,0,0,//  remotePeerBean.1 shouldn't exists in ReplicatedServer_2 
0,0,0,0,0,0,0,//  Peer has zxid of epoch 5 
0,0,0,0,0,0,0,//  [testhost-2.testdomain.com:1236, testhost-1.testdomain.com:1235] 
0,0,0,0,0,0,0,//  ignore timeout 
0,0,0,0,0,0,0,//  that add to outstandingChanges. 
0,0,0,0,0,0,0,//  clear all the connections on which we are selecting 
0,0,0,0,0,0,0,//  into looking state or following/leading state. 
0,0,0,0,0,0,0,//  Set to true if and only if constructor of ZooKeeperSaslClient 
0,0,0,0,0,0,0,//  This means reconfigMode = true, and nextHostInReconfigMode will be   called from next 
0,0,0,0,0,0,0,//  'rmr' is deprecated, so the test here is just for backwards 
0,0,0,0,0,0,0,//  setdata 
0,0,0,0,0,0,0,//  standalone mode - reconfiguration currently not supported 
0,0,0,0,0,0,0,//  in Zab V1.0 (ZK 3.4+) we might take a snapshot when we get the NEWLEADER message, but in pre V1.0   we take the snapshot on the UPDATE message, since Zab V1.0 also gets the UPDATE (after the NEWLEADER) 
0,0,0,0,0,0,0,//  Set the logical clock to 1 on fle instance of server 3. 
0,0,0,0,0,0,0,//  e.g. "zoo.cfg.dynamic", it returns null. 
0,0,0,0,0,0,0,//  check that the change has propagated to everyone 
0,0,0,0,0,0,0,//  Initialize Zookeeper again from the same dataDir. 
0,0,0,0,0,0,0,//  Peer has zxid of epoch 6 
0,0,0,0,0,0,0,//  Ensure we get the same value back after round trip conversion 
0,0,0,0,0,0,0,/*                              * Received ack successfully, so return                              */
0,0,0,0,0,0,0,//  Peer has zxid of epoch 4 
0,0,0,0,0,0,0,//  this is what we want 
0,0,0,0,0,0,0,/*          * Snapshots are taken lazily. It can happen that the child         * znodes of a parent are created after the parent         * is serialized. Therefore, while replaying logs during restore, a         * create might fail because the node was already         * created.         *         * After seeing this failure, we should increment         * the cversion of the parent znode since the parent was serialized         * before its children.         *         * Note, such failures on DT should be seen only during         * restore.          */
0,0,0,0,0,0,0,//  message with bad protocol version 
0,0,0,0,0,0,0,// setup servers 1-3 to be followers and 4 and 5 to be observers 
0,0,0,0,0,0,0,//  Border color 
0,0,1,0,0,0,0,/*  * This code is originally from HDFS, see the file name TestMiniKdc there * in case of bug fixing, history, etc. * * Branch : trunk * Github Revision: 916140604ffef59466ba30832478311d3e6249bd  */
0,0,0,0,0,0,0,//  We know the total JUnit process count and this test process's ID.   Use these values to calculate the valid range for port assignments   within this test process.  We lose a few possible ports to the   remainder, but that's acceptable. 
0,0,0,0,0,0,0,//  correctly 
0,0,0,0,0,0,0,//  Since all requests are passed to the request   processor it should wait for setting up the request   processor chain. The state will be updated to RUNNING   after the setup. 
0,0,0,0,0,0,0,//  some unexpected error, warn about it 
0,0,0,0,0,0,0,//  We expect two notifications before we want to continue         
0,0,0,0,0,0,0,//  create 7 servers 
0,0,0,0,0,0,0,// go over outstanding ops in order, and try to find a candidate that acked the most ops.  this way it will be the most up-to-date and we'll minimize the number of ops that get dropped 
0,0,0,0,0,0,0,// 2. Upgrade peer0,1,2 with quorum.auth.enableSasl=true and 
0,0,1,0,0,0,0,//  An authentication error occurred when the SASL client tried to initialize:   for Kerberos this means that the client failed to authenticate with the KDC.   This is different from an authentication error that occurs during communication   with the Zookeeper server, which is handled below. 
0,0,0,0,0,0,0,//  unnecessary code coupling. 
0,0,0,0,0,0,0,//  There are legal states in some use cases for null KeyManager or TrustManager.   But if a user wanna specify one, location is required. Password defaults to empty string if it is not   specified by the user. 
0,0,0,0,0,0,0,//  Change the snapcount to happen more often 
0,0,0,0,0,0,0,// invalid acl's 
0,0,0,0,0,0,0,//  this code requires a key in PKCS8 format which is not the default openssl format   to convert to the PKCS8 format you use : openssl pkcs8 -topk8 ... 
0,0,0,0,0,0,0,//  ignore as this is expected 
0,0,0,0,0,0,0,//  encoding 
0,0,0,0,0,0,0,//  There is no log record for the initial config, thus after syncing   with leader   /zookeeper/config is empty! it is also possible that last committed   config is propagated during leader election   without the propagation the corresponding log records.   so we should explicitly do this (this is not necessary when we're   already a Follower/Observer, only 
0,0,0,0,0,0,0,//  Local session from the leader 
0,0,0,0,0,0,0,//  Note that we make no effort here to remove empty mappings   from ipMap. 
0,0,0,0,0,0,0,//  recalculate the init limit time because retries sleep for 1000 milliseconds 
0,0,0,0,0,0,0,//  Start everyone but the leader 
0,0,0,0,0,0,0,//  Use DigestAuthenticationProvider.base64Encode or   run ZooKeeper jar with org.apache.zookeeper.server.auth.DigestAuthenticationProvider to generate password.   An example:   java -cp zookeeper-3.6.0-SNAPSHOT.jar:lib/log4j-1.2.17.jar:lib/slf4j-log4j12-1.7.5.jar:   lib/slf4j-api-1.7.5.jar org.apache.zookeeper.server.auth.DigestAuthenticationProvider super:test 
0,0,0,0,0,0,0,//  With peer epoch and version the message became 40 bytes 
0,0,0,0,0,0,0,/*                              * This predicate is true once we don't read any new                             * relevant message from the reception queue                              */
0,0,0,0,0,0,0,//  This isn't really an error txn; it just has the same   format. The error represents the timeout 
0,0,0,0,0,0,0,//  now check if their is already existing   parent or child that has quota 
0,0,0,0,0,0,0,//  save the found address so that it's used during the next   connection attempt 
0,0,0,0,0,0,0,//  fake propose request 
0,0,0,0,0,0,0,//  If we have a worker thread pool, use that; otherwise, do the work   directly. 
0,0,0,0,0,0,0,// the last snapshot seems incompelte   corrupt the last but one   and use that
0,0,0,0,0,0,0,//  wait for authFailed event from client's EventThread. 
0,0,0,0,0,0,0,//  This should stomp the zk handle 
0,0,0,0,0,0,0,//  Make sure we can instantiate a trust manager from the JKS file on disk 
0,0,0,0,0,0,0,//  add snapshot files to the log version dir 
0,0,0,0,0,0,0,//  provide time for the falseleader to realize no followers have connected 
0,0,0,0,0,0,0,//  Wait for request completion with timeout 
0,0,0,0,0,0,0,/*                          * If it is from a non-voting server (such as an observer or                         * a non-voting follower), respond right away.                          */
0,0,0,0,0,0,0,//  Do NOT trigger the reverse name service lookup. 
0,0,0,0,0,0,0,//  method always on top start only SINCE JDK 5 ! 
0,0,0,0,0,0,0,//  Calculate sizeLimit that we allow to retrieve txnlog from disk 
0,0,0,0,0,0,0,//  In the test below 1-9/10 = 1/10 chance of disconnecting 
0,0,0,0,0,0,0,/*          * Check if all groups have majority          */
0,0,0,0,0,0,0,//  Joiner initial config consists of itself and the leader. 
0,0,0,0,0,0,0,/*          * Address of the sender          */
0,0,0,0,0,0,0,//  remove the old files 
0,0,0,0,0,0,0,//  Empty snapshot and logfile containing a 1-byte create and 5000-byte set 
0,0,0,0,0,0,0,//  get information of current leader 
0,0,0,0,0,0,0,//  3. create a node 
0,0,0,0,0,0,0,//  Synchronized to sync the containers and ttls change, probably   only need to sync on containers and ttls, will update it in a 
0,0,0,0,0,0,0,//  If learner hasn't sync properly yet, don't send ping packet   otherwise, the learner will crash 
0,0,0,0,0,0,0,/*                      * Only proceed if the vote comes from a replica in the current or next                     * voting view for a replica in the current or next voting view.                      */
0,0,0,0,0,0,0,//  do create operation, so that injected IOException is thrown 
0,0,0,0,0,0,0,//  Before sending the request, check if the request requires a   global session and what we have is a local session. If so do   an upgrade. 
0,0,0,0,0,0,0,//  do nothing - exclude persistence from perf 
0,0,0,0,0,0,0,// LOG.warn("Set clientAddr to " + clientAddr); 
0,0,0,0,0,0,0,//  we got here, so the version was set 
0,0,0,0,0,0,0,//  Verify that the correct exception is thrown 
0,0,0,0,0,0,0,/*                  * put() is going to modify the positions of both                 * buffers, put we don't want to change the position of                 * the source buffers (we'll do that after the send, if                 * needed), so we save and reset the position after the                 * copy                  */
0,0,0,0,0,0,0,//  in order to be committed, a proposal must be accepted by a quorum.   
0,0,0,0,0,0,0,//  Set a combination of child/exists/data watches 
0,0,0,0,0,0,0,//  expected that 
0,0,0,0,0,0,0,//  stop old watcher if there is one 
0,0,0,0,0,0,0,//  test done - close the zk, not needed 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#connect(java     * .util.Properties)      */
0,0,0,0,0,0,0,/*  Reusing the index variable to select a follower to connect to  */
0,0,0,0,0,0,0,//  check that a dynamic configuration file doesn't exist 
0,0,0,0,0,0,0,//  Note that we do not generate the Xid for the packet yet. It is   generated later at send-time, by an implementation of ClientCnxnSocket::doIO(), 
0,0,0,0,0,0,0,//  Color for border 
0,0,0,0,0,0,0,//  Since the file padding inserts a 0, we will fill the data with 0xff to ensure we corrupt the data if we put the 0 in the data 
0,0,0,0,0,0,0,//  Convert time -> sessions map to time -> session IDs map 
0,0,0,0,0,0,0,// start one server 
0,0,0,0,0,0,0,// the path does not exist  
0,0,0,0,0,0,0,//  This just avoids complaints by junit 
0,0,0,0,0,0,0,//  the following commands would not work in the original   cluster of 5, but now that we've removed 2 servers   we have a cluster of 3 servers and one of them is allowed to fail 
0,0,0,0,0,0,0,/*              * ZOOKEEPER-1624 - We need to store for parent's ChangeRecord             * of the parent node of a request. So that if this is a             * sequential node creation request, rollbackPendingChanges()             * can restore previous parent's ChangeRecord correctly.             *             * Otherwise, sequential node name generation will be incorrect             * for a subsequent request.              */
0,0,0,0,0,0,0,//  Give the worker threads time to finish executing 
0,0,0,0,0,0,0,//  request.addRQRec(">sync"); 
0,0,0,0,0,0,0,//  Should not have touched original file 
0,0,0,0,0,0,0,//  State of peer that sent this message 
0,0,0,0,0,0,0,/*          * This is going to reset the buffer position to 0 and the         * limit to the size of the buffer, so that we can fill it         * with data from the non-direct buffers that we need to         * send.          */
0,0,0,0,0,0,0,//  Avoid negative cxid values.  In particular, cxid values of -4, -2, and -1 are special and   must not be used for requests -- see SendThread.readResponse.   Skip from MAX to 1. 
0,0,0,0,0,0,0,//  establish the connection to the ZooKeeper cluster 
0,0,0,0,0,0,0,//  my server is in new config, but load should be decreased.   Need to decide if this client   is moving to one of the new servers 
0,0,0,0,0,0,0,//  Newer than committedLog, send trunc and done 
0,0,0,0,0,0,0,// force /bin/ls, except on windows. 
0,0,0,0,0,0,0,//  Process the touches 
0,0,0,0,0,0,0,//  see if its set 
0,0,0,0,0,0,0,/*  joining - comma separated list of server config strings for servers to be added to the ensemble.     * Each entry is identical in syntax as it would appear in a configuration file. Only used for      * incremental reconfigurations.      */
0,0,0,0,0,0,0,//  Look through the logs for output that indicates Node 1 is LEADING or FOLLOWING 
0,0,0,0,0,0,0,/*          * Leader epoch          */
0,0,0,0,0,0,0,//  We are going to look for a leader by casting a vote for ourself 
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#isLeaf()          */
0,0,0,0,0,0,0,//  don't allow redoing this redo 
0,0,0,0,0,0,0,//  Insert random delay to test thread race conditions 
0,0,0,0,0,0,0,//  Restart halted node and verify count 
0,0,0,0,0,0,0,// the snapshot directory 
0,0,0,0,0,0,0,//  create an extra handle, so we can index the handles from 1 to qu.ALL   using the server id. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * hasChildren(java.lang.String)      */
0,0,0,0,0,0,0,//  Make sure we can instantiate a key manager from the PEM file on disk 
0,0,0,0,0,0,0,//  This code does not exists 
0,0,0,0,0,0,0,//  shutdown the server itself 
0,0,0,0,0,0,0,//  used for assertions later 
0,0,0,0,0,0,0,//  On my box, if selector.close() is not called fd diff is > 700. 
0,0,0,0,0,0,0,//  new config will have three of the servers as followers 
0,0,0,0,0,0,0,//  Instantiate Notification and set its attributes 
0,0,0,0,0,0,0,//  check if we have a version that includes config. If so extract config info from message. 
0,0,0,0,0,0,0,// Store off current pending change records in case we need to rollback 
0,0,0,0,0,0,0,//  close the existing txnLog and snapLog 
0,0,0,0,0,0,0,//  updates the dynamic file pointer 
0,0,0,0,0,0,0,//  tests the case currentHost == null && lastIndex >= 0 
0,0,0,0,0,0,0,//  if we can't skip, we should just read from the start 
0,0,0,0,0,0,0,//  make sure servers 0, 1 don't come online - this should be the case 
0,0,0,0,0,0,0,//  Similar to follower, we need to log requests between the snapshot   and UPTODATE 
0,0,0,0,0,0,0,//  wait for things to stabilize 
0,0,0,0,0,0,0,//  all clients should be disconnected 
0,0,0,0,0,0,0,//  note, setUp() enables this test based on the test name 
0,0,0,0,0,0,0,/*  we test a normal run. everything should work out well.  */
0,0,0,0,0,0,0,//  We send DIFF and forward any packet starting at maxCommittedLog 
0,0,0,0,0,0,0,//  Java 9+ default should have the GCM suites first 
0,0,0,0,0,0,0,//  execute output stream operation 
0,0,1,0,0,0,0,//  Everything below and until we get back to the select is   non blocking, so time is effectively a constant. That is   Why we just have to do this once, here 
0,0,0,0,0,0,0,//  Generate Xid now because it will be sent immediately,   by call to sendThread.sendPacket() below. 
0,0,0,0,0,0,0,//  joiner should have the following format: server.x = server_spec;client_spec                
0,0,0,0,0,0,0,// last proposed quorum verifier 
0,0,0,0,0,0,0,//  default hostprovider 
0,0,0,0,0,0,0,//  property is set but can not be parsed to int, we should get the 
0,0,0,0,0,0,0,/*          * Run another instance of leader election.          */
0,0,0,0,0,0,0,//  remember to close old instance before replacing it 
0,0,0,0,0,0,0,//  do nothing 
0,0,0,0,0,0,0,//  This server should join successfully 
0,0,0,0,0,0,0,//  create session with max value 
0,0,0,0,0,0,0,/*  Make sure to create a new object when changing  */
0,0,0,0,0,0,0,//  We only run if the readyNode exists 
0,0,0,0,0,0,0,//  Notify server state changes to the registered shutdown handler, if any. 
0,0,0,0,0,0,0,//  this should trigger the watch 
0,0,0,0,0,0,0,//  whether to remove the watches locally 
0,0,0,0,0,0,0,/*          * Start mock server.          */
0,0,0,0,0,0,0,//  run servers 0 and 1 normally 
0,0,0,0,0,0,0,//  checks that conditioning on version works properly 
0,0,0,0,0,0,0,//  ephemeral node is getting deleted. 
0,0,0,0,0,0,0,//  currentIndex was set by the call to updateServerList, which   called next 
0,0,0,0,0,0,0,//  Refresh the Ticket Granting Ticket (TGT) periodically. How often to refresh is determined by the   TGT's existing expiry date and the configured MIN_TIME_BEFORE_RELOGIN. For testing and development,   you can decrease the interval of expiration of tickets (for example, to 3 minutes) by running : 
0,0,0,0,0,0,0,/*          * Creating peer.          */
0,0,0,0,0,0,0,//  Leader mock: Prep -> MockProposal -> Commit -> validate -> Final   Have side thread call commitProc.commit() 
0,0,0,0,0,0,0,/*        * If the stat fails, the node has gone missing between the call to       * getChildren() and exists(). We need to try and become the leader.        */
0,0,0,0,0,0,0,//  The previous client connection to falseLeader likely closed, create a new one 
0,0,0,0,0,0,0,//  inject problem in server 
0,0,1,1,1,1,1,//  Try to provide hints to use about what went wrong so they   can fix their configuration.   TODO: introspect about e: look for GSS information. 
0,0,0,0,0,0,0,//  while OpCode.closeSession 
0,0,0,0,0,0,0,//  could not create tmp directory to hold JAAS conf file.
0,0,0,0,0,0,0,// 'groups username' command return is non-consistent across different unixes 
0,0,0,0,0,0,0,//  12725 days, about 34 years 
0,0,0,0,0,0,0,//  When incremented... 
0,0,0,0,0,0,0,//  Since we just shut down server 2, its still considered "synced"   by the leader, which allows us to start the reconfig   (PrepRequestProcessor checks that a quorum of the new   config is synced before starting a reconfig).   We try to remove server 3, which requires a quorum of {1,2,3}   (we have that) and of {1,2}, but 2 is down so we won't get a   quorum of new config ACKs. 
0,0,0,0,0,0,0,//  We don't want to receive any packets until we are sure that the 
0,0,0,0,0,0,0,//  Verify if there is any change in the proposed leader 
0,0,0,0,0,0,0,//  When reset... 
0,0,0,0,0,0,0,//  Simulate a socket channel between a client and a follower 
0,0,0,0,0,0,0,// last committed quorum verifier 
0,0,0,0,0,0,0,//  check duplication of addresses and ports 
0,0,0,0,0,0,0,//  bad hostport string 
0,0,0,0,0,0,0,//  sleep for 10 seconds 
0,0,0,0,0,0,0,//  this should exceed threshold (ZKDatabase.snapshotSizeFactor) 
0,0,0,0,0,0,0,//  adding back the packet to notify of failure in conLossPacket(). 
0,0,0,0,0,0,0,/*  Reconfig test with unresolved hostnames  */
0,0,0,0,0,0,0,//  ignore, close the send/event threads 
0,0,0,0,0,0,0,//  make streams and socket do something innocuous 
0,0,0,0,0,0,0,//  There is ACL however the permission is wrong - need WRITE permission at leaste. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNodeMeta(java.lang.String)      */
0,0,0,0,0,0,0,//  don't care about the version if it's in LOOKING state 
0,0,0,0,0,0,0,//  create the pkg directory 
0,0,0,0,0,0,0,//  We can only test calls to ZKTrustManager using Sockets (not SSLEngines). This can be fine since the logic is the same. 
0,0,0,0,0,0,0,//  setConfiguration() will work even if the above try() fails due   to a missing Kerberos configuration (unless zookeeper.requireKerberosConfig   is set to true, which would not allow execution to reach here due to the   throwing of an IllegalArgumentException above). 
0,0,0,0,0,0,0,//  takes place 
0,0,0,0,0,0,0,//  their .next file during startup, and will find the next config and join it 
0,0,0,0,0,0,0,//  Add child watch 
0,0,0,0,0,0,0,//  Make sure we can instantiate a trust manager from the PKCS12 file on disk 
0,0,0,0,0,0,0,//  Lock object that guard access to quorumVerifier and lastSeenQuorumVerifier. 
0,0,0,0,0,0,0,/*          * id contains the tag for acks, and zxid for notifications          */
0,0,0,0,0,0,0,//  combine local and global sessions, getting local first so upgrades   to global are caught 
0,0,0,0,0,0,0,//  is client_config a host:port or just a port 
0,0,0,0,0,0,0,//  Arrange   Create a HostProvider with a list of unresolved server address(es) 
0,0,0,0,0,0,0,//  (*) setting it to what it should be 
0,0,0,0,0,0,0,//  ignores its connectstring, and next() always returns localhost:2181   it will count down when updateServerList() is called 
0,0,0,0,0,0,0,/*  Send close connection packet to the client, doIO will eventually     * close the underlying machinery (like socket, selectorkey, etc...)      */
0,0,0,0,0,0,0,// volatile int round = 1; 
0,0,0,0,0,0,0,/*      * Protocol identifier used among peers      */
0,0,0,0,0,0,0,//  Server 0 stays down 
0,0,0,0,0,0,0,//  See ZOOKEEPER-2967 for more details 
0,0,0,0,0,0,0,//  we expect this to throw an IOException since we're faking socket connect errors every time 
0,0,0,0,0,0,0,//  If we've timed out, do a hard shutdown 
0,0,0,0,0,0,0,//  see a disconnect for each Assert.failed connection attempt 
0,0,0,0,0,0,0,//  Pending sync requests. Must access under 'this' lock. 
0,0,0,0,0,0,0,//  they will be handled in next connection or cleared up if closed. 
0,0,0,0,0,0,0,//  start with an initial set of candidates that are voters from new config that    acknowledged the reconfig op (there must be a quorum). Choose one of them as  
0,0,0,0,0,0,0,//  Set up bogus streams 
0,0,0,0,0,0,0,//  Set to true when connected to a quorum server in read-only mode 
0,0,0,0,0,0,0,//  With local session on 
0,0,0,0,0,0,0,//  This was added to avoid running into the problem of ZOOKEEPER-1539 
0,0,0,0,0,0,0,//  remove host number 0 (the first one in the current list) 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * setDefaultNodeViewerConfiguration(java.io.File, java.util.List)      */
0,0,0,0,0,0,0,//  We send DIFF to (2, 0) and forward any packet starting at (2, 0) 
0,0,0,0,0,0,0,//  Assuming that isConnected() is only used to initiate connection,   not used by some other connection status judgement. 
0,0,0,0,0,0,0,//  6. wait for the leader to quit due to not enough followers and come back up as a part of the new quorum 
0,0,0,0,0,0,0,//  Here peerCommunicationAddress is null, also clientAddr is null 
0,0,0,0,0,0,0,//  Test a hostname that resolves to multiple addresses 
0,0,0,0,0,0,0,//  pzxid not updated with smaller zxid 
0,0,0,0,0,0,0,/*          * epoch of the proposed leader          */
0,0,0,0,0,0,0,//         response.setContentType("text/plain;charset=utf-8"); 
0,0,0,0,0,0,0,//  not reg so should = 0 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#process(org.apache.zookeeper.proto.WatcherEvent)      */
0,0,0,0,0,0,0,//  quorum.auth.learnerRequireSasl=true, quorum.auth.serverRequireSasl=true 
0,0,0,0,0,0,0,//  we throw an exception otherwise we continue without authentication. 
0,0,0,0,0,0,0,//  e.g. serviceHostname := "myhost.foo.com" 
0,0,0,0,0,0,0,//  Shutdown every one else but the leader 
0,0,0,0,0,0,0,//  This is expected. 
0,0,0,0,0,0,0,//  Create dummy txn larger than preAllocSize 
0,0,0,0,0,0,0,//  setowner as the leader itself, unless updated   via the follower handlers 
0,0,0,0,0,0,0,//  resume poor fellow 
0,0,0,0,0,0,0,// Reset back to default. 
0,0,0,0,0,0,0,/*      * Record leader election time      */
0,0,0,0,0,0,0,//  wait to connect to one of these 
0,0,0,0,0,0,0,//  any arbitrary constant will do  
0,0,0,0,0,0,0,//  Observer asks for epoch (mocking LearnerHandler behavior) 
0,0,0,1,1,1,1,//  TODO: should depend on zoo.cfg specified mechs, but if
0,0,0,0,0,0,0,//  Global session 
0,0,0,0,0,0,0,//  Wait until we can't connect 
0,0,0,0,0,0,0,//  Otherwise, wait for a fixed amount of time 
0,0,0,0,0,0,0,// force server to restart and load from snapshot, not txn log 
0,0,0,0,0,0,0,//  We use an instance of SyncedLearnerTracker to   track synced learners to make sure we still have a   quorum of current (and potentially next pending) view. 
0,0,1,0,0,0,0,//  NOTE: wrong password ('test' != 'test1') : this is to test SASL authentication failure.
0,0,0,0,0,0,0,//  creating the subtree for chRoot clients. 
0,0,0,0,0,0,0,//  When there is no worker thread pool, do the work directly   and wait for its completion 
0,0,0,0,0,0,0,//  OOM condition; 
0,0,0,0,0,0,0,/*              * This replica might still believe that the connection to sid is             * up, so we have to shut down the workers before trying to open a             * new connection.              */
0,0,0,0,0,0,0,//  On initial connection, write the complete connect request   packet, but then disable further writes until after   receiving a successful connection response.  If the   session is expired, then the server sends the expiration   response and immediately closes its end of the socket.  If   the client is simultaneously writing on its end, then the   TCP stack may choose to abort with RST, in which case the   client would never receive the session expired event.  See   http://docs.oracle.com/javase/6/docs/technotes/guides/net/articles/connection_release.html 
0,0,0,0,0,0,0,//  not), and all server SASL messages have been received. 
0,0,0,0,0,0,0,//  In this scenario to change 3's role to participant we need to remove it first 
0,0,0,0,0,0,0,//  Verify each quorum peer has expected quorum member view. 
0,0,0,0,0,0,0,//  Initialize the client's communications with the Zookeeper server by sending the server the first 
0,0,0,0,0,0,0,//  ipMap is used to limit connections per IP 
0,0,0,0,0,0,0,//  This could be faster, but probably wont be used 
0,0,0,0,0,0,0,//  good message 
0,0,0,0,0,0,0,// Thread.sleep(10000); 
0,0,0,0,0,0,0,//  Given ... 
0,0,0,0,0,0,0,//  We need to check if we can close the session id.   Sometimes the corresponding ServerCnxnFactory could be null because   we are just playing diffs from the leader. 
0,0,0,0,0,0,0,//  http://docs.oracle.com/javase/6/docs/technotes/guides/security/jgss/jgss-features.html   """   In addition, when performing operations as a   particular   Subject, e.g. Subject.doAs(...) or   Subject.doAsPrivileged(...), the to-be-used   GSSCredential should be added to Subject's   private credential set. Otherwise, the GSS operations   will fail since no credential is found.   """
0,0,0,0,0,0,0,//  Send the snapshot we created earlier 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()      */
0,0,0,0,0,0,0,//  validate CRC 
0,0,0,0,0,0,0,//  Don't apply any prior change records less than firstZxid.   Note that previous outstanding requests might have been removed   once they are completed. 
0,0,0,0,0,0,0,//  verifying that other path data watches are removed 
0,0,0,0,0,0,0,//     make sure everything is consistent 
0,0,0,0,0,0,0,//  we're good. 
0,0,0,0,0,0,0,//  5. on the customized leader catch the beginSnapshot call in      LearnerSnapshotThrottler to set the node to value v2, 
0,0,0,0,0,0,0,//  Act & Assert 
0,0,0,0,0,0,0,/*          * Add sid to payload          */
0,0,0,0,0,0,0,//  represents protocol version (in other words - message type) 
0,0,0,0,0,0,0,/*          * (non-Javadoc)         *         * @see org.apache.zookeeper.server.RequestProcessor#shutdown()          */
0,0,0,0,0,0,0,// taken care in finally block 
0,0,0,0,0,0,0,//  cnxns typically have many watches, so use default cap here 
0,0,0,0,0,0,0,//  intentionally use the wrong password 
0,0,0,0,0,0,0,//  We send DIFF and forward any packet starting at lastProcessedZxid 
0,0,0,0,0,0,0,//  ensure that server and data bean are registered 
0,0,0,0,0,0,0,// Give it some time to process the snap  No Snapshot taken yet, the SNAP was applied in memory 
0,0,0,0,0,0,0,//  mySocket.setSoTimeout(20000); 
0,0,0,0,0,0,0,//  No event ready to emit yet. 
0,0,0,0,0,0,0,//  suite setup 
0,0,1,0,0,0,0,//  Note: The first call to getSocket() triggers mode detection which can block 
0,0,0,0,0,0,0,//  jute toString is horrible, remove unnecessary newlines 
0,0,0,0,0,0,0,//  Get the ack of the new leader 
0,0,0,0,0,0,0,//  watchers2 
0,0,0,0,0,0,0,//  list of all the followers 
0,0,0,0,0,0,0,//  A period that isn't on its own is ok 
0,0,0,0,0,0,0,//  servers in the new list that are not in the old list 
0,0,0,0,0,0,0,//  Validate the provided znode path contains the given watcher of   watcherType 
0,0,0,0,0,0,0,//  leader calls waitForNewLeaderAck, first add to ackSet 
0,0,0,0,0,0,0,//  non-GSSAPI: no final packet from server. 
0,0,0,0,0,0,0,//  Through the magic of byte buffers, txn will not be   pointing 
0,0,0,0,0,0,0,//  We need to sync and get consensus on any transactions 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seejava.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.     * datatransfer.DataFlavor)      */
0,0,0,0,0,0,0,//  we are setting the bytes quota 
0,0,0,0,0,0,0,//  check set 
0,0,0,0,0,0,0,//  Remove beans which are related to zk client sessions. Strong   assertions cannot be done for these client sessions because   registeration of these beans with server will happen only on their 
0,0,0,0,0,0,0,//  my server is not in new config, and load on old servers must   be decreased, so connect to   one of the new servers 
0,0,0,0,0,0,0,//  of zxid on the second log 
0,0,0,0,0,0,0,//  on the lookout for timeout 
0,0,0,0,0,0,0,// new configuration 
0,0,0,0,0,0,0,//  expected behaviour 
0,0,0,0,0,0,0,//  We expect leader to lose quorum of proposed config and time out 
0,0,0,0,0,0,0,//  Remove ReplicatedServer_1 from the ensemble 
0,0,0,0,0,0,0,//  Intercept when startForwarding is called 
0,0,0,0,0,0,0,//  Attempt an incremental reconfig. 
0,0,0,0,0,0,0,//  wait for the node to appear 
0,0,0,0,0,0,0,//  Verify that the exit code is set properly 
0,0,0,0,0,0,0,//  register, createConnection 
0,0,0,0,0,0,0,//  We should get snap, we can do better here, but the main logic is   that we should never send diff if we have never seen any txn older 
0,0,0,0,0,0,0,//  now verify autocreate off works 
0,0,0,0,0,0,0,//  sets reconfigMode 
0,0,0,0,0,0,0,//  in sync request processor get flush to disk 
0,0,0,0,0,0,0,//  If lost the challenge, then drop the new connection 
0,0,0,0,0,0,0,// start and add 2 followers 
0,0,0,0,0,0,0,//  don't keep this up too long, will Assert.assert false below 
0,0,0,0,0,0,0,//  fake the message 
0,0,0,0,0,0,0,//  create keytab 
0,0,0,0,0,0,0,//  do nothing, just return, it is the same as packet is dropped   by the network 
0,0,0,0,0,0,0,//  kill peer and wait no more than 5 seconds for read-only server 
0,0,0,0,0,0,0,//  If we are sending the first packet, figure out whether to trunc 
0,0,0,0,0,0,0,//  Ignore. 
0,0,0,0,0,0,0,//  not used. 
0,0,0,0,0,0,0,//  Step time 
0,0,0,0,0,0,0,//  during first iteration, leavingIndex will correspond to a follower 
0,0,0,0,0,0,0,//  Create some additional znodes without taking a snapshot afterwards. 
0,0,0,0,0,0,0,//  Note that 'Configuration' here refers to javax.security.auth.login.Configuration. 
0,0,0,0,0,0,0,/*  Log the number of fds used before and after a test is run. Verifies         * we are freeing resources correctly. Unfortunately this only works         * on unix systems (the only place sun has implemented as part of the         * mgmt bean api).          */
0,0,0,0,0,0,0,//  keep findbugs happy 
0,0,0,0,0,0,0,// turnOffFollowers(); 
0,0,0,0,0,0,0,//  The exception is thrown on the server side, we need to unwrap it
0,0,0,0,0,0,0,//  spin up a quorum, we use a small ticktime to make the test run faster 
0,0,0,0,0,0,0,//  default not registered 
0,0,0,0,0,0,0,//  The leader didn't get a quorum of acks - make sure that leader's current epoch is not advanced 
0,0,0,0,0,0,0,//  Timeout of 0 is not allowed, since an infinite timeout can permanently lock up an   accept() thread. 
0,0,0,0,0,0,0,//  It should fail and shouldn't change outstanding record.
0,0,0,0,0,0,0,//  leader. This should also fail 
0,0,0,0,0,0,0,//  The created ephemeral nodes are still around. 
0,0,0,0,0,0,0,//  simulate snapshot file 
0,0,0,0,0,0,0,//  make sure to snapshot, so that we have something there when 
0,0,0,0,0,0,0,//  make sure to map negative ids as well to [0, size-1] 
0,0,0,0,0,0,0,//  if a log file is more recent we must scan it to find   the highest zxid 
0,0,0,0,0,0,0,//  Allow subclasses (e.g. StatCommand) to specify their own names 
0,0,0,0,0,0,0,//  later packet will be notified. 
0,0,0,0,0,0,0,//  returns whether we are interested in taking new requests, which is 
0,0,0,0,0,0,0,//  Starts listener thread that waits for connection requests 
0,0,0,0,0,0,0,//  Observers are currently only compatible with LeaderElection 
0,0,0,0,0,0,0,/*          * Do not consider groups with weight zero          */
0,0,0,0,0,0,0,//  On Java 8, prefer CBC ciphers since AES-NI support is lacking and GCM is slower than CBC. 
0,0,0,0,0,0,0,//  this is good 
0,0,0,0,0,0,0,//  NIO should not accept conenctions 
0,0,0,0,0,0,0,//  Let's grab two ports 
0,0,0,0,0,0,0,// invalid dataversion no 
0,0,0,0,0,0,0,//  Notification probe = recvqueue.peek(); 
0,0,0,0,0,0,0,//  Need to process local session requests 
0,0,0,0,1,1,1,//  the version of this quorumVerifier will be set by leader.lead() in case   the leader is just being established. waitForEpochAck makes sure that readyToStart is true if 
0,0,0,0,0,0,0,//  Now the resulting ensemble shouldn't be quorate          
0,0,0,0,0,0,0,//  id but different role / port 
0,0,0,0,0,0,0,//  old client session can expire, restart it 
0,0,0,0,0,0,0,//  the pointer to the connection in the request 
0,0,1,0,1,1,1,/*      * This method is called when a client passes authentication data for this     * scheme. The authData is directly from the authentication packet. The     * implementor may attach new ids to the authInfo field of cnxn or may use     * cnxn to send packets back to the client.     *      * @param cnxn     *                the cnxn that received the authentication information.     * @param authData     *                the authentication data received.     * @return TODO      */
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#addWatchers     * (java.util.Collection,     * org.apache.zookeeper.inspector.manager.NodeListener)      */
0,0,0,0,0,0,0,//  If we've already starting sending the first packet, we better finish 
0,0,0,0,0,0,0,//  Connect the client after services are restarted (otherwise we would get 
0,0,0,0,0,0,0,//  Send the packet of death 
0,0,0,0,0,0,0,// stored files is the list of files greater than  the zxid we are looking for. 
0,0,0,0,0,0,0,//  needed by jersey 
0,0,0,0,0,0,0,//  Get zxid of create requests 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see java.lang.Object#equals(java.lang.Object)      */
0,0,0,0,0,0,0,// setup servers 1-5 to be followers 
0,0,0,0,0,0,0,// Snapshot was never taken during very simple sync 
0,0,0,0,0,0,0,/*  PASS  */
0,0,0,0,0,0,0,//  now check if its the limit node 
0,0,1,0,1,1,1,//  It is important that this is done before the leader executes waitForEpochAck,   so before LearnerHandlers return from their waitForEpochAck   hence before they construct the NEWLEADER message containing   the last-seen-quorumverifier of the leader, which we change below 
0,0,0,0,0,0,0,//  Read the length, now get the buffer 
0,0,0,0,0,0,0,//  Arrange 
0,0,0,0,0,0,0,//  As above, but don't do the throttled read. Make the request bytes wait in the socket 
0,0,0,0,0,0,0,//  check that there's no reconfig in progress 
0,0,0,0,0,0,0,//  making sure setdata works on / 
0,0,0,0,0,0,0,//  do one successful operation on the newly added node 
0,0,0,0,0,0,0,//  second iteration of the loop will remove the leader 
0,0,0,0,0,0,0,//  allow the clients to run for max 5sec 
0,0,0,0,0,0,0,//  optimization for read heavy workloads   iff this is a read, and there are no pending   flushes (writes), then just pass this to the next   processor 
0,0,0,0,0,0,0,//  With local session off 
0,0,0,0,0,0,0,//  The follower reconfiguration will have failed 
0,0,0,0,0,0,0,//  This test makes sure that client-initiated TLS renegotiation does not 
0,0,0,0,0,0,0,//  Default case 
0,0,0,0,0,0,0,//  we're sending the designated leader, and if the leader is changing the followers are    responsible for closing the connection - this way we are sure that at least a majority of them  
0,0,0,0,0,0,0,//  simulate reconfig in progress - servers 0..2 have a temp reconfig 
0,0,0,0,0,0,0,//  Don't forward local sessions to the leader. 
0,0,0,0,0,0,0,//  Start thread that waits for connection requests from 
0,0,0,0,0,0,0,//  proposedRefresh is too far in the future: it's after ticket expires: simply return now. 
0,0,0,0,0,0,0,//  proceeds correctly after this point 
0,0,0,0,0,0,0,//  enable Client Sasl 
0,0,0,0,0,0,0,//  Number of machines stayed the same, my server is in the new cluster 
0,0,0,0,0,0,0,//  Create a couple of nodes 
0,0,0,0,0,0,0,//  this is the backwardCompatibility mode for no version information 
0,0,0,0,0,0,0,//  This is just an arbitrary object to represent requests issued by   (aka owned by) this class 
0,0,0,0,0,0,0,//  Something is wrong.
0,0,0,0,0,0,0,//  Create 10,000 nodes. This should ensure the length of our 
0,0,0,0,0,0,0,/*                  * A real zookeeper would take care of setting the current vote. Here                 * we do it manually.                  */
0,0,0,0,0,0,0,//  Create some ephemeral nodes.  This should force the session to 
0,0,0,0,0,0,0,//  otherwise : is at the end of the string, ignore 
0,0,0,0,0,0,0,//  Sleep since writing the config files may take time. 
0,0,0,0,0,0,0,//  this call shouldn't trigger any error or watch 
0,0,0,0,0,0,0,/*                              * I'm done so joining.                               */
0,0,0,0,0,0,0,//  Trying to load a JKS file with PEM loader should fail 
0,0,0,0,0,0,0,//  now update if the path is in a quota subtree. 
0,0,0,0,0,0,0,//  Builds an OCSPHandler that responds with a good status for all certificates   except revokedCert. 
0,0,0,0,0,0,0,//  We've found the priming-packet. Move it to the beginning of the queue. 
0,0,0,0,0,0,0,//  Will be fixed in next Kerby version.
0,0,0,0,0,0,0,//  We send DIFF and forward any packet starting lastProcessedZxid 
0,0,0,0,0,0,0,//  '/multi' should never have been created as entire op should fail 
0,0,0,0,0,0,0,//  Test that data provided when  
0,0,0,0,0,0,0,//  start of next request 
0,0,0,0,0,0,0,//  Negative value not allowed, will return the default 
0,0,0,0,0,0,0,// Follower counter 
0,0,0,0,0,0,0,//  /foo/bar childwatch   /foo 
0,0,0,0,0,0,0,/*      * We sort leader offers by sequence number (which may not be zero-based or     * contiguous) and keep their paths handy for setting watches.      */
0,0,0,0,0,0,0,//  make sure it doesn't have the new value that it alone had logged 
0,0,0,0,0,0,0,//  update last committed quorum verifier, write the new config to disk 
0,0,0,0,0,0,0,//  it by a commit packet 
0,0,0,0,0,0,0,//  We also use the sessionlessCnxnTimeout as expiring interval for   cnxnExpiryQueue. These don't need to be the same, but the expiring   interval passed into the ExpiryQueue() constructor below should be   less than or equal to the timeout. 
0,0,0,0,0,0,0,//  Either client is not configured to use a tunnelled authentication   scheme, or tunnelled authentication has completed (successfully or 
0,0,0,0,0,0,0,//  Remove the buffers that we have sent 
0,0,0,0,0,0,0,//  by default create snap/log dirs, but otherwise complain instead 
0,0,0,0,0,0,0,//  snapCount must be 2 or more. See org.apache.zookeeper.server.SyncRequestProcessor 
0,0,0,0,0,0,0,/*  borrowed from Path.WINDOWS  */
0,0,0,0,0,0,0,/*  * This code is originally from HDFS, see the file name MiniKdc there * in case of bug fixing, history, etc. * * Branch : trunk * Github Revision: 916140604ffef59466ba30832478311d3e6249bd  */
0,0,0,0,0,0,0,//  verify the session existence 
0,0,0,0,0,0,0,//  for cmds. They are all 4-bytes which fits inside of an int 
0,0,0,0,0,0,0,//  We are adding two new servers to the ensemble. These two servers should have the config which includes   all five servers (the old three servers, plus the two servers added). The old three servers should only   have the old three server config, because disabling reconfig will prevent synchronizing configs between   peers. 
0,0,0,0,0,0,0,// Make sure that we did take the snapshot now 
0,0,0,0,0,0,0,//  OP_READ means "can read", but OP_WRITE means "cannot write",   it's weird. 
0,0,0,0,0,0,0,//  LOG.info("starting forward for "+toClose); 
0,0,0,0,0,0,0,//  "zookeeper.server.realm" is set). 
0,0,0,0,0,0,0,//  7. start follower A to do snapshot sync 
0,0,0,0,0,0,0,//  Add ReplicatedServer_1 back to the ensemble 
0,0,0,0,0,0,0,//  call command and put result in byteStream 
0,0,0,0,0,0,0,//  remove self as it is local bean 
0,0,0,0,0,0,0,//  Only do extra logging so we know what kind of session this is   if we're supporting both kinds of sessions 
0,0,0,0,0,0,0,//  We will send DIFF for this kind of zxid in any case. This if-block   is the catch when our history older than learner and there is   no new txn since then. So we need an empty diff 
0,0,0,0,0,0,0,//  Restart leader election 
0,0,0,0,0,0,0,//  by waiting for the callback we're assured that the event queue is flushed 
0,0,0,0,0,0,0,//  commit proposals in order 
0,0,0,0,0,0,0,//  Peer have some proposals that the leader hasn't seen yet   it may used to be a leader 
0,0,0,0,0,0,0,// corrupt all the snapshot in the snapshot directory 
0,0,0,0,0,0,0,//  should work 
0,0,0,0,0,0,0,//  -4 is the xid for AuthPacket                
0,0,0,0,0,0,0,/*          * Message type: 0 notification, 1 acknowledgement          */
0,0,0,0,0,0,0,//  start 3 servers 
0,0,0,0,1,1,1,//  wait until followers time out in waitForEpochAck - they shouldn't return 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNumChildren(java.lang.String)      */
0,0,0,0,0,0,0,//  set the snap count to something low so that we force log rollover   and verify that is working as part of the epoch rollover. 
0,0,0,0,0,0,0,//  close wasn't successful, try to delete the tmp file 
0,0,0,0,0,0,0,//  now verify that the FileTxnLog reads every transaction only once 
0,0,0,0,0,0,0,//  generate some transactions 
0,0,0,0,0,0,0,/*  * We suppress the "try" warning here because the close() method's signature * allows it to throw InterruptedException which is strongly advised against * by AutoCloseable (see: http://docs.oracle.com/javase/7/docs/api/java/lang/AutoCloseable.html#close()). * close() will never throw an InterruptedException but the exception remains in the * signature for backwards compatibility purposes. */
0,0,0,0,0,0,0,//  password is test 
0,0,0,0,0,0,0,/*      * Connection time out value in milliseconds      */
0,0,0,0,0,0,0,//  Wait until we can connect 
0,0,0,0,0,0,0,//  make sure that ops are committed in order. With reconfigurations it is now possible   that different operations wait for different sets of acks, and we still want to enforce   that they are committed in order. Currently we only permit one outstanding reconfiguration   such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is   pending all wait for a quorum of old and new config, so it's not possible to get enough acks   for an operation without getting enough acks for preceding ops. But in the future if multiple 
0,0,0,0,0,0,0,/*      * Turn each child of rootNodeName into a leader offer. This is a tuple of     * the sequence number and the node name.      */
0,0,0,0,0,0,0,//  New contents replace original file 
0,0,0,0,0,0,0,// LOG.info("Created a new client: " + zk.describeCNXN()); 
0,0,0,0,0,0,0,//  Sleeps on receive 
0,0,0,0,0,0,0,//  Add the root logger to the Hierarchy MBean   org.apache.log4j.Logger rootLogger = 
0,0,0,0,0,0,0,//  This is only true because we're setting cmdName to the primary name 
0,0,0,0,0,0,0,//  If we have written more than we have previously preallocated we need to make sure the new   file size is larger than what we already have 
0,0,0,0,0,0,0,//  create top level znode 
0,0,0,0,0,0,0,//  Peer is already sync 
0,0,0,0,0,0,0,//  resetting watcher so that this watcher can be again used to ensure   that the zkClient is able to re-establish connection with the 
0,0,0,0,0,0,0,//  canonicalize authorization id according to system properties:   zookeeper.kerberos.removeRealmFromPrincipal(={true,false})   zookeeper.kerberos.removeHostFromPrincipal(={true,false}) 
0,0,0,0,0,0,0,//  OK, expected that 
0,0,0,0,0,0,0,//  we failed on the most recent snapshot   must be incomplete   try reading the next one   after corrupting 
0,0,0,0,1,1,1,//  leader calls waitForEpochAck, first add to electingFollowers 
0,0,0,0,0,0,0,//  Get a three server quorum. 
0,0,0,0,0,0,0,//  cleanup 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer     * .DataFlavor)      */
0,0,0,0,0,0,0,//  We are requesting half the number of transaction from the snapshot 
0,0,0,0,0,0,0,//  entry point for quorum/Learner.java 
0,0,0,0,0,0,0,/*                          * Before joining an established ensemble, verify that                         * a majority are following the same leader.                          */
0,0,0,0,0,0,0,//  Errors are okay, since hosts may be   down 
0,0,1,0,0,0,0,//  bad gateway
0,0,0,0,0,0,0,//  Got a EOF right away, definitely not using TLS. Fallthrough. 
0,0,0,0,0,0,0,//  Check that new dynamic config includes the updated client port.   Check that server changedServerId erased clientPort from static config.   Check that other servers still have clientPort in static config. 
0,0,0,0,0,0,0,//  Only update pzxid when the zxid is larger than the current pzxid,   otherwise we might override higher pzxid set by a following create    Txn, which could cause the cversion and pzxid inconsistent
0,0,0,0,0,0,0,//  truncateLog reloads the db 
0,0,0,0,0,0,0,//  Set threshold to -1, as after the first commit it takes 0ms to commit to disk. 
0,0,0,0,0,0,0,/*                      * Set the state of the peer to LOOKING and look for leader                      */
0,0,0,0,0,0,0,//  this is ok - the leader has dropped leadership 
0,0,0,0,0,0,0,//  If unable to pull a new connection off the accept   queue, pause accepting to give us time to free   up file descriptors and so the accept thread   doesn't spin in a tight loop. 
0,0,0,0,0,0,0,//  Make sure that the magic number is written before padding. 
0,0,0,0,0,0,0,//  Must be Java 9 or later 
0,0,0,0,0,0,0,//  this means that the file has ended   we should go to the next file 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * loadNodeViewersFile(java.io.File)      */
0,0,0,0,0,0,0,//  If sasl is not required, when a server initializes a   connection it will try to log in, but it will also   accept connections that do not start with a sasl
0,0,0,0,0,0,0,//  We cannot send TRUNC that cross epoch boundary.   The learner will crash if it is asked to do so.   We will send snapshot this those cases. 
0,0,1,0,0,0,0,//  Since the SASL authenticator will usually be used with Kerberos authentication,   it should enforce that these names are valid according to Kerberos's   syntax for principals.     Use the KerberosName(id) constructor to define validity:   if KerberosName(id) throws IllegalArgumentException, then id is invalid.   otherwise, it is valid.   
0,0,0,0,0,0,0,//  it does not commit ops after committing the reconfig 
0,0,0,0,0,0,0,//  This is safe inside an iterator as per   http://download.oracle.com/javase/1.5.0/docs/api/java/util/Map.Entry.html 
0,0,0,0,0,0,0,//  as a result of the I/O operations we just performed. 
0,0,0,0,0,0,0,//  find the leader 
0,0,0,0,0,0,0,//  as we look through proposals, this variable keeps track of previous   proposal Id. 
0,0,0,0,0,0,0,//  Max number of toasters for the sceen 
0,0,0,0,0,0,0,//  need it for calloc() & free() 
0,0,0,0,0,0,0,//  receive the commit message. 
0,0,0,0,0,0,0,//  for no such child 
0,0,0,0,0,0,0,//  Great this is what we were hoping for! 
0,0,0,0,0,0,0,/*      * ZOOKEEPER-2693: test white list of four letter words.     * For 3.5.x default white list is empty. Verify that is     * the case (except 'stat' command which is enabled in ClientBase     * which other tests depend on.).      */
0,0,0,0,0,0,0,//  disconnected 
0,0,0,0,0,0,0,//  ZOOKEEPER-2743:   Always unregister connection upon close to prevent   connection bean leak under certain race conditions. 
0,0,0,0,0,0,0,//  2. SASL login failed. 
0,0,0,0,0,0,0,//  null if factory never started 
0,0,0,0,0,0,0,//  ignore for this test 
0,0,0,0,0,0,0,//  All zxid should match what we created 
0,0,0,0,0,0,0,//  This class holds the servers and clients for those servers 
0,0,0,0,0,0,0,/*          * Adds up weights per group          */
0,0,0,0,0,0,0,//  qcm outside QV_LOCK to avoid a deadlock against other callers of qcm.connectOne(). 
0,0,0,0,0,0,0,//  If quorumpeer learner is not auth enabled then self won't be able to   join quorum. So this condition is ensuring that the quorumpeer learner 
0,0,0,0,0,0,0,//  Read without sending data. Verify timeout. 
0,0,0,0,0,0,0,//  ignore, we've simply come to the end of the file 
0,0,0,0,0,0,0,//  Receive and handle the connection request   asynchronously if the quorum sasl authentication is   enabled. This is required because sasl server   authentication process may take few seconds to finish,   this may delay next peer connection requests. 
0,0,0,0,0,0,0,/*      * Separated this method from the main run loop     * for test purposes (ZOOKEEPER-1863)      */
0,0,0,0,0,0,0,//  rewrite to option 
0,0,0,0,0,0,0,//  LoginThread will sleep until 80% of time from last refresh to   ticket's expiry has been reached, at which time it will wake 
0,0,0,0,0,0,0,/*          * Used to send a QuorumVerifier (configuration info)          */
0,0,0,0,0,0,0,/*                              * Print notification info                              */
0,0,0,0,0,0,0,//  new server 3 has still its invalid joiner config - everyone in old 
0,0,0,0,0,0,0,//  Commit /foo1 update 
0,0,0,0,0,0,0,//  create child znodes 
0,0,0,0,0,0,0,//  Note: getting the input stream should not block the thread or trigger mode detection.
0,0,0,0,0,0,0,//  mapping was present, clean up the previous expiry bucket. 
0,0,0,0,0,0,0,//  We can get here, if we don't have op packet to queue   or there is a duplicate txn in a given iterator 
0,0,0,0,0,0,0,//  We only want to print anything if things have had a   chance to change 
0,0,0,0,0,0,0,//  to removed server 
0,0,0,0,0,0,0,//  We can't call outgoingQueue.clear() here because   between iterating and clear up there might be new   packets added in queuePacket(). 
0,0,0,0,0,0,0,//  don't re-establish connection if we are closing 
0,0,0,0,0,0,0,//  Start the servers with a static config file, without a dynamic 
0,0,0,0,0,0,0,//  Find zxid for the second log 
0,0,0,0,0,0,0,//  crank up the epoch numbers 
0,0,0,0,0,0,0,// "This should never happen, you can't have a filter exception without a filter"); 
0,0,0,0,0,0,0,//  All new sessions local by default. 
0,0,0,0,0,0,0,//  handle clientPath = "/" 
0,0,0,0,0,0,0,//  2. set force snapshot to be true 
0,0,0,0,0,0,0,//  Nothing to do, we are shutting things down, so an exception here is irrelevant 
0,0,0,0,0,0,0,//  free the error stream buffer 
0,0,0,0,0,0,0,/*          * If sending message to myself, then simply enqueue it (loopback).          */
0,0,0,0,0,0,0,/*                  * Choose identifier at random. We need a value to identify                 * the connection.                  */
0,0,0,0,0,0,0,//  entry point for FinalRequestProcessor.java 
0,0,0,0,0,0,0,//  closing session should remove ephemeral nodes and trigger data   watches if any 
0,0,0,0,0,0,0,//  stopping the ELECTED node, so re-election will happen. 
0,0,0,0,0,0,0,//  We expect this to happen. 
0,0,0,0,0,0,0,// return "    "+capitalize(fname)+"=a_.Read"+mMethodSuffix+"(" + capitalize(fname) + ",\""+tag+"\");\n"; 
0,0,0,0,0,0,0,//  Show time 
0,0,0,0,0,0,0,//  listener thread should stop and throws error which notify QuorumPeer about error.   QuorumPeer should start shutdown process   set wait time, if listener contains bug and thread not stops. 
0,0,0,0,0,0,0,// LOG.warn("ClientParts: " + serverClientParts[1]); 
0,0,0,0,0,0,0,//  some tests initialize QuorumPeer without a static config file 
0,0,0,0,0,0,0,// zk.close(); 
0,0,0,0,0,0,0,//  Setting used for snapRetainCount in this test. 
0,0,0,0,0,0,0,//  NIOServerCnxnFactory 
0,0,0,0,0,0,0,/*          * Update the election vote here to ensure that all members of the         * ensemble report the same vote to new servers that start up and         * send leader election notifications to the ensemble.         *          * @see https://issues.apache.org/jira/browse/ZOOKEEPER-1732          */
0,0,0,0,0,0,0,//  subject is non-null, it can be assumed to be GSSAPI. 
0,0,0,0,0,0,0,//  Should be able to dump the recovered logfile with no CRC error 
0,0,0,0,0,0,0,//  check content of transaction log and snapshot dirs if they are two different directories 
0,0,0,0,0,0,0,//  Run the command 
0,0,0,0,0,0,0,//  Sending id and challenge 
0,0,0,0,0,0,0,//  assume that server and client are in the same realm (by default;   unless the system property 
0,0,0,0,0,0,0,/*      * Messages to send, both Notifications and Acks      */
0,0,0,0,0,0,0,//  resolution occured every time 
0,0,0,0,0,0,0,//  ignore "/" chroot spec, same as null 
0,0,1,0,0,0,0,//  This was added in ZOOKEEPER-1783. The initial config has version 0 (not explicitly   specified by the user; the lack of version in a config file is interpreted as version=0).    As soon as a config is established we would like to increase its version so that it   takes presedence over other initial configs that were not established (such as a config   of a server trying to join the ensemble, which may be a partial view of the system, not the full config).    We chose to set the new version to the one of the NEWLEADER message. However, before we can do that   there must be agreement on the new version, so we can only change the version when sending/receiving UPTODATE,   not when sending/receiving NEWLEADER. In other words, we can't change curQV here since its the committed quorum verifier,    and there's still no agreement on the new version that we'd like to use. Instead, we use    lastSeenQuorumVerifier which is being sent with NEWLEADER message   so its a good way to let followers know about the new version. (The original reason for sending    lastSeenQuorumVerifier with NEWLEADER is so that the leader completes any potentially uncommitted reconfigs   that it finds before starting to propose operations. Here we're reusing the same code path for    reaching consensus on the new version number.) 
0,0,0,0,0,0,0,//  Clean up for shutdown. 
0,0,0,0,0,0,0,//  just make sure that we actually did get it in process at the   leader 
0,0,0,0,0,0,0,//  remove the error 
0,0,0,0,0,0,0,//  Create a file at destination 
0,0,0,0,0,0,0,//  make sure we don't mess with request itself 
0,0,0,0,0,0,0,/*  if we are not truncating or sending a diff just send a snapshot  */
0,0,0,0,0,0,0,//  send a response... 
0,0,0,0,0,0,0,//  Start peer0,1,2 servers with quorum.auth.enableSasl=false and   quorum.auth.learnerRequireSasl=false, quorum.auth.serverRequireSasl=false 
0,0,0,0,0,0,0,//  Set sizeLimit to be very high number, so we can pull all transactions 
0,0,0,0,0,0,0,//  response as with other packets. 
0,0,0,0,0,0,0,//  Multiply by 1000 to get   reqs/sec 
0,0,0,0,0,0,0,//  initial data is written. 
0,0,0,0,0,0,0,//  We want to queue the request to be processed before we submit   the request to the leader so that we are ready to receive 
0,0,0,0,0,0,0,//  add back host number 0 
0,0,0,0,0,0,0,//  Make sure we can instantiate a trust manager from the PEM file on disk 
0,0,0,0,0,0,0,//  0xff = Extended feature is ON   0x0001 = Unsupported extended type id (1) 
0,0,0,0,0,0,0,//  Explicitly add to global session if the flag is not set 
0,0,0,0,0,0,0,//  request.addRQRec(">final"); 
0,0,0,0,0,0,0,//  the files   are sorted with zxid's 
0,0,0,0,0,0,0,//  If the connection is not in the master list it's already been closed 
0,0,0,0,0,0,0,/*  this 'Client' section has the correct password, but we're not configured                                  to  use it (we're configured by the above System.setProperty(...LOGIN_CONTEXT_NAME_KEY...) to                                   use the 'MyZookeeperClient' section, which has an incorrect password). */
0,0,0,0,0,0,0,//  parse the output   clear the input stream buffer 
0,0,0,0,0,0,0,//  check for more than 2 children --   if zookeeper_stats and zookeeper_quotas   are not the children then this path   is an ancestor of some path that 
0,0,0,0,0,0,0,//  quorum.auth.learnerRequireSasl=false, quorum.auth.serverRequireSasl=false 
0,0,0,0,0,0,0,//  Wait for falseLeader to rejoin the quorum 
0,0,0,0,0,0,0,//  parent channel options 
0,0,0,0,0,0,0,//  Validate status code at the end of authentication exchange. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#disconnect()      */
0,0,0,0,0,0,0,//  *************** <END> CientCnxnSocketNetty </END> ****************** 
0,0,0,0,0,0,0,//  Otherwise proceed with the connection 
0,0,0,0,0,0,0,//  input buffer until after throttling is turned off. Need to make sure both modes work. 
0,0,0,0,0,0,0,//  check exceptions 
0,0,0,0,0,0,0,//  Find the leader by id 
0,0,0,0,0,0,0,//  For Invalid ACls should not throw exception 
0,0,0,0,0,0,0,//  create child to see NodeChildren notification 
0,0,0,0,0,0,0,//     private void notestConnections()          throws IOException, InterruptedException, KeeperException      {          ZooKeeper zk; 
0,0,0,0,0,0,0,//  found path watchers 
0,0,0,0,0,0,0,//  the sleep is necessary so that the leader figures out 
0,0,0,0,0,0,0,//  sanity check 
0,0,0,0,0,0,0,/*      * Methods to aid in testing follow.     *      * THESE METHODS ARE EXPECTED TO BE USED FOR TESTING ONLY!!!      */
0,0,0,0,0,0,0,//  Use subject.getPrincipals().isEmpty() as an indication of which SASL   mechanism to use: if empty, use DIGEST-MD5; otherwise, use GSSAPI. 
0,0,0,0,0,0,0,/*  new client port  */
0,0,0,0,0,0,0,//  Animate from top! 
0,0,0,0,0,0,0,//  DIFF + 2 proposals + 2 commit 
0,0,0,0,0,0,0,//  Generate snapshot and close files. 
0,0,0,0,0,0,0,//  create with valid sequential flag 
0,0,0,0,0,0,0,//  Check whether it's a global session. We can ignore those   because they are handled at the leader, but if not, rethrow.   We check local session status first to avoid race condition   with session upgrading. 
0,0,0,0,0,0,0,//  add all non-excluded log files 
0,0,0,0,0,0,0,//  test the most likely situation only: server is stated as observer in 
0,0,0,0,0,0,0,//  iterator points to   the first valid txn when initialized 
0,0,0,0,0,0,0,//  delete 
0,0,0,0,0,0,0,/*          * Requests coming from the learner should have gone through         * submitRequest() on each server which already perform some request         * validation, so we don't need to do it again.         *         * Additionally, LearnerHandler should start submitting requests into         * the leader's pipeline only when the leader's server is started, so we         * can submit the request directly into PrepRequestProcessor.         *         * This is done so that requests from learners won't go through         * LeaderRequestProcessor which perform local session upgrade.          */
0,0,0,0,0,0,0,/*                  * It is possible that committedLog is empty. In that case                 * setting these value to the latest txn in leader db                 * will reduce the case that we need to handle                 *                 * Here is how each case handle by the if block below                 * 1. lastProcessZxid == peerZxid -> Handle by (2)                 * 2. lastProcessZxid < peerZxid -> Handle by (3)                 * 3. lastProcessZxid > peerZxid -> Handle by (5)                  */
0,0,0,0,0,0,0,//  Peer zxid 
0,0,0,0,0,0,0,//  Grab a list iterator starting at the END of the list so we can iterate in reverse 
0,0,0,0,0,0,0,//  0 value not allowed, will return the default 
0,0,0,0,0,0,0,//  Test view contains self 
0,0,0,0,0,0,0,//  Wait until all updates return 
0,0,0,0,0,0,0,//  log request 
0,0,0,0,0,0,0,//  Make sure the data was recorded in the filesystem ok 
0,0,0,0,0,0,0,//  Child watcher 
0,0,0,0,0,0,0,//  Now, try an ephemeral node.  This should fail since we 
0,0,0,0,0,0,0,//  stop all severs 
0,0,0,0,0,0,0,//  ZOOKEEPER-2722: wait until we can connect to a read-write server after the quorum   is formed. Otherwise, it is possible that client first connects to a read-only server,   then drops the connection because of shutting down of the read-only server caused   by leader election / quorum forming between the read-only server and the newly started   server. If we happen to execute the zk.create after the read-only server is shutdown and   before the quorum is formed, we will get a ConnectLossException. 
0,0,0,0,0,0,0,//  If an exception occurred we misdetected a sequence suffix,   so return -1. 
0,0,0,0,0,0,0,//  double check for the file existence 
0,0,0,0,0,0,0,//  We now ship the request to the leader. As with all   other quorum operations, sync also follows this code   path, but different from others, we need to keep track   of the sync operations this follower has pending, so we 
0,0,0,0,0,0,0,/*              * Now we start a new connection              */
0,0,0,1,1,1,1,//  TODO: introduce JuteTestCase as in ZKTestCase 
0,0,0,0,0,0,0,// there should be only two files   one the snapshot and the other logFile 
0,0,0,0,0,0,0,//  now corrupt the leader's database 
0,0,0,0,0,0,0,//  flush the config to server 2 
0,0,0,0,0,0,0,//  fake messages from the server 
0,0,0,0,0,0,0,//  Put the new set in the map, but only if another thread 
0,0,0,0,0,0,0,/*                          * Consider all notifications from the same epoch                         * together.                          */
0,0,0,0,0,0,0,//  this is a test that a reconfig will only succeed   if there is a quorum up in new config. Below there is no   quorum so it should fail 
0,0,0,0,0,0,0,//  simulate the upgrading case where the config node will be created 
0,0,0,0,0,0,0,/*  this 'Client' section has an incorrect password, but we're not configured                                  to  use it (we're configured by the above System.setProperty(...LOGIN_CONTEXT_NAME_KEY...) to                                   use the 'MyZookeeperClient' section below, which has the correct password). */
0,0,0,0,0,0,0,//  call is no-op if session isn't tracked so safe to call both 
0,0,0,0,0,0,0,//  Need to be short since we need to wait for session to expire 
0,0,0,0,0,0,0,// 1. Upgrade peer0,1,2 with quorum.auth.enableSasl=true and 
0,0,0,0,0,0,0,//  It would be great to test the value of PKIXBuilderParameters#setRevocationEnabled but it does not appear to be 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * getConnectionPropertiesTemplate()      */
0,0,0,0,0,0,0,//  If this request is the commit request that was blocking   the processor, clear. 
0,0,0,0,0,0,0,//  wait for selector and worker threads to shutdown 
0,0,0,0,0,0,0,//  Reset to default value since some test cases set this to true.   Needed for JDK7 since unit test can run is random order 
0,0,0,0,0,0,0,/*          * Address of recipient          */
0,0,0,0,0,0,0,//  never true if tmpfile does it's job 
0,0,0,0,0,0,0,/*              * Note that addAck already checks that the learner             * is a PARTICIPANT.              */
0,0,0,0,0,0,0,//  this server will be added back as an observer 
0,0,0,0,0,0,0,//  ... and finally disable throttling after 2 seconds. 
0,0,0,0,0,0,0,// All the rest don't need to create a Txn - just verify session 
0,0,0,0,0,0,0,//  we've asked to close, wait for it to finish closing   all the sub-threads otw the selector may not be   closed when we check (false positive on test Assert.failure 
0,0,0,0,0,0,0,//  only use jline if it's in the classpath 
0,0,0,0,0,0,0,//  don't try to handle jersey exceptions ourselves 
0,0,0,0,0,0,0,//  ulimit isn't supported on Windows
0,0,0,0,0,0,0,//  get new designated leader from (current) leader's message 
0,0,0,0,0,0,0,/*  this 'Server' section has an incorrect password, but we're not configured         * to  use it (we're configured by the above System.setProperty(...LOGIN_CONTEXT_NAME_KEY...)         * to use the 'MyZookeeperServer' section below, which has the correct password).          */
0,0,0,0,0,0,0,//  c.f. HADOOP-6559 
0,0,0,0,0,0,0,//  close clients 
0,0,0,0,0,0,0,//  start creating all the parents 
0,0,0,0,0,0,0,//  this data structure must be accessed under the outstandingChanges lock 
0,0,0,0,0,0,0,//  go through buffer until i find a \n, if i reach end of buffer first, put whats in buffer into string buffer,   repeat 
0,0,0,0,0,0,0,/*                      * A real zookeeper would take care of setting the current vote. Here                     * we do it manually.                      */
0,0,0,0,0,0,0,//  we should catch the exceptions   from the valid snapshot and continue   until we find a valid one 
0,0,0,0,0,0,0,//  Cannot use createClient here because server may close session before    JMXEnv.ensureAll is called which will fail the test case 
0,0,0,0,0,0,0,//  lastProcessedZxid 
0,0,0,0,0,0,0,//  nothing interesting to do if out == null 
0,0,0,0,0,0,0,//  transaction log and snapshot files in the same dir 
0,0,0,0,1,1,1,//  observer calls waitForEpochAck, should fail verifier.containsQuorum 
0,0,0,0,0,0,0,//  Trying to get a second txn on second txnlog give us the 
0,0,0,0,0,0,0,/*  some useful information - log the number of fds used before         * and after a test is run. Helps to verify we are freeing resources         * correctly. Unfortunately this only works on unix systems (the         * only place sun has implemented as part of the mgmt bean api.          */
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.encryption.DataEncryptionManager#encryptData     * (java.lang.String)      */
0,0,0,0,0,0,0,/*              * Here are the cases that we want to handle             *             * 1. Force sending snapshot (for testing purpose)             * 2. Peer and leader is already sync, send empty diff             * 3. Follower has txn that we haven't seen. This may be old leader             *    so we need to send TRUNC. However, if peer has newEpochZxid,             *    we cannot send TRUNC since the follower has no txnlog             * 4. Follower is within committedLog range or already in-sync.             *    We may need to send DIFF or TRUNC depending on follower's zxid             *    We always send empty DIFF if follower is already in-sync             * 5. Follower missed the committedLog. We will try to use on-disk             *    txnlog + committedLog to sync with follower. If that fail,             *    we will send snapshot              */
0,0,0,0,0,0,0,//  my server is in new config, and load should be increased, so   stay with this server and do nothing special 
0,0,0,0,0,0,0,// the transaction logs 
0,0,0,0,0,0,0,//  Set the last accepted epoch and current epochs to be 1 
0,0,0,0,0,0,0,/*          * Proposed leader in the case of notification          */
0,0,0,0,0,0,0,//  visiable for test 
0,0,0,0,0,0,0,//  Purge snapshot and log files. 
0,0,0,0,0,0,0,//  e.g. servicePrincipalNameAndHostname := 
0,0,0,0,0,0,0,//  for now. 
0,0,0,0,0,0,0,//  Take any necessary action if we need to send TRUNC or DIFF 
0,0,0,0,0,0,0,//  'domain' parameter is hard-wired between the server and client 
0,0,0,0,0,0,0,/*  this is ok  */
0,0,0,0,0,0,0,//     txn proposal and commit for v1 value update 
0,0,0,0,0,0,0,/*          * When a new leader starts executing Leader#lead, it          * invokes this method. The database, however, has been         * initialized before running leader election so that         * the server could pick its zxid for its initial vote.         * It does it by invoking QuorumPeer#getLastLoggedZxid.         * Consequently, we don't need to initialize it once more         * and avoid the penalty of loading it a second time. Not          * reloading it is particularly important for applications         * that host a large database.         *          * The following if block checks whether the database has         * been initialized or not. Note that this method is         * invoked by at least one other method:          * ZooKeeperServer#startdata.         *           * See ZOOKEEPER-1642 for more detail.          */
0,0,0,0,0,0,0,//  Depricated: rmr 
0,0,0,0,0,0,0,//  server error or shutdown state changes. 
0,0,0,0,0,0,0,/*                  * For future unwary socket programmers: although connect 'blocks' it                 * does not require an accept on the server side to return. Therefore                 * you can not assume that all the sockets are connected at the end of                 * this for loop.                  */
0,0,0,0,0,0,0,/*          * zxid of the proposed leader          */
0,0,0,0,0,0,0,//  / marks end of stream   we need to check if clear had been called in between the snapshot. 
0,0,0,0,0,0,0,//  Ensure we have the leader's correct IP address before   attempting to connect. 
0,0,0,0,0,0,0,//  this should break the run() loop 
0,0,0,0,0,0,0,//  LOG.info("Prep>>> cxid = " + request.cxid + " type = " + 
0,0,0,0,0,0,0,//  LOG.warn("sid = " + sid + " addressStr = " + addressStr); 
0,0,0,0,0,0,0,//  case-1) 'quorum.auth.enableSasl' is off. Tries to enable learner sasl. 
0,0,0,0,0,0,0,//  ZOOKEEPER-2819: overwrite config node content extracted   from leader snapshot with local config, to avoid potential 
0,0,0,0,0,0,0,//  All dynamic files created with the same version should have 
0,0,0,0,0,0,0,//  Creating child using chRoot client. 
0,0,0,0,0,0,0,//  Send the valid or invalid session packet to the follower 
0,0,0,0,0,0,0,/*              * Do the flip: limit becomes position, position gets set to             * 0. This sets us up for the write.              */
0,0,0,0,0,0,0,//  wildCard address(0.0.0.0)   loopback address(localhost/127.0.0.1) 
0,0,0,0,0,0,0,//  transaction log files in log dir 
0,0,0,0,0,0,0,//  Make tracked buffers eligible for GC 
0,0,0,0,0,0,0,// deserialize a DataTree; this should clear the old /bug nodes and pathTrie 
0,0,0,0,0,0,0,//  now, truncate at the current position 
0,0,0,0,0,0,0,//  upgrade this once we have Google-Guava or Java 7+ 
0,0,0,0,0,0,0,//  Should be noop 
0,0,0,0,0,0,0,//  when we do the Cversion we need to translate from the count of the creates   to the count of the changes (v3 semantics)   for every create there is a delete except for the children still present 
0,0,0,0,0,0,0,// This will fast forward the database to the latest recorded transactions 
0,0,0,0,0,0,0,//  Original contents still in place 
0,0,0,0,0,0,0,/*          * Format version, introduced in 3.4.6          */
0,0,0,0,0,0,0,//  same port. 
0,0,0,0,0,0,0,//  capture QuorumPeer logging 
0,0,0,0,0,0,0,//  verify that the size is just 2 - ie connect then disconnect   if the client attempts reconnect and we are not handling current   state correctly (ie eventing on duplicate disconnects) then we'll 
0,0,0,0,0,0,0,//  catch this. 
0,0,0,0,0,0,0,//  now shut down the servers and restart them 
0,0,0,0,0,0,0,//  create dummy log and transaction file 
0,0,0,0,0,0,0,//  Register watch 
0,0,0,0,0,0,0,//  /10 wont work because the session expiration   will match the zxid for /10 and so we wont   actually truncate the zxid for /10 creation   due to an artifact of switching the xid of the standalone   /11 is the last entry in the log for the xid   as a result /12 is the first of the truncated znodes to check for
0,0,0,0,0,0,0,// } 
0,0,0,0,0,0,0,//  Make sure that previous request is finished 
0,0,0,1,1,1,1,//  TODO lets assert that we are no longer the leader 
0,0,0,0,0,0,0,//  Recreate a client session since the previous session was not persisted. 
0,0,0,0,0,0,0,//  for them that a reconfiguration was in progress when they failed 
0,0,0,0,0,0,0,//  Calling closeSession() after losing the cnxn, results in the client close session response being dropped. 
0,0,0,0,0,0,0,//  start the old leader 
0,0,0,0,0,0,0,//  ignore, simply end of file, though really (line!=null) should have caught this 
0,0,0,0,0,0,0,/*                                  * Assert that the state of the thread is the one expected.                                  */
0,0,0,0,0,0,0,//  get the value from the map 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#getData     * (java.lang.String)      */
0,0,0,0,0,0,0,//  If SASL authentication is currently in progress, construct and   send a response packet immediately, rather than queuing a 
0,0,0,0,0,0,0,//  specify all of the commands that are available 
0,0,0,0,0,0,0,// Wait for the transactions to be written out. The thread that writes them out 
0,0,0,0,0,0,0,//  Use gathered write call. This updates the positions of the   byte buffers to reflect the bytes that were written out. 
0,0,0,0,0,0,0,//  Try to load a password-protected private key without providing a password 
0,0,0,0,0,0,0,//  The proposal has already been committed 
0,0,0,0,0,0,0,//  sanitise start and end times 
0,0,0,0,0,0,0,/*  expected  */
0,0,0,0,0,0,0,//  two of the servers as observers, and all ports different 
0,0,0,0,0,0,0,//  if we're here, I shouldn't be the leader 
0,0,0,0,0,0,0,//  Use a single listener instance to reduce GC 
0,0,0,0,0,0,0,/*                              * We want to make sure we implement the state machine                             * correctly. If we are a PARTICIPANT, once a leader                             * is elected we can move either to LEADING or                             * FOLLOWING. However if we are an OBSERVER, it is an                             * error to be elected as a Leader.                              */
0,0,0,0,0,0,0,//  Try reconnecting with a new session.   The data should be persisted, even though the session was not. 
0,0,0,0,0,0,0,//  survives the exception thrown by the first callback. 
0,0,0,0,0,0,0,//  not the case for 4letterword 
0,0,0,0,0,0,0,//  clear all the connections 
0,0,0,0,0,0,0,//  giving a grace period of 10seconds 
0,0,0,0,0,0,0,//  Make sure we can instantiate a key manager from the JKS file on disk 
0,0,0,0,0,0,0,//  and add back hosts 6, 7 and 8 
0,0,0,0,0,0,0,//  the watch contains the un-chroot path 
0,0,0,0,0,0,0,//  OK, now the follower knows that the session is valid or invalid, let's try 
0,0,0,0,0,0,0,//  verify super with bad pass Assert.fails 
0,0,0,0,0,0,0,//  For global session, if we don't know it, it is already expired 
0,0,0,0,0,0,0,// non-incremental membership change                   
0,0,0,0,0,0,0,//  setup redirect out/err streams to get System.in/err, use this   judiciously!   get current err 
0,0,0,0,0,0,0,//  watches which require multiple SetWatches calls. 
0,0,0,0,0,0,0,/*  configure socket to be blocking            * so that we dont have to do write in            * a tight while loop             */
0,0,0,0,0,0,0,//  Start 3rd peer and check if it goes in LEADING state 
0,0,0,0,0,0,0,//  We are simulating an established leader, so the epoch is 1 
0,0,0,0,0,0,0,//  leader will shutdown, remaining followers will elect a new leader 
0,0,0,0,0,0,0,// / delete the direct children first 
0,0,0,0,0,0,0,//  have we read length bytes?   sock is non-blocking, so ok 
0,0,0,0,0,0,0,//  add back server 7 
0,0,0,0,0,0,0,//  lets try look up the current ID if we failed    in the middle of creating the znode 
0,0,0,0,0,0,0,//  ignore, this just means server is not up 
0,0,0,0,0,0,0,/*                          * we now wait until a quorum supports the same leader.                          */
0,0,0,0,0,0,0,/*                      * Building challenge request packet to send                      */
0,0,0,0,0,0,0,//  Sending a nonexisting opcode should cause the server to disconnect 
0,0,0,0,0,0,0,//  shutdown and start zookeeper again 
0,0,0,0,0,0,0,//  new server joining 
0,0,0,0,0,0,0,//  Server.start() only throws Exception, so let's at least wrap it   in an identifiable subclass 
0,0,0,0,0,0,0,//  NumberFormatException 
0,0,0,0,0,0,0,//  Mock processor used in zookeeper server 
0,0,0,0,0,0,0,//  Replace trusted keys with a valid key that is not trusted by the server 
0,0,0,0,0,0,0,//  do nothing for the root.   we are not keeping a quota on the zookeeper   root node for now. 
0,0,0,0,0,0,0,//  Set message color 
0,0,0,0,0,0,0,//  add all non-excluded snapshot files to the deletion list 
0,0,0,0,0,0,0,//  server.  This should fail since it is a local sesion.
0,0,0,0,0,0,0,/*              * Receives a socket and max number of attempts as input              */
0,0,0,0,0,0,0,//  change leader's leading port - should renounce leadership 
0,0,0,0,0,0,0,//  Do nothing 
0,0,0,0,0,0,0,//  second add to ackSet, verifier.containsQuorum=true, waitForNewLeaderAck returns without exceptions 
0,1,0,0,0,0,0,//  inconsistency of config node content during rolling restart. 
0,0,0,0,0,0,0,//  32 cores sweet spot seems to be 4 selector threads 
0,0,0,0,0,0,0,// This is the real assertion - could another thread lock  the DataNode we're currently writing 
0,0,0,0,0,0,0,//  that id 
0,0,0,0,0,0,0,//  Restore former value. 
0,0,0,0,0,0,0,//  Check that return code of all request are correct 
0,0,0,0,0,0,0,//  Allows the JVM to shutdown even if this thread is still running. 
0,0,0,0,0,0,0,//  standalone mode doens't need myid 
0,0,0,0,0,0,0,//  re-open the txnLog and snapLog   I'd rather just close/reopen this object itself, however that    would have a big impact outside ZKDatabase as there are other
0,0,0,0,0,0,0,//  Resolver called 10 times, because we shouldn't cache the resolved addresses
0,0,0,0,0,0,0,//  Non-priming packet: defer it until later, leaving it in the queue   until authentication completes. 
0,0,0,0,0,0,0,// check if I'm an observer in new config 
0,0,0,0,0,0,0,//  lets sort them explicitly (though they do seem to come back in order ususally :) 
0,0,0,0,0,0,0,//  initialization 
0,0,0,0,0,0,0,//  this is the limit node   get the parent and add it to the trie 
0,0,0,0,0,0,0,//  this is a server id and not a protocol version 
0,0,0,0,0,0,0,//  Hard close immediately, discarding buffers 
0,0,0,0,0,0,0,//  the initial message (without the protocol version) 
0,0,0,0,0,0,0,//  Ignore. We'll check instead whether it's a global session 
0,0,0,0,0,0,0,//  Check if this is a local session and we are trying to create   an ephemeral node, in which case we upgrade the session 
0,0,0,0,0,0,0,/*  this 'Client' section has the correct password, but we're not configured                                  to  use it - we're configured instead by the above                                  System.setProperty(...LOGIN_CONTEXT_NAME_KEY...) to                                  use the (nonexistent) 'MyZookeeperClient' section.  */
0,0,0,0,0,0,0,//  only happens during tests 
0,0,0,0,0,0,0,/*  ZOOKEEPER-706: If a session has a large number of watches set then     * attempting to re-establish those watches after a connection loss may     * fail due to the SetWatches request exceeding the server's configured     * jute.maxBuffer value. To avoid this we instead split the watch     * re-establishement across multiple SetWatches calls. This constant     * controls the size of each call. It is set to 128kB to be conservative     * with respect to the server's 1MB default for jute.maxBuffer.      */
0,0,0,0,0,0,0,//  server is using a JAAS-authenticated subject: determine service   principal name and hostname from zk server's subject. 
0,0,0,0,0,0,0,//  hasn't beaten us to it 
0,0,0,0,0,0,0,//  skip to the offset of latest skip point before starttime 
0,0,0,0,0,0,0,//  Point server at testDir 
0,0,0,0,0,0,0,//  Make sure that empty password and null password are treated the same 
0,0,0,0,0,0,0,//  create ephemeral sequential node 
0,0,0,0,0,0,0,//  Make all snapshots empty 
0,0,0,0,0,0,0,//  We keep a queue of requests. As requests get submitted they are   stored here. The queue is drained in the run() method. 
0,0,0,0,0,0,0,//  some of the operations will be executed by a client connected to   the removed server   while others are invoked by a client connected to some other   server.   when we're removing the leader, zk1 will be the client connected 
0,0,0,0,0,0,0,//  ok. 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorNodeTreeManager#createNode     * (java.lang.String, java.lang.String)      */
0,0,0,0,0,0,0,//  On windows, renameTo does not replace. 
0,0,0,0,0,0,0,//  If this is a request for a local session and it is to   create an ephemeral node, then upgrade the session and return   a new session request for the leader.   This is called by the request processor thread (either follower   or observer request processor), which is unique to a learner.   So will not be called concurrently by two threads. 
0,0,0,0,0,0,0,//  from txnlog 
0,0,0,0,0,0,0,//  warn, but generally this is ok 
0,0,0,0,0,0,0,//  Start the prepared thread so that it is writing znodes while   the follower is restarting. On the first restart, the follow   should use txnlog to catchup. For subsequent restart, the   follower should use a diff to catchup. 
0,0,0,0,0,0,0,//  take the last server to which we were connected 
0,0,0,0,0,0,0,//  convert to milliseconds 
0,0,0,0,0,0,0,//  therefore authentication is (at the earliest stage of being) in progress. 
0,0,0,0,0,0,0,//  wait for the process to finish and check the exit code 
0,0,0,0,0,0,0,/*          * Building notification packet to send          */
0,0,0,0,0,0,0,/*              * Lower epoch must return false              */
0,0,0,0,0,0,0,// we need to truncate the log to the lastzxid of the leader 
0,0,0,0,0,0,0,//  Send diff and fall through if zxid is of a new-epoch 
0,0,0,0,0,0,0,//  next two steps - related to sequential processing   1) verify that empty child name Assert.fails if not sequential 
0,0,0,0,0,0,0,//  Test view does not contain non-existant servers 
0,0,0,0,0,0,0,//  break the quorum 
0,0,0,0,0,0,0,//  getting called by PrepRequestProcessor 
0,0,0,0,0,0,0,/*                          * quora keeps the supporters of a given leader, so                          * we first update it with the vote of this peer.                          */
0,0,0,0,0,0,0,//  We send DIFF to (6,0) and forward any packet starting at (6, 0) 
0,0,0,0,0,0,0,//  register with JMX 
0,0,0,0,0,0,0,//  test fails if we still can't connect to the quorum after   30 seconds. 
0,0,0,0,0,0,0,//  Per RFC 5280 section 4.1.2.2, X509 certificates can use up to 20 bytes == 160 bits for serial numbers. 
0,0,0,0,0,0,0,/*          * Building notification packet to send, this is called directly only in tests          */
0,0,0,0,0,0,0,/*      * Normalize IPv6 or DNS name.      */
0,0,0,0,0,0,0,//  add child,remove child and then call getChildren 
0,0,0,0,0,0,0,//  First add the elem to the new expiry time bucket in expiryMap. 
0,0,0,0,0,0,0,//  It's possible our session expired - but this is ok, shows we  
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.gui.NodeViewersChangeListener#     * nodeViewersChanged(java.util.List)      */
0,0,0,0,0,0,0,//  Reconfigure 
0,0,0,0,0,0,0,//  If qcm is non-null, we may call qcm.connectOne(), which will take the lock on qcm   and then take QV_LOCK.  Take the locks in the same order to ensure that we don't   deadlock against other callers of connectOne().  If qcmRef gets set in another   thread while we're inside the synchronized block, that does no harm; if we didn't   take a lock on qcm (because it was null when we sampled it), we won't call   connectOne() on it.  (Use of an AtomicReference is enough to guarantee visibility   of updates that provably happen in another thread before entering this method.) 
0,0,0,0,0,0,0,//  sessionMap is used by closeSession() 
0,0,0,0,0,0,0,//  any arbitrary constant will do 
0,0,0,0,0,0,0,/*      * For ZOOKEEPER-975 verify that a peer joining an established cluster     * does not go in LEADING state.      */
0,0,0,0,0,0,0,/*         On startup, it's possible that we'll try calling addUsage of an ID not in the cache.  This is safe to ignore        as it'll be added later when we traverse the tranlog.  See discussion here:        http://mail-archives.apache.org/mod_mbox/zookeeper-user/201507.mbox/%3CCAB5oV2_ujhvBA1sEkCG2WRakPjCy%2BNR10620WK2G1GGgmEO44g%40mail.gmail.com%3E        This test makes sure that we don't add the ID to the cache in this case as that would result in dupes later        and consequently incorrect counts and entries that will never be cleaned out.          */
0,0,0,0,0,0,0,//  setting back 
0,0,0,0,0,0,0,//  should always be the case 
0,0,0,0,0,0,0,//  Flag that indicate if use alwaysOnTop or not. 
0,0,0,0,0,0,0,//  corrupt the logfile 
0,0,0,0,0,0,0,//  creating ephemeral with wrong option. 
0,0,0,0,0,0,0,//  set on watch 
0,0,0,0,0,0,0,// reduce the set of candidates to those that acknowledged p 
0,0,0,0,0,0,0,//  remember this server so we can add it back later 
0,0,0,0,0,0,0,//  Simulate a bit of network latency... 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorNodeTreeManager#deleteNode     * (java.lang.String)      */
0,0,0,0,0,0,0,//  Write only 2 bytes of the message, wait a bit, then write the rest.   This makes sure that writes smaller than 5 bytes don't break the plaintext mode on the server   once it decides that the input doesn't look like a TLS handshake. 
0,0,0,0,0,0,0,//  call reconfig API when the new server has received 
0,0,0,0,0,0,0,//  Send watches packet to server connection 
0,0,0,0,0,0,0,//  We have to get at least a majority of servers in sync with   us. We do this by waiting for the NEWLEADER packet to get   acknowledged 
0,0,0,0,0,0,0,//  Pattern.compile("Notification: \\d+, (\\d+), (\\d+), \\d+, [^,]*, [^,]*, (\\d+)");//, LOOKING, LOOKING, 2 
0,0,0,0,0,0,0,//  Shutdown sequence guarantee that all pending requests 
0,0,0,0,0,0,0,//     wait it hit data tree 
0,0,0,0,0,0,0,//  Mimic sessionId generated by follower's local session tracker 
0,0,0,0,0,0,0,//  validate lower limit 
0,0,0,0,0,0,0,//  sets lastIndex, resets reconfigMode 
0,0,0,0,0,0,0,//  remove host number 8 (the last one in a list of 9 hosts) 
0,0,0,0,0,0,0,//  Format and print the output of the command 
0,0,0,0,0,0,0,//  Peer miss the txnlog 
0,0,0,0,0,0,0,//  Skip the xid 
0,0,0,0,0,0,0,//  Peer zxid is in txnlog range 
0,0,0,0,0,0,0,//  setup the logger to capture all logs 
0,0,0,0,0,0,0,//  Get expected exception 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * getLastConnectionProps()      */
0,0,0,0,0,0,0,//  now start the third server so that new config has quorum 
0,0,0,0,0,0,0,// Check format 
0,0,0,0,0,0,0,//  by setting the value to 2 
0,0,0,0,0,0,0,//  message too long 
0,0,0,0,0,0,0,/*  Rather than fight it, let root have an alias  */
0,0,0,1,1,1,1,//  TODO only show add if a selected node isn't being   watched, and only show remove if a selected node is being   watched
0,0,0,0,0,0,0,//  Since we preallocate, we define EOF to be an   empty transaction 
0,0,0,0,0,0,0,//  now shutdown the server and restart it 
0,0,0,0,0,0,0,// If we are not going to take the snapshot be sure the transactions are not applied in memory 
0,0,0,0,0,0,0,// Keep these two lines together to keep the initialization order explicit 
0,0,0,0,0,0,0,// check to see if the leader zxid is lower than ours  this should never happen but is just a safety check 
0,0,0,0,0,0,0,//  ignore silently 
0,0,0,0,0,0,0,//  resolution occurred 
0,0,0,0,0,0,0,//  If we failed when flushing, try to close it to not leak   an FD 
0,0,0,0,0,0,0,/*      * Tests that if a quorum of a new config is synced with the leader and a reconfig     * is allowed to start but then the new quorum is lost, the leader will time out and     * we go to leader election.      */
0,0,0,0,0,0,0,//  We send DIFF to (1, 2) and forward any packet starting at (1, 2) 
0,0,0,0,0,0,0,/*                              * If this server is looking, then send proposed leader                              */
0,0,0,0,0,0,0,//  We want to track the change with a callback rather than depending on timing 
0,0,0,0,0,0,0,//  server_config should be either host:port:port or host:port:port:type 
0,0,0,0,0,0,0,//  Node 2 started last, kicks off leader election 
0,0,0,0,0,0,0,//  Ignore. This may be local session from other servers. 
0,0,0,0,0,0,0,//  lets remove someone who's not the leader 
0,0,0,0,0,0,0,//  get the new configuration from the request 
0,0,0,0,0,0,0,//  ZOOKEEPER-2693: don't execute 4lw if it's not enabled. 
0,0,0,0,0,0,0,//  Set SSL system properties and port unification, begin restarting servers 
0,0,0,0,0,0,0,//  now parse it 
0,0,0,0,0,0,0,/*                      * Exponential backoff                      */
0,0,0,0,0,0,0,//  and the leader will complete it 
0,0,0,0,0,0,0,/*  nThreads  */
0,0,0,0,0,0,0,//  setting up the quorum has a transaction overhead for creating and closing the session 
0,0,0,0,0,0,0,/*  Prep the request and convert to a Txn  */
0,0,0,0,0,0,0,//    test get/exists with two sets of watchers 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * isAllowsChildren(java.lang.String)      */
0,0,0,0,0,0,0,/*  Once we've figured out where we are, we're done.  */
0,0,0,0,0,0,0,//  lets see one successful operation 
0,0,0,0,0,0,0,//  try to reestablish the quorum 
0,0,0,1,0,1,1,//  Same as for element.  Should refactor this.
0,0,0,0,0,0,0,//  make sure zkclient works 
0,0,0,0,0,0,0,//  start server 3 with new config 
0,0,0,0,0,0,0,//  or none, if not ready yet. Sets saslState to COMPLETE as a side-effect. 
0,0,0,0,0,0,0,//  Instead of starting roZk immediately, wait some grace   period before we decide we're partitioned.     Thread is used here because otherwise it would require   changes in each of election strategy classes which is 
0,0,0,0,0,0,0,//  This should never happen 
0,0,0,0,0,0,0,//  LOG.warn("Ack>>> cxid = " + request.cxid + " type = " +   request.type + " id = " + request.sessionId);   request.addRQRec(">prop"); 
0,0,0,0,0,0,0,//  This method can return empty iterator if the requested zxid 
0,0,0,0,0,0,0,//  log at error level as we are returning a marshalling   error to the user 
0,0,0,0,0,0,0,//  if we have read data from the file, and it matchs the timep pattern 
0,0,0,0,0,0,0,//  No change, so nothing to update 
0,0,0,0,0,0,0,//  Make sure to atomically check local session status, upgrade   session, and make the session creation request.  This is to   avoid another thread upgrading the session in parallel. 
0,0,0,0,0,0,0,/*      * For each leader offer, find out where we fit in. If we're first, we     * become the leader. If we're not elected the leader, attempt to stat the     * offer just less than us. If they exist, watch for their failure, but if     * they don't, become the leader.      */
0,0,0,0,0,0,0,//  ZOOKEEPER-3056: provides an escape hatch for users upgrading   from old versions of zookeeper (3.4.x, pre 3.5.3). 
0,0,0,0,0,0,0,//  the follower acceptor thread 
0,0,0,0,0,0,0,//  c.f. org.apache.hadoop.security.UserGroupInformation. 
0,0,0,0,0,0,0,//  Now kill one of the other real servers         
0,0,0,0,0,0,0,//  servers with authentication interfaces configured 
0,0,0,0,0,0,0,//  resets "zookeeper.datadir.autocreate" flag 
0,0,0,0,0,0,0,//  Note: mode is UNKNOWN or PLAINTEXT 
0,0,0,0,0,0,0,//  Disable throttling and resume acceptance of new requests. If this   entailed a state change, register an interest op update request with 
0,0,0,0,0,0,0,//  and add it back (as follower) 
0,0,0,0,0,0,0,//  create a file logger url from the command line args 
0,0,0,0,0,0,0,//  check delete 
0,0,0,0,0,0,0,//  leader 
0,0,0,0,0,0,0,//  Input may be delimited by either commas or newlines so convert to common newline separated format 
0,0,0,0,0,0,0,//  return number of session expiry calls 
0,0,0,0,0,0,0,//  Touch table for the global sessions 
0,0,0,0,0,0,0,//  watcher1 
0,0,0,0,0,0,0,//  init quorum auth server & learner 
0,0,0,0,0,0,0,//  verify bad pass Assert.fails 
0,0,0,0,0,0,0,//  verifying that other path child watches are not affected 
0,0,0,0,0,0,0,//  start 2 peers and verify if they form the cluster 
0,0,0,0,0,0,0,//  This server should fail to join the quorum as it is not using ssl. 
0,0,0,0,0,0,0,//  check if the path exists. We cannot create   quota for a path that already exists in zookeeper 
0,0,0,0,0,0,0,//  if no matching option -c or -d or -a is specified, we remove   the watches of the given node by choosing WatcherType.Any 
0,0,0,0,0,0,0,/*                                  * Version added in 3.4.6                                  */
0,0,0,0,0,0,0,//  we want to loop through the list twice 
0,0,0,0,0,0,0,//  create transaction and snapshot files in different-different 
0,0,0,0,0,0,0,//  set a watch on the root node 
0,0,0,0,0,0,0,//  the selector. 
0,0,1,0,0,0,0,//  Note: according to the Socket javadocs, setTrafficClass() may be   ignored by socket implementations, so we don't check that the value   we set is returned. 
0,0,0,0,0,0,0,//  execute from commandMap 
0,0,0,0,0,0,0,//  sub process used to execute the command 
0,0,0,0,0,0,0,//  Now participant asks for epoch (mocking LearnerHandler behavior). Second add to connectingFollowers.   Triggers verifier.containsQuorum = true 
0,0,0,0,0,0,0,//  that the switched off servers are down 
0,0,0,0,0,0,0,// LOG.warn("designated leader is: " + designatedLeader); 
0,0,0,0,0,0,0,/*      * Creates a leader election notification message.      */
0,0,0,0,0,0,0,//  we want to send our version of the request. 
0,0,0,0,0,0,0,//  This should be enough time for the first session to expire and for   the closeSession request to propagate to other machines (if there is a bug)   Since it is time sensitive, we have false negative when test 
0,0,0,0,0,0,0,//  Here we start populating the server and shutdown the follower after 
0,0,0,0,0,0,0,//  clear our internal buffer 
0,0,0,0,0,0,0,//  Access to ipMap or to any Set contained in the map needs to be   protected with synchronized (ipMap) { ... } 
0,0,0,0,0,0,0,//  choose "current" server according to the client rebalancing algorithm 
0,0,0,0,0,0,0,// create/close session don't require request record 
0,0,0,0,0,0,0,/*          * Start one LEThread for each peer we want to run.          */
0,0,0,0,0,0,0,//  Grab some memory so that it is easier to cause an 
0,0,0,0,0,0,0,//  Doing a delete 
0,0,0,0,0,0,0,//  ensure zk got connected 
0,0,0,0,0,0,0,//  use synchronized(this) to access 
0,0,0,0,0,0,0,//  Defaults ServerCnxnFactory would be instantiated with 
0,0,0,0,0,0,0,//  make sure there is a leader 
0,0,0,0,0,0,0,//  now create the direct children 
0,0,0,0,0,0,0,//  add back servers 7 and 8 while still in reconfigMode (we didn't call 
0,0,0,0,0,0,0,//  Create Zookeeper and connect to it. 
0,0,0,0,0,0,0,// quorumPeer.setQuorumPeers(config.getAllMembers()); 
0,0,0,0,0,0,0,//  we only import NodeViewers 
0,0,0,0,0,0,0,/*      * Challenge counter to avoid replay attacks      */
0,0,0,0,0,0,0,// Check that the node path is removed from pTrie 
0,0,0,0,0,0,0,//  including the header and the last / bytes   the snapshot should be at least 10 bytes 
0,0,0,0,0,0,0,//  not a CA 
0,0,0,0,0,0,0,//  number of entries skipped to get to the end of the iterator, less the number skipped to get to the start 
0,0,0,0,0,0,0,/*  save the return error code by the server  */
0,0,0,0,0,0,0,//  Change the '1' to e.g. 5, to change this to 5 minutes. 
0,0,0,0,0,0,0,//  authenticate learner 
0,0,0,0,0,0,0,//  The test method threw an exception, but it might be an   expected exception as defined in the @Test annotation.   Check the annotation and log an appropriate message. 
0,0,0,0,0,0,0,//  register an interest op update request with the selector. 
0,0,0,0,0,0,0,//  This must be a global request 
0,0,0,0,0,0,0,//  Here we create 13000 znodes 
0,0,0,0,0,0,0,//  The change should happen now 
0,0,0,0,0,0,0,/*      * Request processors      */
0,0,0,0,0,0,0,//  1238, 1237 
0,0,0,0,0,0,0,//  Create and Register the top level Log4J MBean 
0,0,0,0,0,0,0,//  Test basic create, ls, and getData 
0,0,0,0,0,0,0,//  No entries in jaas.conf   If there's a configuration exception fetching the jaas section and   the user has required sasl by specifying a LOGIN_CONTEXT_NAME_KEY or a jaas file 
0,0,0,0,0,0,0,//  don't waste memory if there are few watches on a node   rehash when the 4th entry is added, doubling size thereafter   seems like a good compromise 
0,0,0,0,0,0,0,//  creating sequential nodes is stored properly 
0,0,0,0,0,0,0,//  servers, and then bounce the other servers one by one 
0,0,0,0,0,0,0,//  than peer zxid 
0,0,0,0,0,0,0,//  Check that when a server starts from old style config, it should keep the client 
0,0,0,0,0,0,0,/*          * Send the same messages, this time should not make 0 the leader.          */
0,0,0,0,0,0,0,//  start additional new servers 
0,0,0,0,0,0,0,//  pretend each connect attempt takes 4000 milliseconds 
0,0,0,0,0,0,0,//  servers 4 and 5 should be able to work independently 
0,0,0,0,0,0,0,/*  We've sent the whole buffer, so drop the buffer  */
0,0,0,0,0,0,0,/*               * Start a new connection if doesn't have one already.               */
0,0,0,0,0,0,0,//  watcher2 
0,0,0,0,0,0,0,//  Send the connection request as a client do 
0,0,0,0,0,0,0,//  This value will be used directly in {@link CODE#SESSIONMOVED}   public static final int SessionMoved = -118;        
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer#     * setZooInspectorManager     * (org.apache.zookeeper.inspector.manager.ZooInspectorNodeManager)      */
0,0,0,0,0,0,0,//  this is ok -- just a packet from an old client which   doesn't contain readOnly field 
0,0,0,0,0,0,0,//  Number of machines increased, my server is in the new cluster   Here whether to move or not depends on the difference of cluster   sizes   With probability 1 - |old|/|new} the client disconnects 
0,0,0,0,0,0,0,//  In this case, the hostname equals literal IP address. 
0,0,0,0,0,0,0,//  queuedBuffer has reached its component limit, so combine the existing components. 
0,0,0,0,0,0,0,//  check if being waken up on closing. 
0,0,0,0,0,0,0,//  abort if we hit the limit 
0,0,0,0,0,0,0,/*          * Start mock server 1          */
0,0,0,0,0,0,0,//  start server again with intact database 
0,0,0,0,0,0,0,//  so this shouldn't break anything. 
0,0,0,0,0,0,0,//  Resolve hostname for this server in case the   underlying ip address has changed. 
0,0,0,0,0,0,0,//  lets remove the leader and some other server 
0,0,0,0,0,0,0,//  Throw an error if there were any leaked buffers 
0,0,0,0,0,0,0,//  delete till you can find a node with more than   one child 
0,0,0,0,0,0,0,// shutdown leader- quorum should still exist 
0,0,0,0,0,0,0,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * saveNodeViewersFile(java.io.File, java.util.List)      */
0,0,0,0,0,0,0,/*  Election instance  */
0,0,0,0,0,0,0,//  if no TGT, do not bother with ticket management. 
0,0,0,0,0,0,0,//  each watcher will process the event 
0,0,0,0,0,0,0,//  7. restart the previous leader to force it to replay the edits and possibly come up in a bad state 
0,0,0,0,0,0,0,//  shutdown 2 followers so that leader does not have majority and goes 
0,0,0,0,0,0,0,//  make sure they joined the new config without any change to it 
0,0,0,0,0,0,0,//  where the packet is actually sent. 
0,0,0,0,0,0,0,//  write message 
0,0,0,0,0,0,0,//  Get each logger from the Log4J Repository and add it to the   Hierarchy MBean created above.   org.apache.log4j.spi.LoggerRepository r = 
0,0,0,0,0,0,0,//  We send snap 
0,0,0,0,0,0,0,//  a different, larger version dynamic file 
0,0,0,0,0,0,0,//  Start up the ZK server to automatically create the necessary directories   and capture the directory where data is stored 
0,0,0,0,0,0,0,//  look for the clients to finish their create operations 
0,0,0,0,0,0,0,//  default constructor 
0,0,0,0,0,0,0,//  it later 
0,0,0,0,0,0,0,//  startForwarding() will be called in all cases 
0,0,0,0,0,0,0,// send a ping request either time is due or no packet sent out within MAX_SEND_PING_INTERVAL 
0,0,0,0,0,0,0,//  some of the operations will be executed by a client connected to   the removed server   while others are invoked by a client connected to some other   server.   when we're removing the leader, zk1 will be the client connected   to removed server 
0,0,0,0,0,0,0,//  Again, the user explicitly set something SASL-related, so   they probably expected SASL to succeed. 
0,0,0,0,0,0,0,//  content preserved 
0,0,0,0,0,0,0,//  1246, 1245, 1244, 1243, 1242, 1241, 1240, 1139 
0,0,0,0,0,0,0,//  check to avoid startup follows shutdown 
0,0,0,0,0,0,0,//  sleep for 10 millisecond and then again check 
0,0,0,0,0,0,0,//  check the existence of name in bean 
0,0,0,0,0,0,0,/*                  * When local session upgrading is disabled, leader will                 * reject the ephemeral node creation due to session expire.                 * However, if this is the follower that issue the request,                 * it will have the correct error code, so we should use that                 * and report to user                  */
0,0,0,0,0,0,0,//  Only called as callback from zkServer.processPacket() 
0,0,0,0,0,0,0,// If the test failes it will most likely fail with a NoAuth exception before it ever gets to this assertion 
0,0,0,0,0,0,0,//  loop through the args (must be key/value sequence) 
0,0,0,0,0,0,0,//  Falls back to filename detection if no property value 
0,0,0,0,0,0,0,//  3. start up the followers to form a new quorum 
0,0,0,0,0,0,0,//  Number of machines became smaller, my server is not in the new   cluster 
0,0,0,0,0,0,0,//     the node value is same as what we have on leader 
0,0,0,0,0,0,0,//  Check that the static config was split into static and dynamic files correctly. 
0,0,0,0,0,0,0,/*  (non-Javadoc)         * @see org.apache.zookeeper.ClientWatchManager#materialize(Event.KeeperState,          *                                                        Event.EventType, java.lang.String)          */
0,0,0,0,0,0,0,//  Signal for graceful shutdown 
0,0,0,0,0,0,0,//  proceed to the next processor 
0,0,0,0,0,0,0,//  do cleanup 
0,0,0,0,0,0,0,//  halt one of the listeners and verify count 
0,0,0,0,0,0,0,//  Throttle when there are too many concurrent snapshots being sent to observers 
0,0,0,0,0,0,0,//  should only happen during upgrade 
0,0,0,0,0,0,0,// check for any parent that has been quota 
0,0,0,0,0,0,0,//  take one of the new servers if it is possible (there are still such   servers we didn't try),   and either the probability tells us to connect to one of the new   servers or if we already   tried all the old servers 
0,0,0,0,0,0,0,//  We won't race another upgrade attempt because only one thread   will get the timeout from the map 
0,0,0,0,0,0,0,//  findbugs2.0.3 complains about get after put.   long term strategy would be use computeIfAbsent after JDK 1.8 
0,0,0,0,0,0,0,//  jaas.conf entry available 
0,0,0,0,0,0,0,//  Create the node with another session 
0,0,0,0,0,0,0,//  The node doesn't exist anymore, so skip it 
0,0,0,0,0,0,0,//  sid 
0,0,0,0,0,0,0,//  The first allowable character 
0,0,0,0,0,0,0,//  during first and second iteration, leavingIndex will correspond to a   follower   during third and fouth iteration leavingIndex will be the index of 
0,0,0,0,0,0,0,//  If the socket times out, we count that as Assert.failed - 
0,0,0,0,0,0,0,//  Make sure we can handle any type of correct wrapper 
0,0,0,0,0,0,0,// the direcotry containing the 
0,0,0,0,0,0,0,//  Sets authorization flag 
0,0,0,0,0,0,0,//  Setup a database with a single /foo node 
0,0,0,0,0,0,0,//  Sun doesn't include the address that causes this   exception to be thrown, so we wrap the exception   in order to capture this critical detail. 
0,0,0,0,0,0,0,//  Check that storage space return some value 
0,0,0,0,0,0,0,//  log that precedes first retained snapshot is also retained 

oracle, Pattern, NLP, TM, MAT, MAT_TM, MAT_NLP,Comments
1,0,0,0,0,0,0,// this may be negative
1,0,1,1,1,1,1,// TODO: to be implemented
1,0,1,1,1,1,1,// TODO:  the subplot areas needs to be moved out of the plot into the plot //        state
1,0,0,1,1,1,1,//TODO: shift block down to bottom
1,0,1,1,1,1,1,// TODO: it might be a good idea to keep a reference to the color // specified in setPaint() or setColor(), rather than creating a // new object every time getPaint() is called.
1,0,0,1,1,1,1,// TODO: for now we are ignoring the height constraint
1,0,1,1,1,1,1,// first determine the size of the chart rendering area... // TODO workout insets for SWT
1,0,1,1,1,1,1,// TODO: implement properly
1,0,1,1,1,1,1,// TODO: this must be wrong...
1,0,0,1,1,1,1,// TODO: we didn't check the width yet
1,1,0,1,1,1,1,// hack to ensure the newly created awt fonts will be rendered with the // same height as the swt one
1,0,0,1,1,1,1,//TODO: shift block right by half
1,0,1,1,1,1,1,// FIXME: need a locale as well as a timezone
1,0,1,1,1,1,1,//TODO: shift block over to right
1,0,0,0,0,0,0,// do we need to update the crosshair values?
1,0,1,1,1,1,1,// TODO find a better localization key
1,0,1,1,1,1,1,// TODO:  this attribute should be transferred to the renderer state.
1,0,1,1,1,1,1,// FIXME: implement this, low priority
1,0,1,1,1,1,1,// FIXME: the XYItemRenderer interface doesn't specify the // getAnnotations() method but it should
1,0,0,0,0,0,0,// defer argument checking...
1,1,1,1,1,1,1,// calculate the adjusted data area taking into account the 3D effect... // this assumes that there is a 3D renderer, all this 3D effect is a // bit of an ugly hack...
1,0,0,1,1,1,1,// TODO:  add constructors for combinations of number and date formatters.
1,0,1,1,1,1,1,// TODO: move to plot state
1,0,0,0,0,0,0,// here we tweak the notify flag on the plot so that only // one notification happens even though we update multiple // axes...
1,0,0,0,0,0,0,// defer argument checking
1,0,1,1,1,1,1,//FIXME we should really assert a value here
1,0,0,0,0,0,0,// TO DO:  these annotations only work with XYPlot, see if it is possible to // make ContourPlot a subclass of XYPlot (DG);
1,0,1,1,1,1,1,//FIXME we should really assert a value
1,0,1,0,0,0,0,// not strictly necessary, since the // renderer set for the // parent plot is not used
1,0,1,1,1,1,1,// TODO : complete this
1,0,0,1,1,1,1,// TODO: fix output when this flag is set to true
1,0,0,1,1,1,1,// TODO:  move the above to the plot state
1,0,1,1,1,1,1,// FIXME:  this code means that it is not possible to use more than // one domain axis for the combined plots...
1,0,0,1,0,1,1,// end of workaround
1,0,0,1,1,1,1,// TODO: could change this to itemFillPaint().  For backwards // compatibility, it might require a useFillPaint flag.
1,0,0,0,0,0,0,// a redraw should NOT trigger another change event
1,0,0,0,0,0,0,// unused in parent
1,0,1,1,1,1,1,// TODO: In JFreeChart 1.2.0, put this method in the // CategoryItemRenderer interface
1,0,0,1,1,1,1,// TODO: rotate the image when drawn with horizontal orientation?
1,0,1,1,1,1,1,// TODO: implement this properly
1,0,1,1,1,1,1,// FIXME: this should generate a series change event
1,0,1,1,1,1,1,// CREATE ENTITIES // FIXME:  these methods should be defined
1,0,1,1,1,1,1,// FIXME: the renderer interface doesn't have the drawDomainLine() // method, so we have to rely on the renderer being a subclass of // AbstractXYItemRenderer (which is lame)
1,0,1,1,1,1,1,// FIXME: this attribute is not used - deprecate?
1,0,1,1,1,1,1,// TODO: by coding the event with some information about what changed // in the dataset, we could make the recalculation of the interval // more efficient in some cases (for instance, if the change is // just an update to a y-value, then the x-interval doesn't need // updating)...
1,0,0,0,0,0,0,// the method we want isn't in the CategoryItemRenderer // interface...
1,0,1,1,1,1,1,// FIXME: what if value is null on next line?
1,0,1,1,1,1,1,// TODO:  this needs to move into the renderer state
1,0,1,1,1,1,1,//TODO: implement this method properly
1,1,0,1,1,1,1,// hack to ensure the newly created swt fonts will be rendered with the // same height as the awt one
1,0,0,0,0,0,0,// unused but must return something, so while we are at it...
1,0,1,1,1,1,1,// FIXME: perhaps we should clone the data list
1,0,1,0,0,0,0,// if we are rendering the values as percentages, we need to calculate // the total for the current item.  Unfortunately here we end up // repeating the calculation more times than is strictly necessary - // hopefully I'll come back to this and find a way to add the // total(s) to the renderer state.  The other problem is we implicitly // assume the dataset has no negative values...perhaps that can be // fixed too.
1,0,1,0,0,0,0,// Note: It would be nice to pre-calculate this per series
1,0,0,0,0,0,0,// we assume that all other Paint instances implement equals() and // hashCode()...of course that might not be true, but what can we // do about it?
1,0,1,1,1,1,1,// FIXME: use other fields too
1,0,1,1,1,1,1,// all attributes are immutable, so we can just return the super.clone() // FIXME: in fact, the generator itself is immutable, so cloning is // not necessary
1,0,0,0,0,0,0,// here's a quirk - the API has been defined in terms of a plain // TimePeriod, which cannot make use of the timezone and locale // specified in the constructor...so we only do the time zone // pegging if the period is an instanceof RegularTimePeriod
1,1,0,0,0,0,0,// now handle specific plot types (and yes, I know this is some // really ugly code that has to be manually updated any time a new // plot type is added - I should have written something much cooler, // but I didn't and neither did anyone else).
1,0,1,1,1,1,1,// TODO: URLEncode?
1,0,1,1,1,1,1,// TODO Revert to SVN revision 2469 in JFreeChart 1.0.16 //      (MultipleGradientPaint's / JDK issues) // TODO THEN: change visibility of ALL darker(...) Methods EXCEPT //      darker(Paint) to private!
1,0,1,1,1,1,1,//TODO replace getSize by getBounds ?
1,0,0,1,1,1,1,// TODO: check threshold
1,0,1,1,1,1,1,// FIXME: add setBaseItemURLGenerator(CategoryURLGenerator, boolean) ?
1,0,1,1,1,1,1,// FIXME: add setSeriesItemURLGenerator(int, CategoryURLGenerator, boolean)?
1,0,1,1,0,1,1,// now we handle some special cases - yes, UGLY code alert!
1,0,1,1,1,1,1,// FIXME:  it probably makes sense to allocate an array of 256 Colors // and lazily populate this array...
1,0,1,1,1,1,1,// TODO: need to fetch this from localised resources
1,0,1,1,1,1,1,// FIXME: No getValueFormat() method?
1,0,1,1,0,1,1,// here we could probably be a little faster by searching for both // indices simultaneously, but I'll look at that later if it seems // like it matters...
1,0,1,1,1,1,1,// TODO: complete this
1,0,1,1,1,1,1,// FIXME: this attribute is never used - deprecate?
1,0,0,1,1,1,1,// FIXME: Clone the attributed string if it is not null
1,0,0,0,0,0,0,// report this?
1,0,0,0,0,0,0,// this may be obsolete (not used anywhere)
1,0,1,1,1,1,1,// TODO: is this a good idea?
1,1,1,0,0,0,0,/// a kludge to make everything work when no rows returned
1,0,1,1,1,1,1,//TODO: shift block down by half
1,0,1,1,1,1,1,// FIXME better ask the renderer instead of DatasetUtilities
1,0,1,1,1,1,1,// TODO: implement the entity for the annotation
1,0,0,0,0,0,0,// needs to be improved !!!
1,0,0,0,0,0,0,// not used by plot
1,0,1,1,1,1,1,// FIXME:  need a locale as well as a timezone
1,0,1,1,1,1,1,// TODO: For JFreeChart 1.2.0, this method should go in the //       ShapeUtilities class
1,0,0,0,0,0,0,// we'll have to use the method in the interface, but // this doesn't have the paint and stroke settings...
1,0,1,1,1,1,1,// FIXME: Check that there isn't already a series with the same key
1,0,1,1,0,1,1,// I know it's bad to create object. better idea?
1,0,1,1,1,1,1,// FIXME: clone generator
1,0,1,1,1,1,1,// TODO: use a generator here
1,0,0,1,1,1,1,// TODO: I think we need to make sure the keys are actually cloned, // whereas the paint instances are always immutable so they're OK
1,0,0,1,1,1,1,// FIXME: draw outliers
1,0,1,1,1,1,1,// TODO: I think we need to make sure the keys are actually cloned, // whereas the stroke instances are always immutable so they're OK
1,0,1,0,0,0,0,// not implemented
1,0,0,1,1,1,1,"/**     * Returns a string representing the week (e.g. ""Week 9, 2002"").     *     * TODO: look at internationalisation.     *     * @return A string representing the week.     */"
1,0,1,1,1,1,1,// FIXME: show a dialog with the error
1,0,0,1,1,1,1,// TODO: draw the interval marker with a 3D effect
1,0,1,1,1,1,1,// TODO: add serialization support for images
1,0,0,0,0,0,0,// could make this configurable
1,0,0,1,1,1,1,// TODO see if we need to apply some line color and style to the // axis traces
1,0,1,1,1,1,1,// FIXME:  implement this...
1,0,1,1,1,1,1,"/** * An annotation that allows an image to be placed at some location on * an {@link XYPlot}. * * TODO:  implement serialization properly (image is not serializable). */"
0,0,0,0,0,0,0,// if not, check if there is a paint defined for the specified key
0,0,0,0,0,0,0,// RANGE / RANGE
0,0,0,0,0,0,0,// height is OK, but width must be constrained
0,0,0,0,0,0,0,// do we need to fill the buffer?
0,0,0,0,0,0,0,// check that the clone doesn't share the same underlying arrays.
0,0,0,0,0,0,0,// now replacing the dataset should update the axis range...
0,0,0,0,0,0,0,// minorTickCount
0,0,0,0,0,0,0,// create a dataset...
0,0,0,0,0,0,0,// check that the renderer has a corresponding dataset (it doesn't // matter if the dataset is null)
0,0,0,0,0,0,0,// build first tab
0,0,0,0,0,0,0,/*Comparable k =*/
0,0,0,0,0,0,0,//row 2: background paint for the chart
0,0,0,0,0,0,0,// mercuryPaint
0,0,0,0,0,0,0,// period
0,0,0,0,0,0,0,// should get IllegalArgumentException for negative index
0,0,0,0,0,0,0,// create a legend, if requested...
0,0,0,0,0,0,0,// Segment fromSegment = getSegment(from); // fromSegment.inc(); // Segment toSegment = getSegment(to); // toSegment.dec();
0,0,0,0,0,0,0,// Dispose of any fonts we have created
0,0,0,0,0,0,0,// CASE 1 : Comparing to another TimeSeriesDataPair object // -------------------------------------------------------
0,0,0,0,0,0,0,//empty cell // row 2
0,0,0,0,0,0,0,// The following angle calc will ensure there isn't a top // vertical axis - this may be useful if you don't want any // given criteria to 'appear' move important than the // others.. //  + (getDirection().getFactor() //        * (cat + 0.5) * 360 / catCount);
0,0,0,0,0,0,0,// Create the color-change dialog
0,0,0,0,0,0,0,// draw the item labels if there are any...
0,0,0,0,0,0,0,// build second tab
0,0,0,1,0,1,1,// you can add a null list - it would have been better if this // required EMPTY_LIST
0,0,0,0,0,0,0,// row 4
0,0,0,0,0,0,0,// check if previously colinear
0,0,0,0,0,0,0,// set the plot properties...
0,0,0,1,0,1,1,// draw the standard deviation lines *before* the shapes (if they're // visible) - it looks better if the shape fill colour is different to // the line colour
0,0,0,0,0,0,0,//label.setFont(font);
0,0,0,0,0,0,0,// we create an event with a special flag set...the purpose of // this is to communicate to the plot (the default receiver of // the event) that series visibility has changed so the axis // ranges might need updating...
0,0,0,0,0,0,0,// don't need to do anything
0,0,0,0,0,0,0,// no need to instantiate this
0,0,0,0,0,0,0,// row 1
0,0,0,0,0,0,0,// roseHighlightPaint
0,0,0,0,0,0,0,// return the appropriate axis editor
0,0,0,0,0,0,0,/* TimeSeriesDataItem item = */
0,0,0,0,0,0,0,// Create the new font and set it into the title // label
0,0,0,0,0,0,0,/* shape visible = */
0,0,0,0,0,0,0,// check a regular value
0,0,0,0,0,0,0,// test collection 3, which doesn't define all tasks in all series
0,0,0,0,0,0,0,/* XYSeries s = */
0,0,0,0,0,0,0,// row 3
0,0,0,0,0,0,0,// when the dataset contains one or more series, but those series  // contain no items, we expect the value range to be null
0,0,0,0,0,0,0,// Use a colored text field to show the color
0,0,0,0,0,0,0,//not first tick to be displayed //no tick label
0,0,0,0,0,0,0,// Create the font-change dialog
0,0,0,0,0,0,0,// in the following code, barL0 is (in Java2D coordinates) the LEFT // end of the bar for a horizontal bar chart, and the TOP end of the // bar for a vertical bar chart.  Whether this is the BASE of the bar // or not depends also on (a) whether the data value is 'negative' // relative to the base value and (b) whether or not the range axis is // inverted.  This only matters if/when we apply the minimumBarLength // attribute, because we should extend the non-base end of the bar
0,0,0,0,0,0,0,// Get the item count for the series, so that we can know which is the // end of the series.
0,0,0,0,0,0,0,//deal with range axis
0,0,0,0,0,0,0,/* shape filled = */
0,0,0,0,0,0,0,// set the range axis to display integers only...
0,0,0,0,0,0,0,// convert the font size (in pt for awt) to height in pixels for swt
0,0,0,0,0,0,0,// pass the click on to the plot... // rely on the plot to post a plot change event and redraw the chart...
0,0,0,0,0,0,0,// use item paint for outlines by // default, not outline paint
0,0,0,0,0,0,0,// handle the special case where the dataset has y-intervals that // we want to measure
0,0,0,0,0,0,0,/*CategoryPlot plot =*/
0,0,0,0,0,0,0,//deal with domain axis
0,0,0,0,0,0,0,// we're doing this for testing only, and make sure that we // only add data in ascending order by x-value
0,0,0,0,0,0,0,// verify max value
0,0,0,0,0,0,0,// change a series outline stroke
0,0,0,0,0,0,0,// verify min value
0,0,0,0,0,0,0,// check an inherited attribute
0,0,0,0,0,0,0,//gridBandPaint
0,0,0,0,0,0,0,// starts at the back, wraps around front, and // finishes at back again
0,0,0,0,0,0,0,//deal with plot appearance
0,0,0,0,0,0,0,// test a customised instance
0,0,0,0,0,0,0,// row 4: orientation
0,0,0,0,0,0,0,// rangeAxisLocation...
0,0,0,0,0,0,0,// row 2
0,0,0,0,0,0,0,// here we change the AffineTransform so we can draw the annotation // to a larger area and scale it down into the display area // afterwards, the original transform is restored
0,0,0,0,0,0,0,// row 3: background paint
0,0,0,0,0,0,0,// time zone
0,0,0,0,0,0,0,// row 1: stroke
0,0,0,0,0,0,0,// clip top and bottom bounds to data area
0,0,0,0,0,0,0,// check dataset with one time period
0,0,0,0,0,0,0,// BAR X
0,0,0,0,0,0,0,// we can't do anything
0,0,0,0,0,0,0,// sectionOutlinePaint
0,0,0,0,0,0,0,// we use ValueMarker for the tests, because we need a concrete // subclass...
0,0,0,0,0,0,0,// borderVisible
0,0,0,0,0,0,0,// to be consistent with other Graphics2D implementations
0,0,0,0,0,0,0,// validate base timeline exclusions added as timeline's esceptions
0,0,0,0,0,0,0,// domainAxisLocation - no longer a separate field but test anyway...
0,0,0,0,0,0,0,// row keys...
0,0,0,0,0,0,0,//private TickUnits standardTickUnits;
0,0,0,0,0,0,0,// backgroundImage
0,0,0,0,0,0,0,// try unknown column key
0,0,0,0,0,0,0,// minorTickLength
0,0,0,0,0,0,0,// when the dataset contains one or more series, but those series // contain no items, we still expect the range to be null
0,0,0,0,0,0,0,// labelFont
0,0,0,0,0,0,0,// TBLRC // 01010 - bottom and right only
0,0,0,0,0,0,0,// build the third tab
0,0,0,0,0,0,0,// do we need to resize the buffer?
0,0,0,0,0,0,0,// column keys...
0,0,0,0,0,0,0,// even though the axis is not visible, we need ticks for the // gridlines...
0,0,0,0,0,0,0,// ok and cancel buttons
0,0,0,0,0,0,0,// does nothing - override if necessary
0,0,0,0,0,0,0,// don't zoom unless the mouse pointer is in the plot's data area
0,0,0,0,0,0,0,// if there is a tool tip, we expect it to generate the title and // alt values, so we only add an empty alt if there is no tooltip
0,0,0,0,0,0,0,// borderStroke
0,0,0,0,0,0,0,// ensure we have a maximum value to use on the axes
0,0,0,0,0,0,0,// we dispose resources we own but user must dispose gc
0,0,0,0,0,0,0,// remove plot2, but plot1 is removed instead
0,0,0,0,0,0,0,// set the line style to solid by default
0,0,0,0,0,0,0,// we are starting a new series path
0,0,0,0,0,0,0,// apply dash style if any
0,0,0,0,0,0,0,// it is too slow to look at every data item, so let's just look at // the first, middle and last items...
0,0,0,0,0,0,0,//showing "1e#"-style ticks or negative exponent // generating tick value between 0 & 1; show fewer
0,0,0,0,0,0,0,//axisLabelPaint;
0,0,0,0,0,0,0,// properties // save // print // zoom // tooltips
0,0,0,1,0,1,1,// retrieve the swt font description in an os indept way
0,0,0,0,0,0,0,// collect entity and tool tip information...
0,0,0,0,0,0,0,// create a new awt font with the appropiate data
0,0,0,0,0,0,0,// and independent...
0,0,0,0,0,0,0,// for now we simply want to extract the chars from the iterator // and call an unstyled text renderer
0,0,0,0,0,0,0,// first get the range without the interval, then expand it for the // interval width
0,0,0,0,0,0,0,// see comment above //this.colorsPool.put(Integer.valueOf(awtColor.getRGB()), swtColor);
0,0,0,0,0,0,0,// renderingHints
0,0,0,0,0,0,0,// Next, setup the plot area
0,0,0,0,0,0,0,//this.myColor = new Color(getDisplay(), color.getRGB());
0,0,0,0,0,0,0,// seems to be the same...
0,0,0,0,0,0,0,// SWT and AWT share the same style constants.
0,0,0,0,0,0,0,// set the axis properties
0,0,0,1,1,1,1,// FIXME: add setBaseStroke(Stroke, boolean) ?
0,0,0,0,0,0,0,// create the dataset...
0,0,0,0,0,0,0,// null will be returned
0,0,0,0,0,0,0,// subtitles
0,0,0,0,0,0,0,// erase the previous zoom rectangle (if any).  We only need to do // this is we are using XOR mode, which we do when we're not using // the buffer (if there is a buffer, then at the end of this method we // just trigger a repaint)
0,0,0,0,0,0,0,// borderPaint
0,0,0,0,0,0,0,// draw the markers that are associated with a specific dataset...
0,0,0,0,0,0,0,// title
0,0,0,0,0,0,0,// start with a unit that is at least 1/10th of the axis length
0,0,0,0,0,0,0,// backgroundPaint
0,0,0,0,0,0,0,// adjust the plot area for interior spacing and labels...
0,0,0,0,0,0,0,// plot
0,0,0,0,0,0,0,// create the chart...
0,0,0,0,0,0,0,// add an item entity, if this information is being collected
0,0,0,0,0,0,0,// try a Double.POSITIVE_INFINITY
0,0,0,0,0,0,0,// Reference: http://www.antigrain.com/research/bezier_interpolation/
0,0,0,0,0,0,0,// pdfDocument class will be null so the function will return false
0,0,0,0,0,0,0,// as a special case, if the bar colour has alpha == 0, we draw // nothing.
0,0,0,0,0,0,0,//private double angle;
0,0,0,0,0,0,0,// avoid to draw overlapping tick labels
0,0,0,0,0,0,0,// check independence
0,0,0,0,0,0,0,// a null key should throw an IllegalArgumentException
0,0,0,0,0,0,0,// adding something to the returned list should NOT change the chart
0,0,0,0,0,0,0,//axis.setRangeType(RangeType.POSITIVE); //axis.setLowerBound(-5.0); //assertEquals(0.0, axis.getLowerBound(), EPSILON);
0,0,0,0,0,0,0,// perform the zoom on each range axis
0,0,0,0,0,0,0,// include legend
0,0,0,0,0,0,0,// draw the domain grid lines, if any...
0,0,0,0,0,0,0,// chart title
0,0,0,0,0,0,0,// check for bounds interval that includes 1
0,0,0,0,0,0,0,// outlinePaint
0,0,0,0,0,0,0,// deregister the collection as a change listener to each series in the // collection
0,0,0,0,0,0,0,//private Paint arrowPaint;
0,0,0,0,0,0,0,// value 1
0,0,0,0,0,0,0,// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
0,0,0,0,0,0,0,// align this rectangle to the frameAnchor
0,0,0,0,0,0,0,// data // include legend // tooltips // urls
0,0,0,0,0,0,0,// standard test
0,0,0,0,0,0,0,// setup for collecting optional entity info...
0,0,0,0,0,0,0,//private NumberTickUnit tickUnit;
0,0,0,0,0,0,0,// do nothing if item is not visible
0,0,0,0,0,0,0,//drawingSupplier;
0,0,0,0,0,0,0,// get the previous point and the next point so we can calculate a // "hot spot" for the area (used by the chart entity)...
0,0,0,0,0,0,0,// use reflection to get the SVG string
0,0,0,0,0,0,0,//legendItemPaint;
0,0,0,0,0,0,0,// we suppress shadow generation, because SVG is a vector format and // the shadow effect is applied via bitmap effects...
0,0,0,0,0,0,0,// clear any exceptions in this timeline
0,0,0,0,0,0,0,// create array xIndex to hold // new column indices
0,0,0,0,0,0,0,// domainAxis...
0,0,0,0,0,0,0,// && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
0,0,0,0,0,0,0,//wallPaint;
0,0,0,0,0,0,0,// selected rectangle shouldn't extend outside the data area...
0,0,0,0,0,0,0,// if the axes use a linear scale, you can uncomment the code below and // switch to the alternative transX/transY calculation inside the loop // that follows - it is a little bit faster then. // // int xx = (int) dataArea.getMinX(); // int ww = (int) dataArea.getWidth(); // int yy = (int) dataArea.getMaxY(); // int hh = (int) dataArea.getHeight(); // double domainMin = this.domainAxis.getLowerBound(); // double domainLength = this.domainAxis.getUpperBound() - domainMin; // double rangeMin = this.rangeAxis.getLowerBound(); // double rangeLength = this.rangeAxis.getUpperBound() - rangeMin;
0,0,0,0,0,0,0,// close
0,0,0,0,0,0,0,// reserve some space for the domain axis...
0,0,0,0,0,0,0,// seriesKey
0,0,0,0,0,0,0,// check that the listener lists are independent
0,0,0,0,0,0,0,//shadowPaint;
0,0,0,0,0,0,0,// reset the min and max
0,0,0,0,0,0,0,//private Stroke arrowStroke;
0,0,0,0,0,0,0,// return the override, if there is one...
0,0,0,0,0,0,0,//shadowVisible;
0,0,0,0,0,0,0,// bar is not visible
0,0,0,0,0,0,0,// actual value set below
0,0,0,0,0,0,0,//tickLabelPaint;
0,0,0,0,0,0,0,//parameter value is > 0 // The Math.log() function is based on e not 10.
0,0,0,0,0,0,0,//thermometerPaint;
0,0,0,0,0,0,0,// appendData() writes new data at the index position given by newestAt/ // When adding new data dynamically, use advanceTime(), followed by this:
0,0,0,0,0,0,0,// now try to reject equality...
0,0,0,0,0,0,0,//barPainter;
0,0,0,0,0,0,0,// if the axis is not visible, don't draw it...
0,0,0,0,0,0,0,//xyBarPainter;
0,0,0,0,0,0,0,// shadowXOffset
0,0,0,0,0,0,0,//errorIndicatorPaint;
0,0,0,0,0,0,0,// draw the plot (axes and data visualisation)
0,0,0,0,0,0,0,//if small log values and lower bound value too small // then set to a small value (don't allow <= 0):
0,0,0,0,0,0,0,// find optimum height
0,0,0,0,0,0,0,//private double tipRadius;
0,0,0,0,0,0,0,// add a second dataset, plotted against a second x axis
0,0,0,0,0,0,0,// Note that for consistency with the AWT implementation, it is // necessary to switch temporarily the foreground and background // colours
0,0,0,0,0,0,0,// work out if scaling is required...
0,0,0,0,0,0,0,//private double arrowLength;
0,0,0,0,0,0,0,// don't draw this tick label
0,0,0,0,0,0,0,//private double baseRadius;
0,0,0,0,0,0,0,// redraw the zoom rectangle (if present) - if useBuffer is false, // we use XOR so we can XOR the rectangle away again without redrawing // the chart
0,0,0,0,0,0,0,//private boolean autoRangeIncludesZero;
0,0,0,0,0,0,0,// set the outline paint to fully transparent, then the legend shape // will just have the same colour as the lines drawn by the renderer
0,0,0,0,0,0,0,// first field contains the row key
0,0,0,0,0,0,0,// weight
0,0,0,0,0,0,0,// TBLRC // 01001 - bottom and center only
0,0,0,0,0,0,0,// now map the dataset to the second xAxis
0,0,0,0,0,0,0,//g2.clip(clipArea);
0,0,0,0,0,0,0,// five dates to check...
0,0,0,0,0,0,0,/////////////////////////////////////////////////////////////////////////// // From IntervalXYDataset ///////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,//private double labelOffset;
0,0,0,0,0,0,0,//handle panning if we have a start point else unregister
0,0,0,0,0,0,0,/* BufferedImage image = */
0,0,0,0,0,0,0,// @mgs: using the method's return value was missing
0,0,0,0,0,0,0,// TBLRC // 10100 - top and left only
0,0,0,0,0,0,0,//get upper bound value
0,0,0,0,0,0,0,// value
0,0,0,0,0,0,0,// Unregister the collection as a change listener to each series in // the collection.
0,0,0,0,0,0,0,// stroke
0,0,0,0,0,0,0,// create the renderer...
0,0,0,0,0,0,0,// replace an existing series
0,0,0,0,0,0,0,// category
0,0,0,0,0,0,0,// add an entity for the item, but only if it falls within the // data area...
0,0,0,0,0,0,0,// categoryAnchor
0,0,0,0,0,0,0,// START: check d0 and d1
0,0,0,0,0,0,0,// tickMarkPosition
0,0,0,0,0,0,0,// test a default instance
0,0,0,0,0,0,0,// check that setting the min date to something on or after the // current min date works...
0,0,0,0,0,0,0,// offset the start of the boxes if the total width used is smaller // than the category width
0,0,0,0,0,0,0,// tickUnit
0,0,0,0,0,0,0,// draw the category labels and axis label
0,0,0,0,0,0,0,// timeline
0,0,0,0,0,0,0,//negative values are allowed //parameter value is > 10 // The Math.log() function is based on e not 10.
0,0,0,0,0,0,0,// range
0,0,0,0,0,0,0,// suppresses compiler warning
0,0,0,0,0,0,0,// CASE 1 : Comparing to another ComparableObjectItem object // ---------------------------------------------------------
0,0,0,0,0,0,0,// the following fields are inherited from the AbstractXYItemRenderer
0,0,0,0,0,0,0,// if the bug is still present, this leads to an endless loop
0,0,0,0,0,0,0,// TBLRC // 11000 - top and bottom only
0,0,0,0,0,0,0,// END: check d3 and d4
0,0,0,0,0,0,0,// MIDDLE: check d1, d2 and d3
0,0,0,0,0,0,0,// if this series belongs to a dataset, the dataset might veto the // change if it results in two series within the dataset having the // same key
0,0,0,0,0,0,0,/*JFreeChart chart =*/
0,0,0,0,0,0,0,// '+', remember value is negative
0,0,0,0,0,0,0,// an empty dataset should return a null range
0,0,0,0,0,0,0,// changing the item that was added should not change the series
0,0,0,0,0,0,0,// baseStroke
0,0,0,0,0,0,0,//end point is either lower left corner --> vertical gradient //or end point is upper right corner --> horizontal gradient
0,0,0,0,0,0,0,// argument checking delegated...
0,0,0,0,0,0,0,// try an empty dataset - should return a null range
0,0,0,0,0,0,0,// shapeLocation
0,0,0,0,0,0,0,// the row may not have an entry for this key, in which case the // return value is null
0,0,0,0,0,0,0,// test independence
0,0,0,0,0,0,0,// here we need to update the UI for the popup menu, if the panel // has one...
0,0,0,0,0,0,0,//private double arrowWidth;
0,0,0,0,0,0,0,// both axes
0,0,0,0,0,0,0,// END: check d0
0,0,0,0,0,0,0,// reserve space for the range axes (if any)...
0,0,0,0,0,0,0,// START: check d0
0,0,0,0,0,0,0,// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
0,0,0,0,0,0,0,// fetch listeners from local storage
0,0,0,0,0,0,0,// case 1 - object is mutable but not PublicCloneable
0,0,0,0,0,0,0,// work out the space required by the domain axis...
0,0,0,0,0,0,0,// MIDDLE: check d0
0,0,0,0,0,0,0,// check retrieve value by key
0,0,0,0,0,0,0,// get desired width and height from somewhere then...
0,0,0,0,0,0,0,// no plot, no data
0,0,0,0,0,0,0,// Shifting with a delta of 0 does not change the range
0,0,0,0,0,0,0,// set axis bounds to be both greater than 1
0,0,0,0,0,0,0,/// Get the column names and cache them.
0,0,0,0,0,0,0,// check that changing a tick label font in a1 doesn't change a2
0,0,0,0,0,0,0,// check that changing a tick label paint in a1 doesn't change a2
0,0,0,0,0,0,0,// null dataset throws IllegalArgumentException
0,0,0,0,0,0,0,// check that changing a category label tooltip in a1 doesn't change a2
0,0,0,0,0,0,0,// if the popup menu has already been triggered, then ignore dragging...
0,0,0,0,0,0,0,// lowerMargin
0,0,0,0,0,0,0,// check for both bounds smaller than 1
0,0,0,0,0,0,0,// the line is visible - if it wasn't, we'd have // returned false from within the while loop above
0,0,0,0,0,0,0,// the CategoryDataset interface expects a list of series, but // we've stored them in an array...
0,0,0,0,0,0,0,// categoryMargin
0,0,0,0,0,0,0,// upperMargin
0,0,0,0,0,0,0,// Check if the item is the last item for the series. // and number of items > 0.  We can't draw an area for a single point.
0,0,0,0,0,0,0,// set start and end date
0,0,0,0,0,0,0,// TBLRC // 00101 - left and center items
0,0,0,0,0,0,0,// create the canvas and add the required listeners
0,0,0,0,0,0,0,// fillPaintList
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // test one-segment and adjacent segments //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// get the origin of the zoom selection in the Java2D space used for // drawing the chart (that is, before any scaling to fit the panel)
0,0,0,1,0,1,1,// if fixed auto range, then derive lower bound...
0,0,0,0,0,0,0,// set the new dataset, and register the chart as a change listener...
0,0,0,0,0,0,0,// advance line Stroke
0,0,0,0,0,0,0,// only draw if we have good values
0,0,0,0,0,0,0,// offset
0,0,0,0,0,0,0,// Check if the item is the last item for the series or if it // is a NULL value and number of items > 0.  We can't draw an area for // a single point.
0,0,0,0,0,0,0,// try a null key - should throw an exception
0,0,0,0,0,0,0,// compute common denominator
0,0,0,0,0,0,0,//private double fixedAutoRange;
0,0,0,0,0,0,0,// paint
0,0,0,0,0,0,0,// CASE 2 : Comparing to a general object // ---------------------------------------------
0,0,0,0,0,0,0,// tickLabelPaint
0,0,0,0,0,0,0,// register as a listener with sub-components...
0,0,0,0,0,0,0,// categoryLabelURLs
0,0,0,0,0,0,0,// draw domain crosshair if required...
0,0,0,0,0,0,0,// now draw annotations and render data items...
0,0,0,0,0,0,0,// tickLabelPaint2
0,0,0,0,0,0,0,// 4-ms test base timeline for ms2Timeline using 1 included and 1 // excluded segments // // timeline start time = 0 //   | //   v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //  \__________  _________/            \____  _____/ //             \/                           \/ //        segment group              segment size = 4 ms //
0,0,0,0,0,0,0,//private Shape leftArrow;
0,0,0,0,0,0,0,// verify attributes set during object construction
0,0,0,0,0,0,0,// after s1 is removed from the collection, we should be able to set // the key to anything we want...
0,0,0,0,0,0,0,// cycle bound mapping
0,0,0,0,0,0,0,// many of the zoom methods need a screen location - all we have is // the zoomPoint, but it might be null.  Here we grab the x and y // coordinates, or use defaults...
0,0,0,0,0,0,0,// ----------------------- // --- Private Methods --- // -----------------------
0,0,0,0,0,0,0,// make sure bins[bins.length]'s upper boundary ends at maximum // to avoid the rounding issue. the bins[0] lower boundary is // guaranteed start from min
0,0,0,0,0,0,0,// generic map for each series
0,0,0,0,0,0,0,// reduce the default margins
0,0,0,0,0,0,0,// advance line Visible
0,0,0,0,0,0,0,// for MacOSX we can't use the CTRL key for mouse drags, see: // http://developer.apple.com/qa/qa2004/qa1362.html
0,0,0,0,0,0,0,/* PUT exclusions in test */
0,0,0,0,0,0,0,// try a dataset with some content...
0,0,0,0,0,0,0,// Set start time
0,0,0,0,0,0,0,//lower bound and margin OK; get log10 of lower bound
0,0,0,0,0,0,0,// Create a segmented time line (segment size : 15 minutes)
0,0,0,0,0,0,0,// redrawing the chart every time...
0,0,0,0,0,0,0,/** These constants control test cycles in the validateXXXX methods. */
0,0,0,0,0,0,0,// make the chart area a square
0,0,0,0,0,0,0,/*Quarter q =*/
0,0,0,0,0,0,0,// make the background of the buffer clear and transparent
0,0,0,0,0,0,0,// add minor ticks (for gridlines)
0,0,0,0,0,0,0,// a Double.NaN should be ignored
0,0,0,0,0,0,0,// calculate 9am on the first Monday after 2001-01-01
0,0,0,0,0,0,0,// default instances
0,0,0,0,0,0,0,// low
0,0,0,0,0,0,0,// calculate the max label width from the plot dimensions, because // a circular pie can leave a lot more room for labels...
0,0,0,0,0,0,0,// the anchor point is typically the point where the mouse last // clicked - the crosshairs will be driven off this point...
0,0,0,0,0,0,0,// if there is an explicit mapping to the default group, it is counted
0,0,0,0,0,0,0,// test 9am-4pm Monday through Friday timeline
0,0,0,0,0,0,0,// the segment is entirely at the // front of the chart
0,0,0,0,0,0,0,// RANGE / NONE
0,0,0,0,0,0,0,// test some included and excluded segments
0,0,0,0,0,0,0,//// STROKE ///////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// TBLRC // 01000 - bottom item only
0,0,0,0,0,0,0,// zap the buffer onto the panel...
0,0,0,0,0,0,0,// logically consecutive segments non-physically consecutive // (with non-contained time in between)
0,0,0,0,0,0,0,// POSITIVE ITEM LABEL POSITION
0,0,0,0,0,0,0,// verify segments are consecutive and correct
0,0,0,0,0,0,0,// get the data point...
0,0,0,0,0,0,0,// test inc() method
0,0,0,0,0,0,0,// we create a new but empty chartMouseListeners list
0,0,0,0,0,0,0,// visible flag...
0,0,0,0,0,0,0,//dmo: (end dmo additions)
0,0,0,0,0,0,0,// try next segment
0,0,0,0,0,0,0,// itemLabelsVisible
0,0,0,0,0,0,0,// exclude current exception and last one
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // test inc methods //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// check that the series visible flag is observed
0,0,0,0,0,0,0,// go to another segment to continue test
0,0,0,0,0,0,0,// no data in the parent plot
0,0,0,0,0,0,0,// make the link area a square if the pie chart is to be circular... // is circular?
0,0,0,0,0,0,0,// test inc(n) method
0,0,0,0,0,0,0,// fixed domain axis space...
0,0,0,0,0,0,0,// select a tick unit that is the next one bigger than the current // (log) range divided by 50
0,0,0,0,0,0,0,// font
0,0,0,0,0,0,0,// tick label insets...
0,0,0,0,0,0,0,// the link area defines the dog leg points for the linking lines to // the labels
0,0,0,0,0,0,0,// verify list of exceptions
0,0,0,0,0,0,0,// lowerBound
0,0,0,0,0,0,0,// tick labels visible flag...
0,0,0,0,0,0,0,// fill in the exceptions
0,0,0,0,0,0,0,// rangeAxisLocation - no longer a separate field but test anyway...
0,0,0,0,0,0,0,// should be an excluded segment
0,0,0,0,0,0,0,// add an entity for the item, but only if it falls within the data // area...
0,0,0,0,0,0,0,// should be an included segment
0,0,0,0,0,0,0,// include current exception and last one
0,0,0,0,0,0,0,// tick mark paint...
0,0,0,0,0,0,0,// we need to guard against this.zoomPoint being null
0,0,0,0,0,0,0,//long v = stl.toTimelineValue(946684800020L);
0,0,0,0,0,0,0,// strokeList
0,0,0,0,0,0,0,// tickLabelOffset
0,0,0,0,0,0,0,// if multiple axes are mapped, the first in the list should be // returned...
0,0,0,0,0,0,0,// only add an exception if it is currently an included segment
0,0,0,0,0,0,0,// consider time periods to be ordered after general objects
0,0,0,0,0,0,0,// add our exceptions and store locally in ArrayList of Longs
0,0,0,0,0,0,0,// private Plot parent <-- don't clone the parent plot, but take care // childs in combined plots instead
0,0,0,0,0,0,0,// some checks that the clone is independent of the original
0,0,0,0,0,0,0,// make array of exceptions
0,0,0,0,0,0,0,// if the dataset is not a StatisticalCategoryDataset then just revert // to the superclass (LineAndShapeRenderer) behaviour...
0,0,0,0,0,0,0,// start time...
0,0,0,0,0,0,0,// try replacing an existing value
0,0,0,0,0,0,0,// add the base timeline exclusions as timeline's esceptions
0,0,0,0,0,0,0,// adjust the plot area by the interior spacing value
0,0,0,0,0,0,0,// 1-Jan-2000
0,0,0,0,0,0,0,//  Remove series 2 and add new series
0,0,0,0,0,0,0,// subLabelPaint
0,0,0,0,0,0,0,// ****************************************************************** //  More than 150 demo applications are included with the JFreeChart //  Developer Guide...for more information, see: // //  >   http://www.object-refinery.com/jfreechart/guide.html // // ******************************************************************
0,0,0,0,0,0,0,// by default, the renderer with index 0 is used
0,0,0,0,0,0,0,// ensure the autorange is at least <minRange> in size...
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // test serialization //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// set up info collection...
0,0,0,0,0,0,0,// subLabelFont
0,0,0,0,0,0,0,// this replaces the entry with the current minimum value, but the new // minimum value is now in a different item
0,0,0,0,0,0,0,// verify all timeline segments included in the // baseTimeline.segment are now exceptions
0,0,0,0,0,0,0,// ********* stat function for linear slope ******** // y = a + bx // a = ybar - b * xbar //     sum(x * y) - (sum (x) * sum(y)) / n // b = ------------------------------------ //     sum (x^2) - (sum(x)^2 / n // *************************************************
0,0,0,0,0,0,0,// subcategories
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // utility methods //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// physically consecutive
0,0,0,0,0,0,0,// hasn't implemented DomainInfo, so iterate...
0,0,0,0,0,0,0,// if there is no separator, we assume the first four characters // are YYYY
0,0,0,0,0,0,0,// label font...
0,0,0,0,0,0,0,// adjust the drawing area for the plot insets (if any)...
0,0,0,0,0,0,0,// label...
0,0,0,0,0,0,0,// pre-fetch the colors for each key...this is because the subplots // may not display every key, but we need the coloring to be // consistent...
0,0,0,0,0,0,0,// label paint...
0,0,0,0,0,0,0,// holds the moving average sum
0,0,0,0,0,0,0,// attributed label...
0,0,0,0,0,0,0,// now add some more data
0,0,0,0,0,0,0,// label insets...
0,0,0,0,0,0,0,// if the box has been drawn backwards, restore the auto bounds
0,0,0,0,0,0,0,// high
0,0,0,0,0,0,0,"/*                 * Lots can go wrong while fiddling with Images, Color Models                 * & such!  If anything at all goes awry, just return the original                 * TexturePaint.  (TexturePaint's are immutable anyway, so no harm                 * done)                 */"
0,0,0,0,0,0,0,// axis line stroke...
0,0,0,0,0,0,0,// Add each point to Area (x, y)
0,0,0,0,0,0,0,// label angle...
0,0,0,0,0,0,0,// if the axis is not visible, no additional space is required...
0,0,0,0,0,0,0,// axis line visible...
0,0,0,0,0,0,0,// NONE / FIXED
0,0,0,0,0,0,0,// TBLRC // 10001 - top and center only
0,0,0,0,0,0,0,// axis line visible flag...
0,0,0,0,0,0,0,"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ----------------- * ChartFactory.java * ----------------- * (C) Copyright 2001-2014, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Serge V. Grachov; *                   Joao Guilherme Del Valle; *                   Bill Kelemen; *                   Jon Iles; *                   Jelai Wang; *                   Richard Atkinson; *                   David Browning (for Australian Institute of Marine *                       Science); *                   Benoit Xhenseval; * * Changes * ------- * 19-Oct-2001 : Version 1, most methods transferred from JFreeChart.java (DG); * 22-Oct-2001 : Added methods to create stacked bar charts (DG); *               Renamed DataSource.java --> Dataset.java etc. (DG); * 31-Oct-2001 : Added 3D-effect vertical bar and stacked-bar charts, *               contributed by Serge V. Grachov (DG); * 07-Nov-2001 : Added a flag to control whether or not a legend is added to *               the chart (DG); * 17-Nov-2001 : For pie chart, changed dataset from CategoryDataset to *               PieDataset (DG); * 30-Nov-2001 : Removed try/catch handlers from chart creation, as the *               exception are now RuntimeExceptions, as suggested by Joao *               Guilherme Del Valle (DG); * 06-Dec-2001 : Added createCombinableXXXXXCharts methods (BK); * 12-Dec-2001 : Added createCandlestickChart() method (DG); * 13-Dec-2001 : Updated methods for charts with new renderers (DG); * 08-Jan-2002 : Added import for *               com.jrefinery.chart.combination.CombinedChart (DG); * 31-Jan-2002 : Changed the createCombinableVerticalXYBarChart() method to use *               renderer (DG); * 06-Feb-2002 : Added new method createWindPlot() (DG); * 23-Apr-2002 : Updates to the chart and plot constructor API (DG); * 21-May-2002 : Added new method createAreaChart() (JI); * 06-Jun-2002 : Added new method createGanttChart() (DG); * 11-Jun-2002 : Renamed createHorizontalStackedBarChart() *               --> createStackedHorizontalBarChart() for consistency (DG); * 06-Aug-2002 : Updated Javadoc comments (DG); * 21-Aug-2002 : Added createPieChart(CategoryDataset) method (DG); * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG); * 09-Oct-2002 : Added methods including tooltips and URL flags (DG); * 06-Nov-2002 : Moved renderers into a separate package (DG); * 18-Nov-2002 : Changed CategoryDataset to TableDataset (DG); * 21-Mar-2003 : Incorporated HorizontalCategoryAxis3D, see bug id 685501 (DG); * 13-May-2003 : Merged some horizontal and vertical methods (DG); * 24-May-2003 : Added support for timeline in createHighLowChart (BK); * 07-Jul-2003 : Added createHistogram() method contributed by Jelai Wang (DG); * 27-Jul-2003 : Added createStackedAreaXYChart() method (RA); * 05-Aug-2003 : added new method createBoxAndWhiskerChart (DB); * 08-Sep-2003 : Changed ValueAxis API (DG); * 07-Oct-2003 : Added stepped area XY chart contributed by Matthias Rose (DG); * 06-Nov-2003 : Added createWaterfallChart() method (DG); * 20-Nov-2003 : Set rendering order for 3D bar charts to fix overlapping *               problems (DG); * 25-Nov-2003 : Added createWaferMapChart() method (DG); * 23-Dec-2003 : Renamed createPie3DChart() --> createPieChart3D for *               consistency (DG); * 20-Jan-2004 : Added createPolarChart() method (DG); * 28-Jan-2004 : Fixed bug (882890) with axis range in *               createStackedXYAreaChart() method (DG); * 25-Feb-2004 : Renamed XYToolTipGenerator --> XYItemLabelGenerator (DG); * 11-Mar-2004 : Updated for pie chart changes (DG); * 27-Apr-2004 : Added new createPieChart() method contributed by Benoit *               Xhenseval (see RFE 942195) (DG); * 11-May-2004 : Split StandardCategoryItemLabelGenerator *               --> StandardCategoryToolTipGenerator and *               StandardCategoryLabelGenerator (DG); * 06-Jan-2005 : Removed deprecated methods (DG); * 27-Jan-2005 : Added new constructor to LineAndShapeRenderer (DG); * 28-Feb-2005 : Added docs to createBubbleChart() method (DG); * 17-Mar-2005 : Added createRingPlot() method (DG); * 21-Apr-2005 : Replaced Insets with RectangleInsets (DG); * 29-Nov-2005 : Removed signal chart (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 26-Jan-2006 : Corrected API docs for createScatterPlot() (DG); * 23-Aug-2006 : Modified createStackedXYAreaChart() to use *               StackedXYAreaRenderer2, because StackedXYAreaRenderer doesn't *               handle negative values (DG); * 27-Sep-2006 : Update createPieChart() method for deprecated code (DG); * 29-Nov-2006 : Update createXYBarChart() to use a time based tool tip *               generator is a DateAxis is requested (DG); * 17-Jan-2007 : Added createBoxAndWhiskerChart() method from patch 1603937 *               submitted by Darren Jung (DG); * 10-Jul-2007 : Added new methods to create pie charts with locale for *               section label and tool tip formatting (DG); * 14-Aug-2008 : Added ChartTheme facility (DG); * 23-Oct-2008 : Check for legacy theme in setChartTheme() and reset default *               bar painters (DG); * 20-Dec-2008 : In createStackedAreaChart(), set category margin to 0.0 (DG); * 02-Jul-2013 : Use ParamChecks class (DG); *  */"
0,0,0,0,0,0,0,// label location...
0,0,0,0,0,0,0,// tick label paint...
0,0,0,0,0,0,0,// go through each zoom menu item and decide whether or not to // enable it...
0,0,0,0,0,0,0,// tick mark inside length...
0,0,0,0,0,0,0,// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
0,0,0,0,0,0,0,// fixed dimension...
0,0,0,0,0,0,0,// tick mark outside length...
0,0,0,0,0,0,0,// NONE / RANGE
0,0,0,0,0,0,0,//get absolute value of log10 value
0,0,0,0,0,0,0,//private Shape downArrow;
0,0,0,0,0,0,0,//upper bound and margin OK; get log10 of upper bound
0,0,0,0,0,0,0,//private Shape rightArrow;
0,0,0,0,0,0,0,// add a second renderer with the same index as dataset2, now it will // be used
0,0,0,0,0,0,0,//private Shape upArrow;
0,0,0,0,0,0,0,// NONE / NONE
0,0,0,0,0,0,0,// in the rendering process, there is special handling for item // zero, so we can't support processing of visible data items only
0,0,0,0,0,0,0,// verticalTickLabels
0,0,0,0,0,0,0,// update (x1, y1), (x2, y2) and f1 and f2 using intersections // then recheck
0,0,0,0,0,0,0,// axisLineStroke
0,0,0,0,0,0,0,// yearFormatter
0,0,0,0,0,0,0,// check arguments...
0,0,0,0,0,0,0,// locale
0,0,0,0,0,0,0,// if series are in columns, then the categories are the row keys
0,0,0,0,0,0,0,// showYear[]
0,0,0,0,0,0,0,// when the dataset contains no series, we expect the range to be null
0,0,0,0,0,0,0,// chars
0,0,0,0,0,0,0,// now repeat for a vertical axis
0,0,0,0,0,0,0,// FIXED / RANGE
0,0,0,0,0,0,0,// draw the annotations (if any)...
0,0,0,0,0,0,0,//end point is lower right corner --> diagonal gradient
0,0,0,0,0,0,0,// The next 3 functions implement the RangeInfo interface. // Using saved limits (updated by each updateTime() call) significantly // improves performance.  WARNING: this code makes the simplifying // assumption that data is never negative.  Expand as needed for the // general case.
0,0,0,0,0,0,0,// FIXED / NONE
0,0,0,0,0,0,0,// RANGE / FIXED
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // main include and excluded segments //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// TBLRC // 00100 - left item only
0,0,0,0,0,0,0,// this is the last period, but it is only partially visible // so check that the label will fit before displaying it...
0,0,0,0,0,0,0,// TBLRC // 00010 - right item only
0,0,0,0,0,0,0,// check that there is some data to display...
0,0,0,1,0,1,1,// FIXED / FIXED
0,0,0,0,0,0,0,// CASE 1 : Comparing to another TimeSeriesDataItem object // -------------------------------------------------------
0,0,0,0,0,0,0,// TBLRC // 10111
0,0,0,0,0,0,0,//only 1 power of 10 value, it's > 0 and its resulting // tick value will be larger than lower bound of data //decrement to generate more ticks
0,0,0,0,0,0,0,// draw the block without collecting entities
0,0,0,0,0,0,0,// try case where right item is shorter than center item
0,0,0,0,0,0,0,// initialize ChartPanel-specific tool tip delays with // values the from ToolTipManager.sharedInstance()
0,0,0,0,0,0,0,// should be 2 items
0,0,0,0,0,0,0,// if the incoming state is null, no information will be passed // back to the caller - but we create a temporary state to record // the plot area, since that is used later by the axes
0,0,0,0,0,0,0,// TBLRC // 00011 - right and center items
0,0,0,0,0,0,0,// check if this addition will exceed the maximum item count...
0,0,0,0,0,0,0,// try case where left item is shorter than center item
0,0,0,0,0,0,0,// here we check that the average marker will in fact be // visible before drawing it...
0,0,0,0,0,0,0,// TBLRC // 10110 - top, left and right
0,0,0,0,0,0,0,// check a series with one item
0,0,0,0,0,0,0,// if we've been panning, we need to reset now that the mouse is  // released...
0,0,0,0,0,0,0,// TBLRC // 00110 - left and right items
0,0,0,0,0,0,0,// add an entity for the item...
0,0,0,0,0,0,0,// otherwise look up the generator table
0,0,0,0,0,0,0,// TBLRC // 00111 - left, right and center items
0,0,0,0,0,0,0,// try an array containing a single Number and a null
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Minute object // -------------------------------------------
0,0,0,0,0,0,0,// TBLRC // 11100
0,0,0,0,0,0,0,// TBLRC // 11001
0,0,0,0,0,0,0,// add a value that isn't in the xRange
0,0,0,0,0,0,0,// TBLRC // 11111 - all
0,0,0,0,0,0,0,// a Collection containing a NaN will return Double.NaN for the result
0,0,0,0,0,0,0,// TBLRC // 11110
0,0,0,0,0,0,0,// special case - if the underlying rectangle uses ints we // need to create one that uses doubles
0,0,0,0,0,0,0,// create dataset 1...
0,0,0,0,0,0,0,// set up popup menu...
0,0,0,0,0,0,0,// no need to create entity if we can't save it anyways...
0,0,0,0,0,0,0,// erase the zoom rectangle
0,0,0,0,0,0,0,// secondary DatasetDomainAxisMap...
0,0,0,0,0,0,0,// test a series with 1 item
0,0,0,0,0,0,0,// if the initial averaging period is to be excluded, then // calculate the lowest x-value to have an average calculated...
0,0,0,0,0,0,0,// TBLRC // 11010 - top, bottom and right
0,0,0,0,0,0,0,// TBLRC // 01100
0,0,0,0,0,0,0,// initialize the members of "seriesNames" array so they won't be null:
0,0,0,0,0,0,0,// remove a value
0,0,0,0,0,0,0,// wrong outcome
0,0,0,0,0,0,0,// TBLRC // 01011 - bottom, right and center
0,0,0,0,0,0,0,// change rendering order to ensure that bar overlapping is the // right way around
0,0,0,0,0,0,0,// check that removing by index also works
0,0,0,0,0,0,0,// no additional methods required
0,0,0,0,0,0,0,// now we should be allowed to change s1's key to anything but "S2"
0,0,0,0,0,0,0,// standard case - plain XYDataset
0,0,0,0,0,0,0,// either autoWidth is off or autoIntervalWidth was not set.
0,0,0,0,0,0,0,//dmo: added this panel for colorbar control. (start dmo additions)
0,0,0,0,0,0,0,// TBLRC // 10011 - top, right and center
0,0,0,0,0,0,0,// TBLRC // 01110 - bottom. left and right
0,0,0,0,0,0,0,// TBLRC // 01101 - bottom, left and center
0,0,0,0,0,0,0,// TBLRC // 10000 - top item only
0,0,0,0,0,0,0,// check that the new bin doesn't overlap with any existing bin
0,0,0,0,0,0,0,// TBLRC // 10010 - right and top only
0,0,0,0,0,0,0,// TBLRC // 11011
0,0,0,0,0,0,0,// defer null argument check
0,0,0,0,0,0,0,// some setup...
0,0,0,0,0,0,0,// do nothing if item is not visible or null
0,0,0,0,0,0,0,// Y format
0,0,0,0,0,0,0,// handle three cases by dataset type
0,0,0,0,0,0,0,// tooltip format
0,0,0,0,0,0,0,"/* // ""Extras"" found useful when analyzing/verifying class behavior:    public Number getUntranslatedXValue(int series, int item)    {      return super.getXValue(series, item);    }    public float getUntranslatedY(int series, int item)    {      return super.getY(series, item);    }  */"
0,0,0,0,0,0,0,// date format
0,0,0,0,0,0,0,//  If data can be < 0, the next 2 methods should be modified
0,0,0,0,0,0,0,// create subplot 1...
0,0,0,0,0,0,0,//  Create new dataset with keys above threshold percentThreshold
0,0,0,0,0,0,0,// try a null value
0,0,0,0,0,0,0,// now extrapolate based on label height and unit height...
0,0,0,0,0,0,0,// another test...
0,0,0,0,0,0,0,// end period is not in original series // this is first item AFTER end period // so this is last item BEFORE end
0,0,0,0,0,0,0,// the reverse transformed value will be in the start of the // next non-excluded and non-exception segment
0,0,0,0,0,0,0,// x number format
0,0,0,0,0,0,0,// format string...
0,0,0,0,0,0,0,// Add last point @ y=0 for fillPath and close path
0,0,0,0,0,0,0,// x date format
0,0,0,0,0,0,0,// y number format
0,0,0,0,0,0,0,// orientation...
0,0,0,0,0,0,0,/////////////////////////////////////////////////////////////////////////// // From SeriesDataset ///////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// create subplot 2...
0,0,0,0,0,0,0,//yAdj = -descent - leading + (float) bounds.getHeight();
0,0,0,0,0,0,0,// add the subplots...
0,0,0,0,0,0,0,// the actual panning occurs later in the mouseDragged()  // method
0,0,0,0,0,0,0,// separatorPaint
0,0,0,0,0,0,0,//apply upper margin by increasing upper bound:
0,0,0,0,0,0,0,// now get the data and plot it (the visual representation will depend // on the m_Renderer that has been set)...
0,0,0,0,0,0,0,// for item labels, we have a special case because there is the // possibility to draw (a) the regular item label near to just the // upper y-value, or (b) the regular item label near the upper y-value // PLUS an additional item label near the lower y-value.
0,0,0,0,0,0,0,// axisOffset...
0,0,0,0,0,0,0,// Absolute value, since the relative x // positions are reversed for horizontal orientation
0,0,0,0,0,0,0,// TBLRC // 00000 - no items
0,0,0,0,0,0,0,// request with a negative index
0,0,0,0,0,0,0,// try negative row index
0,0,0,0,0,0,0,// domainAxes...
0,0,0,0,0,0,0,// work out the number of periods to skip for labelling
0,0,0,0,0,0,0,//////////////////////////////////////////////////////////////////////////// // private attributes ////////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,//turn off anti-aliasing when filling rectangles
0,0,0,0,0,0,0,// draw shared domain axis...
0,0,0,0,0,0,0,// TBLRC // 11101
0,0,0,0,0,0,0,// check handling when the dataset is a regular XYDataset, not an // XYZDataset...
0,0,0,0,0,0,0,// get the previous data point...
0,0,0,0,0,0,0,// rendering order...
0,0,0,0,0,0,0,// calculate the data area...
0,0,0,0,0,0,0,// domainAxisLocations...
0,0,0,0,0,0,0,// CASE 2 - object is mutable AND PublicCloneable
0,0,0,0,0,0,0,// try a default instance
0,0,0,0,0,0,0,// renderers...
0,0,0,0,0,0,0,// forces recalculation of the axis range
0,0,0,0,0,0,0,// closeTickPaint
0,0,0,0,0,0,0,// rangeAxes...
0,0,0,0,0,0,0,// fake a dataset change event to update axes...
0,0,0,0,0,0,0,// rangeAxisLocations...
0,0,0,0,0,0,0,// get a list of keys...
0,0,0,0,0,0,0,//first tick of group; create label text
0,0,0,0,0,0,0,// annotations
0,0,0,0,0,0,0,// handle panning if we have a start point
0,0,0,0,0,0,0,// draw the arrow...
0,0,0,0,0,0,0,// is there an alignment adjustment to be made?
0,0,0,0,0,0,0,// rangeGridlinePaint
0,0,0,0,0,0,0,// Generate the grid
0,0,0,0,0,0,0,// delegate argument checking to XYDataItem...
0,0,0,0,0,0,0,// rangeGridlineStroke
0,0,0,0,0,0,0,"/* From outlier array sort out which are outliers and put these into         * an arraylist. If there are any farouts, set the flag on the         * OutlierListCollection         */"
0,0,0,0,0,0,0,/* Rectangle2D hotspot = */
0,0,0,0,0,0,0,// rowRenderingOrder...
0,0,0,0,0,0,0,// a key that hasn't been mapped should return the default group
0,0,0,0,0,0,0,// background range markers...
0,0,1,0,0,0,0,// this should never happen with the existing code, but throw // an exception in case future changes make it possible...
0,0,0,0,0,0,0,// rangeCrosshairValue
0,0,0,0,0,0,0,// default is to notify listeners when the // chart changes
0,0,0,0,0,0,0,//parameter value is < -10 //calculate log using positive value:
0,0,0,0,0,0,0,// starts at the front, finishes at the back (going // around the left side)
0,0,0,0,0,0,0,// labelGenerator
0,0,0,0,0,0,0,"/*         * we assum super is always initialized to all-zero matrix, so the         * total sum should be 0 upon initialization. However, we set it to         * Double.MIN_VALUE to get the same effect and yet avoid division by 0         * upon initialization.         */"
0,0,0,0,0,0,0,// starts at back, finishes at front (CLOCKWISE)
0,0,0,0,0,0,0,// background domain markers
0,0,0,0,0,0,0,// override default
0,0,0,0,0,0,0,// foreground range markers...
0,0,0,0,0,0,0,// special case where the lowest x-value is >= xLow
0,0,0,0,0,0,0,// foreground domain markers
0,0,0,0,0,0,0,// make sure there are no exceptions
0,0,0,0,0,0,0,//return toTimelineValue(dateDomainValue.getTime());
0,0,0,0,0,0,0,//calculate power using positive value; then negate
0,0,0,0,0,0,0,// create a new space object if one wasn't supplied...
0,0,0,0,0,0,0,// check for independence
0,0,0,0,0,0,0,// define the default locations for up to 8 axes...
0,0,0,0,0,0,0,//// SERIES OUTLINE PAINT ////////////////////////////
0,0,0,0,0,0,0,// fixed range axis space...
0,0,0,0,0,0,0,// send a dataset change event to self...
0,0,0,0,0,0,0,// shadowGenerator
0,0,0,0,0,0,0,// axis line paint...
0,0,0,0,0,0,0,// try a dataset with a single value
0,0,0,0,0,0,0,//parameter value is <= 0 //use as-is
0,0,0,0,0,0,0,// we didn't get an exception so all is good
0,0,0,0,0,0,0,// the x value is not within the axis range
0,0,0,0,0,0,0,// correct outcome
0,0,0,0,0,0,0,// should be equal...
0,0,0,0,0,0,0,// dial outline paint
0,0,0,0,0,0,0,// add a second dataset
0,0,0,0,0,0,0,// get the current data item...
0,0,0,0,0,0,0,// check second argument less than first argument
0,0,0,0,0,0,0,// labelPaint
0,0,0,0,0,0,0,// check index == getItemCount() throws exception
0,0,0,0,0,0,0,// we should be able to give a dataset an arbitrary index
0,0,0,0,0,0,0,// if the plot area is too small, just return...
0,0,0,0,0,0,0,// Set XOR mode to draw the zoom rectangle
0,0,0,0,0,0,0,// we should be able to give a renderer an arbitrary index
0,0,0,0,0,0,0,// outline paint
0,0,0,0,0,0,0,// domainGridlinePaint
0,0,0,0,0,0,0,// are we using the chart buffer?
0,0,0,0,0,0,0,// draw average - SPECIAL AIMS REQUIREMENT
0,0,0,0,0,0,0,// toolTipGenerator
0,0,0,0,0,0,0,// adjust the drawing area for plot insets (if any)...
0,0,0,0,0,0,0,// drawBorder
0,0,0,0,0,0,0,// can we pan this plot?
0,0,0,0,0,0,0,// tick label paint
0,0,0,0,0,0,0,// force a redraw // new entity code...
0,0,0,0,0,0,0,// update the linking line target for later // add an entity for the pie section
0,0,0,0,0,0,0,// XYDataset only provides methods for reading a dataset...
0,0,0,0,0,0,0,// tick label font
0,0,0,0,0,0,0,// remove the point i-periodCount out of the rolling sum.
0,0,0,0,0,0,0,// value paint
0,0,0,0,0,0,0,// check if there are any values earlier than specified by the history // count...
0,0,0,0,0,0,0,// value font
0,0,0,0,0,0,0,// set up some objects...
0,0,0,0,0,0,0,// needle paint
0,0,0,0,0,0,0,// set a theme using the new shadow generator feature available in // 1.0.14 - for backwards compatibility it is not enabled by default
0,0,0,0,0,0,0,//stroke
0,0,0,0,0,0,0,// Draw the new zoom rectangle...
0,0,0,0,0,0,0,// tick label format
0,0,0,0,0,0,0,// setTickValues was missing from ColorPalette v. 0.96 //colorPalette.setTickValues(this.axis.getTicks());
0,0,0,0,0,0,0,//alpha
0,0,0,0,0,0,0,// draw border
0,0,0,0,0,0,0,// since the items are ordered, we could be more clever here and avoid // iterating over all the data
0,0,0,0,0,0,0,//paint
0,0,0,0,0,0,0,// as a class variable, initializes == 0
0,0,0,0,0,0,0,// tick paint
0,0,0,0,0,0,0,// meter angle
0,0,0,0,0,0,0,// add the subtrahend's points to the polygon in reverse
0,0,0,0,0,0,0,//key
0,0,0,0,0,0,0,// stop listening for changes to the existing chart
0,0,0,0,0,0,0,/// we have rotation
0,0,0,0,0,0,0,//get positive exponent //create multiplier value //multiply, round up, and divide for bound value:
0,0,0,0,0,0,0,// change the generator and make sure it only affects p1
0,0,0,0,0,0,0,//outlineStroke
0,0,0,0,0,0,0,// secondary RangeAxes...
0,0,0,0,0,0,0,// draw the axis label (note that 'state' is passed in *and* // returned)...
0,0,0,0,0,0,0,// roseCenterPaint
0,0,0,0,0,0,0,// create the plot...
0,0,0,0,0,0,0,// rosePaint
0,0,0,0,0,0,0,// first determine the size of the chart rendering area...
0,0,0,0,0,0,0,// Reset to the default 'overwrite' mode
0,0,0,0,0,0,0,// interiorGap
0,0,0,0,0,0,0,// interiorGap...
0,0,0,0,0,0,0,// extent
0,0,0,0,0,0,0,// labelGap
0,0,0,0,0,0,0,// sectionPaint
0,0,0,0,0,0,0,// additional dataArea modifications //check whether modification is
0,0,0,0,0,0,0,// circular
0,0,0,0,0,0,0,// another empty series
0,0,0,0,0,0,0,// ignoreNullValues
0,0,0,0,0,0,0,// direction
0,0,0,0,0,0,0,// now get the data and plot it (the visual representation will depend // on the renderer that has been set)...
0,0,0,0,0,0,0,// sectionPaintMap
0,0,0,0,0,0,0,/////////////////////////////////////////////////////////////////////////// // New Methods ///////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// when the dataset contains no series, we expect the value range to  // be null
0,0,0,0,0,0,0,// labelOutlineStroke
0,0,0,0,0,0,0,// separatorsVisible
0,0,0,0,0,0,0,// super.drawSecondaryPass(g2, plot, dataset, pass, series, item, // domainAxis, dataArea, rangeAxis, crosshairState, entities);
0,0,0,0,0,0,0,// labelOutlinePaint
0,0,0,0,0,0,0,// shadowPaint
0,0,0,0,0,0,0,// newestAt takes value previously held // by oldestAT
0,0,0,0,0,0,0,// shadowYOffset
0,0,0,0,0,0,0,// outlineVisible
0,0,0,0,0,0,0,//get log10 version of lower bound and round to integer:
0,0,0,0,0,0,0,// try a customised instance
0,0,0,0,0,0,0,// links visible
0,0,0,0,0,0,0,// verify various indices inside a segment are the same segment
0,0,0,0,0,0,0,// maximumLabelWidth
0,0,0,0,0,0,0,// explodePercentages
0,0,0,0,0,0,0,"/* (non-Javadoc)         * @see org.jfree.chart.axis.LogarithmicAxis#switchedLog10(double)         */"
0,0,0,0,0,0,0,// labelShadowPaint
0,0,0,0,0,0,0,// we suppress shadow generation, because PDF is a vector format and // the shadow effect is applied via bitmap effects...
0,0,0,0,0,0,0,// handle transparency and compositing.
0,0,0,0,0,0,0,// startAngle
0,0,0,0,0,0,0,// a list to store the series index and bar region, so we can draw // all the labels at the end...
0,0,0,0,0,0,0,// get the relevant source coordinate given the plot orientation
0,0,0,0,0,0,0,// store the current time zone
0,0,0,0,0,0,0,// axisLinePaint
0,0,0,0,0,0,0,// previous data point...
0,0,0,0,0,0,0,// check that the URL generator has been cloned
0,0,0,0,0,0,0,// The following alternative is only supported in JDK 1.4 - we support // JDK 1.3.1 onwards // setItemLabelsVisible(Boolean.valueOf(visible));
0,0,0,0,0,0,0,// urlGenerator
0,0,0,0,0,0,0,// linkMargin
0,0,0,0,0,0,0,// Process outliers. Each outlier is either added to the // appropriate outlier list or a new outlier list is made
0,0,0,0,0,0,0,// labelLinkStroke
0,0,0,0,0,0,0,// only needed if calculating percentages
0,0,0,0,0,0,0,// legendItemShape
0,0,0,0,0,0,0,// offset the start of the box if the box width is smaller than the // category width
0,0,0,0,0,0,0,// long result = calendar.getTimeInMillis(); // won't work with JDK 1.3
0,0,0,0,0,0,0,// the clone references the same dataset as the original
0,0,0,0,0,0,0,// plot is likely registered as a listener with the existing axis...
0,0,0,0,0,0,0,// check that zero items are ignored if requested
0,0,0,0,0,0,0,// get two consecutive segments for various tests
0,0,0,0,0,0,0,// outlineStroke
0,0,0,0,0,0,0,// submit the current data point as a crosshair candidate
0,0,0,0,0,0,0,// check that null items are ignored if requested
0,0,0,0,0,0,0,// we can't use the following valueOf() method, because it // won't compile with JDK1.4 // this.colorsPool.get(Integer.valueOf(awtColor.getRGB()));
0,0,0,0,0,0,0,// this should have been defined as a boolean primitive, because // allowing null values is a nuisance...but it is part of the final // API now, so we'll have to support it.
0,0,0,0,0,0,0,// change the shape and make sure it only affects p1
0,0,0,0,0,0,0,// we don't know anything about the ordering of the x-values, // but we can still skip any initial values that fall outside the // range...
0,0,0,0,0,0,0,// check that negative items are always ignored
0,0,0,0,0,0,0,// draw the item label if there is one...
0,0,0,0,0,0,0,// noDataMessagePaint
0,0,1,1,1,1,1,// FIXME: add setBaseToolTipGenerator(CategoryToolTipGenerator, boolean) ?
0,0,0,0,0,0,0,// noDataMessageFont
0,0,0,0,0,0,0,// noDataMessage
0,0,0,0,0,0,0,// de-register the composite as a listener for the chart.
0,0,0,0,0,0,0,// try a null collection
0,0,0,0,0,0,0,// foregroundAlpha
0,0,0,0,0,0,0,// draw the top axes
0,0,0,0,0,0,0,// drawingSupplier
0,0,0,0,0,0,0,// NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
0,0,0,0,0,0,0,// backgroundAlpha
0,0,0,0,0,0,0,// secondary renderers
0,0,0,0,0,0,0,// row 1: antialiasing
0,0,0,0,0,0,0,// dataExtractOrder
0,0,0,0,0,0,0,// maxValue
0,0,0,0,0,0,0,// title // x-axis label // y-axis label // data // create legend? // generate tooltips? // generate URLs?
0,0,0,0,0,0,0,// valueFont
0,0,0,0,0,0,0,// if a subtrahend is not specified, assume it is zero
0,0,0,0,0,0,0,// key not found
0,0,0,0,0,0,0,// if we get to here, we know that duplicate X values are not permitted
0,0,0,0,0,0,0,// polygon definitions
0,0,0,0,0,0,0,// since the flow layout is relatively straightforward, // no information needs to be recorded here
0,0,0,0,0,0,0,// draw the label
0,0,0,0,0,0,0,// copy a range before the start of the series data...
0,0,0,0,0,0,0,// add another value
0,0,0,0,0,0,0,// change a series paint
0,0,0,0,0,0,0,// add a second dataset, plotted against a second axis
0,0,0,0,0,0,0,// no event is generated if the dataset is already empty
0,0,0,0,0,0,0,// axisLabelGap
0,0,0,0,0,0,0,// Performs the actual drawing here ...
0,0,0,0,0,0,0,// secondary DomainAxisLocations...
0,0,0,0,0,0,0,// if there is an existing dataset, remove the plot from the list of // change listeners...
0,0,0,0,0,0,0,// webFilled
0,0,0,0,0,0,0,// check that super class fields are being looked at...
0,0,0,0,0,0,0,// change the legendItemShape
0,0,0,0,0,0,0,// axisIndices can be: // 1.  null; // 2.  non-empty, containing only Integer objects that are unique.
0,0,0,0,0,0,0,// thermometerPaint
0,0,0,0,0,0,0,// valueLocation
0,0,0,0,0,0,0,// now add a third value to the series...
0,0,0,0,0,0,0,// as far as I know, the Locale for the calendar only affects week // number calculations, and since DateTickUnit doesn't do week // arithmetic, the default locale (whatever it is) should be fine // here...
0,0,0,0,0,0,0,//first tick of group // did not do zero tick last // iteration
0,0,0,0,0,0,0,// domainAxisLocation...
0,0,0,0,0,0,0,// delegate 'info' and 'source' argument checks...
0,0,0,0,0,0,0,// loop over intervals between nodes
0,0,0,0,0,0,0,// valueFormat
0,0,0,0,0,0,0,// valuePaint
0,0,0,0,0,0,0,// dataset index
0,0,0,0,0,0,0,// axisLocation
0,0,0,0,0,0,0,// thermometerStroke
0,0,0,0,0,0,0,// this doesn't work
0,0,0,0,0,0,0,// check if starting new column
0,0,0,0,0,0,0,// secondary RangeAxisLocations...
0,0,0,0,0,0,0,// secondary DomainAxes...
0,0,0,0,0,0,0,// rangeAxis...
0,0,0,0,0,0,0,// renderer
0,0,0,0,0,0,0,// change a series outline paint
0,0,0,0,0,0,0,// for mouseReleased event, (horizontalZoom || verticalZoom) // will be true, so we can just test for either being false; // otherwise both are true
0,0,0,0,0,0,0,// parent plot...
0,0,0,0,0,0,0,// itemLabelFontList
0,0,0,0,0,0,0,//outlinePaint
0,0,0,0,0,0,0,// try a collection with a single number plus a null
0,0,0,0,0,0,0,// restore original tooltip dealys
0,0,0,0,0,0,0,// z number format
0,0,0,0,0,0,0,// data
0,0,0,0,0,0,0,// do we need to redraw the buffer?
0,0,0,0,0,0,0,// locale should not matter here
0,0,0,0,0,0,0,// since this is only used by clearRect(), we don't update the GC yet
0,0,0,0,0,0,0,// when the x-values are sorted in descending order, the lower // bound is found by calculating relative to the xHigh value
0,0,0,0,0,0,0,// fixed legend items
0,0,0,0,0,0,0,// relay the event from the canvas to our registered listeners
0,0,0,0,0,0,0,// use item paint for fills by default
0,0,0,0,0,0,0,// BarRenderer
0,0,0,0,0,0,0,// textAnchor
0,0,0,0,0,0,0,// create storage for listeners...
0,0,0,0,0,0,0,// tickLabelFont
0,0,0,0,0,0,0,// last item in series, draw the lot... // set up the alpha-transparency...
0,0,0,0,0,0,0,//int midY = (int) (plotArea.getMinY() + (plotArea.getHeight() / 2));
0,0,0,0,0,0,0,//tick value not between 0 & 1 //show tick label if it's the first or last in // the set, or if it's 1-5; beyond that show // fewer as the values get larger:
0,0,0,0,0,0,0,// TBLRC // 10101 - top, left and center
0,0,0,0,0,0,0,// We organise the data with the following assumption: // 1) the data are sorted by x then y // 2) that the data will be represented by a rectangle formed by //    using x[i+1], x, y[j+1], and y. // 3) we march along the y-axis at the same value of x until a new //    value x is found at which point we will flag the index //    where x[i+1]<>x[i]
0,0,0,0,0,0,0,// 2. check whether the column is now empty.
0,0,0,0,0,0,0,// adjust for insets...
0,0,0,0,0,0,0,// can't allow duplicate values, so we need to check whether // there is an item with the given x-value already
0,0,0,0,0,0,0,// no renderer 1
0,0,0,0,0,0,0,//private NumberFormat numberFormatOverride;
0,0,0,0,0,0,0,// OUTLINE STROKE
0,0,0,0,0,0,0,// quadrant paint
0,0,0,0,0,0,0,// create the polygon // add the minuend's points to polygon
0,0,0,0,0,0,0,// return the generator for ALL series, if there is one...
0,0,0,0,0,0,0,// paint sequence
0,0,0,0,0,0,0,/////////////////////////////////////////////////////////////////////////// // From XYDataset ///////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// draw the tick marks and labels...
0,0,0,0,0,0,0,// now test that the clone is independent of the original
0,0,0,0,0,0,0,// shape sequence
0,0,0,0,0,0,0,// outline stroke sequence
0,0,0,0,0,0,0,// for a series with no data, we expect {-1, -1}...
0,0,0,0,0,0,0,// outline paint sequence
0,0,0,0,0,0,0,// 'baseItemLabelPaint' : immutable, no need to clone reference
0,0,0,0,0,0,0,// now overwrite this item with another
0,0,0,0,0,0,0,// create dataset 2...
0,0,0,0,0,0,0,// setup our test timelines // // Legend for comments below: // <spaces> = Segments included in the final timeline // EE       = Excluded segments via timeline rules // xx       = Exception segments inherited from base timeline exclusions
0,0,0,0,0,0,0,// gradient paint transformer
0,0,0,0,0,0,0,// paint index
0,0,0,0,0,0,0,/* ComparableObjectItem item1 = */
0,0,0,0,0,0,0,// in this case, every color has a range of values
0,0,0,0,0,0,0,// with no buffer, we use XOR to draw the rectangle "over" the // chart...
0,0,0,0,0,0,0,// only relevant when this is a subplot
0,0,0,0,0,0,0,// create an array of items in reverse order
0,0,0,0,0,0,0,// upperBound
0,0,0,0,0,0,0,// compute common deltas
0,0,0,0,0,0,0,// tickRadius
0,0,0,0,0,0,0,// clear the flag
0,0,0,0,0,0,0,// nothing is drawn if the row index is not included in the list with // the indices of the visible rows...
0,0,0,0,0,0,0,// radius
0,0,0,0,0,0,0,// try a few checks to ensure that the clone is independent of the // original
0,0,0,0,0,0,0,// check the case where there is a secondary dataset that doesn't // have a renderer (i.e. falls back to renderer 0)
0,0,0,0,0,0,0,// verify that the plot is listening to the cloned renderer
0,0,0,0,0,0,0,// check key order
0,0,0,0,0,0,0,// shape index
0,0,0,0,0,0,0,// draw median
0,0,0,0,0,0,0,// now try to reject equality
0,0,0,0,0,0,0,// check negative index throws exception
0,0,0,0,0,0,0,// outline stroke index
0,0,0,0,0,0,0,// we don't know anything about the ordering of the x-values, // so we iterate until we find the first crossing of x (if any) // we know there are at least 2 items in the series at this point
0,0,0,0,0,0,0,// now remove a3, but since a3.equals(a1), this will in fact remove // a1...
0,0,0,0,0,0,0,// add a value to the second series
0,0,0,0,0,0,0,// actually removes a1
0,0,0,0,0,0,0,// check that the generator has been cloned
0,0,0,0,0,0,0,// check for unknown column
0,0,0,0,0,0,0,//// SECTION OUTLINE PAINT ////////////////////////////////////////////////
0,0,0,0,0,0,0,// if there are only null items, we get a NaNRange
0,0,0,0,0,0,0,// copy the middle three items...
0,0,0,0,0,0,0,// visible
0,0,0,0,0,0,0,// shape
0,0,0,0,0,0,0,// check that empty dataset is handled OK
0,0,0,0,0,0,0,// continue and separate the labels only if necessary
0,0,0,0,0,0,0,// set up the category names...
0,0,0,0,0,0,0,// dateFormatOverride
0,0,0,0,0,0,0,//negative values not allowed //parameter value is > 0 // The Math.log() function is based on e not 10.
0,0,0,0,0,0,0,// a column of all null values is still counted...
0,0,0,0,0,0,0,// outer radius
0,0,0,0,0,0,0,// first arrange without constraints, then see if the width fits // within the required range...if not, call arrangeFN() at max width
0,0,0,0,0,0,0,// now when the default group is mapped to, it shouldn't increase the // group count...
0,0,0,0,0,0,0,// foregroundPaint
0,0,0,0,0,0,0,// The split may occur in either x splitted segments, if any, but // not in both
0,0,0,0,0,0,0,// inner radius
0,0,0,0,0,0,0,//////////////////////////////////////////////////////////////////////////// // constructors and factory methods ////////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// foreground paint
0,0,0,0,0,0,0,// tick mark stroke...
0,0,0,0,0,0,0,// confirm overwriting an existing value
0,0,0,0,0,0,0,// frameAnchor
0,0,0,0,0,0,0,// angle
0,0,0,0,0,0,0,// 'negativeItemLabelAnchor' : immutable, no need to clone reference
0,0,0,0,0,0,0,// clear a mapping
0,0,0,0,0,0,0,// test a custom instance
0,0,0,0,0,0,0,// templateValue
0,0,0,0,0,0,0,// outline stroke
0,0,0,0,0,0,0,// fill paint
0,0,0,0,0,0,0,// check retrieve value by index
0,0,0,0,0,0,0,// valueAnchor
0,0,0,0,0,0,0,// not a HighLowDataset, so just draw a line connecting this point // with the previous point...
0,0,0,0,0,0,0,// dial cap
0,0,0,0,0,0,0,// now make a change to the renderer and see if it triggers a plot // change event...
0,0,0,0,0,0,0,// not first or last tick on graph and value // is 1.0 //change value to 0.0 //indicate zero tick //create label for tick
0,0,0,0,0,0,0,//get the coordinates of the original GradientPaint
0,0,0,0,0,0,0,// frame
0,0,0,0,0,0,0,// negative paint
0,0,0,0,0,0,0,// view
0,0,0,0,0,0,0,// if negative then set flag and make positive
0,0,0,0,0,0,0,// layer
0,0,0,0,0,0,0,// populate deprecated fields
0,0,0,0,0,0,0,// check that a null dataset returns null bounds
0,0,0,0,0,0,0,// standard ResourceBundle behaviour
0,0,0,0,0,0,0,// apply the margins - these should apply to the exponent range
0,0,0,0,0,0,0,//    /** Insets text field. */ //    private InsetsTextField tickLabelInsetsTextField; // //    /** Label insets text field. */ //    private InsetsTextField labelInsetsTextField;
0,0,0,0,0,0,0,// check a series with four items
0,0,0,0,0,0,0,// outlineStrokeList
0,0,0,0,0,0,0,// majorTickLength
0,0,0,0,0,0,0,//cursor = midX - COLUMN_RADIUS - AXIS_GAP;
0,0,0,0,0,0,0,// sometimes the last few days of the year are considered to fall in // the *first* week of the following year.  Refer to the Javadocs for // GregorianCalendar.
0,0,0,0,0,0,0,// majorTickStroke
0,0,0,0,0,0,0,// 'baseOutlinePaint' : immutable, no need to clone reference
0,0,0,0,0,0,0,// try a null dataset - should return a null range
0,0,0,0,0,0,0,// majorTickIncrement
0,0,0,0,0,0,0,// Add the last point (x,0)
0,0,0,0,0,0,0,// majorTickPaint
0,0,0,0,0,0,0,// the noCodeBaseClassLoader is configured by a call to the // removeCodeBase() method, typically in the init() method of an // applet...
0,0,0,0,0,0,0,// label
0,0,0,0,0,0,0,// outline paint index
0,0,0,0,0,0,0,// seriesVisible
0,0,0,0,0,0,0,// baseSeriesVisible
0,0,0,0,0,0,0,// second pass adds shapes where the items are ..
0,0,0,0,0,0,0,// have to use a concrete subclass...
0,0,0,0,0,0,0,//parameter value is > 10 // The Math.log() function is based on e not 10.
0,0,0,0,0,0,0,// cycle through all the segments contained in the BaseTimeline // exception segment
0,0,0,0,0,0,0,// can't find any differences
0,0,0,0,0,0,0,// test default instance
0,0,0,0,0,0,0,// -------------------- // --- Constructors --- // --------------------
0,0,0,0,0,0,0,// seriesVisibleList
0,0,0,0,0,0,0,// adjust for padding...
0,0,0,0,0,0,0,// outlinePaintList
0,0,0,0,0,0,0,// get the axis label size and update the space object...
0,0,0,0,0,0,0,// check that setting the max date to something on or before the // current min date works...
0,0,0,0,0,0,0,// work out the anchor point
0,0,0,0,0,0,0,// baseFillPaint
0,0,0,0,0,0,0,// just the lines, no filling
0,0,0,0,0,0,0,// baseShape
0,0,0,0,0,0,0,// check a series with two items
0,0,0,0,0,0,0,//small log values in use; create numeric value for tick
0,0,0,0,0,0,0,// createEntitiesList;
0,0,0,0,0,0,0,// If the segment must be splitted, insert a new point // Strict test forces to have real segments (not 2 equal points) // and avoids division by 0
0,0,0,0,0,0,0,// complicate things a little...
0,0,0,0,0,0,0,// customise the title position and font
0,0,0,0,0,0,0,// shapeList
0,0,0,0,0,0,0,// baseOutlineStroke
0,0,0,0,0,0,0,// add the new chart
0,0,0,0,0,0,0,// seem to be the same...
0,0,0,0,0,0,0,// draw the plot background and axes...
0,0,0,0,0,0,0,// slope
0,0,0,0,0,0,0,// no renderer, no gridlines...
0,0,0,0,0,0,0,// itemLabelPaint
0,0,0,0,0,0,0,// while the tick labels overlap and there are more tick sizes available, // choose the next bigger label
0,0,0,0,0,0,0,// ...but this does!
0,0,0,0,0,0,0,// this is not one of our included segment, skip it
0,0,0,0,0,0,0,// baseItemLabelFont
0,0,0,0,0,0,0,// work out the value, label and position
0,0,0,0,0,0,0,// itemLabelFont
0,0,0,0,0,0,0,// draw the lower shadow...
0,0,0,0,0,0,0,// itemLabelPaintList
0,0,0,0,0,0,0,// calculate the bar width - this calculation differs from the // BarRenderer calculation because the bars are layered on top of one // another, so there is effectively only one bar per category for // the purpose of the bar width calculation
0,0,0,0,0,0,0,// sanity check for data area...
0,0,0,0,0,0,0,// createEntities;
0,0,0,0,0,0,0,/* y-axis label */
0,0,0,0,0,0,0,// baseItemLabelPaint
0,0,0,0,0,0,0,// if no initial zoom point was set, ignore dragging...
0,0,0,0,0,0,0,// SHAPE
0,0,0,0,0,0,0,// baseOutlinePaint
0,0,0,0,0,0,0,// insets
0,0,0,0,0,0,0,// now check autoPopulate==true
0,0,0,0,0,0,0,// baseLegendShape
0,0,0,0,0,0,0,// ITEM_LABELS_VISIBLE
0,0,0,0,0,0,0,// legendShape
0,0,0,0,0,0,0,// legendTextFont
0,0,0,0,0,0,0,// OUTLINE PAINT
0,0,0,0,0,0,0,// baseLegendTextFont
0,0,0,0,0,0,0,// ITEM_LABEL_FONT
0,0,0,0,0,0,0,// failed
0,0,0,0,0,0,0,// NEGATIVE ITEM LABEL ANCHOR
0,0,0,0,0,0,0,// check a series with no items
0,0,0,0,0,0,0,// now remove series 2 from collection 2
0,0,0,0,0,0,0,// first test for equality (contains or contained)
0,0,0,0,0,0,0,// add series to collection 1, should be not equal
0,0,0,0,0,0,0,// it is unlikely that 'state' will be null, but check anyway...
0,0,0,0,0,0,0,// check a series with repeating items
0,0,0,0,0,0,0,// check a series with three items
0,0,0,0,0,0,0,// check dataset with two time periods
0,0,0,0,0,0,0,//private Paint negativeBarPaint;
0,0,0,0,0,0,0,// we're doing this for testing only, and make sure that we // only add data in descending order by x-value
0,0,0,0,0,0,0,// try with gradient paint
0,0,0,0,0,0,0,// drawYError
0,0,0,0,0,0,0,// positiveBarPaint;
0,0,0,0,0,0,0,// Compute number of labels
0,0,0,0,0,0,0,// lastBarPaint;
0,0,0,0,0,0,0,// firstBarPaint;
0,0,0,0,0,0,0,// the renderer should not be equal to a BarRenderer
0,0,0,0,0,0,0,// quick check for independence
0,0,0,0,0,0,0,// TOP
0,0,0,0,0,0,0,// set flag true if negative values not allowed and the // lower bound is between 0 and 10:
0,0,0,0,0,0,0,// what is our alignment?
0,0,0,0,0,0,0,// urlGeneratorList
0,0,0,0,0,0,0,// RIGHT
0,0,0,0,0,0,0,// drawBarOutline
0,0,0,0,0,0,0,// autoWidthFactor
0,0,0,0,0,0,0,// itemMargin
0,0,0,0,0,0,0,// try something from the base class
0,0,0,0,0,0,0,// base value
0,0,0,0,0,0,0,// minimumBarLength
0,0,0,0,0,0,0,// maximumBarWidth
0,0,0,0,0,0,0,// barPainter
0,0,0,0,0,0,0,// shadowsVisible
0,0,0,0,0,0,0,// try null argument
0,0,0,0,0,0,0,// setUseYInterval
0,0,0,0,0,0,0,// try empty dataset
0,0,0,0,0,0,0,// setDrawBarOutline()
0,0,0,0,0,0,0,// setBase()
0,0,0,0,0,0,0,// legendBar
0,0,0,0,0,0,0,// setMargin()
0,0,0,0,0,0,0,// check a list containing a non-Number object
0,0,0,0,0,0,0,// autoWidthMethod
0,0,0,0,0,0,0,// drawOpenTicks
0,0,0,0,0,0,0,// roundXCoordinates
0,0,0,0,0,0,0,// legendLine
0,0,0,0,0,0,0,// drawXError
0,0,0,0,0,0,0,// drawCloseTicks
0,0,0,0,0,0,0,// openTickPaint
0,0,0,0,0,0,0,// tickLength
0,0,0,0,0,0,0,// candleWidth
0,0,0,0,0,0,0,// drawVolume
0,0,0,0,0,0,0,// first arrange without constraints, and see if this fits within // the required ranges...
0,0,0,0,0,0,0,// downPaint
0,0,0,0,0,0,0,// upPaint
0,0,0,0,0,0,0,// check boxPaint null also
0,0,0,0,0,0,0,// find out where to place the label...
0,0,0,0,0,0,0,// linePaint
0,0,0,0,0,0,0,// fillPaint
0,0,0,0,0,0,0,// make sure that modifying the returned array doesn't change the // function
0,0,0,0,0,0,0,// stripOutlineVisible
0,0,1,0,0,0,0,"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2013, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ------------------- * ChartUtilities.java * ------------------- * (C) Copyright 2001-2013, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Wolfgang Irler; *                   Richard Atkinson; *                   Xavier Poinsard; * * Changes * ------- * 11-Dec-2001 : Version 1.  The JPEG method comes from Wolfgang Irler's *               JFreeChartServletDemo class (DG); * 23-Jan-2002 : Changed saveChartAsXXX() methods to pass IOExceptions back to *               caller (DG); * 26-Jun-2002 : Added image map methods (DG); * 05-Aug-2002 : Added writeBufferedImage methods *               Modified writeImageMap method to support flexible image *               maps (RA); * 26-Aug-2002 : Added saveChartAsJPEG and writeChartAsJPEG methods with info *               objects (RA); * 05-Sep-2002 : Added writeImageMap() method to support OverLIB *               - http://www.bosrup.com/web/overlib (RA); * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG); * 17-Oct-2002 : Exposed JPEG quality setting and PNG compression level as *               parameters (DG); * 25-Oct-2002 : Fixed writeChartAsJPEG() empty method bug (DG); * 13-Mar-2003 : Updated writeImageMap method as suggested by Xavier Poinsard *               (see Feature Request 688079) (DG); * 12-Aug-2003 : Added support for custom image maps using *               ToolTipTagFragmentGenerator and URLTagFragmentGenerator (RA); * 02-Sep-2003 : Separated PNG encoding from writing chart to an *               OutputStream (RA); * 04-Dec-2003 : Chart draw() method modified to include anchor point (DG); * 20-Feb-2004 : Edited Javadocs and added argument checking (DG); * 05-Apr-2004 : Fixed problem with buffered image type (DG); * 01-Aug-2004 : Modified to use EncoderUtil for all image encoding (RA); * 02-Aug-2004 : Delegated image map related functionality to ImageMapUtil (RA); * 13-Jan-2005 : Renamed ImageMapUtil --> ImageMapUtilities, removed method *               writeImageMap(PrintWriter, String, ChartRenderingInfo) which *               exists in ImageMapUtilities (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 06-Feb-2006 : API doc update (DG); * 19-Mar-2007 : Use try-finally to close output stream in saveChartAsXXX() *               methods (DG); * 10-Jan-2008 : Fix bug 1868251 - don't create image with transparency when *               saving to JPEG format (DG); * 02-Jul-2013 : Use ParamChecks class (DG); * */"
0,0,0,0,0,0,0,// autoWidthGap
0,0,0,0,0,0,0,// BOTTOM
0,0,0,0,0,0,0,/* TimeSeries result = */
0,0,0,0,0,0,0,// locale shouldn't matter here
0,0,0,0,0,0,0,// stripWidth
0,0,0,0,0,0,0,// axisOffset
0,0,0,0,0,0,0,// test findDomainBounds as well
0,0,0,0,0,0,0,// check the bounds of a simple dataset
0,0,0,0,0,0,0,// axis
0,0,0,0,0,0,0,// blockHeight
0,0,0,0,0,0,0,// blockWidth
0,0,0,0,0,0,0,// paintScale
0,0,0,0,0,0,0,// shapeOutlineVisible
0,0,0,0,0,0,0,// stripOutlinePaint
0,0,0,0,0,0,0,// stripOutlineStroke
0,0,0,0,0,0,0,// Anwender hat abgebrochen.
0,0,0,0,0,0,0,// line
0,0,0,0,0,0,0,// simple case
0,0,0,0,0,0,0,// shapeAnchor
0,0,0,0,0,0,0,// is the clone independent
0,0,0,0,0,0,0,// lineStroke
0,0,0,0,0,0,0,// try deleting null
0,0,0,0,0,0,0,// if we modify the original list, it's best if the URL generator is // not affected
0,0,0,0,0,0,0,// the clone contains a reference to the original object
0,0,0,0,0,0,0,// start with the current tick unit...
0,0,0,0,0,0,0,// try null calendar
0,0,0,0,0,0,0,// all tick labels have the same width (equal to the height of // the font)...
0,0,0,0,0,0,0,// check null argument 1
0,0,0,0,0,0,0,// check that clone is independent of the original
0,0,0,0,0,0,0,// check sorted rows
0,0,0,0,0,0,0,// the clone contains a reference to a CLONE of the original object
0,0,0,0,0,0,0,// try null key
0,0,0,0,0,0,0,// confirm that the clone is independent of the original
0,0,0,0,0,0,0,// replace an existing value
0,0,0,0,0,0,0,// request width index == itemCount
0,0,0,0,0,0,0,// try row index too high
0,0,0,0,0,0,0,// check handling of null key
0,0,0,0,0,0,0,// check null argument
0,0,0,0,0,0,0,// check null list
0,0,0,0,0,0,0,// Scaling with a factor of 1 does not change the range
0,0,0,0,0,0,0,// try unknown key
0,0,0,0,0,0,0,// try key index == itemCount
0,0,0,0,0,0,0,// try negative key index
0,0,0,0,0,0,0,/*Range r2 =*/
0,0,0,0,0,0,0,// Lower > upper: mid point is used
0,0,0,0,0,0,0,// Expand by 0% does not change the range
0,0,0,0,0,0,0,// map a key to a new group
0,0,0,0,0,0,0,// check an empty dataset
0,0,0,0,0,0,0,// autoSort
0,0,0,0,0,0,0,// remove an item
0,0,0,0,0,0,0,// add a value
0,0,0,0,0,0,0,// calculate midnight of first monday after 1/1/1900 relative to // current locale
0,0,0,0,0,0,0,// try null keys
0,0,0,0,0,0,0,// now overwrite group "G2"...
0,0,0,0,0,0,0,// a new map always has 1 group (the default group)
0,0,0,0,0,0,0,// text
0,0,0,0,0,0,0,// the default group is always at index 0
0,0,0,0,0,0,0,// if the default group is not mapped to, it should still count towards // the group count...
0,0,0,0,0,0,0,// indices are assigned in the order that groups are originally mapped
0,0,0,0,0,0,0,// check invalid indices
0,0,0,0,0,0,0,// a non-existent group should return -1
0,0,0,0,0,0,0,// a null argument should throw an exception
0,0,0,0,0,0,0,// a small check for independence
0,0,0,0,0,0,0,/* Number n = */
0,0,0,0,0,0,0,// try an array containing a single Number
0,0,0,0,0,0,0,/* Comparable k = */
0,0,0,0,0,0,0,// try column index too high
0,0,0,0,0,0,0,// try negative column index
0,0,0,0,0,0,0,// try null column key
0,0,0,0,0,0,0,// try null row key
0,0,0,0,0,0,0,// try unknown row key
0,0,0,0,0,0,0,// try null
0,0,0,0,0,0,0,// try a null source
0,0,0,0,0,0,0,// basic check for independence
0,0,0,0,0,0,0,// it's OK to use an index equal to the size of the list
0,0,0,0,0,0,0,// this is expected
0,0,0,0,0,0,0,// defer argument checks...
0,0,0,0,0,0,0,// test null source
0,0,0,0,0,0,0,// check that two empty datasets are equal
0,0,0,0,0,0,0,/* Number n =*/
0,0,0,0,0,0,0,// another item
0,0,0,0,0,0,0,// increment an unknown row
0,0,0,0,0,0,0,// increment a null value
0,0,0,0,0,0,0,// a row of all null values is still counted...
0,0,0,0,0,0,0,// LEFT
0,0,0,0,0,0,0,// increment an unknown column
0,0,0,0,0,0,0,// rotation anchor
0,0,0,0,0,0,0,/* Number start = */
0,0,0,0,0,0,0,// define subtasks
0,0,0,0,0,0,0,// note that we don't define taskB1
0,0,0,0,0,0,0,/* int count = */
0,0,0,0,0,0,0,/* Number end = */
0,0,1,0,0,0,0,// what if we don't want the interval?
0,0,0,0,0,0,0,// simple check for independence
0,0,0,0,0,0,0,// try a single item
0,0,0,0,0,0,0,// a dataset with a single value
0,0,0,0,0,0,0,// an item in series 2
0,0,0,0,0,0,0,// null is ignored
0,0,0,0,0,0,0,// pass on the event to the auxiliary handlers
0,0,0,0,0,0,0,// check another regular value
0,0,0,0,0,0,0,// adding a second series
0,0,0,0,0,0,0,// advance line Paint
0,0,0,0,0,0,0,// overwrite the value
0,0,0,0,0,0,0,// check a NaN
0,0,0,0,0,0,0,// check a null value
0,0,0,0,0,0,0,// does nothing unless overridden
0,0,0,0,0,0,0,// an empty dataset should return a null max
0,0,0,0,0,0,0,// and that simple aggregation works
0,0,0,0,0,0,0,// got it!
0,0,0,0,0,0,0,// Double.NaN DOESN'T mess things up
0,0,0,0,0,0,0,// empty dataset returns null
0,0,0,0,0,0,0,// null range throws IllegalArgumentException
0,0,0,0,0,0,0,// null list throws IllegalArgumentException
0,0,0,0,0,0,0,// try a Double.NEGATIVE_INFINITY
0,0,0,0,0,0,0,// try some nulls
0,0,0,0,0,0,0,/* TimeSeries s = */
0,0,0,0,0,0,0,//no initial zoom rectangle exists but the handler is set //as life handler unregister
0,0,0,0,0,0,0,// add a second series
0,0,0,0,0,0,0,// an empty dataset should return null for bounds
0,0,0,0,0,0,0,// try a Double.NaN
0,0,0,0,0,0,0,//gets the outline stroke width of the plot
0,0,0,0,0,0,0,// Add exception in included segments
0,0,0,0,0,0,0,// try a dataset with two values
0,0,0,0,0,0,0,// try null list
0,0,0,0,0,0,0,// Saturday and Sundays are non business hours
0,0,0,0,0,0,0,// try a list containing a single value
0,0,0,0,0,0,0,// test empty series
0,0,0,0,0,0,0,// try an array containing a single Number and a NaN
0,0,0,0,0,0,0,// try single value
0,0,0,0,0,0,0,// try a null argument
0,0,0,0,0,0,0,// try a collection with a single number
0,0,0,0,0,0,0,// try an empty collection
0,0,0,0,0,0,0,// try a collection with several numbers
0,0,0,0,0,0,0,// try zero length array
0,0,0,0,0,0,0,// try a collection with a single number plus a NaN
0,0,0,0,0,0,0,// check list containing null
0,0,0,0,0,0,0,// we call refresh ticks just to get the maximum width or height
0,0,0,0,0,0,0,// check empty list
0,0,0,0,0,0,0,/*item = */
0,0,0,0,0,0,0,// copy a range that begins before and ends in the middle of the // series...
0,0,0,0,0,0,0,// try deleting a time period that doesn't exist...
0,0,0,0,0,0,0,// copy a range that includes only the first item in the series...
0,0,0,0,0,0,0,// copy the last item...
0,0,0,0,0,0,0,// capLength
0,0,0,0,0,0,0,// copy just the first item...
0,0,0,0,0,0,0,// copy the first two items...
0,0,0,0,0,0,0,// copy the last two items...
0,0,0,0,0,0,0,// rotation angle
0,0,0,0,0,0,0,// try an array containing no items
0,0,0,0,0,0,0,//did zero tick last iteration //clear flag //create tick label string: //show tick label if "1e#"-style and it's one // of the first two, if it's the first or last // in the set, or if it's 1-5; beyond that // show fewer as the values get larger:
0,0,0,0,0,0,0,// changing the overwritten record shouldn't affect the series
0,0,0,0,0,0,0,// store the plot and its weight
0,0,0,0,0,0,0,// check negative first argument
0,0,0,0,0,0,0,// can't get anything yet...just an exception
0,0,0,0,0,0,0,//first tick of series, or not too small a value and // one of first 3 ticks, or last tick to be displayed // set exact number of fractional digits to be shown // (no effect if showing "1e#"-style ticks):
0,0,0,0,0,0,0,/*TimeSeriesDataItem item =*/
0,0,0,0,0,0,0,// test series with one item
0,0,0,0,0,0,0,// test series with two items
0,0,0,0,0,0,0,//private int autoTickIndex; //protected double reservedForTickLabels; //protected double reservedForAxisLabel;
0,0,0,0,0,0,0,// tests with values
0,0,0,0,0,0,0,// try null array
0,0,0,0,0,0,0,//negatives allowed or upper bound not between 0 & 1 //if flag then change to log version of highest value to // make range begin at a 10^n value; else use nearest int
0,0,0,0,0,0,0,// this line triggers the defect
0,0,0,0,0,0,0,// test a series with two items
0,0,0,0,0,0,0,// test 1...
0,0,0,0,0,0,0,//negatives not allowed and lower range bound is zero //use data range bound instead
0,0,0,0,0,0,0,// null items are ignored
0,0,0,0,0,0,0,// test 3...
0,0,0,0,0,0,0,//if less than 1.0 then make it 1.0 //subtract out margin and get exponential value:
0,0,0,0,0,0,0,// domain description - null
0,0,0,0,0,0,0,// range description
0,0,0,0,0,0,0,// a null item should throw an IllegalArgumentException
0,0,0,0,0,0,0,// test 2...
0,0,0,0,0,0,0,// add a fourth time period
0,0,0,0,0,0,0,// check empty dataset
0,0,0,0,0,0,0,// range description - null
0,0,0,0,0,0,0,// restore the default time zone
0,0,0,0,0,0,0,// work out the maximum height or width of the non-shared axes...
0,0,0,0,0,0,0,// first day of week is Sunday
0,0,0,0,0,0,0,// now add a second value to the series...
0,0,0,0,0,0,0,// add a third time period
0,0,0,0,0,0,0,// now test with a single value in the series...
0,0,0,0,0,0,0,// try null zone
0,0,0,0,0,0,0,// first day of week is monday
0,0,0,0,0,0,0,// now remove series 2 from collection 1 to make them equal again
0,0,0,0,0,0,0,// newly created collections should be equal
0,0,0,0,0,0,0,// now add the same series to collection 2 to make them equal again...
0,0,0,0,0,0,0,// shapeVisible
0,0,0,0,0,0,0,// Make sure there's nothing left
0,0,0,0,0,0,0,// the moving average series has 7 items, the first three // days (11, 12, 13 August are skipped)
0,0,0,0,0,0,0,// look at lower and upper bounds...
0,0,0,0,0,0,0,// for efficiency, we just use the first, last and middle items to // compute a hashCode...
0,0,0,0,0,0,0,// now add another series
0,0,0,0,0,0,0,// and check the first series too...
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Second object // -------------------------------------------
0,0,0,0,0,0,0,// we clone the chart because presumably there can be some delay // between putting this instance on the system clipboard and // actually having the getTransferData() method called...
0,0,0,0,0,0,0,//if flag then change to log version of lowest value // to make range begin at a 10^n value:
0,0,0,0,0,0,0,// add an empty series
0,0,0,0,0,0,0,// add a series
0,0,0,0,0,0,0,//float midX = (float) (minX + (plotArea.getWidth() * getRotateX())); //float midY = (float) (minY + (plotArea.getHeight() * getRotateY()));
0,0,0,0,0,0,0,// call parent method // setup flag based on bounds values
0,0,0,0,0,0,0,// check for series key out of bounds
0,0,0,0,0,0,0,// after setting up all the subplots, the shared range axis may need // reconfiguring
0,0,0,0,0,0,0,// check that adding a series will overwrite the old series
0,0,0,0,0,0,0,// xHigh
0,0,0,0,0,0,0,// first check that a valid renaming works
0,0,0,0,0,0,0,// next, check that setting a duplicate key fails
0,0,0,0,0,0,0,// got the required exception
0,0,0,0,0,0,0,//negatives not allowed and upper bound between 0 & 1 //round up to nearest significant digit for bound: //get negative exponent:
0,0,0,0,0,0,0,// try an index out of bounds
0,0,0,0,0,0,0,// still 2
0,0,0,0,0,0,0,// check null key
0,0,0,0,0,0,0,// hasn't implemented RangeInfo, so we'll have to iterate...
0,0,0,0,0,0,0,// xLow
0,0,0,0,0,0,0,// yHigh
0,0,0,0,0,0,0,// yLow
0,0,0,0,0,0,0,//  Test that there are 6 X points and some specific values
0,0,0,0,0,0,0,// the series name should not  // change because "C" is already the key for the other series in the // collection
0,0,0,0,0,0,0,//  Remove series 1
0,0,0,0,0,0,0,// after adding a point to a series, check that there are now 7 // items in each series
0,0,0,0,0,0,0,//  Test that there are still 7 X points
0,0,0,0,0,0,0,// WITH AUTOPRUNING
0,0,0,0,0,0,0,//  Test that there are now 4 X points
0,0,0,0,0,0,0,// establish the coordinates of the top left corner of the drawing area
0,0,0,0,0,0,0,// 1 value pruned.
0,0,0,0,0,0,0,// WITHOUT AUTOPRUNING
0,0,0,0,0,0,0,// still 2.
0,0,0,0,0,0,0,// here we do a check to see if the user is installing the "Legacy" // theme, and reset the bar painters in that case...
0,0,0,0,0,0,0,// if the current stroke is not a BasicStroke then it is handled as // a special case
0,0,1,1,1,1,1,// FIXME: add setBaseItemLabelGenerator(CategoryItemLabelGenerator, //            boolean) ?
0,0,0,0,0,0,0,// text anchor
0,0,0,0,0,0,0,// milliseconds somewhere in 2006
0,0,0,0,0,0,0,// starts at back and wraps right around to the // back again
0,0,0,0,0,0,0,//  double range = this.domainAxis.getRange().getLength(); //  double scaledRange = range * percent; //  domainAxis.setAnchoredRange(scaledRange);
0,0,0,0,0,0,0,// the pie sections are arranged ANTICLOCKWISE
0,0,0,0,0,0,0,// if this cell held a maximum and/or minimum value, we'll need to // update the cached bounds...
0,0,0,0,0,0,0,// handle a special case - if the bar colour has alpha == 0, it is // invisible so we shouldn't draw any shadow
0,0,0,0,0,0,0,// For the case were the first tick is greater // than minZ
0,0,0,0,0,0,0,// retrieve an item
0,0,0,0,0,0,0,// key
0,0,0,0,0,0,0,// if we are drawing a perfect circle, we need to readjust the top left // coordinates of the drawing area for the arcs to arrive at this // effect.
0,0,0,0,0,0,0,// draw the sections at the top of the pie (and set up tooltips)...
0,0,0,0,0,0,0,/////////////////////////////////////////////////////////////////////////// // From HighLowDataset ///////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// deregister the collection as a change listener to each series in // the collection.
0,0,0,0,0,0,0,// average radius // outlier radius
0,0,0,0,0,0,0,// These are deliberately not bounded to minimums/maxCandleWidth to //  retain old behaviour.
0,0,0,0,0,0,0,// errorPaint
0,0,0,0,0,0,0,// positive paint
0,0,0,0,0,0,0,// the first initialization must precede creation of the ValueSet array: // establishes length of each array
0,0,0,0,0,0,0,// starts at the back and finishes at the front // (wrapping the left side)
0,0,0,0,0,0,0,// if the 'notify' flag has been switched to false, we don't notify // the listeners
0,0,0,0,0,0,0,// errorStroke
0,0,1,1,1,1,1,// FIXME: add setSeriesToolTipGenerator(int, CategoryToolTipGenerator, //            boolean) ?
0,0,0,0,0,0,0,/* shape outlined = */
0,0,0,0,0,0,0,// the intersect is at the next point for both the minuend // and subtrahend
0,0,0,0,0,0,0,// draw outliers // outlier radius
0,0,0,0,0,0,0,// coordinate pairs // current minuend point // next minuend point // current subtrahend point // next subtrahend point
0,0,0,0,0,0,0,// map
0,0,0,0,0,0,0,// Check if the item is the last item for the series and number of // items > 0.  We can't draw an area for a single point.
0,0,0,0,0,0,0,// the bounds should be calculated using just the items within // the current range of the x-axis...if there is one
0,0,0,0,0,0,0,//if less than 1.0 then make it 1.0 //add in margin and get exponential value:
0,0,0,0,0,0,0,// labelLinkPaint
0,0,0,0,0,0,0,// paintList
0,0,0,0,0,0,0,// calculate plotAreas of all sub-plots, maximum vertical/horizontal // axis width/height
0,0,0,0,0,0,0,// OPTIONAL CUSTOMISATION COMPLETED.
0,0,0,0,0,0,0,//// ITEM LABEL PAINT  /////////////////////////////////////////////////////
0,0,0,0,0,0,0,// itemLabelGenerator
0,0,0,0,0,0,0,// create the new color and set it to the // SwtPaintCanvas
0,0,0,0,0,0,0,// seriesOutlineStroke
0,0,0,0,0,0,0,//private boolean autoTickUnitSelection;
0,0,0,0,0,0,0,// is there an override?
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // test exception segments //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// quadrant origin
0,0,0,0,0,0,0,// now check that all datasets, renderers and axes are being listened // too...
0,0,0,0,0,0,0,// background paint
0,0,0,0,0,0,0,// work out the mid angle (0 - 90 and 270 - 360) = right, // otherwise left
0,0,0,0,0,0,0,// these methods should throw an IndexOutOfBoundsException since the // column is too high...
0,0,0,0,0,0,0,// range markers
0,0,0,0,0,0,0,// regular equality for the datasets doesn't check the fields, just // the data values...so let's check some more things...
0,0,0,0,0,0,0,// after clearing, reverts to // default group
0,0,0,0,0,0,0,// nothing defined - do we autoPopulate?
0,0,0,0,0,0,0,// the dataset should prevent the addition of a series with the // same name as an existing series in the dataset
0,0,0,0,0,0,0,// null argument check delegated...
0,0,0,0,0,0,0,// the explode area defines the max circle/ellipse for the exploded // pie sections.  it is defined by shrinking the linkArea by the // linkMargin factor.
0,0,0,0,0,0,0,// secondary range markers
0,0,0,0,0,0,0,// delegate...
0,0,0,0,0,0,0,// rotationAnchor
0,0,0,0,0,0,0,// no axis, no gridlines...
0,0,0,0,0,0,0,// include legend // tooltips // urls
0,0,0,0,0,0,0,// rotationAngle
0,0,0,0,0,0,0,// can't zoom domain axis
0,0,0,0,0,0,0,// get the source coordinate - this plot has always a VERTICAL // orientation
0,0,0,0,0,0,0,// toolTipText
0,0,0,0,0,0,0,// the above should cover all the options...
0,0,0,0,0,0,0,// have to use a subclass of // AbstractRenderer
0,0,0,0,0,0,0,// test monday though friday timeline
0,0,0,0,0,0,0,// find first Monday after 2001-01-01
0,0,0,0,0,0,0,// no domain axis to zoom
0,0,0,0,0,0,0,// stroke index
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // test construction process //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// TBLRC // 00001 - center item only
0,0,0,0,0,0,0,// SERIES VISIBLE IN LEGEND (not yet respected by all renderers)
0,0,0,0,0,0,0,// expandToFitSpace
0,0,0,0,0,0,0,// category 1
0,0,0,0,0,0,0,// PAINT
0,0,0,0,0,0,0,// STROKE
0,0,0,0,0,0,0,// basePaint
0,0,0,0,0,0,0,// category 2
0,0,0,0,0,0,0,// value 2
0,0,1,1,1,1,1,// FIXME: calculate xx0
0,0,0,0,0,0,0,// LEFT POLYGON
0,0,0,0,0,0,0,// y date format
0,0,0,0,0,0,0,// margin
0,0,0,0,0,0,0,// current data point...
0,0,0,0,0,0,0,// clip left and right bounds to data area
0,0,0,0,0,0,0,// z date format
0,0,0,0,0,0,0,// domain description
0,0,0,0,0,0,0,// calculate bar width...
0,0,0,0,0,0,0,// the indicator bounds is calculated from the templateValue (which // determines the minimum size), the maxTemplateValue (which, if // specified, provides a maximum size) and the actual value
0,0,0,0,0,0,0,// chart title // data // include legend
0,0,0,0,0,0,0,// get a reference to the plot for further customisation...
0,0,0,0,0,0,0,////////////////////////////////////////////////////////////////////////// // test timeline translations //////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// shapesVisible
0,0,0,0,0,0,0,// handle zoom box
0,0,0,0,0,0,0,// ok, exception is expected
0,0,0,0,0,0,0,// do nothing, override if necessary
0,0,0,0,0,0,0,//private boolean autoRangeStickyZero;
0,0,0,0,0,0,0,// majorTickIncrement // majorTickLength // majorTickPaint // majorTickStroke // minorTickCount // minorTickLength // minorTickPaint // minorTickStroke // tickLabelOffset // tickLabelFont // tickLabelsVisible // tickLabelFormatter // firstTickLabelsVisible
0,0,0,0,0,0,0,"/* (non-Javadoc)     * @see org.eclipse.swt.events.FocusListener#focusLost(     * org.eclipse.swt.events.FocusEvent)     */"
0,0,0,0,0,0,0,"/* (non-Javadoc)     * @see org.eclipse.swt.events.FocusListener#focusGained(     * org.eclipse.swt.events.FocusEvent)     */"
0,0,0,0,0,0,0,// ignoreZeroValues
0,0,0,0,0,0,0,// open
0,0,0,0,0,0,0,// new entity code
0,0,0,0,0,0,0,// disable bar outlines...
0,0,0,1,1,1,1,//TODO private boolean fillZoomRectangle = true;
0,0,0,0,0,0,0,// start new row
0,0,0,0,0,0,0,// width is OK, but height must be constrained
0,0,0,0,0,0,0,// start new column
0,0,0,0,0,0,0,/* x-axis label*/
0,0,0,0,0,0,0,// use gradients and white borders for the section colours
0,0,0,0,0,0,0,// DEPRECATED FIELDS AND METHODS...
0,0,0,0,0,0,0,// swap rows and columns to match plotArea shape
0,0,0,0,0,0,0,// draw the markers...
0,0,0,0,0,0,0,// super.setSeriesPaint(series, paint);
0,0,0,0,0,0,0,// add the insets
0,0,0,0,0,0,0,// for data in ascending order by x-value, we are (broadly) looking // for the index of the highest x-value that is less than xLow
0,0,0,0,0,0,0,// subtitle 1 is the legend
0,0,0,0,0,0,0,// BAR Y
0,0,0,0,0,0,0,// calculate the maximum allowed candle width from the axis...
0,0,0,0,0,0,0,// draw the outline...
0,0,0,0,0,0,0,// check that a legend item needs to be displayed...
0,0,0,0,0,0,0,// work out the label anchor point...
0,0,0,0,0,0,0,// higlight the background corners...
0,0,0,0,0,0,0,// fast-forward through leading tails
0,0,0,0,0,0,0,// get the x and y coordinates
0,0,0,0,0,0,0,// itemLabelFontList // baseItemLabelFont // itemLabelPaintList // baseItemLabelPaint // positiveItemLabelPositionList // basePositiveItemLabelPosition // negativeItemLabelPositionList // baseNegativeItemLabelPosition // itemLabelAnchorOffset // createEntityList // baseCreateEntities
0,0,0,0,0,0,0,// here we check that the average marker will in fact be visible // before drawing it...
0,0,0,0,0,0,0,// check that minItem limit is observed
0,0,0,0,0,0,0,//assert itemIndex >= 0 && itemIndex < getItemCount();
0,0,0,0,0,0,0,// skip if chart is null
0,0,0,0,0,0,0,//SwtGraphics2D sg2 = new SwtGraphics2D(e.gc);
0,0,0,0,0,0,0,// AXIS 2
0,0,0,0,0,0,0,// for value in bounds, do the lookup...
0,0,0,0,0,0,0,// shapeFilled
0,0,0,0,0,0,0,// domainAxis - no longer a separate field but test anyway...
0,0,0,0,0,0,0,//itemLabelPaint;
0,0,0,0,0,0,0,// separatorStroke
0,0,0,0,0,0,0,// sectionDepth
0,0,0,0,0,0,0,// we don't know anything about the ordering of the x-values, // but we can still skip any trailing values that fall outside the // range...
0,0,0,0,0,0,0,// rangeAxis - no longer a separate field but test anyway...
0,0,0,0,0,0,0,//extraLargeFont
0,0,0,0,0,0,0,// renderer - no longer a separate field but test anyway...
0,0,0,0,0,0,0,// leave the y values (y1, y0) untranslated as it is going to be be // stacked up later by previous series values, after this it will be // translated.
0,0,0,0,0,0,0,//largeFont
0,0,0,0,0,0,0,// set up the series names...
0,0,0,0,0,0,0,//regularFont;
0,0,0,0,0,0,0,// there should be no change event when clearing an empty series
0,0,0,0,0,0,0,//titlePaint;
0,0,0,0,0,0,0,// clean up
0,0,0,0,0,0,0,// anchorValue
0,0,0,0,0,0,0,// tick marks visible flag...
0,0,0,0,0,0,0,// TBLRC // 01111
0,0,0,0,0,0,0,// tick label font...
0,0,0,0,0,0,0,// anti-aliasing
0,0,0,0,0,0,0,// rangeCrosshairPaint
0,0,0,0,0,0,0,// draw outliers
0,0,1,1,1,1,1,// FIXME: add setBasePaint(int, Paint, boolean)?
0,0,0,0,0,0,0,// ITEM URL GENERATOR
0,0,0,0,0,0,0,/* BufferedImage img =*/
0,0,0,0,0,0,0,//SerialUtilities.writeImage(this.image, stream);
0,0,0,0,0,0,0,// process all renderers
0,0,0,0,0,0,0,// reserve space for the primary domain axis...
0,0,0,0,0,0,0,// draw the bottom circle
0,0,0,0,0,0,0,// range markers - no longer separate fields but test anyway...
0,0,0,0,0,0,0,// set a custom background for the chart
0,0,0,0,0,0,0,// process all range axes
0,0,0,0,0,0,0,/* line visible */
0,0,0,0,0,0,0,/* shape outlined */
0,0,0,0,0,0,0,/* line visible = */
0,0,0,0,0,0,0,//subtitlePaint;
0,0,0,0,0,0,0,// calculate the bar width
0,0,0,0,0,0,0,// -------------------------- // --- ChartPanel Methods --- // --------------------------
0,0,0,0,0,0,0,// ------------------------ // --- Member Variables --- // ------------------------
0,0,0,0,0,0,0,// ----------------- // --- Constants --- // -----------------
0,0,0,0,0,0,0,// process all domain axes
0,0,0,0,0,0,0,// Cycle when necessary
0,0,0,0,0,0,0,// wait till we are at the last item for the row then draw the // whole stack at once
0,0,0,0,0,0,0,// ---------------------- // --- Public Methods --- // ----------------------
0,0,0,0,0,0,0,// do nothing at all
0,0,0,0,0,0,0,// add the chart title, if one has been specified...
0,0,0,0,0,0,0,// by default the outline and background won't be visible
0,0,0,0,0,0,0,// process all annotations
0,0,0,0,0,0,0,"/* in the next zoomPoint.x and y replace by e.x and y for now.         * this helps to handle the mouse events and besides,         * those values are unused AFAIK. */"
0,0,0,0,0,0,0,// LineRenderer3D
0,0,0,0,0,0,0,// BarRenderer3D
0,0,0,0,0,0,0,// this fires a ChartChangeEvent
0,0,0,0,0,0,0,// added the following hint because of  // http://stackoverflow.com/questions/7785082/
0,0,0,0,0,0,0,// clear the section attributes so that the theme's DrawingSupplier // will be used
0,0,0,0,0,0,0,// if the flag is being set to true, there may be queued up changes...
0,0,0,0,0,0,0,// draw the title and subtitles...
0,0,0,0,0,0,0,// ensure no drawing occurs outside chart area...
0,0,0,0,0,0,0,// handle GradientPaint as a special case
0,0,0,0,0,0,0,// do not notify while zooming each axis
0,0,0,0,0,0,0,// private boolean borderVisible; // private transient Stroke borderStroke; // private transient Paint borderPaint;
0,0,0,0,0,0,0,// this generates the change event too
0,0,0,0,0,0,0,// use ImageIcon because it waits for the image to load...
0,0,0,0,0,0,0,// load only when required
0,0,0,0,0,0,0,// seem to be the same
0,0,1,1,1,1,1,// FIXME //this.image = SerialUtilities.readImage(stream);
0,0,0,0,0,0,0,// if we don't have at least 2 (x, y) coordinates, just return
0,0,1,1,1,1,1,// FIXME //SerialUtilities.writeImage(this.image, stream);
0,0,0,0,0,0,0,// return a new chart containing the overlaid plot...
0,0,0,0,0,0,0,//this.image = SerialUtilities.readImage(stream);
0,0,0,0,0,0,0,// add a second dataset and renderer...
0,0,0,0,0,0,0,// create plot ...
0,0,0,0,0,0,0,//  create transform & transform shape
0,0,0,0,0,0,0,// compute transform matrix elements via sample points. Assume no // rotation or shear.
0,0,0,0,0,0,0,// when zooming to sub-millisecond ranges, it can be the case that // adjEnd == adjStart...and we can't have an axis with zero length // so we apply this instead:
0,0,0,0,0,0,0,// baseCreateEntities;
0,0,0,0,0,0,0,//for each power of 10 value; create ten ticks
0,0,0,0,0,0,0,// handle axis trace
0,0,0,0,0,0,0,// AXIS 4
0,0,0,0,0,0,0,// or redrawing the chart every time...
0,0,0,0,0,0,0,// regular number axis
0,0,0,0,0,0,0,// what is the available space for one unit?
0,0,0,0,0,0,0,// all tick labels have the same width (equal to the height of the // font)...
0,0,0,0,0,0,0,// there are no more candidates
0,0,0,0,0,0,0,// It's up to the plot which clones up to restore the correct references
0,0,0,0,0,0,0,// if the axis has a fixed dimension, return it...
0,0,0,0,0,0,0,// displayStart > displayEnd, need to handle split
0,0,0,0,0,0,0,// no plot, no data.
0,0,0,0,0,0,0,//negative values not allowed
0,0,0,0,0,0,0,//get log10 version of upper bound and round to integer:
0,0,0,0,0,0,0,// is the category valid?
0,0,0,0,0,0,0,//setup number formatter obj
0,0,0,0,0,0,0,// add space for the outer tick labels, if any...
0,0,0,0,0,0,0,// this is the first period, but it is only partially visible // so check that the label will fit before displaying it...
0,0,0,0,0,0,0,// legendTextPaint
0,0,0,0,0,0,0,// work out the initial gap
0,0,0,0,0,0,0,// draw minor tick marks
0,0,0,0,0,0,0,// work out the trailing gap
0,0,0,0,0,0,0,// if autoRange is true, then the current range is irrelevant
0,0,0,0,0,0,0,// calculate the max size of the tick labels (if visible)...
0,0,0,0,0,0,0,// need to work out the space used by the tick labels... // so we can update the cursor...
0,0,0,0,0,0,0,//return value; negate if original value was negative:
0,0,0,0,0,0,0,//invert adjustLog10
0,0,0,0,0,0,0,//calculate ceil using negative value:
0,0,0,0,0,0,0,//negative values are allowed
0,0,0,0,0,0,0,//get lower bound value:
0,0,0,0,0,0,0,//parameter value is -10 > val < 10 //use as-is
0,0,0,0,0,0,0,// if < 10 then //increase so 0 translates to 0
0,0,0,0,0,0,0,//setup for "1e#"-style tick labels or regular // numeric tick labels, depending on flag:
0,0,0,0,0,0,0,//calculate floor using negative value:
0,0,0,0,0,0,0,//setup flag based on bounds values
0,0,0,0,0,0,0,//no real data present
0,0,0,0,0,0,0,//need to account for case where upper==0.0
0,0,0,0,0,0,0,//actual data is present //get lower bound value
0,0,0,0,0,0,0,//apply lower margin by decreasing lower bound:
0,0,0,0,0,0,0,//strict flag set, allow-negatives not set and values <= 0
0,0,0,0,0,0,0,//not small log values in use; allow for values <= 0 //if did zero tick last iter then
0,0,0,0,0,0,0,//no tick label to be shown
0,0,0,0,0,0,0,//create tick label (force use of fmt obj):
0,0,0,0,0,0,0,//create tick label:
0,0,0,0,0,0,0,//for each tick to be displayed
0,0,0,0,0,0,0,//if autorange still below minimum then adjust by 1% // (can be needed when minRange is very small):
0,0,0,0,0,0,0,//not "1e#"-type label // if positive exponent then // make integer
0,0,1,0,0,0,0,//not "log10"-type label
0,0,0,0,0,0,0,//tick value is 1.0 and 0.0 is within data range //set tick value to zero //indicate zero tick
0,0,0,0,0,0,0,//small log values in use
0,0,0,0,0,0,0,// did not do zero tick last iteration
0,0,0,0,0,0,0,//not small log values in use; allow for values <= 0 //if did zero tick last iter then //decrement to do 1.0 tick now //calculate power-of-ten value for tick:
0,0,0,0,0,0,0,//for each tick with a label to be displayed
0,0,0,0,0,0,0,//tick value not below lowest data value
0,0,0,0,0,0,0,// if past highest data value then exit // method
0,0,0,0,0,0,0,//negative exponent; create fractional value //set exact number of fractional digits to // be shown:
0,0,0,0,0,0,0,//if flag then //create "1e#"-type label
0,0,0,0,0,0,0,//get lower bound value
0,0,0,0,0,0,0,// ITEM_LABEL_PAINT
0,0,0,0,0,0,0,//create "1e#"-type label
0,0,0,0,0,0,0,// check the new minimum date relative to the current maximum date
0,0,0,0,0,0,0,//decrement to do 1.0 tick now
0,0,0,0,0,0,0,//first or last tick on graph or value is 1.0 //create label for tick:
0,0,0,0,0,0,0,//create "log10"-type label
0,0,0,0,0,0,0,// milliseconds
0,0,0,0,0,0,0,// not first tick of group //no label //make sure flag cleared
0,0,0,0,0,0,0,//create tick object and add to list:
0,0,0,0,0,0,0,//if past highest data value then exit method
0,0,0,0,0,0,0,// did zero tick last iteration //no label //clear flag
0,0,0,0,0,0,0,// date formatters
0,0,0,0,0,0,0,// usually the range will be a DateRange, but if it isn't do a // conversion...
0,0,0,0,0,0,0,//if flag then //create "log10"-type label
0,0,0,0,0,0,0,//using exponents or force-formatter flag is set // (convert 'E' to lower-case 'e'):
0,0,0,0,0,0,0,// check the new maximum date relative to the current minimum date
0,0,0,0,0,0,0,// get a locale-specific resource bundle...
0,0,0,0,0,0,0,// draw the chart background...
0,0,0,0,0,0,0,// then extrapolate...
0,0,0,0,0,0,0,// even though the axis is not visible, we need to refresh ticks in // case the grid is being drawn...
0,0,0,0,0,0,0,// days
0,0,0,0,0,0,0,// minutes
0,0,0,0,0,0,0,//Timeline hasn't method getStartTime()
0,0,0,0,0,0,0,// years
0,0,0,0,0,0,0,// months
0,0,0,0,0,0,0,// hours
0,0,0,0,0,0,0,// make final selection...
0,0,0,0,0,0,0,// could add a flag to make the following correction optional...
0,0,0,0,0,0,0,// 'tickMarkPosition' is immutable : no need to clone
0,0,0,0,0,0,0,// no action required.
0,0,0,0,0,0,0,// 'dateTickUnit' is immutable : no need to clone
0,0,0,0,0,0,0,// record the chart area, if info is requested...
0,0,0,0,0,0,0,// step down in size until the current size is too small or there are  // no more units
0,0,0,0,0,0,0,// now process the plot if there is one
0,0,0,0,0,0,0,// if there is no specific font, use the general one...
0,0,0,0,0,0,0,// if there is no specific paint, use the general one...
0,0,0,0,0,0,0,// nothing required
0,0,0,0,0,0,0,// find first excluded base segment starting fromDomainValue
0,0,0,0,0,0,0,// make a time zone with no DST for our Calendar calculations
0,0,0,0,0,0,0,//////////////////////////////////////////////////////////////////////////// // predetermined segments sizes ////////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,//////////////////////////////////////////////////////////////////////////// // static block ////////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,//////////////////////////////////////////////////////////////////////////// // other constants ////////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// move forward exceptionSegmentCount segments skipping // excluded segments
0,0,0,0,0,0,0,// last series, so we are ready to draw the min and max
0,0,0,0,0,0,0,//////////////////////////////////////////////////////////////////////////// // operations ////////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// verify that baseTimeline is compatible with us
0,0,0,0,0,0,0,// calculate the result as if no exceptions
0,0,0,0,0,0,0,// find all consecutive included segments
0,0,0,0,0,0,0,// adjust result for any exceptions in the result calculated
0,0,0,0,0,0,0,// skip exception or excluded segments we may fall on
0,0,0,0,0,0,0,// skip all whole exception segments in the range
0,0,0,0,0,0,0,// add the interval as an exception
0,0,0,0,0,0,0,// first check that autoPopulate==false works as expected
0,0,0,0,0,0,0,// long start = Math.max( //     fromSegment.getSegmentStart(), this.segmentStart // ); // long end = Math.min(toSegment.getSegmentEnd(), this.segmentEnd);
0,0,0,0,0,0,0,// cycle over all the base segments groups in the range
0,0,0,0,0,0,0,// cycle through all the segments contained in the base exclusion // area
0,0,0,0,0,0,0,// go to next base segment group
0,0,0,0,0,0,0,// If tick overlap when cycling, update last tick too
0,0,0,0,0,0,0,// calculate the adjusted data area taking into account the 3D effect...
0,0,0,0,0,0,0,// check if we need to collect chart entities from the container
0,0,0,0,0,0,0,// suppresses compiler warnings
0,0,0,0,0,0,0,// seriesOutlinePaint
0,0,0,0,0,0,0,// update, but dont draw tick marks (needed for stepped colors)
0,0,0,0,0,0,0,// inverted
0,0,0,0,0,0,0,// draw mean - SPECIAL AIMS REQUIREMENT...
0,0,0,0,0,0,0,// allow fixed thickness
0,0,0,0,0,0,0,// default make height of plotArea
0,0,0,0,0,0,0,// remember these values for next comparison
0,0,0,0,0,0,0,// transparent
0,0,0,0,0,0,0,// ensure that all the symbols are displayed
0,0,0,0,0,0,0,// catches null also
0,0,0,0,0,0,0,// this ensure that the grid bands will be displayed correctly.
0,0,0,0,0,0,0,// must be top or bottom
0,0,0,0,0,0,0,// From outlier array sort out which are outliers and put these into a // list If there are any farouts, set the flag on the // OutlierListCollection
0,0,0,0,0,0,0,// zap the buffer onto the canvas...
0,0,1,0,0,0,0,// avoid possible sun.dc.pr.PRException: endPath: bad path
0,0,0,0,0,0,0,// null is handled fine here...
0,0,0,0,0,0,0,// place in this row (truncated) anyway
0,0,0,0,0,0,0,// find optimum height, then map to range
0,0,0,0,0,0,0,//Block b = (Block) blocks.get(i);
0,0,0,0,0,0,0,// can safely ignore
0,0,0,0,0,0,0,// handle tool tips in a simple way
0,0,0,0,0,0,0,// find optimum width and map to range
0,0,0,0,0,0,0,// since the flow layout is relatively straightforward, no information // needs to be recorded here
0,0,0,0,0,0,0,// chart title // data // no legend // tooltips // no URL generation
0,0,0,0,0,0,0,// this default implementation will just fill the available // border space with a single color
0,0,0,0,0,0,0,// nothing to clear
0,0,0,0,0,0,0,// fixed width
0,0,0,0,0,0,0,// find optimum height and map to range
0,0,0,0,0,0,0,// if the area has zero height or width, we shouldn't draw anything
0,0,0,0,0,0,0,// check if initial polygon needs to be clipped
0,0,0,0,0,0,0,// place in this column (truncated) anyway
0,0,0,0,0,0,0,// autoRange
0,0,0,0,0,0,0,// customise the section label appearance
0,0,0,0,0,0,0,// pass to the super-class for handling
0,0,0,0,0,0,0,// add a subtitle giving the data source
0,0,0,0,0,0,0,// Insets values
0,0,0,0,0,0,0,// figure out what type of axis we have and instantiate the // appropriate panel
0,0,0,0,0,0,0,// create a panel for the settings...
0,0,0,0,0,0,0,// populate the deprecated fields
0,0,0,0,0,0,0,//      end fix by rfuller
0,0,0,0,0,0,0,// pass to super-class for handling
0,0,0,0,0,0,0,// update the deprecated field
0,0,0,0,0,0,0,//same as for ChartEntity!
0,0,0,0,0,0,0,// then the axis properties...
0,0,0,0,0,0,0,// check the deprecated fields
0,0,0,0,0,0,0,// update the deprecated fields
0,0,0,0,0,0,0,// try the parent plot
0,0,0,1,1,1,1,// FIXME
0,0,0,0,0,0,0,//      fix by rfuller
0,0,0,0,0,0,0,//dmo added //dmo added
0,0,0,0,0,0,0,// baseSeriesPaint
0,0,0,0,0,0,0,// record the plot area...
0,0,0,0,0,0,0,// title // x-axis label // y-axis label
0,0,0,0,0,0,0,// set the default stroke for all series
0,0,0,0,0,0,0,// does nothing unless overridden
0,0,0,0,0,0,0,// force a redraw
0,0,0,0,0,0,0,// the URL text should already have been escaped by the URL generator
0,0,0,0,0,0,0,//if we have been panning reset the cursor //unregister in any case
0,0,0,0,0,0,0,// the actual panning occurs later in the mouseDragged() method
0,0,0,0,0,0,0,/// we have rotation huston, please spin me
0,0,0,0,0,0,0,// no fields to test
0,0,0,0,0,0,0,// we expect the line to be vertical or horizontal // vertical
0,0,0,0,0,0,0,//int maxX = (int) (plotArea.getMaxX());
0,0,0,0,0,0,0,// isArrowAtTop
0,0,0,0,0,0,0,// horizontal
0,0,0,0,0,0,0,/// we have rotation houston, please spin me
0,0,0,0,0,0,0,// configure the range axis...
0,0,0,0,0,0,0,// draw the shared axis
0,0,0,0,0,0,0,// set the width and height of non-shared axis of all sub-plots
0,0,0,0,0,0,0,// calculate sub-plot area
0,0,0,0,0,0,0,// default preserves previous // behaviour
0,0,1,0,0,0,0,// the range axis is deserialized before the subplots, so its value // range is likely to be incorrect...
0,0,0,0,0,0,0,// the pie area defines the circle/ellipse for regular pie sections. // it is defined by shrinking the explodeArea by the explodeMargin // factor.
0,0,0,0,0,0,0,// draw all the charts
0,0,0,0,0,0,0,// the explode area defines the max circle/ellipse for the exploded pie // sections. // it is defined by shrinking the linkArea by the linkMargin factor.
0,0,0,0,0,0,0,// get the data source - return if null;
0,0,0,0,0,0,0,// this is a paint we don't recognise
0,0,0,0,0,0,0,// the link area defines the dog-leg point for the linking lines to // the labels
0,0,0,0,0,0,0,// if too any elements
0,0,0,0,0,0,0,// do nothing by default.
0,0,0,0,0,0,0,// if depth is negative don't draw anything
0,0,0,0,0,0,0,// and finishes at back
0,0,0,0,0,0,0,// the segment starts at the front, and wraps all // the way around // the back and finishes at the front again
0,0,0,0,0,0,0,// start at front
0,0,0,0,0,0,0,// draw the height
0,0,0,0,0,0,0,// for CLOCKWISE charts, the extent will be negative...
0,0,0,0,0,0,0,// cycle through again drawing only the sides at the front...
0,0,0,0,0,0,0,// segments wraps right around the back...
0,0,0,0,0,0,0,// segment starts at back
0,0,0,0,0,0,0,// and finishes at the front
0,0,0,0,0,0,0,// whole segment stays at the back
0,0,0,0,0,0,0,// segments starts at front and finishes at back...
0,0,0,0,0,0,0,// segment only occupies the front
0,0,0,0,0,0,0,//dmo //zero when the parameter is not set
0,0,0,0,0,0,0,// never updated the subtrahend if it is implied to be zero
0,0,0,0,0,0,0,// draw horizontal crosshair if required...
0,0,0,0,0,0,0,// draw vertical crosshair if required...
0,0,0,0,0,0,0,// ratio represents axis units
0,0,0,0,0,0,0,// ratio represents pixels
0,0,0,0,0,0,0,// draw the plot background...
0,0,0,0,0,0,0,// get the data points
0,0,0,0,0,0,0,// segment starts at the front
0,0,0,0,0,0,0,// just the horizontal axis...
0,0,0,0,0,0,0,// just the vertical axis...
0,0,0,0,0,0,0,// end of column
0,0,0,0,0,0,0,// the following relies on the fact that the intervals are immutable
0,0,0,0,0,0,0,// seriesPaintList
0,0,0,0,0,0,0,// this is a new column
0,0,0,0,0,0,0,// plot the data (unless the dataset is null)...
0,0,0,0,0,0,0,//Object oldValue = this.urlGenerator;
0,0,0,0,0,0,0,//Object oldValue = this.toolTipGenerator;
0,0,0,0,0,0,0,// draw the background
0,0,0,0,0,0,0,// can't find any difference
0,0,0,0,0,0,0,// intentionally blank
0,0,0,0,0,0,0,// set the anchor value for the range axis...
0,0,0,0,0,0,0,// make the link area a square if the pie chart is to be circular...
0,0,0,0,0,0,0,// send a dataset change event to self to trigger plot change event
0,0,0,0,0,0,0,// check if line segments are colinear
0,0,0,0,0,0,0,// delegate
0,0,0,0,0,0,0,// AXIS 3
0,0,0,0,0,0,0,//  range = this.rangeAxis.getRange().getLength(); //  scaledRange = range * percent; //   rangeAxis.setAnchoredRange(scaledRange);
0,0,0,0,0,0,0,// add a tooltip for the section...
0,0,0,0,0,0,0,// draw all the subplots
0,0,0,0,0,0,0,// the segment starts at the back (still extending // CLOCKWISE)
0,0,0,0,0,0,0,// override is only for documentation purposes
0,0,0,0,0,0,0,// y is minor
0,0,0,0,0,0,0,// if not, check if there is a stroke defined for the specified key
0,0,0,0,0,0,0,// draw the wafer
0,0,0,0,0,0,0,//get major dimension
0,0,0,0,0,0,0,// otherwise look up the paint table
0,0,0,0,0,0,0,//ellipse diameter is the minor dimension
0,0,0,0,0,0,0,//set upperLeft point // x is minor
0,0,0,0,0,0,0,// calculate and draw the notch // horizontal orientation is considered notch right // vertical orientation is considered notch down
0,0,0,0,0,0,0,//// SECTION PAINT ////////////////////////////////////////////////////////
0,0,0,0,0,0,0,//// SECTION OUTLINE STROKE ///////////////////////////////////////////////
0,0,0,0,0,0,0,// seriesPaint
0,0,0,0,0,0,0,// cycle through once drawing only the sides at the back...
0,0,0,0,0,0,0,// classify the keys according to which side the label will appear...
0,0,0,0,0,0,0,// clear the point vectors
0,0,0,0,0,0,0,// no range axis // no renderer
0,0,0,0,0,0,0,// draw the right labels...
0,0,0,0,0,0,0,// draw the labels...
0,0,0,0,0,0,0,// can't find any difference...
0,0,0,0,0,0,0,//hh * getInteriorGap();
0,0,0,0,0,0,0,// line not visible
0,0,0,0,0,0,0,// for a RadialGradientPaint we adjust the center and radius to match // the current pie segment...
0,0,0,0,0,0,0,// create the bounds for the inner arc
0,0,0,0,0,0,0,// set the anchor value for the vertical axis...
0,0,0,0,0,0,0,// after setting up all the subplots, the shared domain axis may need // reconfiguring
0,0,0,0,0,0,0,// delegate 'state' and 'source' argument checks...
0,0,0,0,0,0,0,// showValueLines
0,0,0,0,0,0,0,// column keys provide potential keys for individual pies
0,0,0,0,0,0,0,// update the section colors to match the global colors...
0,0,0,0,0,0,0,// calculate inner arc in reverse direction, for later // GeneralPath construction
0,0,0,0,0,0,0,// the columns variable is always >= rows
0,0,0,0,0,0,0,// add an entity for the pie section
0,0,0,0,0,0,0,// row keys provide potential keys for individual pies
0,0,1,1,0,1,1,"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. * Other names may be trademarks of their respective owners.] * * ----------------- * CategoryPlot.java * ----------------- * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Jeremy Bowman; *                   Arnaud Lelievre; *                   Richard West, Advanced Micro Devices, Inc.; *                   Ulrich Voigt - patch 2686040; *                   Peter Kolb - patches 2603321 and 2809117; * * Changes * ------- * 21-Jun-2001 : Removed redundant JFreeChart parameter from constructors (DG); * 21-Aug-2001 : Added standard header. Fixed DOS encoding problem (DG); * 18-Sep-2001 : Updated header (DG); * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG); * 22-Oct-2001 : Renamed DataSource.java --> Dataset.java etc. (DG); * 23-Oct-2001 : Changed intro and trail gaps on bar plots to use percentage of *               available space rather than a fixed number of units (DG); * 12-Dec-2001 : Changed constructors to protected (DG); * 13-Dec-2001 : Added tooltips (DG); * 16-Jan-2002 : Increased maximum intro and trail gap percents, plus added *               some argument checking code.  Thanks to Taoufik Romdhane for *               suggesting this (DG); * 05-Feb-2002 : Added accessor methods for the tooltip generator, incorporated *               alpha-transparency for Plot and subclasses (DG); * 06-Mar-2002 : Updated import statements (DG); * 14-Mar-2002 : Renamed BarPlot.java --> CategoryPlot.java, and changed code *               to use the CategoryItemRenderer interface (DG); * 22-Mar-2002 : Dropped the getCategories() method (DG); * 23-Apr-2002 : Moved the dataset from the JFreeChart class to the Plot *               class (DG); * 29-Apr-2002 : New methods to support printing values at the end of bars, *               contributed by Jeremy Bowman (DG); * 11-May-2002 : New methods for label visibility and overlaid plot support, *               contributed by Jeremy Bowman (DG); * 06-Jun-2002 : Removed the tooltip generator, this is now stored with the *               renderer.  Moved constants into the CategoryPlotConstants *               interface.  Updated Javadoc comments (DG); * 10-Jun-2002 : Overridden datasetChanged() method to update the upper and *               lower bound on the range axis (if necessary), updated *               Javadocs (DG); * 25-Jun-2002 : Removed redundant imports (DG); * 20-Aug-2002 : Changed the constructor for Marker (DG); * 28-Aug-2002 : Added listener notification to setDomainAxis() and *               setRangeAxis() (DG); * 23-Sep-2002 : Added getLegendItems() method and fixed errors reported by *               Checkstyle (DG); * 28-Oct-2002 : Changes to the CategoryDataset interface (DG); * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG); * 07-Nov-2002 : Renamed labelXXX as valueLabelXXX (DG); * 18-Nov-2002 : Added grid settings for both domain and range axis (previously *               these were set in the axes) (DG); * 19-Nov-2002 : Added axis location parameters to constructor (DG); * 17-Jan-2003 : Moved to com.jrefinery.chart.plot package (DG); * 14-Feb-2003 : Fixed bug in auto-range calculation for secondary axis (DG); * 26-Mar-2003 : Implemented Serializable (DG); * 02-May-2003 : Moved render() method up from subclasses. Added secondary *               range markers. Added an attribute to control the dataset *               rendering order.  Added a drawAnnotations() method.  Changed *               the axis location from an int to an AxisLocation (DG); * 07-May-2003 : Merged HorizontalCategoryPlot and VerticalCategoryPlot into *               this class (DG); * 02-Jun-2003 : Removed check for range axis compatibility (DG); * 04-Jul-2003 : Added a domain gridline position attribute (DG); * 21-Jul-2003 : Moved DrawingSupplier to Plot superclass (DG); * 19-Aug-2003 : Added equals() method and implemented Cloneable (DG); * 01-Sep-2003 : Fixed bug 797466 (no change event when secondary dataset *               changes) (DG); * 02-Sep-2003 : Fixed bug 795209 (wrong dataset checked in render2 method) and *               790407 (initialise method) (DG); * 08-Sep-2003 : Added internationalization via use of properties *               resourceBundle (RFE 690236) (AL); * 08-Sep-2003 : Fixed bug (wrong secondary range axis being used).  Changed *               ValueAxis API (DG); * 10-Sep-2003 : Fixed bug in setRangeAxis() method (DG); * 15-Sep-2003 : Fixed two bugs in serialization, implemented *               PublicCloneable (DG); * 23-Oct-2003 : Added event notification for changes to renderer (DG); * 26-Nov-2003 : Fixed bug (849645) in clearRangeMarkers() method (DG); * 03-Dec-2003 : Modified draw method to accept anchor (DG); * 21-Jan-2004 : Update for renamed method in ValueAxis (DG); * 10-Mar-2004 : Fixed bug in axis range calculation when secondary renderer is *               stacked (DG); * 12-May-2004 : Added fixed legend items (DG); * 19-May-2004 : Added check for null legend item from renderer (DG); * 02-Jun-2004 : Updated the DatasetRenderingOrder class (DG); * 05-Nov-2004 : Renamed getDatasetsMappedToRangeAxis() *               --> datasetsMappedToRangeAxis(), and ensured that returned *               list doesn't contain null datasets (DG); * 12-Nov-2004 : Implemented new Zoomable interface (DG); * 07-Jan-2005 : Renamed getRangeExtent() --> findRangeBounds() in *               CategoryItemRenderer (DG); * 04-May-2005 : Fixed serialization of range markers (DG); * 05-May-2005 : Updated draw() method parameters (DG); * 20-May-2005 : Added setDomainAxes() and setRangeAxes() methods, as per *               RFE 1183100 (DG); * 01-Jun-2005 : Upon deserialization, register plot as a listener with its *               axes, dataset(s) and renderer(s) - see patch 1209475 (DG); * 02-Jun-2005 : Added support for domain markers (DG); * 06-Jun-2005 : Fixed equals() method for use with GradientPaint (DG); * 09-Jun-2005 : Added setRenderers(), as per RFE 1183100 (DG); * 16-Jun-2005 : Added getDomainAxisCount() and getRangeAxisCount() methods, to *               match XYPlot (see RFE 1220495) (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 11-Jan-2006 : Added configureRangeAxes() to rendererChanged(), since the *               renderer might influence the axis range (DG); * 27-Jan-2006 : Added various null argument checks (DG); * 18-Aug-2006 : Added getDatasetCount() method, plus a fix for bug drawing *               category labels, thanks to Adriaan Joubert (1277726) (DG); * 05-Sep-2006 : Added MarkerChangeEvent support (DG); * 30-Oct-2006 : Added getDomainAxisIndex(), datasetsMappedToDomainAxis() and *               getCategoriesForAxis() methods (DG); * 22-Nov-2006 : Fire PlotChangeEvent from setColumnRenderingOrder() and *               setRowRenderingOrder() (DG); * 29-Nov-2006 : Fix for bug 1605207 (IntervalMarker exceeds bounds of data *               area) (DG); * 26-Feb-2007 : Fix for bug 1669218 (setDomainAxisLocation() notify argument *               ignored) (DG); * 13-Mar-2007 : Added null argument checks for setRangeCrosshairPaint() and *               setRangeCrosshairStroke(), fixed clipping for *               annotations (DG); * 07-Jun-2007 : Override drawBackground() for new GradientPaint handling (DG); * 10-Jul-2007 : Added getRangeAxisIndex(ValueAxis) method (DG); * 24-Sep-2007 : Implemented new zoom methods (DG); * 25-Oct-2007 : Added some argument checks (DG); * 05-Nov-2007 : Applied patch 1823697, by Richard West, for removal of domain *               and range markers (DG); * 14-Nov-2007 : Added missing event notifications (DG); * 25-Mar-2008 : Added new methods with optional notification - see patch *               1913751 (DG); * 07-Apr-2008 : Fixed NPE in removeDomainMarker() and *               removeRangeMarker() (DG); * 23-Apr-2008 : Fixed equals() and clone() methods (DG); * 26-Jun-2008 : Fixed crosshair support (DG); * 10-Jul-2008 : Fixed outline visibility for 3D renderers (DG); * 12-Aug-2008 : Added rendererCount() method (DG); * 25-Nov-2008 : Added facility to map datasets to multiples axes (DG); * 15-Dec-2008 : Cleaned up grid drawing methods (DG); * 18-Dec-2008 : Use ResourceBundleWrapper - see patch 1607918 by *               Jess Thrysoee (DG); * 21-Jan-2009 : Added rangeMinorGridlinesVisible flag (DG); * 18-Mar-2009 : Modified anchored zoom behaviour (DG); * 19-Mar-2009 : Implemented Pannable interface - see patch 2686040 (DG); * 19-Mar-2009 : Added entity support - see patch 2603321 by Peter Kolb (DG); * 24-Jun-2009 : Implemented AnnotationChangeListener (see patch 2809117 by *               PK) (DG); * 06-Jul-2009 : Fix for cloning of renderers - see bug 2817504 (DG) * 10-Jul-2009 : Added optional drop shadow generator (DG); * 27-Sep-2011 : Fixed annotation import (DG); * 18-Oct-2011 : Fixed tooltip offset with shadow generator (DG); * 20-Nov-2011 : Initialise shadow generator as null (DG); * 02-Jul-2013 : Use ParamChecks (DG); * 12-Sep-2013 : Check for KEY_SUPPRESS_SHADOW_GENERATION rendering hint (DG); * 10-Mar-2014 : Updated Javadocs for issue #1123 (DG); * 09-Apr-2014 : Remove use of ObjectList (DG); *  */"
0,0,0,0,0,0,0,// allocate storage for dataset, axes and renderers
0,0,0,0,0,0,0,//// ITEM LABELS VISIBLE //////////////////////////////////////////////////
0,0,0,0,0,0,0,//// SERIES PAINT /////////////////////////
0,0,0,0,0,0,0,// add the unique categories from this dataset
0,0,0,0,0,0,0,// don't let anyone draw outside the data area
0,0,0,0,0,0,0,// the first axis in the list is used for data <--> Java2D
0,0,0,0,0,0,0,// reserve space for any domain axes...
0,0,0,0,0,0,0,// get the legend items for the datasets...
0,0,0,0,0,0,0,// if there is a renderer, it draws the background, otherwise use the // default background...
0,0,0,0,0,0,0,// specify the anchor X and Y coordinates in Java2D space, for the // cases where these are not updated during rendering (i.e. no lock // on data)
0,0,0,0,0,0,0,// reserve some space for the range axis...
0,0,0,0,0,0,0,// add domain axes to lists...
0,0,0,0,0,0,0,// now render data items...
0,0,0,0,0,0,0,// set up the alpha-transparency...
0,0,0,0,0,0,0,// draw an outline around the plot area...
0,0,0,0,0,0,0,// draw the foreground markers...
0,0,0,0,0,0,0,// grab the plot's annotations
0,0,0,0,0,0,0,// iterate through the datasets that map to the axis and get the union // of the ranges.
0,0,0,0,0,0,0,// draw the bottom axes
0,0,0,0,0,0,0,// draw the left axes
0,0,0,0,0,0,0,// add range axes to lists...
0,0,0,0,0,0,0,// draw the right axes
0,0,0,0,0,0,0,// now check that the chart is usable...
0,0,0,0,0,0,0,// do nothing, because the plot is not pannable along the domain axes
0,0,0,0,0,0,0,// provides a 'no action' default
0,0,1,0,0,0,0,// draw the range grid lines, if any...
0,0,0,0,0,0,0,// stroke sequence
0,0,0,0,0,0,0,// AxisLocation is immutable, so we can just copy the maps
0,0,0,0,0,0,0,// some subclasses override this method completely, so don't put // anything here that *must* be done
0,0,0,0,0,0,0,// delegate to other method
0,0,0,0,0,0,0,// not currently serialized
0,0,0,0,0,0,0,// headPercent
0,0,0,0,0,0,0,// square
0,0,0,0,0,0,0,// check null argument...
0,0,0,0,0,0,0,// we don't need the sign
0,0,0,0,0,0,0,// baseSectionPaint
0,0,0,0,0,0,0,// the datasets are not cloned, but listeners need to be added...
0,0,0,0,0,0,0,// fillType == TO_UPPER_BOUND
0,0,0,0,0,0,0,// normalize angle
0,0,0,0,0,0,0,// draw the radius grid lines, if any...
0,0,0,0,0,0,0,// now for each dataset, get the renderer and the appropriate axis // and render the dataset...
0,0,0,1,0,1,1,"/*      solve linear system with tridiagonal n by n matrix a        using Gaussian elimination *without* pivoting        where   a(i,i-1) = sub[i]  for 2<=i<=n        a(i,i)   = diag[i] for 1<=i<=n        a(i,i+1) = sup[i]  for 1<=i<=n-1        (the values sub[1], sup[n] are ignored)        right hand side vector b[1:n] is overwritten with solution        NOTE: 1...n is used in all arrays, 0 is unused */"
0,0,0,0,0,0,0,// horizontal ellipse
0,0,0,0,0,0,0,// horizontal rectangle
0,0,0,0,0,0,0,// up-pointing triangle
0,0,0,0,0,0,0,// right-pointing triangle
0,0,0,0,0,0,0,// this represents the situation // for drawing a horizontal bar.
0,0,0,0,0,0,0,// left-pointing triangle
0,0,0,0,0,0,0,// vertical rectangle
0,0,0,0,0,0,0,// otherwise look up the paint list
0,0,0,0,0,0,0,// draw the polygon series...
0,0,0,0,0,0,0,// verify independence of fixed legend item collection
0,0,0,0,0,0,0,//// SERIES OUTLINE STROKE /////////////////////
0,0,0,0,0,0,0,// draw the axis and category label
0,0,0,0,0,0,0,// plot the data...
0,0,0,0,0,0,0,// Now actually plot each of the series polygons..
0,0,0,0,0,0,0,// 1 = end of axis
0,0,0,0,0,0,0,// find the point at the appropriate distance end point // along the axis/angle identified above and add it to the // polygon
0,0,0,0,0,0,0,/* shapeFilled=*/
0,0,0,0,0,0,0,// Finds our starting angle from the centre for this axis
0,0,0,0,0,0,0,// down-pointing triangle
0,0,0,0,0,0,0,// circle
0,0,0,0,0,0,0,// diamond
0,0,0,0,0,0,0,//  Check that the graph being served was created by the current user //  or that it begins with "public"
0,0,0,0,0,0,0,// set the anchor value for the horizontal axis...
0,0,0,0,0,0,0,// Plot the polygon
0,0,0,0,0,0,0,// draw range crosshair if required...
0,0,0,0,0,0,0,// put an elipse at the point being plotted..
0,0,0,0,0,0,0,// pass mouse down event if some ChartMouseListener are listening
0,0,0,0,0,0,0,// reserve space for the domain axes...
0,0,0,0,0,0,0,// allocate storage for datasets, axes and renderers (all optional)
0,0,0,0,0,0,0,//          negatives = true;
0,0,0,0,0,0,0,// if series are in rows, then the categories are the column keys
0,0,0,0,0,0,0,// Lastly, fill the web polygon if this is required
0,0,0,0,0,0,0,//  value = Math.pow(10,value);
0,0,0,0,0,0,0,// clone share data sets => add the clone as listener to the dataset
0,0,0,0,0,0,0,// no zooming possible
0,0,0,0,0,0,0,//  izV = steps*numSteps*(int)((value/minZ)/(maxZlog-minZlog)) + 2;
0,0,0,0,0,0,0,// reserve space for the range axes...
0,0,0,0,0,0,0,// is it a domain axis?
0,0,0,0,0,0,0,//render series in forward order
0,0,0,0,0,0,0,// draw background annotations
0,0,0,0,0,0,0,/// Draw N, S, E, W
0,0,0,0,0,0,0,//render series in reverse order
0,0,0,0,0,0,0,// draw foreground annotations
0,0,0,0,0,0,0,// render data items...
0,0,0,0,0,0,0,// no default renderer available
0,0,0,0,0,0,0,// we can't draw quadrants without a valid x-axis
0,0,0,0,0,0,0,// can't render anything without axes
0,0,0,0,0,0,0,// we can't draw quadrants without a valid y-axis
0,0,0,0,0,0,0,// use the TextTitle class because it is a concrete subclass
0,0,0,0,0,0,0,// if the event was caused by a change to series visibility, then // the axis ranges might need updating...
0,0,0,0,0,0,0,// we don't clone the listeners
0,0,0,0,0,0,0,/// Squares
0,0,0,0,0,0,0,// if there is an existing dataset, remove the plot from the list // of change listeners...
0,0,0,0,0,0,0,// draw the item shapes
0,0,0,0,0,0,0,// the textAlignment and the horizontalAlignment are separate things, // but it makes sense for the default textAlignment to match the // title's horizontal alignment...
0,0,0,0,0,0,0,// or is it a range axis?
0,0,0,0,0,0,0,// perform the zoom on each domain axis
0,0,0,0,0,0,0,// register the plot as a listener with its axes, datasets, and // renderers...
0,0,0,0,0,0,0,// lineVisible
0,0,0,0,0,0,0,//int transX = (int) (xx + ww * (x - domainMin) / domainLength); //int transY = (int) (yy - hh * (y - rangeMin) / rangeLength);
0,0,0,0,0,0,0,// we don't use the calendar or numberFormat fields, but equals(Object) // is failing without them being non-null
0,0,1,1,1,1,1,// images considered equal only if they're the SAME object // TODO: is there a way to do a better test?
0,0,0,0,0,0,0,//  draw units indicator
0,0,0,0,0,0,0,// already calculated // already calculated
0,0,0,0,0,0,0,// plot is registered as a listener with the existing axis...
0,0,0,0,0,0,0,// draw the cap if there is one...
0,0,0,0,0,0,0,// draw text value on screen
0,0,0,0,0,0,0,// draw start of normal range
0,0,0,0,0,0,0,//// FILL PAINT //////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// draw the axis...
0,0,0,0,0,0,0,// draw start of warning range
0,0,0,0,0,0,0,// draw start of critical range
0,0,0,0,0,0,0,// pieIndex...
0,0,0,0,0,0,0,// draw range indicators...
0,0,0,0,0,0,0,// draw thermometer outline
0,0,0,0,0,0,0,// draw the border
0,0,0,0,0,0,0,// draw the outline of the filled polygon
0,0,0,0,0,0,0,// calculate the bounds of the template value
0,0,0,0,0,0,0,/* lineVisible= */
0,0,0,0,0,0,0,// urlText
0,0,0,0,0,0,0,// now find the text anchor point
0,0,0,0,0,0,0,// adjust text bounds to match string position
0,0,0,0,0,0,0,// draw the pointers
0,0,0,0,0,0,0,// draw the background if there is one...
0,0,0,0,0,0,0,// first, expand the viewing area into a drawing frame
0,0,0,0,0,0,0,// now do the minor tick marks
0,0,0,0,0,0,0,// otherwise look up the stroke table
0,0,0,0,0,0,0,// now fetch the row data - need to bear in mind that the row // structure may not have an entry for the column key, but that we // have already checked that the key is valid for the 2D structure
0,0,0,0,0,0,0,// SERIES VISIBLE (not yet respected by all renderers)
0,0,0,0,0,0,0,// otherwise look up the position list
0,0,0,0,0,0,0,// OUTLINE PAINT //////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// otherwise look up the shape list
0,0,0,0,0,0,0,// otherwise look up the position table
0,0,0,0,0,0,0,//// ITEM LABEL FONT //////////////////////////////////////////////////////
0,0,0,0,0,0,0,//  Iterate and find all keys below threshold percentThreshold
0,0,0,0,0,0,0,// ITEM LABEL VISIBILITY...
0,0,0,0,0,0,0,// POSITIVE ITEM LABEL POSITION...
0,0,0,0,0,0,0,// otherwise look up the boolean table
0,0,0,0,0,0,0,//// ITEM LABEL PAINT  ////////////////////////////////////////////////////
0,0,0,0,0,0,0,// 'paint' : immutable, no need to clone reference
0,0,0,0,0,0,0,// NEGATIVE ITEM LABEL POSITION...
0,0,0,0,0,0,0,// 'baseStroke' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'outlinePaint' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'stroke' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'basePaint' : immutable, no need to clone reference
0,0,0,0,0,0,0,// skip any items that don't need including...
0,0,0,0,0,0,0,// 'baseItemLabelAnchor' : immutable, no need to clone reference
0,0,0,0,0,0,0,//create a temporary vector // set x to some arbitary value (used below)
0,0,0,0,0,0,0,// 'baseOutlineStroke' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'baseItemLabelFont' : immutable, no need to clone reference
0,0,0,0,0,0,0,// shapeList // baseShape
0,0,0,0,0,0,0,// in this case, every color has a unique value
0,0,0,0,0,0,0,// 'postiveItemLabelAnchor' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'itemLabelPaint' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'itemLabelFont' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'itemLabelsVisible' : immutable, no need to clone reference
0,0,0,0,0,0,0,// 'baseNegativeItemLabelAnchor' : immutable, no need to clone reference
0,0,0,0,0,0,0,// assign a color for each unique value
0,0,0,0,0,0,0,//System.err.print(" creating new outlier list ");
0,0,0,0,0,0,0,// === DEPRECATED CODE ===
0,0,0,0,0,0,0,// 'outlineStroke' : immutable, no need to clone reference
0,0,0,0,0,0,0,// listeners are not restored automatically, but storage must be // provided...
0,0,0,0,0,0,0,// handle special case where value is less that item zero
0,0,0,0,0,0,0,//// TOOL TIP GENERATOR ///////////////////////////////////////////////////
0,0,0,0,0,0,0,// special case where the highest x-value is < xLow
0,0,0,0,0,0,0,//// URL GENERATOR ////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// more values than paints so map // multiple values to the same color
0,0,0,0,0,0,0,// if there is no plot, there is no dataset to access...
0,0,0,0,0,0,0,// return the overall setting, if there is one...
0,0,0,0,0,0,0,// end class wafermaprenderer
0,0,0,0,0,0,0,// when the x-values are descending, the upper bound is found by // comparing against xLow
0,0,0,0,0,0,0,// handle negative value
0,0,1,1,1,1,1,// FIXME: calculate xxLeft and xxRight
0,0,0,0,0,0,0,// end foreach map entry // end else
0,0,0,0,0,0,0,// handle positive value
0,0,0,0,0,0,0,// RIGHT POLYGON
0,0,0,0,0,0,0,// SHAPES FILLED
0,0,0,0,0,0,0,// '+' because v is negative
0,0,0,0,0,0,0,// handle value outside bounds...
0,0,0,0,0,0,0,// handle rendering separately for the two plot orientations...
0,0,0,0,0,0,0,// look for any keys that we don't already know about...
0,0,0,0,0,0,0,// draw the blocks
0,0,1,1,0,1,1,// the commented out code would be better, but only if // RendererChangeEvent is immutable, which it isn't.  See if there is // a way to fix this...
0,0,0,0,0,0,0,// SHAPES VISIBLE
0,0,0,0,0,0,0,// contained titles
0,0,0,0,0,0,0,// preserves old behaviour
0,0,0,0,0,0,0,// LINES VISIBLE
0,0,0,0,0,0,0,// value 0
0,0,0,0,0,0,0,// nothing is drawn for null...
0,0,0,0,0,0,0,// put an outline around the data area...
0,0,0,0,0,0,0,// fetch the series, remove the change listener, then remove the series.
0,0,0,0,0,0,0,// do nothing if both the line and shape are not visible
0,0,0,0,0,0,0,// cases 5, 6, 7 and 8
0,0,0,0,0,0,0,// get the clipping values...
0,0,0,0,0,0,0,// set the default item label positions
0,0,0,0,0,0,0,// fill background...
0,0,0,0,0,0,0,// highlight the background corners...
0,0,0,0,0,0,0,// ITEM LABEL GENERATOR
0,0,0,0,0,0,0,// draw the bar...
0,0,0,0,0,0,0,// check the value we are plotting...
0,0,0,0,0,0,0,// the bar is not visible
0,0,0,0,0,0,0,// URL GENERATOR
0,0,0,0,0,0,0,// TOOL TIP GENERATOR
0,0,0,0,0,0,0,// defensive check
0,0,0,0,0,0,0,// no new methods
0,0,0,0,0,0,0,// now draw the outlines, if visible...
0,0,1,1,1,1,1,// FIXME: add setSeriesOutlineStroke(int, Stroke, boolean) ?
0,0,0,0,0,0,0,// cases 1, 2, 3 and 4
0,0,0,0,0,0,0,// handle special case of BoxAndWhiskerDataset
0,0,0,0,0,0,0,// let the superclass handle it...
0,0,0,0,0,0,0,// standard deviation lines
0,0,0,0,0,0,0,// cases 9, 10, 11 and 12
0,0,0,0,0,0,0,// draw background image, if there is one...
0,0,0,0,0,0,0,//ChartEditorManager.getChartEditor(canvas.getDisplay(), this.chart);
0,0,1,1,1,1,1,// FIXME: add setSeriesOutlinePaint(int, Paint, boolean)?
0,0,1,1,1,1,1,// FIXME: add setBaseItemLabelPaint(Paint, boolean) ?
0,0,0,0,0,0,0,// DRAW THE BARS...
0,0,0,0,0,0,0,// nothing is drawn for null values...
0,0,0,0,0,0,0,//plotBackgroundPaint;
0,0,0,0,0,0,0,// no fields to compute...
0,0,0,0,0,0,0,// 100 percent, so it will not apply unless changed
0,0,1,1,1,1,1,// FIXME: add setBaseOutlineStroke(Stroke, boolean) ?
0,0,0,0,0,0,0,// units
0,0,0,0,0,0,0,//// SHAPE /////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// remove old items if necessary, but // don't notify anyone, because that // happens next anyway...
0,0,0,0,0,0,0,// tick labels visible
0,0,0,0,0,0,0,// tick size
0,0,0,0,0,0,0,//standard deviation lines
0,0,0,0,0,0,0,// switch x and y
0,0,0,0,0,0,0,// upright bar
0,0,0,0,0,0,0,// extend x0's flat bar
0,0,0,0,0,0,0,// or: x0s + 2*(x0-x0s)
0,0,0,0,0,0,0,// or: x1s + 2*(x1-x1s)
0,0,0,0,0,0,0,// the clone and the original share a reference to the SAME dataset
0,0,0,0,0,0,0,//plotOutlinePaint;
0,0,0,0,0,0,0,//// OUTLINE PAINT /////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// x1's flat bar
0,0,1,1,1,1,1,// FIXME: add setSeriesShape(int, Shape, boolean) ?
0,0,0,0,0,0,0,// BAR WIDTH
0,0,0,0,0,0,0,//// PAINT /////////////////////////////////////////////////////////////////
0,0,0,1,0,1,1,"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2013, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ------------------------- * CategoryItemRenderer.java * ------------------------- * * (C) Copyright 2001-2011, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Mark Watson (www.markwatson.com); * * Changes * ------- * 23-Oct-2001 : Version 1 (DG); * 16-Jan-2002 : Renamed HorizontalCategoryItemRenderer.java *               --> CategoryItemRenderer.java (DG); * 05-Feb-2002 : Changed return type of the drawCategoryItem method from void *               to Shape, as part of the tooltips implementation (DG) * *               NOTE (30-May-2002) : this has subsequently been changed back *               to void, tooltips are now collected along with entities in *               ChartRenderingInfo (DG); * * 14-Mar-2002 : Added the initialise method, and changed all bar plots to use *               this renderer (DG); * 23-May-2002 : Added ChartRenderingInfo to the initialise method (DG); * 29-May-2002 : Added the getAxisArea(Rectangle2D) method (DG); * 06-Jun-2002 : Updated Javadoc comments (DG); * 26-Jun-2002 : Added range axis to the initialise method (DG); * 24-Sep-2002 : Added getLegendItem() method (DG); * 23-Oct-2002 : Added methods to get/setToolTipGenerator (DG); * 05-Nov-2002 : Replaced references to CategoryDataset with TableDataset (DG); * 06-Nov-2002 : Added the domain axis to the drawCategoryItem method.  Renamed *               drawCategoryItem() --> drawItem() (DG); * 20-Nov-2002 : Changed signature of drawItem() method to reflect use of *               TableDataset (DG); * 26-Nov-2002 : Replaced the isStacked() method with the getRangeType() *               method (DG); * 08-Jan-2003 : Changed getSeriesCount() --> getRowCount() and *               getCategoryCount() --> getColumnCount() (DG); * 09-Jan-2003 : Changed name of grid-line methods (DG); * 21-Jan-2003 : Merged TableDataset with CategoryDataset (DG); * 10-Apr-2003 : Changed CategoryDataset to KeyedValues2DDataset in *               drawItem() method (DG); * 29-Apr-2003 : Eliminated Renderer interface (DG); * 02-Sep-2003 : Fix for bug 790407 (DG); * 16-Sep-2003 : Changed ChartRenderingInfo --> PlotRenderingInfo (DG); * 20-Oct-2003 : Added setOutlinePaint() method (DG); * 06-Feb-2004 : Added missing methods, and moved deprecated methods (DG); * 19-Feb-2004 : Added extra setXXXLabelsVisible() methods (DG); * 29-Apr-2004 : Changed Integer --> int in initialise() method (DG); * 18-May-2004 : Added methods for item label paint (DG); * 05-Nov-2004 : Added getPassCount() method and 'pass' parameter to drawItem() *               method (DG); * 07-Jan-2005 : Renamed getRangeExtent() --> findRangeBounds (DG); * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG); * 23-Feb-2005 : Now extends LegendItemSource (DG); * 20-Apr-2005 : Renamed CategoryLabelGenerator *               --> CategoryItemLabelGenerator (DG); * 20-May-2005 : Added drawDomainMarker() method (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 20-Feb-2007 : Updated API docs (DG); * 19-Apr-2007 : Deprecated seriesVisible and seriesVisibleInLegend flags (DG); * 20-Apr-2007 : Deprecated paint, fillPaint, outlinePaint, stroke, *               outlineStroke, shape, itemLabelsVisible, itemLabelFont, *               itemLabelPaint, positiveItemLabelPosition, *               negativeItemLabelPosition and createEntities override *               fields (DG); * 26-Jun-2008 : Added new method required for crosshair support - THIS CHANGES *               THE API as of version 1.0.11 (DG); * */"
0,0,0,0,0,0,0,// The next 3 functions override the base-class implementation of // the DomainInfo interface.  Using saved limits (updated by // each updateTime() call), improves performance. //
0,0,0,0,0,0,0,// BAR HEIGHT
0,0,0,0,0,0,0,// row 2: outline color
0,0,1,1,1,1,1,// FIXME: add setSeriesPaint(int, Paint, boolean)?
0,0,0,0,0,0,0,//// FILL PAINT /////////////////////////////////////////////////////////
0,0,1,1,1,1,1,// FIXME: add setSeriesStroke(int, Stroke, boolean) ?
0,0,0,0,0,0,0,//// STROKE ////////////////////////////////////////////////////////////////
0,0,1,1,1,1,1,// FIXME: add setBaseShape(Shape, boolean) ?
0,0,1,1,1,1,1,// FIXME: add setBaseOutlinePaint(Paint, boolean)?
0,0,0,0,0,0,0,// ITEM LABELS VISIBLE
0,0,0,0,0,0,0,//// OUTLINE STROKE ////////////////////////////////////////////////////////
0,0,1,1,1,1,1,// FIXME: add setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator, //            boolean)
0,0,0,0,0,0,0,//// ITEM LABEL FONT  //////////////////////////////////////////////////////
0,0,1,1,1,1,1,// FIXME: add setBaseItemLabelFont(Font, boolean) ?
0,0,1,1,1,1,1,// FIXME: add setSeriesItemLabelPaint(int, Paint, boolean) ?
0,0,0,0,0,0,0,/*&& state.getBarWidth() > renderer.BAR_OUTLINE_WIDTH_THRESHOLD*/
0,0,0,1,1,1,1,// FIXME: add setSeriesItemLabelFont(int, Font, boolean) ?
0,0,0,0,0,0,0,// create an actual polygon
0,0,0,0,0,0,0,// create a line renderer only
0,0,0,0,0,0,0,// draw the upper shadow...
0,0,0,0,0,0,0,// connect to the previous point
0,0,0,0,0,0,0,// need to handle cluster centering as a special case
0,0,0,0,0,0,0,// first check the number we are plotting...
0,0,0,0,0,0,0,// 100 percent, so it will not apply unless // changed
0,0,0,0,0,0,0,// we'll set this to false if there is at // least one non-null data item...
0,0,0,0,0,0,0,// set the default item label positions, which will only be used if // the user requests visible item labels...
0,0,0,0,0,0,0,// calculate the box width
0,0,0,0,0,0,0,// treat the last column value as an absolute
0,0,0,0,0,0,0,// offset the start of the box if the box width is smaller than // the category width
0,0,0,0,0,0,0,// alternatively, sometimes the first few days of the year are // considered to fall in the *last* week of the previous year...
0,0,0,0,0,0,0,// draw the box...
0,0,0,0,0,0,0,"/*             * Legacy? Just return the original Paint.             * (this corresponds EXACTLY to how Paints used to be darkened)             */"
0,0,0,0,0,0,0,// Create a new Area for the series
0,0,0,0,0,0,0,// start from Y = rangeBase
0,0,0,0,0,0,0,// draw median...
0,0,0,0,0,0,0,// average radius
0,0,0,0,0,0,0,// draw yOutliers...
0,0,0,0,0,0,0,// draw the body...
0,0,0,0,0,0,0,// draw farout indicators
0,0,0,0,0,0,0,// disable visible items optimisation - it doesn't work for this // renderer...
0,0,0,0,0,0,0,// not just a horizontal bar but need to perform a 'step'.
0,0,0,0,0,0,0,// The first point is (x, this.baseYValue)
0,0,0,0,0,0,0,// check if series are disjoint (i.e. domain-spans do not overlap)
0,0,0,1,1,1,1,// TODO getSeriesShape(n).getBounds().height / 2;
0,0,0,0,0,0,0,// project onto minuend
0,0,0,0,0,0,0,// fill the polygon
0,0,0,0,0,0,0,// draw an outline around the Area.
0,0,0,1,1,1,1,// TODO getSeriesShape(n).getBounds().width / 2;
0,0,0,0,0,0,0,// do nothing...this is just a hook for subclasses
0,0,0,0,0,0,0,// start new area when needed (see above)
0,0,0,0,0,0,0,// draw optional guide lines
0,0,0,0,0,0,0,// calculate the arrow head and draw it...
0,0,0,0,0,0,0,// there are no fields to check
0,0,0,0,0,0,0,//labelLinkStyle;
0,0,0,0,0,0,0,// orientation is HORIZONTAL
0,0,0,0,0,0,0,// check if either series is a degenerate case (i.e. less than 2 points)
0,0,0,0,0,0,0,// try a listener type that isn't registered
0,0,0,0,0,0,0,//// ITEM LABEL FONT ///////////////////////////////////////////////////////
0,0,0,0,0,0,0,// state
0,0,0,0,0,0,0,// can't draw anything
0,0,0,0,0,0,0,// start of algorithm
0,0,0,0,0,0,0,// subtrahend needs to be fast forwarded
0,0,0,0,0,0,0,// DEPRECATED METHODS
0,0,0,0,0,0,0,// if the series is sorted, the negative index is a result from // Collections.binarySearch() and tells us where to insert the // new item...otherwise it will be just -1 and we should just // append the value to the list...
0,0,0,0,0,0,0,//// ANNOTATIONS //////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// check for intersect
0,0,0,0,0,0,0,// deassert b_*FastForward (only matters for 1st time through loop)
0,0,0,0,0,0,0,// set new starting point for the polygon
0,0,0,0,0,0,0,// project onto subtrahend
0,0,0,0,0,0,0,// pass mouse move event if some ChartMouseListener are listening
0,0,0,0,0,0,0,// clear colinear points and flag
0,0,0,0,0,0,0,// compute numerators
0,0,0,0,0,0,0,// this won't happen :)
0,0,0,0,0,0,0,// compute the point of intersection
0,0,0,0,0,0,0,// check if the line segments intersect
0,0,0,0,0,0,0,// test if both grahphs have a vertical rise at the same x-value
0,0,0,0,0,0,0,// add intersection point to the polygon
0,0,0,0,0,0,0,//// PAINT ////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// return straight away if the item is not visible
0,0,0,0,0,0,0,// add interection point to new polygon
0,0,0,0,0,0,0,// chart title // domain axis label // range axis label // data // orientation // include legend // tooltips? // URLs?
0,0,0,0,0,0,0,// set the maxY and minY values to intersect y-value
0,0,0,0,0,0,0,// labelType...
0,0,0,0,0,0,0,// add the last point of the minuned and subtrahend
0,0,0,0,0,0,0,// consider last point of minuend and subtrahend for determining // positivity
0,0,0,0,0,0,0,// check if the final polygon needs to be clipped
0,0,0,0,0,0,0,// the SWTGraphics2D class doesn't handle GradientPaint well, so // replace the gradient painter from the default theme with a // standard painter...
0,0,0,0,0,0,0,// advance the subtrahend if needed
0,0,0,0,0,0,0,//// VISIBLE //////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// advance the minuend if needed
0,0,0,0,0,0,0,// vertical orientation
0,0,0,0,0,0,0,// advance minuend and subtrahend to intesect
0,0,0,0,0,0,0,// a Range object cannot be equal to a different object type
0,0,0,0,0,0,0,// bad axisNumber
0,0,0,0,0,0,0,// compute slope components
0,0,0,0,0,0,0,//// DRAWING //////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// may be negative
0,0,0,0,0,0,0,//// OUTLINE PAINT ////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// interval
0,0,0,0,0,0,0,// first pass draws the shading
0,0,0,0,0,0,0,//// OUTLINE STROKE ///////////////////////////////////////////////////////
0,0,0,0,0,0,0,//// SHAPE ////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,//// ITEM LABEL GENERATOR /////////////////////////////////////////////////
0,0,0,0,0,0,0,//// LEGEND ITEM LABEL GENERATOR //////////////////////////////////////////
0,0,0,0,0,0,0,//// LEGEND ITEMS /////////////////////////////////////////////////////////
0,0,0,1,1,1,1,// FIXME:
0,0,0,0,0,0,0,//  Get height adjustment based on stack and translate to Java2D values
0,0,0,0,0,0,0,// add an entity if this info is being collected
0,0,0,0,0,0,0,// if the renderer isn't assigned to a plot, then we don't have a // dataset...
0,0,0,0,0,0,0,//  On first pass render the areas, line and outlines
0,0,0,0,0,0,0,// Use a SwtPaintCanvas to show the color, note that we must set the // heightHint.
0,0,0,0,0,0,0,//  Get series Paint and Stroke
0,0,0,0,0,0,0,// start from previous height (ph1)
0,0,0,0,0,0,0,//labelLinkPaint;
0,0,0,0,0,0,0,//  Draw an outline around the Area.
0,0,0,0,0,0,0,// The first point is (x, 0)
0,0,0,0,0,0,0,// dial shape
0,0,0,0,0,0,0,// we need at least two points to draw something
0,0,0,0,0,0,0,// construct path
0,0,0,0,0,0,0,// if this is the last item, draw the path ...
0,0,0,0,0,0,0,// update path to reflect latest point
0,0,0,0,0,0,0,// now create a new title and replace the existing title, several // things should happen: // (1) Adding the new title should trigger an immediate //     ChartChangeEvent; // (2) Modifying the new title should trigger a ChartChangeEvent; // (3) Modifying the old title should NOT trigger a ChartChangeEvent
0,0,0,0,0,0,0,// On second pass render shapes and collect entity and tooltip // information
0,0,0,0,0,0,0,// Add points from last series to complete the base of the // polygon
0,0,0,0,0,0,0,// Collect points
0,0,0,0,0,0,0,// draw path
0,0,0,0,0,0,0,// construct spline // number of points // Newton form coefficients // x-coordinates of nodes
0,0,0,0,0,0,0,// we need at least 3 points to spline. Draw simple line // for two points
0,0,0,0,0,0,0,// we're running on JRE 1.3.1 so this is the best we have...
0,0,0,0,0,0,0,// note that a[0]=a[np-1]=0
0,0,0,0,0,0,0,// dial background paint
0,0,0,0,0,0,0,// get the label position..
0,0,0,0,0,0,0,// name
0,0,0,0,0,0,0,// just the range axis...
0,0,0,0,0,0,0,// then draw the line...
0,0,0,0,0,0,0,// fill under the curve...
0,0,0,0,0,0,0,// just the domain axis...
0,0,0,0,0,0,0,// now draw the real shape
0,0,0,0,0,0,0,/*      factorization and forward substitution */
0,0,0,0,0,0,0,// reset points vector
0,0,0,0,0,0,0,// should never get here
0,0,0,0,0,0,0,// map a key to the default group
0,0,0,0,0,0,0,// 'plot' : just retain reference, not a deep copy
0,0,0,0,0,0,0,// calculate the step point
0,0,0,0,0,0,0,//this handles the need to perform a 'step'.
0,0,0,0,0,0,0,//this handles the need to perform a 'step'. // calculate the step point
0,0,0,0,0,0,0,// submit this data item as a candidate for the crosshair point
0,0,0,0,0,0,0,// create a new area polygon for the series
0,0,0,0,0,0,0,// the first point is (x, 0)
0,0,0,0,0,0,0,// no change
0,0,0,0,0,0,0,// we make the clip region slightly larger than the // dataArea so that the clipped edges don't show lines // on the chart
0,0,0,0,0,0,0,// here we use BooleanUtilities to remain compatible with JDKs < 1.4
0,0,0,0,0,0,0,// update the max value
0,0,0,0,0,0,0,// need to make sure we are adding *after* any duplicates
0,0,0,0,0,0,0,// we needed to get this far even for invisible items, to ensure that // seriesPath updates happened, but now there is nothing more we need // to do for non-visible items...
0,0,0,0,0,0,0,// If the line is not wrapping, then parent is OK
0,0,0,0,0,0,0,// draw the body
0,0,0,0,0,0,0,// only draw a line if the gap between the current and // previous data point is within the threshold
0,0,0,0,0,0,0,// draw the lower shadow
0,0,0,0,0,0,0,// draw the upper shadow
0,0,0,0,0,0,0,// this method must be overridden if you want to display images
0,0,0,0,0,0,0,// first pass draws the background (lines, for instance)
0,0,0,0,0,0,0,//  Fill the polygon
0,0,0,0,0,0,0,//////////////////////////////////////////////////////////////////////////// // PROTECTED METHODS // These provide the opportunity to subclass the standard renderer and // create custom effects. ////////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// Now split the segment as needed
0,0,0,0,0,0,0,// should not get here
0,0,0,0,0,0,0,// yOutliers can be null, but we'd prefer it to be an empty list in // that case...
0,0,0,0,0,0,0,// draw farout
0,0,0,0,0,0,0,// draw yOutliers
0,0,0,0,0,0,0,// minuend needs to be fast forwarded
0,0,0,0,0,0,0,// If null, don't draw line at all
0,0,0,0,0,0,0,//initalize xValues, yValues, and zValues arrays.
0,0,0,0,0,0,0,// Process outliers. Each outlier is either added to the appropriate // outlier list or a new outlier list is made
0,0,0,0,0,0,0,// If null, don't draw line => then delegate to parent
0,0,0,0,0,0,0,// calculate the highest volume in the dataset...
0,0,0,0,0,0,0,// draw the error bar for the y-interval
0,0,0,0,0,0,0,// draw the error bar for the x-interval
0,0,0,0,0,0,0,// transpose the dimensions, because the title is rotated
0,0,0,0,0,0,0,// include the interval if there is one
0,0,0,0,0,0,0,//domainGridlinePaint;
0,0,0,0,0,0,0,// no need to instantiate this class
0,0,0,0,0,0,0,// handle item label drawing, now that we know all the bars have // been drawn...
0,0,0,0,0,0,0,// we didn't find the key
0,0,0,0,0,0,0,// update the crosshair point
0,0,0,0,0,0,0,// don't bother with parsing
0,0,0,0,0,0,0,// --- DEPRECATED CODE ----------------------------------------------------
0,0,0,0,0,0,0,// RectangleInsets is immutable => same reference in clone OK
0,0,0,0,0,0,0,//  Add chart to deletion list in session
0,0,0,0,0,0,0,//  Serve it up
0,0,0,0,0,0,0,//  Replace ".." with "" //  This is to prevent access to the rest of the file system
0,0,0,0,0,0,0,//  Set HTTP headers
0,0,0,0,0,0,0,// suppress compiler warning
0,0,0,0,0,0,0,// svgClass will be null so the function will return false
0,0,0,0,0,0,0,// determine the space required for the axis
0,0,0,0,0,0,0,// this includes the case where the underlying dataset is null
0,0,0,0,0,0,0,// get the lastest pixel
0,0,0,0,0,0,0,// first point is outside, so we update it against one of the // four sides then continue
0,0,0,0,0,0,0,// second point is outside, so we update it against one of the // four sides then continue
0,0,0,0,0,0,0,//reserve variables to store the coordinates of the resulting GradientPaint
0,0,0,0,0,0,0,// Red // Green // Blue
0,0,0,0,0,0,0,// ALWAYS null
0,0,0,0,0,0,0,// Red // Green // Blue. Now map computed colour to // nearest in Palette...
0,0,0,0,0,0,0,// RGB (+ optional Alpha which we leave // unchanged)
0,0,0,0,0,0,0,// <- this is the code that actually COPIES the pixels
0,0,0,0,0,0,0,"/*         * Buffered Images may have properties, but NEVER disclose them!         * Nevertheless, just in case someone implements getPropertyNames()         * one day...         */"
0,0,0,0,0,0,0,/* Ignore alpha-channel -> */
0,0,0,0,0,0,0,//get the coordinates of the shape that is to be filled
0,0,0,0,0,0,0,// substitute the filtered URL list
0,0,0,0,0,0,0,// all methods are static, no need to instantiate
0,0,0,0,0,0,0,// vertical pass
0,0,0,0,0,0,0,// substract the oldest pixel from the sum
0,0,0,0,0,0,0,//start point is upper left corner
0,0,0,0,0,0,0,/* (pix-buffer is large enough for all pixels of one row) */
0,0,0,0,0,0,0,//start point is lower left right corner --> diagonal gradient
0,0,0,0,0,0,0,// horizontal pass
0,0,0,0,0,0,0,// check that the column key is defined in the 2D structure
0,0,0,0,0,0,0,// consider these to be ordered after general objects
0,0,0,0,0,0,0,// this will include the case where the underlying dataset is null
0,0,0,0,0,0,0,// 1. check whether the row is now empty.
0,0,0,0,0,0,0,// but the row data requires a deep copy
0,0,0,0,0,0,0,//  Check the file exists
0,0,0,0,0,0,0,//int columnIndex = getColumnIndex(columnKey);
0,0,0,0,0,0,0,/* Placeholder */
0,0,0,0,0,0,0,// for the keys, a shallow copy should be fine because keys // should be immutable...
0,0,0,0,0,0,0,// no new methods required
0,0,0,0,0,0,0,// Map the nongrid data into the new regular grid
0,0,0,0,0,0,0,// does the series exist?
0,0,0,0,0,0,0,// Find min, max for the x and y axes
0,0,0,0,0,0,0,// fetch the value...
0,0,0,0,0,0,0,// update the data...
0,0,0,0,0,0,0,//step through all the values and add them to the hash
0,0,0,0,0,0,0,// store Number as Double
0,0,0,0,0,0,0,// scale by the inverse of distance^power
0,0,0,0,0,0,0,// if d is real small set the inverse to a large number // to avoid INF
0,0,0,0,0,0,0,// Determine the cell size
0,0,0,0,0,0,0,//remove distance of the sum
0,0,0,0,0,0,0,// the CategoryDataset interface expects a list of categories, but // we've stored them in an array...
0,0,0,0,0,0,0,//store data as Long
0,0,0,0,0,0,0,// remove all the series from the collection and notify listeners.
0,0,0,0,0,0,0,// set x to most recent value
0,0,0,0,0,0,0,//store index where new //column starts
0,0,0,0,0,0,0,// already know 'a' isn't null
0,0,0,0,0,0,0,// calculate constant values
0,0,0,0,0,0,0,// store y and z axes // as Doubles
0,0,0,0,0,0,0,//  Do not add key to dataset
0,0,0,0,0,0,0,// now try to instantiate this ;-)
0,0,0,0,0,0,0,// now do the work...
0,0,0,0,0,0,0,//  Add other category if applicable
0,0,0,0,0,0,0,//  Add key to dataset
0,0,0,0,0,0,0,// if the dataset implements DomainInfo, life is easier
0,0,0,0,0,0,0,/////////////////////////////////////////////////////////////////////////// // Private ///////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// update the min value
0,0,0,0,0,0,0,// handle the standard case (plain CategoryDataset)
0,0,0,0,0,0,0,// create the temporary directory if it doesn't exist
0,0,0,0,0,0,0,/////////////////////////////////////////////////////////////////////////// // New methods from CombinationDataset ///////////////////////////////////////////////////////////////////////////
0,0,0,0,0,0,0,// handle special case of OHLCDataset
0,0,0,0,0,0,0,// handle special case of IntervalXYDataset
0,0,0,0,0,0,0,// if the dataset implements DomainInfo, life is easy
0,0,0,0,0,0,0,// work out the minimum value...
0,0,0,0,0,0,0,// minimum and maximum for each group...
0,0,0,0,0,0,0,// maps our series into our parent's
0,0,0,0,0,0,0,// add the series...
0,0,0,0,0,0,0,// more difficult case - evaluate later...
0,0,0,0,0,0,0,// Are we working with a time series.
0,0,0,0,0,0,0,// exact match on first item
0,0,0,0,0,0,0,// exact match
0,0,0,0,0,0,0,// delegate null check on dataset
0,0,0,0,0,0,0,// overridden to make public
0,0,0,0,0,0,0,// no crossing of x
0,0,0,0,0,0,0,// spanning match
0,0,0,0,0,0,0,// Might need to add, to free memory from any previous result sets
0,0,0,0,0,0,0,// no new methods added.
0,0,0,0,0,0,0,// prior to 1.0.14, we just fired a PropertyChange - so we need to // keep doing this
0,0,0,0,0,0,0,// not a value, can't use it (defaults to null)
0,0,0,0,0,0,0,// Remove any previous old data
0,0,0,0,0,0,0,// first line contains column keys
0,0,0,0,0,0,0,// first column contains the row key...
0,0,0,0,0,0,0,// remaining fields contain values
0,0,0,0,0,0,0,// suppress (value defaults to null)
0,0,0,0,0,0,0,// lower bounds are the same
0,0,0,0,0,0,0,// pretty sure this shouldn't ever happen
0,0,0,0,0,0,0,// first field is ignored, since // column 0 is for row keys
0,0,0,0,0,0,0,// fill the bins
0,0,0,0,0,0,0,/// First column is X data
0,0,0,0,0,0,0,/// Determine max and min values.
0,0,0,0,0,0,0,// Get all rows. // rows = new ArrayList();
0,0,0,0,0,0,0,// pass values to other constructor
0,0,0,0,0,0,0,// sum of x, x^2, x * y, y
0,0,0,0,0,0,0,// update the cached range values...
0,0,0,0,0,0,0,// update cached min and max values
0,0,0,0,0,0,0,// defer null argument checks
0,0,0,0,0,0,0,// intercept
0,0,0,0,0,0,0,// calculate the sum and count
0,0,0,0,0,0,0,// treat nulls the same as NaNs
0,0,0,0,0,0,0,// check for zero pivot element
0,0,0,0,0,0,0,// iterate over all data items and update mins and maxes
0,0,0,0,0,0,0,// update cached range values
0,0,0,0,0,0,0,// Tell the listeners a new table has arrived.
0,0,0,0,0,0,0,// make the change (if it's not a duplicate time period)...
0,0,0,0,0,0,0,// remove old items and notify if necessary
0,0,0,0,0,0,0,// we are at the last minute in the hour...
0,0,0,0,0,0,0,// won't get here...
0,0,0,0,0,0,0,// find the serial index of the period specified by 'latest'
0,0,0,0,0,0,0,// see comments about priority of // 10 in validateObject()
0,0,0,0,0,0,0,// getXxx() ftns can ignore the "series" argument: // Don't synchronize this!! Instead, synchronize the loop that calls it.
0,0,0,0,0,0,0,//rangeGridlinePaint;
0,0,0,0,0,0,0,// figure out if we need to iterate through all the y-values // to find the revised minY / maxY
0,0,0,0,0,0,0,// we are at the first hour in the day...
0,0,0,0,0,0,0,// if the hour is 0 - 23 then create an hour
0,0,0,0,0,0,0,// start is after last data item
0,0,0,0,0,0,0,// But if that series array already exists, just overwrite its contents //synchronized(this) //{
0,0,0,0,0,0,0,// we are at the last hour in the day...
0,0,0,0,0,0,0,// update the time series appropriately
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Hour object // -----------------------------------------
0,0,0,0,0,0,0,// cached values used for interface DomainInfo:
0,0,0,0,0,0,0,// an arbitrary safe default value
0,0,0,0,0,0,0,// parse the string...
0,0,0,0,0,0,0,// work out the average for the earlier values...
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Year object // -----------------------------------------
0,0,0,0,0,0,0,// default value;
0,0,0,0,0,0,0,// autoinit's to null.
0,0,0,0,0,0,0,// But if that series array already exists, just overwrite its contents
0,0,0,0,0,0,0,// create the year...
0,0,0,0,0,0,0,// remaining lines contain a row key and data values
0,0,0,0,0,0,0,// create an array holding the group indices for each series...
0,0,0,0,0,0,0,// if the initial averaging period is to be excluded, then // calculate the index of the // first data item to have an average calculated...
0,0,0,0,0,0,0,// Cached values used for interface RangeInfo: (note minValue pinned at 0) //   A single set of extrema covers the entire SeriesCollection
0,0,0,0,0,0,0,// Avoid IndexOutOfBoundsException:
0,0,0,0,0,0,0,/// Expand the following for all defined TimePeriods:
0,0,0,0,0,0,0,///  .. etc....
0,0,0,0,0,0,0,//{ // deep copy from values[], caller // can safely discard that array
0,0,0,0,0,0,0,// Methods for managing the FIFO's:
0,0,0,0,0,0,0,// handle special case of BoxAndWhiskerXYDataset
0,0,0,0,0,0,0,// a Long kept updated by advanceTime()
0,0,0,0,0,0,0,// else  [implicit here]
0,0,0,0,0,0,0,// no translation needed
0,0,0,0,0,0,0,// if the oldest data contained a maximum Y-value, invalidate the stored //   Y-max and Y-range data:
0,0,0,0,0,0,0,// Now advance "oldestAt", wrapping at end of the array
0,0,0,0,0,0,0,// index to select the "series"
0,0,0,0,0,0,0,// Update the domain limits: //(time is kept in msec)
0,0,0,0,0,0,0,// check whether the "valueHistory" array member exists; if not, // create them:
0,0,0,0,0,0,0,// find the Q and the integer following it (remove both from the // string)...
0,0,0,0,0,0,0,// the following code handles the line for the y-values...it's // all done by code in the super class
0,0,0,0,0,0,0,// Don't synchronize this!! // Instead, synchronize the loop that calls it.
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Quarter object // --------------------------------------------
0,0,0,0,0,0,0,// NULL value -> insert point on base line // instead of 'step point'
0,0,0,0,0,0,0,// do nothing, so null is returned
0,0,0,0,0,0,0,// replace any / , or - with a space
0,0,0,0,0,0,0,// Update the array of TimePeriods:
0,0,0,0,0,0,0,// 1-ms test timeline using 5 included and 2 excluded segments. // // timeline start time = 0 //   | //   v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 .. // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+.. // |  |  |  |  |  |EE|EE|  |  |  |  |  |EE|EE|  |  |  |  |  |  |EE|EE|    <-- msTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+.. //  \_________  ________/            \_/ //            \/                      | //       segment group         segment size = 1 ms //
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Day object // ----------------------------------------
0,0,0,0,0,0,0,// we need to work out if the previous year has 52 or 53 weeks...
0,0,0,0,0,0,0,// to be defensive, let's check that the source series does in fact // belong to this collection
0,0,0,0,0,0,0,// check if the new series name already exists for another series
0,0,0,0,0,0,0,// 1-ms test timeline (with a baseTimeline) using 2 included and 2 // excluded segments centered inside each base segment // // The ms2Timeline without a base would look like this: // //    timeline start time = 1 //      | //      v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|    <-- ms2Timeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //    \____  _____/            \_/ //         \/                   | //    segment group      segment size = 1 ms // // With the base timeline some originally included segments are now // removed (see "xx" below): // //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|    <-- ms2Timeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //
0,0,0,0,0,0,0,// if it is not the series name, then we have no interest
0,0,0,0,0,0,0,// check arguments...delegated // fetch the series name...
0,0,0,0,0,0,0,// suppress
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Week object // --------------------------------------------
0,0,0,0,0,0,0,// trim whitespace from either end of the string
0,0,0,0,0,0,0,//axisOffset;
0,0,0,0,0,0,0,// CASE 1 : Comparing to another Month object // --------------------------------------------
0,0,0,0,0,0,0,// all arrays equal length, // so ignore argument:
0,0,0,0,0,0,0,// --- DEPRECATED METHODS -------------------------------------------------
0,0,0,0,0,0,0,// now it is trickier to determine if the month or year is first
0,0,0,0,0,0,0,//  wipe the next (about to be used) set of data slots
0,0,0,0,0,0,0,// no attributes to read
0,0,0,0,0,0,0,//this.key = null;
0,0,0,0,0,0,0,//private Comparable key;
0,0,0,0,0,0,0,// we can't be sure of the order
0,0,0,0,0,0,0,// Remove all the series from the collection and notify listeners.
0,0,0,0,0,0,0,// check arguments...delegated
0,0,0,0,0,0,0,// need to configure the intervalDelegate to match the original
0,0,0,0,0,0,0,// add a new series
0,0,0,0,0,0,0,// false preserves the old behaviour // prior to introducing this flag
0,0,0,0,0,0,0,// everything is fine: autoWidth is on, and an autoIntervalWidth // was set.
0,0,0,0,0,0,0,// this.x is not allowed to be null...
0,0,0,0,0,0,0,// all series have the same number of items in // this dataset
0,0,0,0,0,0,0,// In version 0.9.12, in response to several developer requests, I changed // the 'data' attribute from 'private' to 'protected', so that others can // make subclasses that work directly with the underlying data structure.
0,0,0,0,0,0,0,// figure out if we need to iterate through all the y-values
0,0,0,0,0,0,0,// try a class that isn't a listener

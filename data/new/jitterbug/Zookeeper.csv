projectname,classification,commenttext
Zookeeper,SATD,//  BUG: Grizzly needs a doc root if you are going to register multiple adapters 
Zookeeper,SATD,//  This is likely a problem it means that file reloading is broken probably because the   directory we are watching was deleted or otherwise became inaccessible (unmounted permissions   changed ???).   For now we log an error and exit the watcher thread. 
Zookeeper,SATD,//  FIXME this was originally 5 seconds but realistically on random/slow/virt hosts there is no way to guarantee this 
Zookeeper,SATD,//  This is a bit weird but we need to return the address and the number of   bytes (to distinguish between IPv4 and IPv6 
Zookeeper,SATD,//  a bit of a hack but delete(/) will never succeed and ensures   that the same semantics are maintained 
Zookeeper,SATD,//  Everything is a go simply start counting the ticks   WARNING: I couldn't find any wait statement on a synchronized   block that would be notified by this notifyAll() call so   I commented it out  synchronized (this) {      notifyAll();  }   We ping twice a tick so we only update the tick every other 
Zookeeper,SATD,//  TODO(ivmaykov): Not sure if cnxn can be null here. It becomes null if channelInactive()   or exceptionCaught() trigger but it's unclear to me if userEventTriggered() can run   after either of those. Check for null just to be safe ... 
Zookeeper,SATD,//  could not create tmp directory to hold JAAS conf file : test will   fail now. 
Zookeeper,SATD,//  FIXME this test is Assert.failing due to client close race condition fixing in separate patch for ZOOKEEPER-63      /**       * this test checks to see if the sessionid that was created for the       * first zookeeper client can be reused for the second one immidiately       * after the first client closes and the new client resues them.       * @throws IOException       * @throws InterruptedException       * @throws KeeperException       */ 
Zookeeper,SATD,//  TODO: need to tune the default value of thread size 
Zookeeper,SATD,//  TODO refactor QuorumBase to be special case of this 
Zookeeper,SATD,//  This might not be 100% right but it's only used for printing   connection info in the netty implementation so it's probably ok. 
Zookeeper,SATD,//  Problem 2: Before fix after session close the ephemeral node   was not getting deleted. But now after the fix after session close 
Zookeeper,SATD,/*          * Observer should write to disk so that the it won't request         * too old txn from the leader which may lead to getting an entire         * snapshot.         *         * However this may degrade performance as it has to write to disk         * and do periodic snapshot which may double the memory requirements          */
Zookeeper,SATD,//  TODO - investigate why reconfig makes qps null. 
Zookeeper,SATD,//  TODO: if zks.processPacket() is changed to take a ByteBuffer[]   we could implement zero-copy queueing. 
Zookeeper,SATD,//  Note that this performance assumption might not hold true for architectures other than x86_64. 
Zookeeper,SATD,//  Note: the new buffer size is a hint and socket implementation   is free to ignore it so we don't verify that we get back the   same value. 
Zookeeper,SATD,// TODO should this be synchronized? 
Zookeeper,SATD,// TODO: use a factory rather than a switch 
Zookeeper,SATD,//  XXX No need to do anything 
Zookeeper,SATD,//  Session has not been re-validated ! 
Zookeeper,SATD,//  It is sad that isro and srvr are used by ZooKeeper itself. Need fix this   before deprecating 4lw. 
Zookeeper,SATD,//  TODO we need to figure out the security requirement for this! 
Zookeeper,SATD,//  Problem 1: Follower had one extra ephemeral node /e1 
Zookeeper,SATD,//  TODO: in the future serverId should be validated for all cases not just the extendedEphemeralTypesEnabled case   TODO: however for now it would be too disruptive 
Zookeeper,SATD,/*              * Since requests are processed in order we better get a response             * to the first request!              */
Zookeeper,SATD,//  this is ugly you have a better way speak up 
Zookeeper,SATD,//  An authentication error occurred during authentication with the Zookeeper Server. 
Zookeeper,SATD,/*  TODO: (br33d) we should either put a ConcurrentHashMap on restore()             *       or use Map on save()  */
Zookeeper,SATD,//  TODO: this doesn't use a quorum verifier 
Zookeeper,SATD,/*  a mocked ZK class that doesn't do client-side verification     * before/after calling removeWatches  */
Zookeeper,SATD,//  this shouldn't be necessary (wrapping data with string)   but without it there are problems on the server - ie it   hangs for 30 seconds and doesn't get the data.   TODO investigate 
Zookeeper,SATD,//  Try to provide hints to use about what went wrong so they can fix their configuration.   TODO: introspect about e: look for GSS information. 
Zookeeper,SATD,// FIXME: I don't want to have to serialize it here and then         immediately deserialize in next processor. But I'm         not sure how else to get the txn stored into our list. 
Zookeeper,SATD,// ////////////////   these internal classes are public but should not generally be referenced. 
Zookeeper,SATD,//  FIXME: IPv6 is not supported. Using something like Guava's HostAndPort          parser would be good. 
Zookeeper,SATD,//  this is really a programmatic error and not something that can   happen at runtime 
Zookeeper,SATD,//  We add backwards since we are pushing into the front   Only send if there's a pending watch   TODO: here we have the only remaining use of zooKeeper in   this class. It's to be eliminated! 
Zookeeper,SATD,//  TODO: Rather than checking a disjunction here should be a single member   variable or method in this class to determine whether the client is   configured to use SASL. (see also ZOOKEEPER-1455). 
Zookeeper,SATD,//  TODO: maybe we should flush in the loop above every N packets/bytes?   But how do we determine the right value for N ... 
Zookeeper,SATD,//  Uh oh.  We need to upgrade before we can proceed. 
Zookeeper,SATD,//  TODO: exit server at this point(?) 
Zookeeper,SATD,//  Multiple bad arguments 
Zookeeper,SATD,//  XXX this doesn't need to be volatile! (Should probably be final) 
Zookeeper,SATD,//  test will still fail even though we just log/ignore 
Zookeeper,SATD,//  FIXME ignore for now 
Zookeeper,SATD,//  XXX We really should NOT need this!!!! 
Zookeeper,SATD,//  TODO: should depend on zoo.cfg specified mechs but if
Zookeeper,SATD,//  XXX hack 
Zookeeper,SATD,//  not sure about 3rd arg..what is it? 
Zookeeper,SATD,// FIXME: need way to more cleanly serialize/deserialize exceptions 
Zookeeper,SATD,//  small chance that an unexpected message was delivered    after this check but we would catch that next time 
Zookeeper,SATD,//  Warning: this will reset the x509Util 
Zookeeper,SATD,//  a little hacky way to detect key type but it works 
Zookeeper,SATD,/*              * The following sequence of code is stupid! You would think that             * only sock.close() is needed but alas it doesn't work that way.             * If you just do sock.close() there are cases where the socket             * doesn't actually close...              */
Zookeeper,SATD,//  todo not every tmp directory needs this file 
Zookeeper,SATD,//  XXX This shouldn't be needed but just in case 
Zookeeper,SATD,/*  * A bunch of constants. * TODO: will get rid of it eventually.  */
Zookeeper,SATD,//  TODO: can not name this method getState since Thread.getState()   already exists   It would be cleaner to make class SendThread an implementation of   Runnable 
Zookeeper,SATD,//  handle below: might be harmless if the user doesn't intend to use JAAS authentication. 
Zookeeper,SATD,//  Should never call this: SASL authentication is negotiated at session initiation.   TODO: consider substituting current implementation of direct ClientCnxn manipulation with   a call to this method (SASLAuthenticationProvider:handleAuthentication()) at session initiation. 
Zookeeper,SATD,//  Note we may exceed our max length by a bit when we add the last   watch in the batch. This isn't ideal but it makes the code simpler. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make the snapshot directory read only 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ensure that we can convert all valid integers to EventTypes 
Zookeeper,WITHOUT_CLASSIFICATION,/*  notify the client the session is closing and close/cleanup socket  */
Zookeeper,WITHOUT_CLASSIFICATION,//  shutdown previous zookeeper 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#children()          */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Converting an observer into a participant may sometimes fail with a     * NewConfigNoQuorum exception. This test-case demonstrates the scenario.     * Current configuration is (A B C D) where A B and C are participant     * and D is an observer. Suppose that B has crashed (or never booted). If a     * reconfiguration is submitted where D is said to become a participant it     * will fail with NewConfigNoQuorum since in this configuration a majority     * of voters in the new configuration (any 3 voters) must be connected and     * up-to-date with the leader. An observer cannot acknowledge the history     * prefix sent during reconfiguration and therefore it does not count towards     * these 3 required servers and the reconfiguration will be aborted. In case     * this happens a client can achieve the same task by two reconfig commands:     * first invoke a reconfig to remove D from the configuration and then invoke a     * second command to add it back as a participant (follower). During the     * intermediate state D is a non-voting follower and can ACK the state     * transfer performed during the second reconfig command.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  register most recent relogin attempt 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check if client's current server is in the new list of servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  read txnlog but this should be sufficient 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * Avoids running finish() twice.                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  truncate the log 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Address of sender          */
Zookeeper,WITHOUT_CLASSIFICATION,//  We need to log the stuff that came in between the snapshot and the uptodate 
Zookeeper,WITHOUT_CLASSIFICATION,//  property is set to an valid int we should get the set value 
Zookeeper,WITHOUT_CLASSIFICATION,//  If notification > current replace and send messages out 
Zookeeper,WITHOUT_CLASSIFICATION,//  check for differences 
Zookeeper,WITHOUT_CLASSIFICATION,//  the clients may or may not have already reconnected   to the recovered cluster force a check but ignore 
Zookeeper,WITHOUT_CLASSIFICATION,//  zks cannot be null otherwise we would not have gotten here! 
Zookeeper,WITHOUT_CLASSIFICATION,//  check leader running status 
Zookeeper,WITHOUT_CLASSIFICATION,//  reconnect with the same session id 
Zookeeper,WITHOUT_CLASSIFICATION,//  delete the node in the trie.   we need to update the trie as well 
Zookeeper,WITHOUT_CLASSIFICATION,//  or diff 
Zookeeper,WITHOUT_CLASSIFICATION,//  10.10.10.4:1238 10.10.10.3:1237 10.10.10.2:1236 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets assert that the first election is the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  for a dead peer                  
Zookeeper,WITHOUT_CLASSIFICATION,//  If a null Stat object is passed the create should still   succeed but no Stat info will be returned. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore connection loss 
Zookeeper,WITHOUT_CLASSIFICATION,//  Filter out the extra ENTRY_CREATE events that are   sometimes seen at the start. Even though we create the watcher   after the file exists sometimes we still get a create event. 
Zookeeper,WITHOUT_CLASSIFICATION,//  connect to one of them 
Zookeeper,WITHOUT_CLASSIFICATION,//  Otherwise start worker threads to receive data. 
Zookeeper,WITHOUT_CLASSIFICATION,//  sets quorum sasl authentication configurations 
Zookeeper,WITHOUT_CLASSIFICATION,//  request.hdr is set for write requests which are the only ones 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure thread is started once and only once 
Zookeeper,WITHOUT_CLASSIFICATION,//  Write the truststore 
Zookeeper,WITHOUT_CLASSIFICATION,//  This configuration section 'MyZookeeperClient' is missing from the JAAS configuration.   As a result SASL authentication should fail which is tested by this test (testAuth()).
Zookeeper,WITHOUT_CLASSIFICATION,//  find the last snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  We didn't find \n read the whole buffer into string buffer 
Zookeeper,WITHOUT_CLASSIFICATION,//  LocalPeerBean 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Listener thread      */
Zookeeper,WITHOUT_CLASSIFICATION,//  /e is unset its acl should remain the same. 
Zookeeper,WITHOUT_CLASSIFICATION,//  good expected that 
Zookeeper,WITHOUT_CLASSIFICATION,/*  The current vote for the leader. Initially me!  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Oh well never mind 
Zookeeper,WITHOUT_CLASSIFICATION,//  Width of the toster 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify lastProcessedZxid is set correctly 
Zookeeper,WITHOUT_CLASSIFICATION,//  By default disable starting a JettyAdminServer in tests to avoid   accidentally attempting to start multiple admin servers on the 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * If the peer has done enough rounds then consider joining. The thread                     * will only join if it is part of a quorum supporting the current                      * leader. Otherwise it will try again.                      */
Zookeeper,WITHOUT_CLASSIFICATION,/*  password is test  */
Zookeeper,WITHOUT_CLASSIFICATION,//  add watcher for each node and add node to collection of   watched nodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  generate new config string 
Zookeeper,WITHOUT_CLASSIFICATION,//  do nothing special - stay with the current server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Session has been re-validated 
Zookeeper,WITHOUT_CLASSIFICATION,//  we don't need to retry this operation in the case of failure   as ZK will remove ephemeral files and we don't wanna hang   this process when closing if we cannot reconnect to ZK
Zookeeper,WITHOUT_CLASSIFICATION,//  exactly as it is now except for role change 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure the watch is removed when the connection closed 
Zookeeper,WITHOUT_CLASSIFICATION,//  1. start up server and wait for leader election to finish 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since SASL authentication has completed (if client is configured to do so)   outgoing packets waiting in the outgoingQueue can now be sent. 
Zookeeper,WITHOUT_CLASSIFICATION,//  objects holding a reference to this object. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Handle situation of clientSection's being null: it might simply because the client does not intend to    use SASL so not necessarily an error. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure the settings applied above before the socket was potentially upgraded to   TLS still apply. 
Zookeeper,WITHOUT_CLASSIFICATION,//  after restart 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set the factor to high value so that this test case always   resync using txnlog 
Zookeeper,WITHOUT_CLASSIFICATION,//  Trying to load a PEM file with JKS loader should fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  ok 
Zookeeper,WITHOUT_CLASSIFICATION,//  close the input stream 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets wait for any previous leaders to die and one of our new   nodes to become the new leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  do nothing. 
Zookeeper,WITHOUT_CLASSIFICATION,//  add the last logfile that is less than the zxid 
Zookeeper,WITHOUT_CLASSIFICATION,/*  If we've already failed one of the ops don't bother                     * trying the rest as we know it's going to fail and it                     * would be confusing in the logfiles.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  waiting for child watchers to be notified 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure server started give enough time so that new leader election 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Proposed leader          */
Zookeeper,WITHOUT_CLASSIFICATION,//  snapshot files in snap dir 
Zookeeper,WITHOUT_CLASSIFICATION,//  If session has not been validated there must be NO watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  NO-OP. Adding a packet will already wake up a netty connection   so we don't need to add a dummy packet to the queue to trigger   a wake-up. 
Zookeeper,WITHOUT_CLASSIFICATION,//  expected behavior 
Zookeeper,WITHOUT_CLASSIFICATION,//  this addr won't even be used since we fake the Socket.connect 
Zookeeper,WITHOUT_CLASSIFICATION,//  protocolVersion 
Zookeeper,WITHOUT_CLASSIFICATION,//  Second address doesn't work so we don't call onConnected() this time   StaticHostProvider should try to re-resolve the address in this case
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Loop in which we exchange notifications until we find a leader              */
Zookeeper,WITHOUT_CLASSIFICATION,//  skip superhammer and clientcleanup as they are too expensive for quorum 
Zookeeper,WITHOUT_CLASSIFICATION,// avoid using literal IP address when security check fails 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer#     * nodeSelectionChanged(java.util.Set)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Pending sync requests      */
Zookeeper,WITHOUT_CLASSIFICATION,//  separate patch. 
Zookeeper,WITHOUT_CLASSIFICATION,// Updating version solves conflict -- order matters 
Zookeeper,WITHOUT_CLASSIFICATION,//  Creates principals in the KDC and adds them to a keytab file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  If the client is asking to close the session then   mark as closing 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify ClientCnxnSocketNetty creation 
Zookeeper,WITHOUT_CLASSIFICATION,//  After leader election lastProcessedZxid will point to new epoch 
Zookeeper,WITHOUT_CLASSIFICATION,//  prepare for next test 
Zookeeper,WITHOUT_CLASSIFICATION,//  small chance that an unexpected message was delivered    after this check but we would catch that next time    we check events 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make delete fo fail then verify cversion.   this doesn't happen anymore we only set the cversion on create   LOG.info("Attempting to delete " + "/test/" + (count + 1));   doOp(logFile OpCode.delete "/test/" + (count + 1) dt zk); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Get default cipher suites from JDK 
Zookeeper,WITHOUT_CLASSIFICATION,//  not necessary to repeat this expensive and not chroot related
Zookeeper,WITHOUT_CLASSIFICATION,//  inject problem in leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  During startup of thread thread name will be overridden to 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Make sure to pass an explicit Watcher because we could be sharing this     * zooKeeper instance with someone else.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure tostring works in both cases 
Zookeeper,WITHOUT_CLASSIFICATION,//  Deleting child using chRoot client. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Tests that a conditional reconfig fails if the specified version doesn't correspond     * to the version of the current config.      */
Zookeeper,WITHOUT_CLASSIFICATION,/*          * ZOOKEEPER-1324. the leader sends the new config it must complete         *  to others inside a NEWLEADER message (see LearnerHandler where         *  the NEWLEADER message is constructed) and once it has enough         *  acks we must execute the following code so that it applies the         *  config to itself.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  close connection 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.NodeListener#processEvent(java     * .lang.String java.lang.String java.util.Map)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * Processing committedRequests: check and see if the commit                 * came in for the pending request. We can only commit a                 * request when there is no other request being processed.                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  accounted for 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore this one 
Zookeeper,WITHOUT_CLASSIFICATION,//  Zookeeper client: get username and password from JAAS conf (only used if using DIGEST-MD5). 
Zookeeper,WITHOUT_CLASSIFICATION,//  Packet of death! 
Zookeeper,WITHOUT_CLASSIFICATION,//  these tests are serial we can speed up InterruptedException 
Zookeeper,WITHOUT_CLASSIFICATION,//  Add multiple child watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  ..but still in progress because there is a final SASL   message from server which must be received. 
Zookeeper,WITHOUT_CLASSIFICATION,//  watch for everyone to die 
Zookeeper,WITHOUT_CLASSIFICATION,// close the socket to make sure the  other side can see it being close 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test that when we ask for recent snaps we get the number we asked for and 
Zookeeper,WITHOUT_CLASSIFICATION,//  from local session 
Zookeeper,WITHOUT_CLASSIFICATION,//  Unique identifier for each znode that we create. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Follower is within commitLog range 
Zookeeper,WITHOUT_CLASSIFICATION,//  Strip off the surrounding quotes 
Zookeeper,WITHOUT_CLASSIFICATION,//  Global sessions handled on the leader; this call is a no-op if   not tracked as a local session so safe to call in both cases. 
Zookeeper,WITHOUT_CLASSIFICATION,//  were able to talk to the ensemble 
Zookeeper,WITHOUT_CLASSIFICATION,//  now lets kill the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore duplicate create 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since for each snapshot we have a log file with same zxid expect same # logs as snaps to be kept 
Zookeeper,WITHOUT_CLASSIFICATION,//  should never be null but just to make   findbugs happy 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * When we call put later if the directBuffer is to                     * small to hold everything nothing will be copied                     * so we've got to slice the buffer if it's too big.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Stop selecting this key while processing on its   connection 
Zookeeper,WITHOUT_CLASSIFICATION,//  and restart leader election if config changed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  send out the kill signal 
Zookeeper,WITHOUT_CLASSIFICATION,//  Propose /foo1 update 
Zookeeper,WITHOUT_CLASSIFICATION,//  min is higher   max is lower 
Zookeeper,WITHOUT_CLASSIFICATION,//  3. SendThread has not created the authenticating object yet 
Zookeeper,WITHOUT_CLASSIFICATION,//  than 3. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Command line args non-null.  Run what was passed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  First filter out votes from unheard-from machines. Then   make the views consistent. Sometimes peers will have 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure the vote is reset to -1 after shutdown. 
Zookeeper,WITHOUT_CLASSIFICATION,//  we run through 100 snapshots (not all of them)   if we cannot get it running within 100 snapshots   we should  give up 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify the data in the first transaction 
Zookeeper,WITHOUT_CLASSIFICATION,//  In the DIFF case we don't need to do a snapshot because the transactions will sync on top of any existing snapshot   For SNAP and TRUNC the snapshot is needed to save that history 
Zookeeper,WITHOUT_CLASSIFICATION,//  this will cause everything to shutdown on   this learner handler and will help notify   the learner/observer instantaneously
Zookeeper,WITHOUT_CLASSIFICATION,//  there is only server in the quorum -- run as standalone 
Zookeeper,WITHOUT_CLASSIFICATION,//  Don't log an error for shutdown.
Zookeeper,WITHOUT_CLASSIFICATION,//  assuming that a version uniquely identifies a configuration so if   version is the same nothing to do here. 
Zookeeper,WITHOUT_CLASSIFICATION,//  third party customized getAppConfigurationEntry could throw IllegalArgumentException when JAAS   configuration isn't set. We can reevaluate whether to catch RuntimeException instead when more    different types of RuntimeException found 
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of machines stayed the same my server is not in the new 
Zookeeper,WITHOUT_CLASSIFICATION,//  skip the proposals the peer already has 
Zookeeper,WITHOUT_CLASSIFICATION,//  for Learner): 
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait for request completion infinitely 
Zookeeper,WITHOUT_CLASSIFICATION,//  Id 
Zookeeper,WITHOUT_CLASSIFICATION,//  see ZOOKEEPER-3320 for more details 
Zookeeper,WITHOUT_CLASSIFICATION,// no candidate acked p return the best candidate found so far 
Zookeeper,WITHOUT_CLASSIFICATION,//  "Connection reset by peer" 
Zookeeper,WITHOUT_CLASSIFICATION,//  convert from a server path to a client path 
Zookeeper,WITHOUT_CLASSIFICATION,//  The first time we are configured it is just to tell   us which machine we are 
Zookeeper,WITHOUT_CLASSIFICATION,//  parts[i] == "host:leaderPort:leaderElectionPort;clientPort" 
Zookeeper,WITHOUT_CLASSIFICATION,//  does not send anything back when it is done. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Convert windows path to UNIX to avoid problems with "\" 
Zookeeper,WITHOUT_CLASSIFICATION,//  reconfigMode = false (next shouldn't return null). 
Zookeeper,WITHOUT_CLASSIFICATION,//  closing so this is expected 
Zookeeper,WITHOUT_CLASSIFICATION,//  Watch status of ZooKeeper server. It will do a graceful shutdown 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets start servers 2 3 4 with the new config 
Zookeeper,WITHOUT_CLASSIFICATION,//  remove hosts number 6 and 7 (the currently last two in the list) 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * This is a simple test - try to connect two clients to a server     * accepting a maximum of one connection from each address. Check that     * only one is accepted. Close that connection and check that the other     * eventually connects.     *     * There is a possibility of a false positive here as when zk2 is tested     * for having connected it might not have been given enough time and finish     * connecting after the test is done. Since the     * server doesn't tell the client why it hasn't connected there's no     * obvious way to detect the difference.      */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#getSessionTimeout()      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Only the root path can end in a / so strip it off every other prefix 
Zookeeper,WITHOUT_CLASSIFICATION,//  this server wasn't around during the configuration change   we should check that it is able to connect finds out   about the change and becomes an observer. 
Zookeeper,WITHOUT_CLASSIFICATION,//  At this point there might still be new packets appended to outgoingQueue. 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * We no longer process NEWLEADER ack with this method. However             * the learner sends an ack back to the leader after it gets             * UPTODATE so we just ignore the message.              */
Zookeeper,WITHOUT_CLASSIFICATION,/*         * I'm done so joining.         */
Zookeeper,WITHOUT_CLASSIFICATION,//  Disable receiving data for all open connections ... 
Zookeeper,WITHOUT_CLASSIFICATION,//  important for x-DC scenarios. 
Zookeeper,WITHOUT_CLASSIFICATION,//  now make environment for client hang 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers from the old list that appear in the new list 
Zookeeper,WITHOUT_CLASSIFICATION,//  simulate log file 
Zookeeper,WITHOUT_CLASSIFICATION,//  Zxids should always be in order for write requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  indicates that a reconfig just committed 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start up a new instance 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that all clients connect properly 
Zookeeper,WITHOUT_CLASSIFICATION,//  If preAllocSize is positive and we are within 4KB of the known end of the file calculate a new file size 
Zookeeper,WITHOUT_CLASSIFICATION,//  determine client principal from subject. 
Zookeeper,WITHOUT_CLASSIFICATION,//  superuser: use Java system property for password if available. 
Zookeeper,WITHOUT_CLASSIFICATION,//  'B' 
Zookeeper,WITHOUT_CLASSIFICATION,//  consider as error
Zookeeper,WITHOUT_CLASSIFICATION,// good wanted to see that let's make sure we ran out of time 
Zookeeper,WITHOUT_CLASSIFICATION,//  create transactions to create the snapshot with create/delete pattern 
Zookeeper,WITHOUT_CLASSIFICATION,//  Construct a ConcurrentHashSet using a ConcurrentHashMap 
Zookeeper,WITHOUT_CLASSIFICATION,// 	    t3.start(); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Should not happen because we check for IPv6 address above 
Zookeeper,WITHOUT_CLASSIFICATION,// Let's make sure that we hit the code that ran the real assertion above 
Zookeeper,WITHOUT_CLASSIFICATION,//  together like in testNextGoesRound() 
Zookeeper,WITHOUT_CLASSIFICATION,//  The synchronized block here is for two purpose:   1. synchronize with the final cleanup() in SendThread.run() to avoid race   2. synchronized against each packet. So if a closeSession packet is added 
Zookeeper,WITHOUT_CLASSIFICATION,//   "modprinc -maxlife 3mins <principal>" in kadmin. 
Zookeeper,WITHOUT_CLASSIFICATION,//  got results 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify super with correct pass success 
Zookeeper,WITHOUT_CLASSIFICATION,//  cool this is what we want 
Zookeeper,WITHOUT_CLASSIFICATION,//  continuation 
Zookeeper,WITHOUT_CLASSIFICATION,//  Node 1 must be started first before quorum is formed to trigger the attempted invalid connection to 3 
Zookeeper,WITHOUT_CLASSIFICATION,//  Initialize with null vote 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send back the ping with our session data 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF to (60) and forward any packet starting at (41) 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * ZOOKEEPER-2201 - OutputArchive.writeRecord can block for long periods of     * time we must call it outside of the node lock.     * We call tree.serialize which calls our modified writeRecord method that     * blocks until it can verify that a separate thread can lock the DataNode     * currently being written i.e. that DataTree.serializeNode does not hold     * the DataNode lock while calling OutputArchive.writeRecord.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  check to see if this user is in the user password database. 
Zookeeper,WITHOUT_CLASSIFICATION,//  during the tests we run with 100K prealloc in the logs.   on windows systems prealloc of 64M was seen to take ~15seconds   resulting in test Assert.failure (client timeout on first session).   set env and directly in order to handle static init/gc issues 
Zookeeper,WITHOUT_CLASSIFICATION,//  start two servers to form a quorum; client should detect this and 
Zookeeper,WITHOUT_CLASSIFICATION,//  we don't have an option specified.   just delete whole quota node 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * We return true if one of the following three cases hold:         * 1- New epoch is higher         * 2- New epoch is the same as current epoch but new zxid is higher         * 3- New epoch is the same as current epoch new zxid is the same         *  as current zxid but server id is higher.          */
Zookeeper,WITHOUT_CLASSIFICATION,// need to get the PID number of the process first 
Zookeeper,WITHOUT_CLASSIFICATION,//  Propose an update 
Zookeeper,WITHOUT_CLASSIFICATION,// Delete the leaves first and eventually get rid of the root  Delete all versions of the node with -1. 
Zookeeper,WITHOUT_CLASSIFICATION,//  child channels options 
Zookeeper,WITHOUT_CLASSIFICATION,//  ok lets find the leader and kill everything else we have a few 
Zookeeper,WITHOUT_CLASSIFICATION,//  Prior to ZOOKEEPER-2249 attempting to pad in association with the second transaction will corrupt the first 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure no late arrivals 
Zookeeper,WITHOUT_CLASSIFICATION,//  count down to avoid infinite blocking call due to this latch if   any. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignoring the interrupt 
Zookeeper,WITHOUT_CLASSIFICATION,// 3. Upgrade peer012 with quorum.auth.enableSasl=true and 
Zookeeper,WITHOUT_CLASSIFICATION,//  be propagated to the other servers in the ensemble. 
Zookeeper,WITHOUT_CLASSIFICATION,//  property is set but with white spaces 
Zookeeper,WITHOUT_CLASSIFICATION,//  generate old config string 
Zookeeper,WITHOUT_CLASSIFICATION,//  Authentication exchange has completed 
Zookeeper,WITHOUT_CLASSIFICATION,// server.# 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create read-only server but don't start it immediately 
Zookeeper,WITHOUT_CLASSIFICATION,// Each op in a multi-op must have the same zxid! 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Write id (3.4.6 protocol). This previously caused a NPE in         * QuorumCnxManager.          */
Zookeeper,WITHOUT_CLASSIFICATION,/*         * Lists what threads haven't joined. A thread doesn't join if        * it hasn't decided upon a leader yet. It can happen that a        * peer is slow or disconnected and it can take longer to        * nominate and connect to the current leader.         */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * For ZOOKEEPER-1732 verify that it is possible to join an ensemble with     * inconsistent election round information.      */
Zookeeper,WITHOUT_CLASSIFICATION,/*          * if local session is not enabled or it used to be our local session         * throw sessions expires          */
Zookeeper,WITHOUT_CLASSIFICATION,//  things needed for waitForEpochAck to run (usually in leader.lead() but we're not running leader here) 
Zookeeper,WITHOUT_CLASSIFICATION,//  same configs and they should be equal to the config we get from QuorumPeer. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start sending packets 
Zookeeper,WITHOUT_CLASSIFICATION,//  before create otw race 
Zookeeper,WITHOUT_CLASSIFICATION,//  determined by whether we are currently throttled or not 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Does it start with an IPv6 literal?  */
Zookeeper,WITHOUT_CLASSIFICATION,//  of expiring the session. 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't call setup - we don't want to reassign ports/dirs etc... 
Zookeeper,WITHOUT_CLASSIFICATION,//  If the thread is in the the grace period interrupt   to come out of waiting. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ... and close connection 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify no auth 
Zookeeper,WITHOUT_CLASSIFICATION,// Expected 
Zookeeper,WITHOUT_CLASSIFICATION,//  shut the leader down 
Zookeeper,WITHOUT_CLASSIFICATION,// in milliseconds socket should connect/read within this period otherwise SocketTimeoutException 
Zookeeper,WITHOUT_CLASSIFICATION,//  LOG.warn("Proposed leader: " +   proposedLeader); 
Zookeeper,WITHOUT_CLASSIFICATION,//  When it comes to this point it guarantees that later queued   packet to outgoingQueue will be notified of death. 
Zookeeper,WITHOUT_CLASSIFICATION,//  get leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify that we have at least NUM_MESSAGES / SNAPCOUNT txnlog 
Zookeeper,WITHOUT_CLASSIFICATION,//  standalone starts with 0 epoch while quorum starts with 1 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * Try to obtain a challenge only if does not have                             * one yet                              */
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getParent()          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Now we're adding it back as a participant and everything should work. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Handle race condition where a node is listed   but gets deleted before it can be queried   ignore 
Zookeeper,WITHOUT_CLASSIFICATION,//  load the epochs 
Zookeeper,WITHOUT_CLASSIFICATION,//  resolve() call keeps the size of provider 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * returns the string that maps to this stat tracking.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  In the tests below a "Strict" server means a UnifiedServerSocket that   does not allow plaintext connections (in other words it's SSL-only).   A "Non Strict" server means a UnifiedServerSocket that allows both   plaintext and SSL incoming connections. 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we get notified about possibly missed events reload the key store / trust store just to be sure. 
Zookeeper,WITHOUT_CLASSIFICATION,//  NOP 
Zookeeper,WITHOUT_CLASSIFICATION,//  modify server's client port 
Zookeeper,WITHOUT_CLASSIFICATION,//  Receive challenge and store somewhere else 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test that the path string is validated 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set the margin 
Zookeeper,WITHOUT_CLASSIFICATION,//  2: inject network problem in one of the follower 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is the "auth" id so we have to expand it to the   authenticated ids of the requestor 
Zookeeper,WITHOUT_CLASSIFICATION,//  processResult() is used by ClientCnxn's sendThread to respond to   data[] contains the Zookeeper Server's SASL token.   ctx is the ZooKeeperSaslClient object. We use this object's respondToServer() method   to reply to the Zookeeper Server's SASL token 
Zookeeper,WITHOUT_CLASSIFICATION,//  Now we just start watching the assignments directory 
Zookeeper,WITHOUT_CLASSIFICATION,//  try to delete it now as we have done with the created file why to   wait for deleteOnExit() deletion 
Zookeeper,WITHOUT_CLASSIFICATION,//  Leader.NEWLEADER 
Zookeeper,WITHOUT_CLASSIFICATION,//  8. check the node exist in previous leader but not others 
Zookeeper,WITHOUT_CLASSIFICATION,//  start with the initLimit once the ack is processed   in LearnerHandler switch to the syncLimit 
Zookeeper,WITHOUT_CLASSIFICATION,//  Watcher function doesn't exists for the specified params 
Zookeeper,WITHOUT_CLASSIFICATION,//  See ZOOKEEPER-1161 for more details 
Zookeeper,WITHOUT_CLASSIFICATION,//  Divide the new servers into oldServers that were in the previous list 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Higher id              */
Zookeeper,WITHOUT_CLASSIFICATION,//  EventWatch is a simple immutable type so all we need to do   is make sure we can create all possible combinations of values. 
Zookeeper,WITHOUT_CLASSIFICATION,//  kill anything that was removed for the children 
Zookeeper,WITHOUT_CLASSIFICATION,//  Let the notifications timeout 
Zookeeper,WITHOUT_CLASSIFICATION,//  success 
Zookeeper,WITHOUT_CLASSIFICATION,//  test that all servers have: 
Zookeeper,WITHOUT_CLASSIFICATION,//  Force leader to use snapshot to sync with follower 
Zookeeper,WITHOUT_CLASSIFICATION,// No quorum in new config (1/2) 
Zookeeper,WITHOUT_CLASSIFICATION,//  If p is a reconfiguration multiple other operations may be ready to be committed   since operations wait for different sets of acks.   Currently we only permit one outstanding reconfiguration at a time   such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is   pending all wait for a quorum of old and new config so its not possible to get enough acks   for an operation without getting enough acks for preceding ops. But in the future if multiple   concurrent reconfigs are allowed this can happen and then we need to check whether some pending   ops may already have enough acks and can be committed which is what this code does. 
Zookeeper,WITHOUT_CLASSIFICATION,// LOG.info("Defaulting to majority quorums"); 
Zookeeper,WITHOUT_CLASSIFICATION,//  When increment ... 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check if we shutdown or doIO() closed this connection 
Zookeeper,WITHOUT_CLASSIFICATION,// Verify tree deleted 
Zookeeper,WITHOUT_CLASSIFICATION,//  used by ClientCnxn to know whether to emit a SASL-related event: either AuthFailed or SaslAuthenticated 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send SNAP 
Zookeeper,WITHOUT_CLASSIFICATION,//  If there isn't any version associated with the filename   the default version is 0. 
Zookeeper,WITHOUT_CLASSIFICATION,//  and the stat and quota nodes 
Zookeeper,WITHOUT_CLASSIFICATION,/*  followers in its view                                     */
Zookeeper,WITHOUT_CLASSIFICATION,//  verify that joiner has up-to-date config including all four servers. 
Zookeeper,WITHOUT_CLASSIFICATION,// //  // If you update the configuration parameters be sure  // to update the "conf" 4letter word  // 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore - can't find the path will output "n/a" instead 
Zookeeper,WITHOUT_CLASSIFICATION,//  Assert that commands are getting forwarded correctly 
Zookeeper,WITHOUT_CLASSIFICATION,//  is disabled 
Zookeeper,WITHOUT_CLASSIFICATION,//  only previously existing records need to be rolled back. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer#     * getTitle()      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of machines becomes smaller my server is in the new cluster 
Zookeeper,WITHOUT_CLASSIFICATION,//  Just put the description in 
Zookeeper,WITHOUT_CLASSIFICATION,//  cleanup <path vs watchlist> 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test that when asking for more snaps than we created we still only get snaps 
Zookeeper,WITHOUT_CLASSIFICATION,//  Only include votes from machines that we heard from 
Zookeeper,WITHOUT_CLASSIFICATION,//  Integer representation of value 
Zookeeper,WITHOUT_CLASSIFICATION,//  1 day 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure a different leader was elected 
Zookeeper,WITHOUT_CLASSIFICATION,//  Populate DIGEST-MD5 user -> password map with JAAS configuration entries from the "QuorumServer" section.   Usernames are distinguished from other options by prefixing the username with a "user_" prefix. 
Zookeeper,WITHOUT_CLASSIFICATION,//  r[0] == "host:clientPort"   r[1] == "host:leaderPort:leaderElectionPort"   Appending ";clientPort" 
Zookeeper,WITHOUT_CLASSIFICATION,//  we do this in an attempt to ensure that not all of the servers   in the ensemble take a snapshot at the same time 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since this is already a committed proposal we need to follow 
Zookeeper,WITHOUT_CLASSIFICATION,//  required for compilation from C++ 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Mapping from Peer to Thread number      */
Zookeeper,WITHOUT_CLASSIFICATION,//  eof reached 
Zookeeper,WITHOUT_CLASSIFICATION,//  not a directory 
Zookeeper,WITHOUT_CLASSIFICATION,//  Don't expect to get the same stats for different creates. 
Zookeeper,WITHOUT_CLASSIFICATION,//  When reset ... 
Zookeeper,WITHOUT_CLASSIFICATION,//  Client-initiated renegotiation in TLS is unsafe and   allows MITM attacks so we should disable it unless   it was explicitly enabled by the user.   A brief summary of the issue can be found at   https://www.ietf.org/proceedings/76/slides/tls-7.pdf 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make space for length 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid in txnlog range 
Zookeeper,WITHOUT_CLASSIFICATION,//  check watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  element could be removed by poll() 
Zookeeper,WITHOUT_CLASSIFICATION,//  that is rather innocuous. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Log warning message if txn comes out-of-order 
Zookeeper,WITHOUT_CLASSIFICATION,//  reset acl (back to open) and verify accessible again 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * The leader executes the following block which essentially shuts down                     * the peer if it is not the last round.                       */
Zookeeper,WITHOUT_CLASSIFICATION,//  Expiry time is (now/cnxnTimeout + 1)*cnxnTimeout   Range is (now + cnxnTimeout) to (now + 2*cnxnTimeout)   Add 1s buffer to be safe. 
Zookeeper,WITHOUT_CLASSIFICATION,//  currently shouldn't happen since there are only 2 learner types 
Zookeeper,WITHOUT_CLASSIFICATION,//  setup redirect out/err streams to get System.in/err use this judiciously!   get current err 
Zookeeper,WITHOUT_CLASSIFICATION,//  Only participant need to get outstanding proposals 
Zookeeper,WITHOUT_CLASSIFICATION,// corrupting the data 
Zookeeper,WITHOUT_CLASSIFICATION,//  254 
Zookeeper,WITHOUT_CLASSIFICATION,//  Give things time to report; 
Zookeeper,WITHOUT_CLASSIFICATION,//  if we have a loopback and it has an address use it 
Zookeeper,WITHOUT_CLASSIFICATION,/*                                  * If this server is not looking but the one that sent the ack                                 * is looking then send back what it believes to be the leader.                                  */
Zookeeper,WITHOUT_CLASSIFICATION,// find out who is the leader and kill it 
Zookeeper,WITHOUT_CLASSIFICATION,//  port in static config file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sketchy: We assume there will be a leader (probably us) in 3 seconds. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Leader asks for epoch (mocking Leader.lead behavior)   First add to connectingFollowers 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorNodeManager#setData     * (java.lang.String java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  It's all over 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test stat and watch of non existent node 
Zookeeper,WITHOUT_CLASSIFICATION,//  No need to synchronize since cnxns is backed by a ConcurrentHashMap 
Zookeeper,WITHOUT_CLASSIFICATION,//  quorum members 
Zookeeper,WITHOUT_CLASSIFICATION,//  The change should not have happened yet since we haven't committed 
Zookeeper,WITHOUT_CLASSIFICATION,//  since they can't complete the reconfig 
Zookeeper,WITHOUT_CLASSIFICATION,//  Revocation checking is only supported with the PKIX algorithm 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * This test wouldn't create any dynamic config.     * However it adds a "clientPort=XXX" in static config file.     * It checks the standard way of standalone mode.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  The stat parameter should be optional. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Create  */
Zookeeper,WITHOUT_CLASSIFICATION,//  if the weights are not above zero things will get messed up 
Zookeeper,WITHOUT_CLASSIFICATION,//  Try to load a non-protected private key while providing a password 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Since Configuration initializes the key store and trust store related         * configuration from system property. Reading property from         * configuration will be same reading from system property          */
Zookeeper,WITHOUT_CLASSIFICATION,//  not able to truncate the log 
Zookeeper,WITHOUT_CLASSIFICATION,//  No more packets to send: turn off write interest flag.   Will be turned on later by a later call to enableWrite()   from within ZooKeeperSaslClient (if client is configured   to attempt SASL authentication) or in either doIO() or   in doTransport() if not. 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we're testing a follower also check the session id on the 
Zookeeper,WITHOUT_CLASSIFICATION,//  I'm not in the view 
Zookeeper,WITHOUT_CLASSIFICATION,//  perhaps this is a V0 Create 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since this is a rough sanity check add some padding to maxBuffer to   make up for extra fields etc. (otherwise e.g. clients may be able to   write buffers larger than we can read from disk!) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Submit request directly to leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  add the n recent snap files for assertion 
Zookeeper,WITHOUT_CLASSIFICATION,//  Update lastCommitted and Db's zxid to a value representing the new epoch 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is an unlikely edge case but check it just in case 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify ClientCnxnSocketNIO creation 
Zookeeper,WITHOUT_CLASSIFICATION,//  since we have already acked an epoch equal to the leaders we cannot ack   again but we still need to send our lastZxid to the leader so that we can   sync with it if it does assume leadership of the epoch.   the -1 indicates that this reply should not count as an ack for the new epoch 
Zookeeper,WITHOUT_CLASSIFICATION,//  Here we create 3000 znodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start the servers with a static config file without a dynamic config file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This tests the case where ZK ensemble does not have the super user's password configured.   Reconfig should fail as the super user has to be explicitly configured via   zookeeper.DigestAuthenticationProvider.superDigest. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Cut the connection so the server will create closeSession as part 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send diff when we see the follower's zxid in our history 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid (3 1) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Now check that other commands don't blow everything up 
Zookeeper,WITHOUT_CLASSIFICATION,//  RFC 2818 3.1. Server Identity   "...Names may contain the wildcard   character * which is considered to match any single domain name   component or component fragment..."   Based on this statement presuming only singular wildcard is legal 
Zookeeper,WITHOUT_CLASSIFICATION,//  found path watcher 
Zookeeper,WITHOUT_CLASSIFICATION,//  we'll catch this later if it does happen after timeout so   why waste the time on poll
Zookeeper,WITHOUT_CLASSIFICATION,//  override the defaults 
Zookeeper,WITHOUT_CLASSIFICATION,//  before expiration). 
Zookeeper,WITHOUT_CLASSIFICATION,//  determine how long to sleep from looking at ticket's expiry.   We should not allow the ticket to expire but we should take into consideration   MIN_TIME_BEFORE_RELOGIN. Will not sleep less than MIN_TIME_BEFORE_RELOGIN unless doing so   would cause ticket expiration. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is a relatively common exception that we can't avoid 
Zookeeper,WITHOUT_CLASSIFICATION,//  null StoreFileType means 'autodetect from file extension' 
Zookeeper,WITHOUT_CLASSIFICATION,//  When local flag is true remove watchers for the given path   irrespective of rc. Otherwise shouldn't remove watchers locally   when sees failure from server. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Queue up any outstanding requests enabling the receipt of   new requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  (this is twice the timeout used in Leader#getEpochToPropose) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make create to fail then verify cversion. 
Zookeeper,WITHOUT_CLASSIFICATION,//  n recent snap shots 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Sequence numbers for messages  */
Zookeeper,WITHOUT_CLASSIFICATION,//  is also auth enabled while enabling quorum server require sasl. 
Zookeeper,WITHOUT_CLASSIFICATION,// clear up the kerberos state. But the tokens are not cleared! As per  the Java kerberos login module code only the kerberos credentials 
Zookeeper,WITHOUT_CLASSIFICATION,//  if this is not in cnxns then it's already closed 
Zookeeper,WITHOUT_CLASSIFICATION,//  if \n is first char in buffer leave the string buffer empty 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for new servers to be up running 
Zookeeper,WITHOUT_CLASSIFICATION,//  check and make sure the change is persisted 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify super can do anything and ignores ACLs 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * Do nothing just try again                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Round-robin assign this connection to a selector thread 
Zookeeper,WITHOUT_CLASSIFICATION,//  Warn about inconsistent peer type 
Zookeeper,WITHOUT_CLASSIFICATION,//  Text area for the message 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Start mock server 2          */
Zookeeper,WITHOUT_CLASSIFICATION,/*                                  * Global variable keeping track of                                  * how many peers have successfully                                  * joined.                                  */
Zookeeper,WITHOUT_CLASSIFICATION,/*  set socket linger to false so that socket close does not block  */
Zookeeper,WITHOUT_CLASSIFICATION,//  clear the buf so we don't get something we read before we sought   number of entries skipped to get to the end of the iterator less the number skipped to get to the start 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Test that the majority quorum verifier only counts votes from  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Use BufferedOutputStream to reduce the number of IP packets. This is 
Zookeeper,WITHOUT_CLASSIFICATION,//  the new server's config is going to include itself and the current leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify that the truncation and subsequent append were processed 
Zookeeper,WITHOUT_CLASSIFICATION,//  client login 
Zookeeper,WITHOUT_CLASSIFICATION,//  We take advantage of the limited size of the length to look   for cmds. They are all 4-bytes which fits inside of an int 
Zookeeper,WITHOUT_CLASSIFICATION,//  add previously existing records back. 
Zookeeper,WITHOUT_CLASSIFICATION,//  now that the ack has been processed expect the syncLimit 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Determine how much time a process has to wait once it believes that it     * has reached the end of leader election.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  if this Assert.fails it means we are not cleaning up after the closed   sessions. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We might consider changing the processor behaviour of    Observers to for example remove the disk sync requirements.   Currently they behave almost exactly the same as followers. 
Zookeeper,WITHOUT_CLASSIFICATION,//  The available port range that we use stays away from the ephemeral port   range which the OS will assign to client socket connections.  We can't   coordinate with the OS on the assignment of those ports so it's best to   stay out of that range to avoid conflicts.  Typical ranges for ephemeral   ports are:   - IANA suggests 49152 - 65535   - Linux typically uses 32768 - 61000   - FreeBSD modern versions typically use the IANA suggested range   - Windows modern versions typically use the IANA suggested range 
Zookeeper,WITHOUT_CLASSIFICATION,//  check for more than 2 children --   if zookeeper_stats and zookeeper_qutoas   are not the children then this path   is an ancestor of some path that 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event     * .ListSelectionEvent)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Generate transaction so we will have some txnlog 
Zookeeper,WITHOUT_CLASSIFICATION,//  Each session should see its cxids in order 
Zookeeper,WITHOUT_CLASSIFICATION,//  let qpconfig parse the file and then pull the stuff we are   interested in 
Zookeeper,WITHOUT_CLASSIFICATION,//  Look through the logs for output that indicates the falseLeader is LEADING then LOOKING then FOLLOWING 
Zookeeper,WITHOUT_CLASSIFICATION,//  in general we will see 1 connection from each   host setting the initial cap to 2 allows us   to minimize mem usage in the common case   of 1 entry --  we need to set the initial cap   to 2 to avoid rehash when the first entry is added 
Zookeeper,WITHOUT_CLASSIFICATION,//  We use the order array to preserve the order of the commands   for help. The hashmap will not preserver order. (It may be overkill.) 
Zookeeper,WITHOUT_CLASSIFICATION,//  DIFF only 
Zookeeper,WITHOUT_CLASSIFICATION,/*  String subreport = reads + " "                                + (((double) rlatency) / reads) + " " + writes                                + " " + (((double) wlatency / writes));  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Try creating some data. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  * <p> * Abstraction that interprets the <code>ephemeralOwner</code> field of a ZNode. Originally * the ephemeralOwner noted that a ZNode is ephemeral and which session created the node. * Through an optional system property (<code>zookeeper.extendedTypesEnabled</code>) "extended" * features such as TTL Nodes can be enabled. Special bits of the ephemeralOwner are used to * denote which feature is enabled and the remaining bits of the ephemeralOwner are feature * specific. * </p> * <p> * <p> * When the system property <code>zookeeper.extendedTypesEnabled</code> is true extended types * are enabled. An extended ephemeralOwner is defined as an ephemeralOwner whose high 8 bits are * set (<code>0xff00000000000000L</code>). The two bytes that follow the high 8 bits are * used to denote which extended feature the ephemeralOwner represents. The remaining 5 bytes are * used by the feature for whatever purpose is needed * </p> * <p> * <p> * Currently the only extended feature is TTL Nodes. It is denoted by the extended feature value of 0. * i.e. for TTL Nodes the ephemeralOwner has the high byte set to 0xff and the next 2 bytes are 0 followed * by 5 bytes that represent the TTL value in milliseconds. So an ephemeralOwner with a TTL value of 1 * millisecond is: <code>0xff00000000000001</code>. * </p> * <p> * <p> * To add new extended features: a) Add a new name to the enum b) define a constant EXTENDED_BIT_XXXX that's next * in line (after TTLs that would be <code>0x0001</code>) c) add a mapping to the extendedFeatureMap via the static * initializer * </p> * <p> * <p> * NOTE: "Container" nodes technically are extended types but as it was implemented before this feature they are * denoted specially. An ephemeral owner with only the high bit set (<code>0x8000000000000000L</code>) is by definition * a container node (irrespective of whether or not extended types are enabled). * </p>  */
Zookeeper,WITHOUT_CLASSIFICATION,/*  null StoreFileType means 'autodetect from file extension'  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Recovery mode 
Zookeeper,WITHOUT_CLASSIFICATION,//  For backward compatibility test some tests create dynamic configuration   without setting client port. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-2693 disables all 4lw by default. 
Zookeeper,WITHOUT_CLASSIFICATION,// reconfigure out leader and follower 1. Remaining follower 
Zookeeper,WITHOUT_CLASSIFICATION,//  and newServers that were not in the previous list 
Zookeeper,WITHOUT_CLASSIFICATION,//  zkServer has been started. So we don't need to start it again in secureCnxnFactory. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Keep track of the latest zxid which already queued 
Zookeeper,WITHOUT_CLASSIFICATION,//  clear data structures used for auth 
Zookeeper,WITHOUT_CLASSIFICATION,//  Client is configured to use a valid login Configuration so   authentication is either in progress successful or failed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  check 
Zookeeper,WITHOUT_CLASSIFICATION,// The old port should be clear at this stage 
Zookeeper,WITHOUT_CLASSIFICATION,//  enable it if disabled 
Zookeeper,WITHOUT_CLASSIFICATION,//  Unlike with Krb5LoginModule we don't do any actual login or credential passing here: authentication to Zookeeper   is done later through the SASLClient object. 
Zookeeper,WITHOUT_CLASSIFICATION,//  The synchronized is to prevent the race on shared variable "sslEngine".   Basically we only need to create it once. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Bring it back 
Zookeeper,WITHOUT_CLASSIFICATION,//  Do trigger an event to make sure that we do not get 
Zookeeper,WITHOUT_CLASSIFICATION,//  create session with min value 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has newer zxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  Height of the toster 
Zookeeper,WITHOUT_CLASSIFICATION,/*  we are going to say we last acked epoch 20  */
Zookeeper,WITHOUT_CLASSIFICATION,//  setup channel variables connection etc. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-569:   If no votes are received for live peers reset to voting    for ourselves as otherwise we may hang on to a vote  
Zookeeper,WITHOUT_CLASSIFICATION,//  this lock guarantees that channel won't be assigned after cleanup(). 
Zookeeper,WITHOUT_CLASSIFICATION,//  interval. 
Zookeeper,WITHOUT_CLASSIFICATION,//  maintain semantics even in chroot case   specifically - root cannot be deleted   I think this makes sense even in chroot case. 
Zookeeper,WITHOUT_CLASSIFICATION,//  pzxid updated with deleteNode on higher zxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure the leader has the subsequent changes that were made while it was offline 
Zookeeper,WITHOUT_CLASSIFICATION,//  Validate that we don't see any txn from the first session 
Zookeeper,WITHOUT_CLASSIFICATION,//  If not null then shutdown this leader 
Zookeeper,WITHOUT_CLASSIFICATION,// leader election time unless the designated leader fails                              
Zookeeper,WITHOUT_CLASSIFICATION,//  CommmitedLog is empty we will use txnlog up to lastProcessZxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  Kill server 1 to avoid it interferences with FLE of the quorum {2 3 4}. 
Zookeeper,WITHOUT_CLASSIFICATION,//  let's be conservative on the typical number of children 
Zookeeper,WITHOUT_CLASSIFICATION,//  We take advantage of the limited size of the length to look 
Zookeeper,WITHOUT_CLASSIFICATION,//  The create will trigger the get children and the exist   watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  There should be 2000 create requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  only take in the first 3 servers as old quorum config. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Delete of a node folowed by an update of the (now) deleted node  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Convert WatchedEvent to a type that can be sent over the wire 
Zookeeper,WITHOUT_CLASSIFICATION,//  throws a LoginException: see startConnect() below. 
Zookeeper,WITHOUT_CLASSIFICATION,//  send 0 if session is no 
Zookeeper,WITHOUT_CLASSIFICATION,//  This method gets the version from the end of dynamic file name.   For example "zoo.cfg.dynamic.0" returns initial version "0".   "zoo.cfg.dynamic.1001" returns version of hex number "0x1001".   If a dynamic file name doesn't have any version at the end of file 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify each quorum peer has expected config in its config zNode. 
Zookeeper,WITHOUT_CLASSIFICATION,//  returns all configuration servers -- participants and observers 
Zookeeper,WITHOUT_CLASSIFICATION,//  first convert participant to observer then observer to participant 
Zookeeper,WITHOUT_CLASSIFICATION,//  convince falseLeader that it is the leader 
Zookeeper,WITHOUT_CLASSIFICATION,/*  version - version of config from which we want to reconfigure - if current config is different     * reconfiguration will fail. Should be committed from the CLI to disable this option.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Update the node on the leader 
Zookeeper,WITHOUT_CLASSIFICATION,// check for the code path that throws at server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of machines increases my server is not in the new cluster   load on old servers must be decreased so must connect to one of the   new servers   i.e. pNew = 1. 
Zookeeper,WITHOUT_CLASSIFICATION,//  set watches on child 
Zookeeper,WITHOUT_CLASSIFICATION,//  take a snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  65537 
Zookeeper,WITHOUT_CLASSIFICATION,//  We have the request now process and setup for next 
Zookeeper,WITHOUT_CLASSIFICATION,//  512k 
Zookeeper,WITHOUT_CLASSIFICATION,//  check that static config file doesn't include membership info   and has a pointer to the dynamic configuration file 
Zookeeper,WITHOUT_CLASSIFICATION,//  Fallthrough and log errors outside the synchronized block 
Zookeeper,WITHOUT_CLASSIFICATION,//  we are going to have to extrapolate the epoch information 
Zookeeper,WITHOUT_CLASSIFICATION,//  best effort to print the path assoc with this request 
Zookeeper,WITHOUT_CLASSIFICATION,//  and close the connection to the leader 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Occasionally seen false negatives with a 5s timeout.          */
Zookeeper,WITHOUT_CLASSIFICATION,// if neither option -n or -b is specified we delete   the quota node for thsi node. 
Zookeeper,WITHOUT_CLASSIFICATION,//  shutdown() has to be explicitly called for every thread to   make sure that resources are freed properly and all fixed network ports   are available for other test cases 
Zookeeper,WITHOUT_CLASSIFICATION,//  we are now going to start getting transactions to apply followed by an UPTODATE 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event     * .TreeSelectionEvent)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  hdm.addLoggerMBean(logger.getName()); 
Zookeeper,WITHOUT_CLASSIFICATION,//  2 followers out of 3 are a majority of the voting view 
Zookeeper,WITHOUT_CLASSIFICATION,//  its supposed to be the first server on serverList.   we'll set it later see below (*) 
Zookeeper,WITHOUT_CLASSIFICATION,//  config file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't overwrite with "special" xids - we're interested   in the clients last real operation 
Zookeeper,WITHOUT_CLASSIFICATION,/* election port */
Zookeeper,WITHOUT_CLASSIFICATION,/*                 cversion > 0: keep newly created containers from being deleted                before any children have been added. If you were to create the                container just before a container cleaning period the container                would be immediately be deleted.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  interesting to see what's there... 
Zookeeper,WITHOUT_CLASSIFICATION,//  During session upgrade 
Zookeeper,WITHOUT_CLASSIFICATION,//  Construct a connection request 
Zookeeper,WITHOUT_CLASSIFICATION,//  create a /test znode and check that read/write works before 
Zookeeper,WITHOUT_CLASSIFICATION,//  Next the old servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  during second iteration leavingIndex will be the index of the leader 
Zookeeper,WITHOUT_CLASSIFICATION,/*  password is 'test' */
Zookeeper,WITHOUT_CLASSIFICATION,//  org.apache.log4j.LogManager.getLoggerRepository(); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure nothing is straggling! 
Zookeeper,WITHOUT_CLASSIFICATION,/* quorum port */
Zookeeper,WITHOUT_CLASSIFICATION,//  Attempting to load with the wrong key password should fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  there can be extra sessionClose proposals 
Zookeeper,WITHOUT_CLASSIFICATION,//  create 5 servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  Trigger the watches and ensure they properly propagate to the client 
Zookeeper,WITHOUT_CLASSIFICATION,/*  4 MB  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Get the string that is being dropped. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNodeChild(java.lang.String int)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Get memory information. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make all zxids for a given vote id equal to the largest zxid seen for 
Zookeeper,WITHOUT_CLASSIFICATION,//  use async otherwise it will block the logLock in   ZKDatabase and the setData request will timeout 
Zookeeper,WITHOUT_CLASSIFICATION,//  10.10.10.2:1236 10.10.10.1:1235 
Zookeeper,WITHOUT_CLASSIFICATION,//  create ephemeral node 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * We match with nextPending so that we can move to the             * next request when it is committed. We also want to             * use nextPending because it has the cnxn member set             * properly.              */
Zookeeper,WITHOUT_CLASSIFICATION,// set that we have been interrupted. 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * First make the views consistent. Sometimes peers will have different         * zxids for a server depending on timing.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify that FinalRequestProcessor hasn't changed the original ACL objects 
Zookeeper,WITHOUT_CLASSIFICATION,//  first address worked 
Zookeeper,WITHOUT_CLASSIFICATION,//  cause disconnection - this will cause next to be called   which will in turn call nextReconfigMode
Zookeeper,WITHOUT_CLASSIFICATION,//  Try to reduce memory consumption by freeing up buffer space   which is no longer needed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait until followers time out in getEpochToPropose - they shouldn't return   normally because the leader didn't execute getEpochToPropose and so its epoch was not 
Zookeeper,WITHOUT_CLASSIFICATION,//  seconds so it should be plenty of time 
Zookeeper,WITHOUT_CLASSIFICATION,//  add all to commandMap 
Zookeeper,WITHOUT_CLASSIFICATION,//  Assume this is an existing cluster. 
Zookeeper,WITHOUT_CLASSIFICATION,//   we check events 
Zookeeper,WITHOUT_CLASSIFICATION,//  If there is only one createSession request in between zxid diff   will be exactly 2. The alternative way of checking is to actually 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify all the servers reporting same number of nodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  increase the tick time to delay the leader going to looking 
Zookeeper,WITHOUT_CLASSIFICATION,//  server ids are 1 2 and 3 
Zookeeper,WITHOUT_CLASSIFICATION,//  However we should be able to disconnect and reconnect to the same   server with the same session id (as long as we do it quickly 
Zookeeper,WITHOUT_CLASSIFICATION,//  waiting time for expected condition 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#getACLs     * (java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Wait until leader starts up              */
Zookeeper,WITHOUT_CLASSIFICATION,//  6. exit follower A after taking snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  the dynamic file pointer. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Append and commit 2 transactions to the log 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see java.lang.Object#hashCode()      */
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *         * @see org.apache.zookeeper.server.RequestProcessor#processRequest(org.apache.zookeeper.server.Request)          */
Zookeeper,WITHOUT_CLASSIFICATION,//  try sync zk exists  
Zookeeper,WITHOUT_CLASSIFICATION,//  Attempt to renegotiate after establishing the connection 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify AlwaysOnTop Flag... 
Zookeeper,WITHOUT_CLASSIFICATION,//  Leader and learner will control the zookeeper server and pass it into QuorumPeer. 
Zookeeper,WITHOUT_CLASSIFICATION,//  /foo 
Zookeeper,WITHOUT_CLASSIFICATION,//  We don't want to do this check since the session expiration thread   queues up this operation without being the session owner.   this request is the last of the session so it should be ok  zks.sessionTracker.checkSession(request.sessionId request.getOwner()); 
Zookeeper,WITHOUT_CLASSIFICATION,//  ok we have some match and need to update 
Zookeeper,WITHOUT_CLASSIFICATION,//  object created but start() not called yet   start() called but background thread has not entered main loop   background thread is running   stop() called but background thread has not exited main loop   stop() called and background thread has exited or background thread crashed 
Zookeeper,WITHOUT_CLASSIFICATION,//  if it is already simple just return it 
Zookeeper,WITHOUT_CLASSIFICATION,//  waiting for re-election. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ************** target file does not exist 
Zookeeper,WITHOUT_CLASSIFICATION,//  note that clientToken might be empty (clientToken.length == 0):   if using the DIGEST-MD5 mechanism clientToken will be empty at the beginning of the   SASL negotiation process. 
Zookeeper,WITHOUT_CLASSIFICATION,// check that membership makes sense; leader will make these checks again  don't check for leader election ports since   client doesn't know what leader election alg is used 
Zookeeper,WITHOUT_CLASSIFICATION,//  we've already validated therefore if the path is of length 1 it's the root 
Zookeeper,WITHOUT_CLASSIFICATION,// PASS 
Zookeeper,WITHOUT_CLASSIFICATION,//  this replicates NC - close the output stream before reading 
Zookeeper,WITHOUT_CLASSIFICATION,//  No command specified print links to all commands instead 
Zookeeper,WITHOUT_CLASSIFICATION,//  Apply to db directly if we haven't taken the snapshot
Zookeeper,WITHOUT_CLASSIFICATION,//  Check if stopped while request was on queue
Zookeeper,WITHOUT_CLASSIFICATION,//  a session should automatically expire after an amount of time 
Zookeeper,WITHOUT_CLASSIFICATION,//  with 0-padding in the filename 
Zookeeper,WITHOUT_CLASSIFICATION,//  we are the final link in the chain 
Zookeeper,WITHOUT_CLASSIFICATION,//  done checking - it's the root 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set default font... 
Zookeeper,WITHOUT_CLASSIFICATION,/*  leaving - comma separated list of server IDs to be removed from the ensemble. Only used for     * incremental reconfigurations.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  try node creation for around 15 second 
Zookeeper,WITHOUT_CLASSIFICATION,//  If the user explicitly overrides the default Login Context they probably expected SASL to   succeed. But if we got here SASL failed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Servers have been set up. Now go test if secure connection is successful. 
Zookeeper,WITHOUT_CLASSIFICATION,//  assert remotePeerBean.1 of ReplicatedServer_2 
Zookeeper,WITHOUT_CLASSIFICATION,//  The leader is going to dump the database 
Zookeeper,WITHOUT_CLASSIFICATION,//  for a dead peer 
Zookeeper,WITHOUT_CLASSIFICATION,//  VisibleForTesting 
Zookeeper,WITHOUT_CLASSIFICATION,// login and also update the subject field of this instance to 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Process a sync request      */
Zookeeper,WITHOUT_CLASSIFICATION,//  However a failure is still expected as user is not authenticated so ACL check will fail. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Thread.sleep(100);   } 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note that this thread isn't going to be doing anything else   so rather than spawning another thread we will just call   run() in this thread. 
Zookeeper,WITHOUT_CLASSIFICATION,// dumpConnections connection is implemented only in NIOServerCnxnFactory 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure that they timed out and didn't return normally   
Zookeeper,WITHOUT_CLASSIFICATION,//  we don't need to roll back any records because there is nothing left. 
Zookeeper,WITHOUT_CLASSIFICATION,//  & 0xFFFFFFFFL;   >> 32; 
Zookeeper,WITHOUT_CLASSIFICATION,// incremental change - must be a majority quorum system    
Zookeeper,WITHOUT_CLASSIFICATION,//  assert remotePeerBean.1 of ReplicatedServer_3 
Zookeeper,WITHOUT_CLASSIFICATION,//  Exception is set when local session failed to upgrade   so we just need to report the error 
Zookeeper,WITHOUT_CLASSIFICATION,//  Have to check !closingChannel because an error in   receiveMessage() could have led to close() being called. 
Zookeeper,WITHOUT_CLASSIFICATION,//  -2 is the xid for pings 
Zookeeper,WITHOUT_CLASSIFICATION,//  concurrent reconfigs are allowed this can happen. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Oldest log is already remove so this should point to the start of 
Zookeeper,WITHOUT_CLASSIFICATION,//  reconstructing transaction with the chroot prefix 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify the data in the second transaction 
Zookeeper,WITHOUT_CLASSIFICATION,//  now check if the bytes match the quota 
Zookeeper,WITHOUT_CLASSIFICATION,//  Step for the toaster 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Higher zxid              */
Zookeeper,WITHOUT_CLASSIFICATION,//  the list is already removed from the ephemerals   so we do not have to worry about synchronizing on   the list. This is only called from FinalRequestProcessor   so there is no need for synchronization. The list is not   changed here. Only create and delete change the list which   are again called from FinalRequestProcessor in sequence. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent     * )      */
Zookeeper,WITHOUT_CLASSIFICATION,//  authentication packet. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This should never happen! 
Zookeeper,WITHOUT_CLASSIFICATION,//  But still what's valid in white list will get through. 
Zookeeper,WITHOUT_CLASSIFICATION,//  we need to make sure that we don't take the snapshot twice. 
Zookeeper,WITHOUT_CLASSIFICATION,//  if so I'll remain the leader     
Zookeeper,WITHOUT_CLASSIFICATION,//  or fails. 
Zookeeper,WITHOUT_CLASSIFICATION,//  DIFF + 4 proposals + 4 commit 
Zookeeper,WITHOUT_CLASSIFICATION,//  If the connect attempt was cancelled but succeeded   anyway make sure to close the channel otherwise   we may leak a file descriptor. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Reset to MIN_SNAP_RETAIN_COUNT if invalid (less than 3)   PurgeTxnLog.purge(File File int) will not allow to purge less 
Zookeeper,WITHOUT_CLASSIFICATION,//  2) verify that empty child name success if sequential  
Zookeeper,WITHOUT_CLASSIFICATION,//  We send TRUNC to 3 and forward any packet starting 5 
Zookeeper,WITHOUT_CLASSIFICATION,//  if node is created successfully then it means that ZooKeeper service 
Zookeeper,WITHOUT_CLASSIFICATION,//  @VisibleForTesting 
Zookeeper,WITHOUT_CLASSIFICATION,//  Throttle acceptance of new requests. If this entailed a state change 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Main loop              */
Zookeeper,WITHOUT_CLASSIFICATION,//  This should never happen but we should fall back to sending   snapshot just in case. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getSessionMeta()      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Add all the removed watch events to the event queue so that the   clients will be notified with 'Data/Child WatchRemoved' event type. 
Zookeeper,WITHOUT_CLASSIFICATION,//  The pattern is holding so far.  Let's run the counter a bit   to be sure it continues to spit out the correct answer 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Creates list of peers.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Use a single listener instance to reduce GC   Note: this listener is only added when LOG.isTraceEnabled() is true 
Zookeeper,WITHOUT_CLASSIFICATION,//  last op committed was a leader change - from now on    the new leader should commit         
Zookeeper,WITHOUT_CLASSIFICATION,//  New Watcher which will be used for removal 
Zookeeper,WITHOUT_CLASSIFICATION,//  3: close the session so that ephemeral node is deleted 
Zookeeper,WITHOUT_CLASSIFICATION,//  CN matching has been deprecated by rfc2818 and can be used   as fallback only when no subjectAlts are available 
Zookeeper,WITHOUT_CLASSIFICATION,//  content changed 
Zookeeper,WITHOUT_CLASSIFICATION,//  write extra configurations 
Zookeeper,WITHOUT_CLASSIFICATION,//  During connection expiry the server will close the connection.   After the socket is closed when the client tries to read a   line of text it will throw java.net.SocketException.   @see jira issue ZOOKEEPER-1862 
Zookeeper,WITHOUT_CLASSIFICATION,//  if session creation Assert.fails dump the thread stack   and try the next server 
Zookeeper,WITHOUT_CLASSIFICATION,//  extract server id x from first part of joiner: server.x 
Zookeeper,WITHOUT_CLASSIFICATION,//  learner with ipaddress in principal 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is expected case since server 0 is down and 3 can't vote   (observer in current role) and we need 3 votes from 0 1 2 3 
Zookeeper,WITHOUT_CLASSIFICATION,//  remove watcher for each node and remove node from   collection of watched nodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create the NIOServerCnxn that will handle the client requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  ok this is the limit node   get the real node and update   the count and the bytes 
Zookeeper,WITHOUT_CLASSIFICATION,// wait for servers to be up 
Zookeeper,WITHOUT_CLASSIFICATION,//  try it again 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set to true when connected to a quorum server. 
Zookeeper,WITHOUT_CLASSIFICATION,//  worst case here the tmp file/resources(fd) are not cleaned up   and the caller will be notified (IOException) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test child watch and create with sequence 
Zookeeper,WITHOUT_CLASSIFICATION,/*  return a zxid of zero since we the database is empty  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Start 3rd peer and check if it joins the quorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  Authenticate client certificate 
Zookeeper,WITHOUT_CLASSIFICATION,//  Use setData instead of sync API to force a view update.   Check ZOOKEEPER-2137 for details. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Color for toaster 
Zookeeper,WITHOUT_CLASSIFICATION,//  now check if the counts match the quota 
Zookeeper,WITHOUT_CLASSIFICATION,//  Here we enable the 4lw which ZooKeeper tests depends. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * setLastConnectionProps(java.util.Properties)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  this is the only child node. 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure it has a chance to write it to disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start and schedule the the purge task 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer is within committedLog range 
Zookeeper,WITHOUT_CLASSIFICATION,// empty logs 
Zookeeper,WITHOUT_CLASSIFICATION,//  Close the client without changing the node 
Zookeeper,WITHOUT_CLASSIFICATION,//  We don't need to worry about removing empty sets   they'll eventually be removed when they expire. 
Zookeeper,WITHOUT_CLASSIFICATION,//  shouldn't happen without filter 
Zookeeper,WITHOUT_CLASSIFICATION,//  -1 means notification 
Zookeeper,WITHOUT_CLASSIFICATION,//  Kill half the servers make a change restart the dead 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * Sends more notifications if haven't received enough.                 * Otherwise processes new notification.                  */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Shutdown flag      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Assert 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * getZNodeList and getZNodeListJSON are bogus - but necessary.     * Unfortunately Jersey 1.0.3 is unable to render both xml and json properly     * in the case where a object contains a list/array. It's impossible to get     * it to render properly for both. As a result we need to split into two     * jaxb classes.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  TODO test octet fully 
Zookeeper,WITHOUT_CLASSIFICATION,//  This can happen in state transitions   just ignore the request 
Zookeeper,WITHOUT_CLASSIFICATION,//  http://docs.oracle.com/javase/6/docs/technotes/guides/security/jgss/jgss-features.html   """   In addition when performing operations as a particular   Subject e.g. Subject.doAs(...) or   Subject.doAsPrivileged(...)   the to-be-used GSSCredential should be added to Subject's   private credential set. Otherwise the GSS operations will   fail since no credential is found.   """ 
Zookeeper,WITHOUT_CLASSIFICATION,//  Local session 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Building notification packet to send                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  2 followers out of 5 is not a majority 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore 
Zookeeper,WITHOUT_CLASSIFICATION,//  do authenticating learner 
Zookeeper,WITHOUT_CLASSIFICATION,//  SASL authentication is completed successfully or not:   enable the socket's writable flag so that any packets waiting for authentication to complete in 
Zookeeper,WITHOUT_CLASSIFICATION,//  Assert   Resolver called 10 times because we shouldn't cache the resolved addresses 
Zookeeper,WITHOUT_CLASSIFICATION,//  stat ruok and isro are white listed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  the response 
Zookeeper,WITHOUT_CLASSIFICATION,//  getting a quorum from all necessary configurations. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore for purposes of this test 
Zookeeper,WITHOUT_CLASSIFICATION,//  1. Matches authenticationID and authorizationID 
Zookeeper,WITHOUT_CLASSIFICATION,/*  In the following IF-THEN-ELSE block we process syncs on the leader.         * If the sync is coming from a follower then the follower         * handler adds it to syncHandler. Otherwise if it is a client of         * the leader that issued the sync command then syncHandler won't         * contain the handler. In this case we add it to syncHandler and         * call processRequest on the next processor.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  check for well formed ACLs   This resolves https://issues.apache.org/jira/browse/ZOOKEEPER-1877 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure everything is consistent 
Zookeeper,WITHOUT_CLASSIFICATION,//  2. kill all followers 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Class to verify of the thread has become a follower      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Exists only to defeat instantiation. 
Zookeeper,WITHOUT_CLASSIFICATION,//  we should see that now all servers have the same config of 5 servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  possible 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test synchronous API 
Zookeeper,WITHOUT_CLASSIFICATION,//  2nd read is after the renegotiation attempt and will fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  TODO Write the v6addr2Bytes 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait up to 30 seconds for the disco to be delivered 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Return message to queue for another attempt later if                     * epoch hasn't changed.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  if not RSA assume EC 
Zookeeper,WITHOUT_CLASSIFICATION,/*  This file copied from Hadoop's security branch  * with the following changes:  * 1. package changed from org.apache.hadoop.security to  *    org.apache.zookeeper.server.auth.  * 2. Usage of Hadoop's Configuration class removed since  *    it is not available in Zookeeper: instead system property  *    "zookeeper.security.auth_to_local" is used.   */
Zookeeper,WITHOUT_CLASSIFICATION,//  note that we should run the server shut it down and only then   simulate a reconfig in progress by writing the temp file but here no   other server is competing with them in FLE so we can skip this step 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * We populate the necessary data structures in the CommitProcessor     * instance and run processCommitted      */
Zookeeper,WITHOUT_CLASSIFICATION,//  create persistent sequential node 
Zookeeper,WITHOUT_CLASSIFICATION,//  pick a reasonable epoch number   this should only happen once when moving to a   new code version 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set the joining/leaving/members values based on the mode we're in 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * Processing queuedRequests: Process the next requests until we                 * find one for which we need to wait for a commit. We cannot                 * process a read request while we are processing write request.                  */
Zookeeper,WITHOUT_CLASSIFICATION,/*  * This code is originally from HDFS see the similarly named file there * in case of bug fixing history etc. * * Branch : trunk * Github Revision: 1d1ab587e4e92ce3aea4cb144811f69145cb3b33  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Try to remove follower2 which is the only remaining server. This should fail. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Write to txnlog and take periodic snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  This test simulate the use case of change of membership through rolling   restart. For a 3 node ensemble we expand it to a 5 node ensemble verify   during the process each node has the expected configuration setting pushed   via updating local zoo.cfg file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  validate upper limit 
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait for the listener to terminate. 
Zookeeper,WITHOUT_CLASSIFICATION,//  8. now we have invalid data on disk let's load it and verify 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't do anything 
Zookeeper,WITHOUT_CLASSIFICATION,//  simply return don't require auth 
Zookeeper,WITHOUT_CLASSIFICATION,//  set saslLoginFailed to true to simulate the LoginException 
Zookeeper,WITHOUT_CLASSIFICATION,//  aborting multi shouldn't leave any record. 
Zookeeper,WITHOUT_CLASSIFICATION,//  The only requests that should be on toBeApplied are write   requests for which we will have a hdr. We can't simply use   request.zxid here because that is set on read requests to equal   the zxid of the last write op. 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * If don't have challenge yet skip sending                             * notification                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  things needed for waitForNewLeaderAck to run (usually in leader.lead() but we're not running leader here) 
Zookeeper,WITHOUT_CLASSIFICATION,//  also clears the wantClientAuth flag according to docs 
Zookeeper,WITHOUT_CLASSIFICATION,//  ..but consume (with a log message) all other types of exceptions. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Member variables for mocking ZkDatabase 
Zookeeper,WITHOUT_CLASSIFICATION,//  else there is no need to clear the database    * When a new quorum is established we can still apply the diff      on top of the same zkDb data    * If we fetch a new snapshot from leader the zkDb will be      cleared anyway before loading the snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,// One time scheduling. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Regardless of TICKET_RENEW_WINDOW setting above and the ticket expiry time   thread will not sleep between refresh attempts any less than 1 minute (60*1000 milliseconds = 1 minute). 
Zookeeper,WITHOUT_CLASSIFICATION,//  by whether we have any pending buffers on the output queue or not 
Zookeeper,WITHOUT_CLASSIFICATION,//  we are throttled so we need to queue 
Zookeeper,WITHOUT_CLASSIFICATION,//  remember these servers so we can add them back later 
Zookeeper,WITHOUT_CLASSIFICATION,/*  DNS resolution tests  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Try to load a password-protected private key with the wrong password 
Zookeeper,WITHOUT_CLASSIFICATION,//  force a buffer fill on next read 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test view contains other servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure the first handshake completed and only the second   one failed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  The value of callCount can exceed 1 only if the callback thread 
Zookeeper,WITHOUT_CLASSIFICATION,// we will get a checksum failure 
Zookeeper,WITHOUT_CLASSIFICATION,//  Read the log back from disk this will throw a java.io.IOException: CRC check failed prior to ZOOKEEPER-2249 
Zookeeper,WITHOUT_CLASSIFICATION,//  Account for running within IKVM and create a new MBeanServer   if the PlatformMBeanServer does not exist. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Registers shutdown handler which will be used to know the 
Zookeeper,WITHOUT_CLASSIFICATION,//  session moved is a connection level error we need to tear   down the connection otw ZOOKEEPER-710 might happen   ie client on slow follower starts to renew session fails   before this completes then tries the fast follower (leader)   and is successful however the initial renew is then   successfully fwd/processed by the leader and as a result   the client and leader disagree on where the client is most   recently attached (and therefore invalid SESSION MOVED generated) 
Zookeeper,WITHOUT_CLASSIFICATION,//  If have received from all nodes then terminate 
Zookeeper,WITHOUT_CLASSIFICATION,//  we're done; don't expect to send another BIND 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.WatcherEvent)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  write length of message 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Reconfig tests with IP addresses  */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Flag to determine whether to authenticate or not      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Since the proposal has been committed we need to send the   commit message also 
Zookeeper,WITHOUT_CLASSIFICATION,//  now corrupt the snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  reset cnxn factory 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * To enable observers to have no identifier we need a generic identifier     * at least for QuorumCnxManager. We use the following constant to as the     * value of such a generic identifier.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Try connecting with the same session id on a different 
Zookeeper,WITHOUT_CLASSIFICATION,//  A session can both be a local and global session during   upgrade 
Zookeeper,WITHOUT_CLASSIFICATION,//  directories 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ignoring exception. If there is an interrupted exception   then one of the following assertion will fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  and try to renew the ticket. 
Zookeeper,WITHOUT_CLASSIFICATION,//  finally we should also check that the lag-off server has updated 
Zookeeper,WITHOUT_CLASSIFICATION,//  create 3 servers 
Zookeeper,WITHOUT_CLASSIFICATION,// CheckedOutputStream cout = new CheckedOutputStream() 
Zookeeper,WITHOUT_CLASSIFICATION,//  @see jira issue ZOOKEEPER-961 
Zookeeper,WITHOUT_CLASSIFICATION,//  We start at 1 because / will create an empty part first 
Zookeeper,WITHOUT_CLASSIFICATION,// If wins the challenge then close the new connection. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Thrown if the caller does not have permission to retrieve the Configuration.   In this case simply returning false is correct. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is ok it just means that the session revalidation failed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is fine 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify that now ZooKeeper service is up and running 
Zookeeper,WITHOUT_CLASSIFICATION,//  it should exist 
Zookeeper,WITHOUT_CLASSIFICATION,//  change everyone's leader election port 
Zookeeper,WITHOUT_CLASSIFICATION,//  the files we expected 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify access using original auth 
Zookeeper,WITHOUT_CLASSIFICATION,//  specific election address 
Zookeeper,WITHOUT_CLASSIFICATION,//  node doesn't exists 
Zookeeper,WITHOUT_CLASSIFICATION,//  truncate it 
Zookeeper,WITHOUT_CLASSIFICATION,//  Snapshot containing 5000-byte znode and logfile containing create txn 
Zookeeper,WITHOUT_CLASSIFICATION,//  leader goes in looking state 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * This sleep time represents the time a follower                     * would take to declare the leader dead and start                     * a new leader election.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of machines increased my server is not in the new cluster 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * peer1 and peer2 are A and B in the above example.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  init connection executors 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Verify that all of the servers see the same number of nodes     * at the root      */
Zookeeper,WITHOUT_CLASSIFICATION,//  property is not set we should get the default value 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Building challenge packet to send                      */
Zookeeper,WITHOUT_CLASSIFICATION,// tried all servers and couldn't connect 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is the only place that can throw IO exception 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getAllowsChildren()          */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Generates 3 ports per server      */
Zookeeper,WITHOUT_CLASSIFICATION,//  is a CA 
Zookeeper,WITHOUT_CLASSIFICATION,//  Now do the tally 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Pretend that any watcher exists  */
Zookeeper,WITHOUT_CLASSIFICATION,//  10.10.10.4:1238 10.10.10.3:1237 10.10.10.2:1236 10.10.10.1:1235   10.10.10.3:1237 10.10.10.2:1236 10.10.10.1:1235 
Zookeeper,WITHOUT_CLASSIFICATION,//  This server should fail to join the quorum as it is not using TLSv1.2 
Zookeeper,WITHOUT_CLASSIFICATION,//  This method is to maintain compatiblity of startup(zks) and enable sharing of zks 
Zookeeper,WITHOUT_CLASSIFICATION,//  Assuming the packet will be sent out successfully. Because if it fails   the channel will close and clean up queues. 
Zookeeper,WITHOUT_CLASSIFICATION,//  See ZooKeeper.java for an explanation of why we need @SuppressWarnings("try") 
Zookeeper,WITHOUT_CLASSIFICATION,//  create with CreateMode 
Zookeeper,WITHOUT_CLASSIFICATION,//     which means it acked from itself 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * There are two things going on in the logic below:             *              * 1. skip comparing the zxid and electionEpoch for votes for servers              *    out of election.              *                 *    Need to skip those because they can be inconsistent due to               *    scenarios described in QuorumPeer.updateElectionVote.              *             *    And given that only one ensemble can be running at a single point              *    in time and that each epoch is used only once using only id and              *    epoch to compare the votes is sufficient.             *             *    {@see https://issues.apache.org/jira/browse/ZOOKEEPER-1805}             *             * 2. skip comparing peerEpoch if if we're running with mixed ensemble              *    with (version > 0x0) and without the change (version = 0x0)              *    introduced in ZOOKEEPER-1732.             *             *    {@see https://issues.apache.org/jira/browse/ZOOKEEPER-1732}             *             *    The server running with and without ZOOKEEPER-1732 will return              *    different peerEpoch. During rolling upgrades it's possible             *    that 2/5 servers are returning epoch 1 while the other 2/5             *    are returning epoch 2 the other server need to ignore the              *    peerEpoch to be able to join it.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  we are done with deserializing the   the datatree   update the quotas - create path trie   and also update the stat nodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  Restore the System property if it was set previously 
Zookeeper,WITHOUT_CLASSIFICATION,//  Do a simple operation to make sure the connection is fine. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Current number of toaster... 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that the servers are up have the right config and can process operations. 
Zookeeper,WITHOUT_CLASSIFICATION,//  need to cancel this selection key from the selector 
Zookeeper,WITHOUT_CLASSIFICATION,//  Data should get updated 
Zookeeper,WITHOUT_CLASSIFICATION,//  We throw LoginExceptions... 
Zookeeper,WITHOUT_CLASSIFICATION,//  materialize the watchers based on the event 
Zookeeper,WITHOUT_CLASSIFICATION,//  9. start follower A after it's in broadcast state make sure 
Zookeeper,WITHOUT_CLASSIFICATION,//  quorum as this needs auth. 
Zookeeper,WITHOUT_CLASSIFICATION,//  validate that the old value is there and not the new one 
Zookeeper,WITHOUT_CLASSIFICATION,//  read error and input streams as this would free up the buffers 
Zookeeper,WITHOUT_CLASSIFICATION,//  new RuntimeException("Calling shutdown").printStackTrace(); 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Useful for testing watch handling behavior  */
Zookeeper,WITHOUT_CLASSIFICATION,//  SASL authentication completes. 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * We only partially sent this buffer so we update                     * the position and exit the loop.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Add multiple data watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  create ephemeral znode 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is a severe error that we cannot recover from   so we need to exit 
Zookeeper,WITHOUT_CLASSIFICATION,//  but written out to the transaction log 
Zookeeper,WITHOUT_CLASSIFICATION,//  Rest of commands fail. 
Zookeeper,WITHOUT_CLASSIFICATION,//  no principals: must not be GSSAPI: use DIGEST-MD5 mechanism   instead. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is the same object as this.zk but we cache the downcast op 
Zookeeper,WITHOUT_CLASSIFICATION,//  the version appended to filename should be the same as   the one of quorum verifier. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Override setting in ZKTestCase 
Zookeeper,WITHOUT_CLASSIFICATION,// should not be able to remove follower 2 
Zookeeper,WITHOUT_CLASSIFICATION,//  1246 1245 1244 1243 1242 1241   1240 1239 1238 1237 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets either become the leader or watch the new/updated node 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers list but there's no "peerType=observer" token in config 
Zookeeper,WITHOUT_CLASSIFICATION,//  to be started (which should take one tickTime (2 seconds)) 
Zookeeper,WITHOUT_CLASSIFICATION,//  4. on the customized leader catch the startForwarding call      (without synchronized) set the node to value v1 then      call the super.startForwarding to generate the ongoing 
Zookeeper,WITHOUT_CLASSIFICATION,//  Let's just make sure it can still move 
Zookeeper,WITHOUT_CLASSIFICATION,//  ok exception as expected. 
Zookeeper,WITHOUT_CLASSIFICATION,//  use out-of-band method to verify 
Zookeeper,WITHOUT_CLASSIFICATION,//  We track totals by seconds 
Zookeeper,WITHOUT_CLASSIFICATION,//  check that the dynamic configuration file contains the membership info 
Zookeeper,WITHOUT_CLASSIFICATION,//  get the args 
Zookeeper,WITHOUT_CLASSIFICATION,//  is available 
Zookeeper,WITHOUT_CLASSIFICATION,//  e.g. serviceHostnameAndKerbDomain := 
Zookeeper,WITHOUT_CLASSIFICATION,//  start taking old servers 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * When leader election is completed the leader will set its         * lastProcessedZxid to be (epoch < 32). There will be no txn associated         * with this zxid.         *         * The learner will set its lastProcessedZxid to the same value if         * it get DIFF or SNAP from the leader. If the same learner come         * back to sync with leader using this zxid we will never find this         * zxid in our history. In this case we will ignore TRUNC logic and         * always send DIFF if we have old enough history          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Remove all the watchers for the given path 
Zookeeper,WITHOUT_CLASSIFICATION,//  we don't backup static config for standalone mode.   we also don't backup if reconfig feature is disabled. 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for the the request processor to do his job 
Zookeeper,WITHOUT_CLASSIFICATION,//  We should be able to reconnect with the same session id on a 
Zookeeper,WITHOUT_CLASSIFICATION,//  just make sure that we actually did get it in process at the 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Send follower info including last zxid and sid          */
Zookeeper,WITHOUT_CLASSIFICATION,//  On Java 9 and later prefer GCM ciphers due to improved AES-NI support. 
Zookeeper,WITHOUT_CLASSIFICATION,//  simulate the upgrading scenario where the reconfig znode 
Zookeeper,WITHOUT_CLASSIFICATION,//  Another client deleted the node first. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Clean up the dead machines 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since we preallocate we define EOF to be an 
Zookeeper,WITHOUT_CLASSIFICATION,//  This test takes too long tos run! 
Zookeeper,WITHOUT_CLASSIFICATION,//  changing a server's role / port is done by "adding" it with the same 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send TRUNC to 3 and forward any packet starting at 
Zookeeper,WITHOUT_CLASSIFICATION,//  need to wake on connect success or failure to avoid   timing out ClientCnxn.SendThread which may be   blocked waiting for first connect in doTransport(). 
Zookeeper,WITHOUT_CLASSIFICATION,//  file should not exist 
Zookeeper,WITHOUT_CLASSIFICATION,//  start old cluster 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since client's authentication with server is in progress   send only the null-header packet queued by primeConnection().   This packet must be sent so that the SASL authentication process   can proceed but all other packets should wait until 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send TRUNC to 3 and forward any packet starting at maxCommittedLog 
Zookeeper,WITHOUT_CLASSIFICATION,//  set shutdown flag 
Zookeeper,WITHOUT_CLASSIFICATION,//  everything went ok 
Zookeeper,WITHOUT_CLASSIFICATION,//  first line should be version info 
Zookeeper,WITHOUT_CLASSIFICATION,//  Push an update request on the queue to resume selecting   on the current set of interest ops which may have changed 
Zookeeper,WITHOUT_CLASSIFICATION,//  Inform /foo2 update 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Negative counter for observer server ids.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  to keep the quorum peer running and force it to go into the looking state we kill leader election 
Zookeeper,WITHOUT_CLASSIFICATION,//  1. set up an ensemble with 3 servers 
Zookeeper,WITHOUT_CLASSIFICATION,// Anything after this needs to go to the transaction log not applied directly in memory 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers 0 and 1 should connect to all servers including the one in 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure we have all servers listed 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Current state;          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Property value takes precedence if provided 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Counter to count connection processing threads.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Delaying the zk server startup so that   ZooKeeperServer#sessionTracker reference won't be   initialized. In the defect scenario while processing the   connection request zkServer needs sessionTracker reference   but this is not yet initialized and the server is still in   the startup phase resulting in NPE. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Default value of peer is participant      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Now try an ephemeral node. This will trigger session upgrade   so there will be createSession request inject into the pipeline 
Zookeeper,WITHOUT_CLASSIFICATION,//  2. SASL authentication has succeeded or failed.. 
Zookeeper,WITHOUT_CLASSIFICATION,//  is older than on-disk txnlog 
Zookeeper,WITHOUT_CLASSIFICATION,//  Header   Base64 text   Footer 
Zookeeper,WITHOUT_CLASSIFICATION,//  just move it to the new list 
Zookeeper,WITHOUT_CLASSIFICATION,/*  members - comma separated list of new membership information (e.g. contents of a membership     * configuration file) - for use only with a non-incremental reconfiguration. This may be specified     * manually via the -members flag or it will automatically be filled in by reading the contents     * of an actual configuration file using the -file flag.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  if the server is not running or hits an internal error. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Reception queue      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Simple error checking for conflicting modes 
Zookeeper,WITHOUT_CLASSIFICATION,//  Prime the server that is going to come in late with 50 txns 
Zookeeper,WITHOUT_CLASSIFICATION,//  Validate that we don't see any txn from the second session 
Zookeeper,WITHOUT_CLASSIFICATION,//  could not create tmp directory to hold JAAS conf file : test will fail now. 
Zookeeper,WITHOUT_CLASSIFICATION,//  If running outside the context of Ant or Ant is using a single   test process then use all valid ports. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is the backwardCompatibility mode in place before ZK-107   It is for a version of the protocol in which we didn't send peer epoch 
Zookeeper,WITHOUT_CLASSIFICATION,//  Data watcher 
Zookeeper,WITHOUT_CLASSIFICATION,//  1 follower out of 3 is not a majority 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that the first operation is successful in all request 
Zookeeper,WITHOUT_CLASSIFICATION,//  check throttling 
Zookeeper,WITHOUT_CLASSIFICATION,//  start servers 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Epoch          */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getChildren(java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  current leader candidate 
Zookeeper,WITHOUT_CLASSIFICATION,//  disconnect the client by killing the socket not sending the   session disconnect to the server as usual. This allows the test   to verify disconnect handling 
Zookeeper,WITHOUT_CLASSIFICATION,//  Delete the first log file so we will fail to read it back from disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  since user has provided sessionId 
Zookeeper,WITHOUT_CLASSIFICATION,//  the outgoing queue will be sent to the Zookeeper server. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Nothing needed 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer miss the committedLog and txnlog is disabled 
Zookeeper,WITHOUT_CLASSIFICATION,//  Didn't read anything within the timeout fallthrough and assume the connection is plaintext. 
Zookeeper,WITHOUT_CLASSIFICATION,//  to the start of the txn 
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of znodes this test creates in each snapshot. 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Message tag          */
Zookeeper,WITHOUT_CLASSIFICATION,//  add itself 
Zookeeper,WITHOUT_CLASSIFICATION,//  this node does not have a child   is the leaf node   check if its the leaf node 
Zookeeper,WITHOUT_CLASSIFICATION,//  This will wake up the accept thread and the other selector   threads and tell the worker thread pool to begin shutdown. 
Zookeeper,WITHOUT_CLASSIFICATION,//  fle = fast leader election 
Zookeeper,WITHOUT_CLASSIFICATION,//  add a new node should trigger a watch 
Zookeeper,WITHOUT_CLASSIFICATION,//  scenario where only three parameter are passed 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers without any authentication configured 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify no zoo.cfg.dynamic and zoo.cfg.bak files existing locally   when reconfig feature flag is off by default. 
Zookeeper,WITHOUT_CLASSIFICATION,//  visible for testing 
Zookeeper,WITHOUT_CLASSIFICATION,//  we are setting the num quota 
Zookeeper,WITHOUT_CLASSIFICATION,//  this should flush the config to servers 2 3 4 and 5 
Zookeeper,WITHOUT_CLASSIFICATION,// Create a DataTree with quota nodes so PathTrie get updated 
Zookeeper,WITHOUT_CLASSIFICATION,//  handshake. 
Zookeeper,WITHOUT_CLASSIFICATION,//  2 servers in current config 3 in next config 
Zookeeper,WITHOUT_CLASSIFICATION,//  have we read length bytes?
Zookeeper,WITHOUT_CLASSIFICATION,//  this is normal. For example - server found out about new config through FastLeaderElection gossiping   and then got the same config in UPTODATE message so its already known 
Zookeeper,WITHOUT_CLASSIFICATION,//  Simulating FinalRequestProcessor logic: create session request has   delayed and now reaches FinalRequestProcessor. Here the leader zk 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note: SimpleChannelInboundHandler releases the ByteBuf for us   so we don't need to do it. 
Zookeeper,WITHOUT_CLASSIFICATION,//  scenario where four parameter are passed 
Zookeeper,WITHOUT_CLASSIFICATION,// 4. Restart peer2 with quorum.auth.learnerEnableSasl=false and   quorum.auth.serverRequireSasl=false. It should fail to join the 
Zookeeper,WITHOUT_CLASSIFICATION,//  new members are initialized with current config + the new server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Port changes after bind() if the original port was 0 update   localAddress to get the real port. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Member variables for mocking Leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  case-1) 'quorum.auth.enableSasl' is off. Tries to enable server sasl. 
Zookeeper,WITHOUT_CLASSIFICATION,//  second add to electingFollowers verifier.containsQuorum=true waitForEpochAck returns without exceptions 
Zookeeper,WITHOUT_CLASSIFICATION,//  should cause "/foo/bar" and "/foo" to get deleted when checkContainers() is called 
Zookeeper,WITHOUT_CLASSIFICATION,//  Remove "server.x=" prefix which quorum peer does not include. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Extract keyword arguments to command from request parameters 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#sendResponse(org.apache.zookeeper.proto.ReplyHeader     *      org.apache.jute.Record java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  we don't have a designated leader - need to go into leader   election 
Zookeeper,WITHOUT_CLASSIFICATION,//  localPeerBean.1 of ReplicatedServer_1 
Zookeeper,WITHOUT_CLASSIFICATION,//  cannot create ephemeral nodes on a local session. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Got expected exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  for i < (numClients/2) this tests the case currentHost == null &&   reconfigMode = true   for i >= (numClients/2) this tests the case currentHost!=null &&   reconfigMode = true 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test that sequential filenames are being created correctly 
Zookeeper,WITHOUT_CLASSIFICATION,//  Don't schedule the purge task with zero or negative purge interval. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We may get the correct exception but the txn may go through 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF to (60) and forward any packet starting at (50) 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensemble and will reject it. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ValidateProcessor is set up in a similar fashion to ToBeApplied   processor so it can do pre/post validating of requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  Returned empty set must not be modifiable 
Zookeeper,WITHOUT_CLASSIFICATION,//  not writing them back to static file 
Zookeeper,WITHOUT_CLASSIFICATION,//  shut servers 0..2 down 
Zookeeper,WITHOUT_CLASSIFICATION,//  notifies watcher removal 
Zookeeper,WITHOUT_CLASSIFICATION,//  We'll fill this in later 
Zookeeper,WITHOUT_CLASSIFICATION,//  Exists watcher 
Zookeeper,WITHOUT_CLASSIFICATION,//  shutdown the previous zk 
Zookeeper,WITHOUT_CLASSIFICATION,//  Mark this connection as once again ready for selection 
Zookeeper,WITHOUT_CLASSIFICATION,//  the following statement will throw. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Test that a reconfiguration fails if the proposed change would leave the     * cluster with less than 2 participants (StandaloneEnabled = true).     * StandaloneDisabledTest.java (startSingleServerTest) checks that if     * StandaloneEnabled = false its legal to remove all but one remaining     * server.      */
Zookeeper,WITHOUT_CLASSIFICATION,// Process has not terminated.  So check if it has completed   if not just destroy it. 
Zookeeper,WITHOUT_CLASSIFICATION,//  "myhost.foo.com@FOO.COM" 
Zookeeper,WITHOUT_CLASSIFICATION,//  On entry to this method qcm must be non-null and the locks on both qcm and QV_LOCK   must be held.  We don't want quorumVerifier/lastSeenQuorumVerifier to change out from   under us so we have to hold QV_LOCK; and since the call to qcm.connectOne() will take   the lock on qcm (and take QV_LOCK again inside that) the caller needs to have taken 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we already started writing p p.bb will already exist 
Zookeeper,WITHOUT_CLASSIFICATION,//  by default create this directory but otherwise complain instead   See ZOOKEEPER-1161 for more details 
Zookeeper,WITHOUT_CLASSIFICATION,//  2 is down. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Must be Java 1.8 or earlier 
Zookeeper,WITHOUT_CLASSIFICATION,//  Client only has 1 outgoing socket so the event loop group only needs   a single thread. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is valid node for quota 
Zookeeper,WITHOUT_CLASSIFICATION,// 10 seconds 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Tests that an incremental reconfig fails if the current config is hiearchical.      */
Zookeeper,WITHOUT_CLASSIFICATION,// are cleared 
Zookeeper,WITHOUT_CLASSIFICATION,//  zxid should be non-null too 
Zookeeper,WITHOUT_CLASSIFICATION,//  shut them down and then simulate a reboot with a reconfig in progress 
Zookeeper,WITHOUT_CLASSIFICATION,//  new followers. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Socket options for TCP keepalive      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Possible since it's just deserialized from a packet on the wire. 
Zookeeper,WITHOUT_CLASSIFICATION,//  all clients should be connected 
Zookeeper,WITHOUT_CLASSIFICATION,//  When Leader.shutdown() calls ss.close()   the call to accept throws an exception.   We catch and set stop to true. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Visible for testing 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Reset incomingBuffer          */
Zookeeper,WITHOUT_CLASSIFICATION,//  tests the case currentHost == null && lastIndex == -1   calls next for clients with index < numClients/2 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure we have these 5 servers listed 
Zookeeper,WITHOUT_CLASSIFICATION,//  accepted epoch = 5 it should now have 6 
Zookeeper,WITHOUT_CLASSIFICATION,//  Trying to load a PEM file with PKCS12 loader should fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sun doesn't include the address that causes this   exception to be thrown also UAE cannot be wrapped cleanly   so we log the exception in order to capture this critical   detail. 
Zookeeper,WITHOUT_CLASSIFICATION,//  maximum retry count while trying to bind to election port 
Zookeeper,WITHOUT_CLASSIFICATION,//  Font used to display message 
Zookeeper,WITHOUT_CLASSIFICATION,//  server login 
Zookeeper,WITHOUT_CLASSIFICATION,//  Both servers 0 and 1 will have the .next config file which means 
Zookeeper,WITHOUT_CLASSIFICATION,//  if the close operation (rename) fails we'll get notified.   worst case the tmp file may still exist 
Zookeeper,WITHOUT_CLASSIFICATION,//  the scenario that inspired this unit test 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test that with no snaps findNRecentSnapshots returns empty list 
Zookeeper,WITHOUT_CLASSIFICATION,// check if I'm in the new configuration with the same quorum address -  
Zookeeper,WITHOUT_CLASSIFICATION,// using linux bash commands to retrieve info 
Zookeeper,WITHOUT_CLASSIFICATION,//  Map the elem to the new expiry time. If a different previous 
Zookeeper,WITHOUT_CLASSIFICATION,//  We don't validate right away will do another session create first 
Zookeeper,WITHOUT_CLASSIFICATION,//  lower-bound grace period to 2 secs 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * The default QuorumVerifier is QuorumMaj              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Java 8 default should have the CBC suites first 
Zookeeper,WITHOUT_CLASSIFICATION,//  find some server that's staying 
Zookeeper,WITHOUT_CLASSIFICATION,//  
Zookeeper,WITHOUT_CLASSIFICATION,//  number of servers stayed the same or decreased 
Zookeeper,WITHOUT_CLASSIFICATION,//  closing the resources 
Zookeeper,WITHOUT_CLASSIFICATION,// LOG.info("Closed client: " + zk.describeCNXN()); 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is ok -- just a packet from an old server which   doesn't contain readOnly field 
Zookeeper,WITHOUT_CLASSIFICATION,//  Arrange & Act 
Zookeeper,WITHOUT_CLASSIFICATION,//  110 character base path 
Zookeeper,WITHOUT_CLASSIFICATION,//  Do 25% write / 75% read request mix 
Zookeeper,WITHOUT_CLASSIFICATION,//  to send the watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  before restart 
Zookeeper,WITHOUT_CLASSIFICATION,//  delete any already existing .next file 
Zookeeper,WITHOUT_CLASSIFICATION,//  setData using chRoot client. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Default white list for 3.5.x is empty so all command should fail. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This will add to local session tracker if it is enabled 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait some time to let this get written to disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  The leader should time out and remaining servers should go into   LOOKING state. A new leader won't be established since that   would require completing the reconfig which is not possible while 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Rollback change records from failed multi-op  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Returns the serverId from the sessionId (the high order byte) 
Zookeeper,WITHOUT_CLASSIFICATION,//  SessionExpiredException as the previous local session was not persisted). 
Zookeeper,WITHOUT_CLASSIFICATION,//  2 servers in current config 5 in next config 
Zookeeper,WITHOUT_CLASSIFICATION,//  We need to set isLocalSession to tree for these type of request   so that the request processor can process them correctly. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Arrange   [testhost-3.testdomain.com:1237 testhost-2.testdomain.com:1236 testhost-1.testdomain.com:1235] 
Zookeeper,WITHOUT_CLASSIFICATION,//  Read the uptodate ack 
Zookeeper,WITHOUT_CLASSIFICATION,//  observer calls waitForNewLeaderAck should fail verifier.containsQuorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure all servers started 
Zookeeper,WITHOUT_CLASSIFICATION,//  stop() called shortly after start() before   this thread started running. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Strip leading "/" 
Zookeeper,WITHOUT_CLASSIFICATION,//  machine is under load 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for the falseLeader to disconnect 
Zookeeper,WITHOUT_CLASSIFICATION,//  2. Verify whether the connecting host is present in authorized hosts.   If not exists then connecting peer is not authorized to join the 
Zookeeper,WITHOUT_CLASSIFICATION,//  newly elected zookeeper quorum. 
Zookeeper,WITHOUT_CLASSIFICATION,//  compatibility. 
Zookeeper,WITHOUT_CLASSIFICATION,//  rethrow exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  cool now make it V1. a -1 parentCVersion will   trigger fixup processing in processTxn 
Zookeeper,WITHOUT_CLASSIFICATION,//  Disable sending DIFF using txnlog so that this test still   testing the ZOOKEEPER-962 bug 
Zookeeper,WITHOUT_CLASSIFICATION,//  4. authenticating object exists so ask it for its progress. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Use txnlog and committedLog to sync 
Zookeeper,WITHOUT_CLASSIFICATION,//  execute writer operation and flush 
Zookeeper,WITHOUT_CLASSIFICATION,//  EOF or corrupted record 
Zookeeper,WITHOUT_CLASSIFICATION,//  set peer's server to null 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that the second operation failed after the first request 
Zookeeper,WITHOUT_CLASSIFICATION,//  restore socket timeout to the old value 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure at least the two clients we created are accounted for 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't delete tmpFile - this ensures we don't attempt to create   a tmpDir with a duplicate name 
Zookeeper,WITHOUT_CLASSIFICATION,//  disable it if enabled 
Zookeeper,WITHOUT_CLASSIFICATION,//  close the session and newly created ephemeral node should be deleted 
Zookeeper,WITHOUT_CLASSIFICATION,//  only 1 commit otherwise it will be flaky   Then ... verify serverStats is updated to the number of commits (as threshold is set to 0) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Clean up dead sessions 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Max buffer size to be read from the network.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Send a diff 
Zookeeper,WITHOUT_CLASSIFICATION,//  This server should fail to join the quorum as it is not using one of the supported suites from the other 
Zookeeper,WITHOUT_CLASSIFICATION,//  before connecting to quorum servers should have set up dynamic file   version and pointer. And the lag-off server is using the older   version dynamic file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This should never happen when executing reconfig command line   because it is guaranteed that we have a ZooKeeperAdmin instance ready   to use in CliCommand stack.   The only exception would be in test code where clients can directly set   ZooKeeper object to ZooKeeperMain. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Using the old PlainSocketImpl (prior to JDK 13) we expect to get Socket Exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  when a reconfig occurs where the leader is removed or becomes an observer  
Zookeeper,WITHOUT_CLASSIFICATION,//         ZooKeeper zk = createClient();            long sessionId = zk.getSessionId();          byte[] passwd = zk.getSessionPasswd();          zk.close();            zk.close();            LOG.info("Closed first session");            startSignal = new CountDownLatch(1);          zk = new ZooKeeper(HOSTPORT CONNECTION_TIMEOUT this                  sessionId passwd);          startSignal.await();            LOG.info("Opened reuse");            Assert.assertEquals(sessionId zk.getSessionId());            zk.close();      } 
Zookeeper,WITHOUT_CLASSIFICATION,//  we're good 
Zookeeper,WITHOUT_CLASSIFICATION,//  we do not want to wait for a session close. send it as soon as we   detect it! 
Zookeeper,WITHOUT_CLASSIFICATION,//  we can just ignore because the child watcher takes care of this 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * current state of sender          */
Zookeeper,WITHOUT_CLASSIFICATION,//  get path [watch] 
Zookeeper,WITHOUT_CLASSIFICATION,//  SSL prohibits unilateral half-close 
Zookeeper,WITHOUT_CLASSIFICATION,//  try to access it with different user (myuser) 
Zookeeper,WITHOUT_CLASSIFICATION,//  test failed somehow. 
Zookeeper,WITHOUT_CLASSIFICATION,//  guarded by sync 
Zookeeper,WITHOUT_CLASSIFICATION,//  Close the session. 
Zookeeper,WITHOUT_CLASSIFICATION,//  for self-signed certs issuer == subject 
Zookeeper,WITHOUT_CLASSIFICATION,//  connect to it 
Zookeeper,WITHOUT_CLASSIFICATION,//  of updates; see the implementation comment at setLastSeenQuorumVerifier(). 
Zookeeper,WITHOUT_CLASSIFICATION,//  close the bad client socket immediately 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Test if a receiveConnection is able to timeout on socket errors      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify that server is following and has the same epoch as the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  For tests and NettyServerCnxnFactory only thus package-private. 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * We want to make sure we implement the state machine                             * correctly. If we are a PARTICIPANT once a leader                             * is elected we can move either to LEADING or                              * FOLLOWING. However if we are an OBSERVER it is an                             * error to be elected as a Leader.                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Change the election round for one of the members of the ensemble 
Zookeeper,WITHOUT_CLASSIFICATION,//  log warning message if there is no matching commit   old leader send outstanding proposal to observer 
Zookeeper,WITHOUT_CLASSIFICATION,//  Validate data on both follower and leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  start all the servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  [testhost-3.testdomain.com:1237 testhost-2.testdomain.com:1236 testhost-1.testdomain.com:1235] 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we explicitly close the session then the session id should no 
Zookeeper,WITHOUT_CLASSIFICATION,/*                                  * Send a notification back if the peer that sent this                                 * message is also looking and its logical clock is                                 * lagging behind.                                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  e.g. servicePrincipalName := "zookeeper" 
Zookeeper,WITHOUT_CLASSIFICATION,//  validate typical case - requested == negotiated 
Zookeeper,WITHOUT_CLASSIFICATION,//  server and the local session was not persisted). 
Zookeeper,WITHOUT_CLASSIFICATION,//  the connecting peer (id = 2) is a 3.4.6 observer 
Zookeeper,WITHOUT_CLASSIFICATION,//  GSSAPI: server sends a final packet after authentication succeeds 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid of epoch 3 
Zookeeper,WITHOUT_CLASSIFICATION,//  Force snapshot and restore 
Zookeeper,WITHOUT_CLASSIFICATION,//  Do Nothing 
Zookeeper,WITHOUT_CLASSIFICATION,//  hdm.addLoggerMBean(rootLogger.getName()); 
Zookeeper,WITHOUT_CLASSIFICATION,//  If version can't be parsed use the more conservative Java 8 default 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-2467 : Testing negative number for redo command 
Zookeeper,WITHOUT_CLASSIFICATION,//  @see jira issue ZOOKEEPER-706. Test auto reset of a large number of 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we are in read-only mode seek for read/write server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Lost quorum of last committed and/or last proposed   config set shutdown flag 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Have to wait for the first ACK wait until             * the leader is ready and only then we can             * start processing messages.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Shutdown Zookeeper. 
Zookeeper,WITHOUT_CLASSIFICATION,//  second chance...   in some cases leader change in particular the timing is   very tricky to get right in order to assure that the client has   disconnected and reconnected. In some cases the client will   disconnect then attempt to reconnect before the server is   back in which case we'll see another connloss on the operation   in the try this catches that case and waits for the server   to come back 
Zookeeper,WITHOUT_CLASSIFICATION,//  force the zxid to be behind the content 
Zookeeper,WITHOUT_CLASSIFICATION,//  different zxids for a server depending on timing. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sends connection request asynchronously if the quorum   sasl authentication is enabled. This is required because   sasl server authentication process may take few seconds to   finish this may delay next peer connection requests. 
Zookeeper,WITHOUT_CLASSIFICATION,//  suppose that this new server never heard about the reconfig proposal 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Test if Worker threads are getting killed after connection loss      */
Zookeeper,WITHOUT_CLASSIFICATION,//  With the defect leader hangs here also but with fix   it does not 
Zookeeper,WITHOUT_CLASSIFICATION,//  Capture the command name from the URL 
Zookeeper,WITHOUT_CLASSIFICATION,//  clear pending revalidations 
Zookeeper,WITHOUT_CLASSIFICATION,//  expected sort of 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Later epoch              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Start with 9 servers and 10000 clients 
Zookeeper,WITHOUT_CLASSIFICATION,//  Initialize 'lastLogin' to do a login at first time 
Zookeeper,WITHOUT_CLASSIFICATION,//  accept maxClientCnxns configureBlocking 
Zookeeper,WITHOUT_CLASSIFICATION,//  start server again with corrupted database 
Zookeeper,WITHOUT_CLASSIFICATION,//  Don't leak sockets on errors 
Zookeeper,WITHOUT_CLASSIFICATION,//  determine whether we need to send an AuthFailed event. 
Zookeeper,WITHOUT_CLASSIFICATION,//  disable Client Sasl 
Zookeeper,WITHOUT_CLASSIFICATION,//  create transaction and snapshot files in data directory 
Zookeeper,WITHOUT_CLASSIFICATION,//  the first poll is just a session delivery 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * saveDefaultConnectionFile(java.util.Properties)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  different server since it has been propagated. 
Zookeeper,WITHOUT_CLASSIFICATION,//  correct 
Zookeeper,WITHOUT_CLASSIFICATION,//  Connection set is relied on heavily by four letter commands 
Zookeeper,WITHOUT_CLASSIFICATION,//  compare http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html 
Zookeeper,WITHOUT_CLASSIFICATION,//  ... then disable throttling after 2 seconds. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Using the NioSocketImpl after JDK 13 the expected behaviour on the client side   is to reach the end of the stream (bytesRead == -1) without a socket exception. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Utility method that recreates a new ZooKeeperAdmin handle and wait for the handle to connect to 
Zookeeper,WITHOUT_CLASSIFICATION,//  number of servers increased 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure it closes - in particular wait for thread to exit 
Zookeeper,WITHOUT_CLASSIFICATION,//  reset for next run 
Zookeeper,WITHOUT_CLASSIFICATION,//  Populate DIGEST-MD5 user -> password map with JAAS configuration entries from the "Server" section.   Usernames are distinguished from other options by prefixing the username with a "user_" prefix. 
Zookeeper,WITHOUT_CLASSIFICATION,//  First test to see if the watch survives across reconnects 
Zookeeper,WITHOUT_CLASSIFICATION,//  getters 
Zookeeper,WITHOUT_CLASSIFICATION,//  Imp: Safer side catching all type of exceptions and remove 'sid'   from inprogress connections. This is to avoid blocking further   connection requests from this 'sid' in case of errors. 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets change leader to observer 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure server started 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid of epoch 1 
Zookeeper,WITHOUT_CLASSIFICATION,//  prevent untyped construction 
Zookeeper,WITHOUT_CLASSIFICATION,//  renewal thread's main loop. if it exits from here thread will exit. 
Zookeeper,WITHOUT_CLASSIFICATION,//  the start of second log since the first one is removed 
Zookeeper,WITHOUT_CLASSIFICATION,//  nextProcessor returns. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * See <a href="{@docRoot}/../../../docs/zookeeperAdmin.html#sc_zkCommands">     * Zk Admin</a>. this link is for all the commands.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Getting NEWLEADER here instead of in discovery    means this is Zab 1.0 
Zookeeper,WITHOUT_CLASSIFICATION,//  Guarantee that the final token is the one we're expanding 
Zookeeper,WITHOUT_CLASSIFICATION,//  already has quota 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify ACLs in the response 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZooKeeper server supports two kinds of connection: unencrypted and encrypted. 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure that the error thread exits 
Zookeeper,WITHOUT_CLASSIFICATION,//  Unknown session 
Zookeeper,WITHOUT_CLASSIFICATION,//  quorum servers. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid of epoch 0 
Zookeeper,WITHOUT_CLASSIFICATION,//  test old cluster 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Thread to run an instance of leader election for      * a given quorum peer.      */
Zookeeper,WITHOUT_CLASSIFICATION,// the directory containing the 
Zookeeper,WITHOUT_CLASSIFICATION,// Spy on ZK so we can check if a snapshot happened or not. 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify no access 
Zookeeper,WITHOUT_CLASSIFICATION,//  This should fail since the buffer size > the data size due to extra fields 
Zookeeper,WITHOUT_CLASSIFICATION,//  if we can get here it is a valid global session 
Zookeeper,WITHOUT_CLASSIFICATION,//  session is setup 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set currentlyCommitting so we will block until this   completes. Cleared by CommitWorkRequest after 
Zookeeper,WITHOUT_CLASSIFICATION,//  expiry is before next scheduled refresh). 
Zookeeper,WITHOUT_CLASSIFICATION,//  New server type need to handle in-flight packets 
Zookeeper,WITHOUT_CLASSIFICATION,//  This will remove the cnxn from cnxns 
Zookeeper,WITHOUT_CLASSIFICATION,//  open a connection 
Zookeeper,WITHOUT_CLASSIFICATION,//  Use them all except one to build the ensemble 
Zookeeper,WITHOUT_CLASSIFICATION,//  modify follower's client port 
Zookeeper,WITHOUT_CLASSIFICATION,//  read "is read-only" flag 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send closeSession request. 
Zookeeper,WITHOUT_CLASSIFICATION,//  the server should respond within 10s 
Zookeeper,WITHOUT_CLASSIFICATION,//  element take and remove follow the same pattern.   We want to return the child node with the smallest sequence number.   Since other clients are remove()ing and take()ing nodes concurrently    the child with the smallest sequence number in orderedChildren might be gone by the time we check.   We don't call getChildren again until we have tried the rest of the nodes in sequence order. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make a clean snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  clear out the ref to ensure no reuse 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers 1 and 2 should be able to work independently 
Zookeeper,WITHOUT_CLASSIFICATION,//  setup session tracker 
Zookeeper,WITHOUT_CLASSIFICATION,//  This has to be set to null when the same instance of this class is reused between test cases 
Zookeeper,WITHOUT_CLASSIFICATION,//  "zookeeper/myhost.foo.com@FOO.COM" 
Zookeeper,WITHOUT_CLASSIFICATION,//  Do nothing Observers keep themselves to   themselves. 
Zookeeper,WITHOUT_CLASSIFICATION,//  when local=true here if connection not available simply removes 
Zookeeper,WITHOUT_CLASSIFICATION,//  backward compatibility - dynamic configuration in the same file as 
Zookeeper,WITHOUT_CLASSIFICATION,//  access only inside synchronized(handshakeCompletedLock) { ... } blocks 
Zookeeper,WITHOUT_CLASSIFICATION,//  trigger the watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  sleep for 10 seconds. 
Zookeeper,WITHOUT_CLASSIFICATION,//  including the lag-off server. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Code unfortunately must be duplicated below since we can't assign   anything   before calling super 
Zookeeper,WITHOUT_CLASSIFICATION,//  Setup a database with two znodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  Find the log file that starts before or at the same time as the   zxid of the snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  mutators 
Zookeeper,WITHOUT_CLASSIFICATION,//  Handshake will take place and then X509AuthenticationProvider should reject the untrusted cert 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make the transaction log directory read only 
Zookeeper,WITHOUT_CLASSIFICATION,//  expecting close to log session closure 
Zookeeper,WITHOUT_CLASSIFICATION,//  1: create ephemeral node 
Zookeeper,WITHOUT_CLASSIFICATION,//  The QuorumCnxManager is held through an AtomicReference to ensure cross-thread visibility 
Zookeeper,WITHOUT_CLASSIFICATION,//  For Invalid dataversion number should not throw exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  expected 
Zookeeper,WITHOUT_CLASSIFICATION,//  if idx is the the leader then everyone will get disconnected   otherwise if idx is a follower then just that client will get 
Zookeeper,WITHOUT_CLASSIFICATION,//  This will wake up the selector threads and tell the   worker thread pool to begin shutdown. 
Zookeeper,WITHOUT_CLASSIFICATION,//  again after leader election 
Zookeeper,WITHOUT_CLASSIFICATION,//  Trigger a GC. This will hopefully (but not necessarily) print   details about detected leaks to standard error before the error   is thrown. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Need check if the record is a DataNode instance because of changes in ZOOKEEPER-2014   which adds default ACL to config node. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid that we have never seen 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Start up the ZooKeeper server.     *     * @param args the configfile or the port datadir [ticktime]      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3 fails returns to LOOKING state 
Zookeeper,WITHOUT_CLASSIFICATION,//  unregister from JMX 
Zookeeper,WITHOUT_CLASSIFICATION,//  Change the quorum system from majority to hierarchical. 
Zookeeper,WITHOUT_CLASSIFICATION,//  check session close request 
Zookeeper,WITHOUT_CLASSIFICATION,//  returns whether we are interested in writing which is determined 
Zookeeper,WITHOUT_CLASSIFICATION,//  Expect this to fail the trust store does not contain a private key 
Zookeeper,WITHOUT_CLASSIFICATION,//  Use the odd one out for the client 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify node delete watcher 
Zookeeper,WITHOUT_CLASSIFICATION,//  this case is not tested so throw the expected exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  and so on 
Zookeeper,WITHOUT_CLASSIFICATION,//  not logs or anything else (per ZOOKEEPER-2420) 
Zookeeper,WITHOUT_CLASSIFICATION,//  0xff = Extended feature is ON   0x0000 = Extended type id TTL (0) 
Zookeeper,WITHOUT_CLASSIFICATION,//  longer be valid. 
Zookeeper,WITHOUT_CLASSIFICATION,//  And now it goes back to normal next() so it should be everything 
Zookeeper,WITHOUT_CLASSIFICATION,//  Mutation packets will be queued during the serialize   so we need to mark when the peer can actually start   using the data 
Zookeeper,WITHOUT_CLASSIFICATION,//  Shutdown for the last time. 
Zookeeper,WITHOUT_CLASSIFICATION,//  queue 
Zookeeper,WITHOUT_CLASSIFICATION,// update the current candidate and if it is the only one remaining return it 
Zookeeper,WITHOUT_CLASSIFICATION,//  should never ever happen 
Zookeeper,WITHOUT_CLASSIFICATION,//  check get 
Zookeeper,WITHOUT_CLASSIFICATION,/*         * If we have a majority then we are good to go.         */
Zookeeper,WITHOUT_CLASSIFICATION,//  Label to store Icon 
Zookeeper,WITHOUT_CLASSIFICATION,//  waiting for the session expiry 
Zookeeper,WITHOUT_CLASSIFICATION,//       throw new RuntimeException("My id " + myid + " not in the peer list");  } 
Zookeeper,WITHOUT_CLASSIFICATION,//  Additional sanity checks on content selected by wildcard can be done here 
Zookeeper,WITHOUT_CLASSIFICATION,/*  nada  */
Zookeeper,WITHOUT_CLASSIFICATION,// have the new credentials (pass it to the LoginContext constructor) 
Zookeeper,WITHOUT_CLASSIFICATION,//  protected by synchronized(this) 
Zookeeper,WITHOUT_CLASSIFICATION,//  4. wait one of the follower to be the new leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Exception is expected 
Zookeeper,WITHOUT_CLASSIFICATION,//  Just create some node so that we know the current zxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for the setData txn being populated 
Zookeeper,WITHOUT_CLASSIFICATION,//  wrap SASL response token to client inside a Response object. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure no beans are leftover 
Zookeeper,WITHOUT_CLASSIFICATION,//  Reconfig node is access controlled by default (ZOOKEEPER-2014). 
Zookeeper,WITHOUT_CLASSIFICATION,//  initializing it for new connection 
Zookeeper,WITHOUT_CLASSIFICATION,// 2 should elect itself as leader and run by itself 
Zookeeper,WITHOUT_CLASSIFICATION,//  next) 
Zookeeper,WITHOUT_CLASSIFICATION,//  give dataTree a chance to sync its lastProcessedZxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  The child might already be deleted during taking fuzzy snapshot   but we still need to update the pzxid here before throw exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets kill the leader and see if a new one is elected 
Zookeeper,WITHOUT_CLASSIFICATION,// When we lock markerNode allow writeRecord to continue 
Zookeeper,WITHOUT_CLASSIFICATION,//  Below commands all need a live connection 
Zookeeper,WITHOUT_CLASSIFICATION,//  org.apache.log4j.Logger.getRootLogger(); 
Zookeeper,WITHOUT_CLASSIFICATION,// do nothing 
Zookeeper,WITHOUT_CLASSIFICATION,//  should not happen 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check for a valid snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  close() could have been called if receiveMessage() failed 
Zookeeper,WITHOUT_CLASSIFICATION,//  Move back to the old port 
Zookeeper,WITHOUT_CLASSIFICATION,//  Register a watch on the node 
Zookeeper,WITHOUT_CLASSIFICATION,//  do not add non quorum packets to the queue. 
Zookeeper,WITHOUT_CLASSIFICATION,//  false means that the session has expired 
Zookeeper,WITHOUT_CLASSIFICATION,//  check if all the followers are alive 
Zookeeper,WITHOUT_CLASSIFICATION,//  Adding pre-created watcher 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since sessionTracker and syncThreads poll we just have to   set running to false and they will detect it during the poll 
Zookeeper,WITHOUT_CLASSIFICATION,// this.numRequestsProcessing.incrementAndGet(); 
Zookeeper,WITHOUT_CLASSIFICATION,// we do not need to make a copy of node.data because the contents  are never changed 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set to true when connected to a read-only server or a read-write (quorum) server. 
Zookeeper,WITHOUT_CLASSIFICATION,//  parse out chroot if any 
Zookeeper,WITHOUT_CLASSIFICATION,//  Prepare a thread that will create znodes. 
Zookeeper,WITHOUT_CLASSIFICATION,//  thread object 't' will be null if a refresh thread is not needed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Just in case 
Zookeeper,WITHOUT_CLASSIFICATION,//  GSSAPI. 
Zookeeper,WITHOUT_CLASSIFICATION,//  The bug will manifest itself here because zkIdle will expire 
Zookeeper,WITHOUT_CLASSIFICATION,//  1. Authentication hasn't finished yet: we must wait for it to do so. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Re-connect the client (in case we were connected to the shut down 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore connectionloss when removing from local   session 
Zookeeper,WITHOUT_CLASSIFICATION,//  assuming the first packet is the priming packet. 
Zookeeper,WITHOUT_CLASSIFICATION,//  since this is single buffer being resused   we need   to truncate the previous bytes of string. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Does create/delete depending on the type and verifies     * if cversion before the operation is 1 less than cversion afer.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Just make sure we are good when admin made some mistakes in config file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  file when they boot 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Delete  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Receive challenge request 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ensure that we can convert all valid integers to KeeperStates 
Zookeeper,WITHOUT_CLASSIFICATION,//  shutdown the server 
Zookeeper,WITHOUT_CLASSIFICATION,// if this server is voter in new config with the same quorum address   then it will remain the leader  otherwise an up-to-date follower will be designated as leader. This saves 
Zookeeper,WITHOUT_CLASSIFICATION,//  cluster 
Zookeeper,WITHOUT_CLASSIFICATION,//  if the client is not currently connected to any server 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getChildCount()          */
Zookeeper,WITHOUT_CLASSIFICATION,//  TODO partitioning of peers and clients 
Zookeeper,WITHOUT_CLASSIFICATION,//  Run servers 0..2 for a while 
Zookeeper,WITHOUT_CLASSIFICATION,//  HBase currently adds a single server line to the config for   b/w compatibility reasons we need to keep this here. If standaloneEnabled   is true the QuorumPeerMain script will create a standalone server instead   of a quorum configuration 
Zookeeper,WITHOUT_CLASSIFICATION,//  now check if its one of the zookeeper node child 
Zookeeper,WITHOUT_CLASSIFICATION,//  even though followers timed out their ids are in connectingFollowers and their   epoch were accounted for so the leader should not block and since it started with  
Zookeeper,WITHOUT_CLASSIFICATION,//  channel disconnection happened 
Zookeeper,WITHOUT_CLASSIFICATION,/*  This file copied from Hadoop's security branch  * with the following changes:  * 1. package changed from org.apache.hadoop.util to  *    org.apache.zookeeper.  * 2. Usage of Hadoop's Configuration class removed since  *    it is not available in Zookeeper: instead system properties  *    are used.  * 3. The deprecated getUlimitMemoryCommand() method removed since  *    it is not needed.   */
Zookeeper,WITHOUT_CLASSIFICATION,//  multi record:     set "/foo" => succeed leave a outstanding change     delete "/foo" => fail roll back change 
Zookeeper,WITHOUT_CLASSIFICATION,//  independently of the client socket implementation details we always make sure the   server didn't receive any data during the test 
Zookeeper,WITHOUT_CLASSIFICATION,//  single address not extracted 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getIndex(javax.swing.tree.TreeNode)          */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Counter to count worker threads      */
Zookeeper,WITHOUT_CLASSIFICATION,//  serialize the data with one znode with acl 
Zookeeper,WITHOUT_CLASSIFICATION,// addr should never be null but just to make sure 
Zookeeper,WITHOUT_CLASSIFICATION,//  1. SASL client is disabled. 
Zookeeper,WITHOUT_CLASSIFICATION,//  cut the tree till their is more than one child 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start Admin server 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * Decrement outstanding request count. The processor may be                 * blocked at the moment because it is waiting for the pipeline                 * to drain. In that case wake it up if there are pending                 * requests.                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  config + itself 
Zookeeper,WITHOUT_CLASSIFICATION,// the timeout thread handling 
Zookeeper,WITHOUT_CLASSIFICATION,//  zxid should still be previous result because record's not changed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  6 is not in the view - its vote shouldn't count 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * The control sequence sent by the telnet program when it closes a     * connection. Include simply to keep the logs cleaner (the server would     * close the connection anyway because it would parse this as a negative     * length).      */
Zookeeper,WITHOUT_CLASSIFICATION,//  DIFF + 1 proposals + 1 commit 
Zookeeper,WITHOUT_CLASSIFICATION,//  org.apache.log4j.jmx.HierarchyDynamicMBean hdm = new org.apache.log4j.jmx.HierarchyDynamicMBean(); 
Zookeeper,WITHOUT_CLASSIFICATION,/*  to be safe we just create a new         * datatree.          */
Zookeeper,WITHOUT_CLASSIFICATION,// add partcipants  change to observers 
Zookeeper,WITHOUT_CLASSIFICATION,// LOG.trace(e); 
Zookeeper,WITHOUT_CLASSIFICATION,//  This test simulate the usual rolling restart with no membership change:   1. A node is shutdown first (e.g. to upgrade software or hardware or cleanup local data.).   2. After upgrade start the node.   3. Do this for every node one at a time. 
Zookeeper,WITHOUT_CLASSIFICATION,//  any reconfig is invoked 
Zookeeper,WITHOUT_CLASSIFICATION,// Thread.sleep(60000);  assertTrue(message fdCount <= initialFdCount); 
Zookeeper,WITHOUT_CLASSIFICATION,//  limited number of retries. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Else what we are expecting since there are no outstanding watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note: we don't care about delete events 
Zookeeper,WITHOUT_CLASSIFICATION,//  set auth using digest 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets force the recreation of the id 
Zookeeper,WITHOUT_CLASSIFICATION,//  find most idle node 
Zookeeper,WITHOUT_CLASSIFICATION,//  four letter words take care   need not do anything else 
Zookeeper,WITHOUT_CLASSIFICATION,//  prior to this request 
Zookeeper,WITHOUT_CLASSIFICATION,//  watches set below exceeds 1MB. 
Zookeeper,WITHOUT_CLASSIFICATION,//    test get/exists with single set of watchers     get all then exists all 
Zookeeper,WITHOUT_CLASSIFICATION,//  After leaving listener thread the host cannot join the   quorum anymore this is a severe error that we cannot   recover from so we need to exit 
Zookeeper,WITHOUT_CLASSIFICATION,//  Both servers 0 and 1 will have the .next config file which means   for them that a reconfiguration was in progress when they failed 
Zookeeper,WITHOUT_CLASSIFICATION,//  send error message to the learner 
Zookeeper,WITHOUT_CLASSIFICATION,//  Tells whether SSL is enabled on this ServerCnxnFactory 
Zookeeper,WITHOUT_CLASSIFICATION,//  iteration 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has 0 zxid (new machine turn up) txnlog 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can't convert from an invalid wrapper 
Zookeeper,WITHOUT_CLASSIFICATION,//  static configuration params see writeDynamicConfig() 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Object to synchronize access to recvQueue      */
Zookeeper,WITHOUT_CLASSIFICATION,//  list of followers that are ready to follow (i.e synced with the leader) 
Zookeeper,WITHOUT_CLASSIFICATION,//  and the leader will complete it. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set a small preAllocSize (.5 MB) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since JettyAdminServer reads a system property to determine its port   make sure it initializes itself before setting the system property   again with the second port number 
Zookeeper,WITHOUT_CLASSIFICATION,//  the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify correctness of data and whether sequential znode creation 
Zookeeper,WITHOUT_CLASSIFICATION,//  Node 1 is started without the leader (3) in its config view 
Zookeeper,WITHOUT_CLASSIFICATION,// noinspection PointlessBitwiseExpression   TTL_RESERVED_BIT is actually zero - but it serves to document that the proper extended bit needs to be set 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * A peer can either be participating which implies that it is willing to     * both vote in instances of consensus and to elect or become a Leader or     * it may be observing in which case it isn't.     *     * We need this distinction to decide which ServerState to move to when     * conditions change (e.g. which state to become after LOOKING).      */
Zookeeper,WITHOUT_CLASSIFICATION,//  better: actions/help-about but not in tango 
Zookeeper,WITHOUT_CLASSIFICATION,//  The password here is 'test'. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Always treat packet from the client as a possible   local request. 
Zookeeper,WITHOUT_CLASSIFICATION,//  And the ephemeral nodes will be gone since the session died. 
Zookeeper,WITHOUT_CLASSIFICATION,//  commit (writes the new config to ZK tree (/zookeeper/config)                      
Zookeeper,WITHOUT_CLASSIFICATION,//  Form a quorum without ssl 
Zookeeper,WITHOUT_CLASSIFICATION,//  if there are multiple hostports just take the first one 
Zookeeper,WITHOUT_CLASSIFICATION,//  Close connections still pending on the selector. Any others   with in-flight work let drain out of the work queue. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Again failure is expected because no ACL is associated with this user. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  * This code is originally from HDFS see the similarly named files there * in case of bug fixing history etc...  */
Zookeeper,WITHOUT_CLASSIFICATION,// set the session owner   as the follower that   owns the session 
Zookeeper,WITHOUT_CLASSIFICATION,//  simply return as there is a connection request to   server 'sid' already in progress. 
Zookeeper,WITHOUT_CLASSIFICATION,//  start server again 
Zookeeper,WITHOUT_CLASSIFICATION,//  Leave the bad client socket idle 
Zookeeper,WITHOUT_CLASSIFICATION,//  Add as global before removing as local 
Zookeeper,WITHOUT_CLASSIFICATION,//  respective reconnection interval 
Zookeeper,WITHOUT_CLASSIFICATION,//  append "am-I-allowed-to-be-readonly" flag 
Zookeeper,WITHOUT_CLASSIFICATION,//  read operation during r/o mode 
Zookeeper,WITHOUT_CLASSIFICATION,//  add it to pendingSyncs. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid of epoch 2 so it is already sync 
Zookeeper,WITHOUT_CLASSIFICATION,//  add transaction log files to the snap version dir 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Creates a configuration string for servers 0..numServers-1 Ids in     * observerIds correspond to observers other ids are for participants.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Find leader id. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We now ship the request to the leader. As with all   other quorum operations sync also follows this code   path but different from others we need to keep track   of the sync operations this Observer has pending so we 
Zookeeper,WITHOUT_CLASSIFICATION,//  Act 
Zookeeper,WITHOUT_CLASSIFICATION,//  Empty snapshot and logfile containing a 5000-byte create 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#removeWatchers     * (java.util.Collection)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  5. send a create request to old leader and make sure it's synced to disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  quorum.auth.learnerRequireSasl=true quorum.auth.serverRequireSasl=false 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure this is always synchronized with Zoodefs!! 
Zookeeper,WITHOUT_CLASSIFICATION,//  we know this from the data files   this node is the last node in the snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-569:   If no votes are received for live peers reset to voting   for ourselves as otherwise we may hang on to a vote 
Zookeeper,WITHOUT_CLASSIFICATION,//  close listen socket and signal selector threads to stop 
Zookeeper,WITHOUT_CLASSIFICATION,//  checking the child version using chRoot client. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Setting this to "true" will enable encrypted client-server communication. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Local session from other server 
Zookeeper,WITHOUT_CLASSIFICATION,//  assertFalse(log.hasWarned); 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Start server 0          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Ignoring exception. If there is an ioexception   then one of the following assertion will fail 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#getChildAt(int)          */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#getSessionId()      */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.proto.WatcherEvent)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  create DataNode and call getChildren 
Zookeeper,WITHOUT_CLASSIFICATION,// that we can reconfigure down to one participant with observers. 
Zookeeper,WITHOUT_CLASSIFICATION,// make that testData exists otherwise it fails on windows 
Zookeeper,WITHOUT_CLASSIFICATION,//  Receive new message 
Zookeeper,WITHOUT_CLASSIFICATION,// 1000(1 second) is to prevent race condition missing to send the second ping  also make sure not to send too many pings when readTimeout is small  
Zookeeper,WITHOUT_CLASSIFICATION,//  normally because the leader didn't execute waitForEpochAck 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * A snapshot might be in progress while we are modifying the data             * tree. If we set lastProcessedZxid prior to making corresponding             * change to the tree then the zxid associated with the snapshot             * file will be ahead of its contents. Thus while restoring from             * the snapshot the restore method will not apply the transaction             * for zxid associated with the snapshot file since the restore             * method assumes that transaction to be present in the snapshot.             *             * To avoid this we first apply the transaction and then modify             * lastProcessedZxid.  During restore we correctly handle the             * case where the snapshot contains data ahead of the zxid associated             * with the file.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  succeed. We explicitly disable it at the top of X509Util.java. 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure the updates indeed committed. If it is not 
Zookeeper,WITHOUT_CLASSIFICATION,//  Simulating close session request: removeSession() will be executed 
Zookeeper,WITHOUT_CLASSIFICATION,//  note that the login object is static: it's shared amongst all zookeeper-related connections.   in order to ensure the login is initialized only once it must be synchronized the code snippet. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Some tests may not have a static config file. 
Zookeeper,WITHOUT_CLASSIFICATION,//    test get/exists with single set of watchers    get/exists together 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Local IP address      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Stops automatic reads of incoming data on this channel. We don't   expect any more traffic from the client when processing a 4LW 
Zookeeper,WITHOUT_CLASSIFICATION,//  If previous state was not NEW start() has already been called. 
Zookeeper,WITHOUT_CLASSIFICATION,// $NON-NLS-1$ 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start up two of the quorum and add 10 txns 
Zookeeper,WITHOUT_CLASSIFICATION,//  Do some other update so we bump the maxCommttedZxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  remove hosts 7 and 8 (the last two in a list of 9 hosts) 
Zookeeper,WITHOUT_CLASSIFICATION,//  for sending over wire 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Done with the election round so now we set the vote in                     * the peer. A real zookeeper would take care of setting the                     * current vote. Here we do it manually.                      */
Zookeeper,WITHOUT_CLASSIFICATION,// commit and send some info 
Zookeeper,WITHOUT_CLASSIFICATION,//  close all open connections 
Zookeeper,WITHOUT_CLASSIFICATION,//  Follower is already sync with us send empty diff 
Zookeeper,WITHOUT_CLASSIFICATION,//  roll the log 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is negative so that if a learner that does auth connects to a   server it'll think the received packet is an authentication packet 
Zookeeper,WITHOUT_CLASSIFICATION,//  The last valid ASCII character 
Zookeeper,WITHOUT_CLASSIFICATION,//  srvr is enabled by default due to the sad fact zkServer.sh uses it. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Maximum capacity of thread queues      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Creating chRoot client. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can instantiate a key manager from the PKCS12 file on disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  This could happen both in static file or dynamic file. 
Zookeeper,WITHOUT_CLASSIFICATION,//  standalone server doesn't need myid file. 
Zookeeper,WITHOUT_CLASSIFICATION,//                 LOG.info("Testing " + i + " connections");              }              // We want to make sure socket descriptors are going away              zk = new ZooKeeper(hostPort 30000 this);              zk.getData("/" false new Stat());              zk.close();          }      } 
Zookeeper,WITHOUT_CLASSIFICATION,//  doesn't exist and the acl cache is empty 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Get the current value of the logical clock for this peer                     * so that we know in which round this peer has executed.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  4 and 5 are observers their vote shouldn't count 
Zookeeper,WITHOUT_CLASSIFICATION,//  refresh interval in msec   last time the command was performed   env for the command execution 
Zookeeper,WITHOUT_CLASSIFICATION,//  Add some timing margin for the quorum to elect a leader   (without this margin timeouts have been observed in parallel test runs) 
Zookeeper,WITHOUT_CLASSIFICATION,//  authorized host lists 
Zookeeper,WITHOUT_CLASSIFICATION,//  Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * Remove next notification from queue times out after 2 times                 * the termination time                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  children have changed so read in the new list 
Zookeeper,WITHOUT_CLASSIFICATION,//  should be numClients/10 in expectation we test that its numClients/10 +- slackPercent
Zookeeper,WITHOUT_CLASSIFICATION,//  Arrange   [testhost-4.testdomain.com:1238 testhost-3.testdomain.com:1237 testhost-2.testdomain.com:1236 testhost-1.testdomain.com:1235] 
Zookeeper,WITHOUT_CLASSIFICATION,//  The current protocol and two previous generations all send at least 28 bytes 
Zookeeper,WITHOUT_CLASSIFICATION,//  great this is what we want! 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * The commit workers will have to execute this line before they             * wake up the commit processor. So this value is up-to-date when             * variant check is performed              */
Zookeeper,WITHOUT_CLASSIFICATION,//  send 0 if session is no   longer valid 
Zookeeper,WITHOUT_CLASSIFICATION,//  Restart ZK and observe a failure 
Zookeeper,WITHOUT_CLASSIFICATION,//  RemotePeerBean 
Zookeeper,WITHOUT_CLASSIFICATION,//  we are connected to a 1.0 server so accept the new epoch and read the next packet 
Zookeeper,WITHOUT_CLASSIFICATION,//  3 servers still up so this should work 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * ZOOKEEPER-1863: continue only if there is no new request             * waiting in queuedRequests or it is waiting for a             * commit.               */
Zookeeper,WITHOUT_CLASSIFICATION,//  if we don't suspend a peer it will rejoin a quorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  now lets stop the server 
Zookeeper,WITHOUT_CLASSIFICATION,//  zkServer.sh depends on "srvr". 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * If using FLE then every server requires a separate election             * port.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Since we don't check on the futures created by write calls to the channel complete we need to make sure   that all writes have been completed before closing the channel or we risk data loss   See: http://lists.jboss.org/pipermail/netty-users/2009-August/001122.html 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.encryption.DataEncryptionManager#decryptData     * (byte[])      */
Zookeeper,WITHOUT_CLASSIFICATION,//  We don't want to sleep on the first ever connect attempt. 
Zookeeper,WITHOUT_CLASSIFICATION,//  3 followers out of 5 are a majority of the voting view 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNodeIndex(java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Things we can only update after the whole txn is applied to data         * tree.         *         * If we update the lastProcessedZxid with the first sub txn in multi         * and there is a snapshot in progress it's possible that the zxid         * associated with the snapshot only include partial of the multi op.         *         * When loading snapshot it will only load the txns after the zxid         * associated with snapshot file which could cause data inconsistency         * due to missing sub txns.         *         * To avoid this we only update the lastProcessedZxid when the whole         * multi-op txn is applied to DataTree.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Directories are not used but we need it to avoid NPE 
Zookeeper,WITHOUT_CLASSIFICATION,//  queue the pair (watch set & event) for later processing 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * getXid() is called externally by ClientCnxnNIO::doIO() when packets are sent from the outgoingQueue to     * the server. Thus getXid() must be public.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Dump data to peer 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Send a connect request. Any socket that has been closed (or at least                 * not added to the cnxn list on the server) will not have any bytes to                 * read and get an eof.                 *                 *  The trick here was finding a call that caused the server to put                 *  bytes in the input stream without closing the cnxn. None of                 *  the four letter commands do that so we actually try to create                 *  a session which should send us something back while maintaining                 *  the connection.                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  run through till the counts no longer change on each server   max 15 tries with 2 second sleeps so approx 30 seconds 
Zookeeper,WITHOUT_CLASSIFICATION,//  also check to update the quotas for this node 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test a hostname that resolves to a single address 
Zookeeper,WITHOUT_CLASSIFICATION,//  assertTrue(log.hasWarned); 
Zookeeper,WITHOUT_CLASSIFICATION,//  next scheduled refresh is sooner than (now + MIN_TIME_BEFORE_LOGIN). 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send TRUNC and forward any packet starting lastProcessedZxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  db is clear as part of deserializeSnapshot() 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Write a number of times until it             * detects that the socket is broken.              */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * This class parses the initial identification sent out by peers with their     * sid & hostname.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Trying to get a first txn on the third give us the 
Zookeeper,WITHOUT_CLASSIFICATION,//  will do sessionTracker.addSession(id timeout) 
Zookeeper,WITHOUT_CLASSIFICATION,/*  this means that we couldn't find any snapshot so we need to             * initialize an empty database (reported in ZOOKEEPER-2325)  */
Zookeeper,WITHOUT_CLASSIFICATION,// check to see if zkDb is not null 
Zookeeper,WITHOUT_CLASSIFICATION,//  Upon reception of an ack message remove it from the 
Zookeeper,WITHOUT_CLASSIFICATION,//  When ... 
Zookeeper,WITHOUT_CLASSIFICATION,//  when we add secureCnxnFactory. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ... then force a throttled read after 1 second (this puts the read into queuedBuffer) ... 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Otherwise send to the corresponding thread to send.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Stop queuing connection attempts 
Zookeeper,WITHOUT_CLASSIFICATION,//  if we went to the next log file we should call next() again 
Zookeeper,WITHOUT_CLASSIFICATION,//  The user did not override the default context. It might be that they just don't intend to use SASL   so log at INFO not WARN since they don't expect any SASL-related information. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this should only be for the beginning of the path   i.e. "/..." - split(path)[0] is empty string before first '/' 
Zookeeper,WITHOUT_CLASSIFICATION,//  so it should not do any work other than trace logging. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since pNew = 1 we should first try the new servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-558:   In some cases the server does not close the connection (e.g. closeconn buffer   was not being queued — ZOOKEEPER-558) properly. This happens for example   when the client closes the connection. The server should still close the session though. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  TODO: introspect about runtime environment (such as jaas.conf) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Resolve hostname for the remote server before attempting to   connect in case the underlying ip address has changed. 
Zookeeper,WITHOUT_CLASSIFICATION,// Another client removed the node first try next 
Zookeeper,WITHOUT_CLASSIFICATION,//  Enumeration enumer = r.getCurrentLoggers(); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note: need to create a new ClientX509Util each time to pick up modified property value 
Zookeeper,WITHOUT_CLASSIFICATION,//  should cause "/foo" to get deleted when checkContainers() is called 
Zookeeper,WITHOUT_CLASSIFICATION,//  let it through we don't require auth 
Zookeeper,WITHOUT_CLASSIFICATION,//  note that we should run the server shut it down and only then   simulate a reconfig in progress by writing the temp file but here no   other server is competing with them in FLE so we can skip this step   (server 2 is booted after FLE ends) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Last opened toaster 
Zookeeper,WITHOUT_CLASSIFICATION,//  take the first server on the list 
Zookeeper,WITHOUT_CLASSIFICATION,//  start server 2 with old config where it is an observer 
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait for the old leader to start completely 
Zookeeper,WITHOUT_CLASSIFICATION,//  lost the race another thread already set the value 
Zookeeper,WITHOUT_CLASSIFICATION,//  DIFF + 3 proposals + 3 commit 
Zookeeper,WITHOUT_CLASSIFICATION,//  Initialized to 1 to prevent sending   stale notifications to peers 
Zookeeper,WITHOUT_CLASSIFICATION,// Add two participants and change them to observers to check 
Zookeeper,WITHOUT_CLASSIFICATION,//  this request came from someone else so just   send the commit packet 
Zookeeper,WITHOUT_CLASSIFICATION,//  track the number of records written to the log 
Zookeeper,WITHOUT_CLASSIFICATION,//  int percent = Integer.parseInt(timePercentCount[1]); 
Zookeeper,WITHOUT_CLASSIFICATION,//  OK to wait until socket disconnects while reading. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start thread that blast packets in the queue to learner 
Zookeeper,WITHOUT_CLASSIFICATION,//  '/multi' should have been deleted 
Zookeeper,WITHOUT_CLASSIFICATION,//  Assert   no exception thrown 
Zookeeper,WITHOUT_CLASSIFICATION,/* 	  Count number of log entries. Any line starting with a timestamp counts as an entry	 */
Zookeeper,WITHOUT_CLASSIFICATION,//  remotePeerBean.1 shouldn't exists in ReplicatedServer_3 
Zookeeper,WITHOUT_CLASSIFICATION,// votes[i] = v; 
Zookeeper,WITHOUT_CLASSIFICATION,//  revert back the error 
Zookeeper,WITHOUT_CLASSIFICATION,//  generate some transactions that will get logged 
Zookeeper,WITHOUT_CLASSIFICATION,//  and ensure trueLeader is still the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  sockKey may be concurrently accessed by multiple   threads. We use tmp here to avoid a race condition 
Zookeeper,WITHOUT_CLASSIFICATION,//  JAAS non-GSSAPI authentication: assuming and supporting only   DIGEST-MD5 mechanism for now.   TODO: use 'authMech=' value in zoo.cfg.
Zookeeper,WITHOUT_CLASSIFICATION,/*  *  Used to perform an atomic write into a file. *  If there is a failure in the middle of the writing operation  *  the original file (if it exists) is left intact. *  Based on the org.apache.zookeeper.server.quorum.QuorumPeer.writeLongToFile(...) idiom *  using the HDFS AtomicFileOutputStream class.  */
Zookeeper,WITHOUT_CLASSIFICATION,/*          * If everyone else thinks I'm the leader I must be the leader.         * The other two checks are just for the case in which I'm not the         * leader. If I'm not the leader and I haven't received a message         * from leader stating that it is leading then predicate is false.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Create a new follower 
Zookeeper,WITHOUT_CLASSIFICATION,//  setup the messages to be streamed to follower 
Zookeeper,WITHOUT_CLASSIFICATION,//  Then ... 
Zookeeper,WITHOUT_CLASSIFICATION,//  nothing to prepend 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify serverStats is 0 before any commit 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we cannot guarantee that this is strictly the starting txn   after a given zxid we should fail. 
Zookeeper,WITHOUT_CLASSIFICATION,//  their are more child nodes   so just reset property. 
Zookeeper,WITHOUT_CLASSIFICATION,//  filter read requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  we need to shutdown and start back up to make sure that the create session isn't the first transaction since 
Zookeeper,WITHOUT_CLASSIFICATION,//  find a follower 
Zookeeper,WITHOUT_CLASSIFICATION,//  XXX: Is lastProcessedZxid really the best thing to use? 
Zookeeper,WITHOUT_CLASSIFICATION,//  revert redirect of out/err streams - important step! 
Zookeeper,WITHOUT_CLASSIFICATION,//  transport 
Zookeeper,WITHOUT_CLASSIFICATION,//  old list (just the ports): 1238 1237 1236 1235 
Zookeeper,WITHOUT_CLASSIFICATION,//  Remove all outstanding changes for paths of this multi.   Previous records will be added back later. 
Zookeeper,WITHOUT_CLASSIFICATION,//  When we explicitly close the session we should not be able to 
Zookeeper,WITHOUT_CLASSIFICATION,//  Commit proposal may lag behind data tree but it shouldn't affect   us in any case 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check for race condition with session upgrading 
Zookeeper,WITHOUT_CLASSIFICATION,//  remotePeerBean.1 shouldn't exists in ReplicatedServer_2 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid of epoch 5 
Zookeeper,WITHOUT_CLASSIFICATION,//  [testhost-2.testdomain.com:1236 testhost-1.testdomain.com:1235] 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore timeout 
Zookeeper,WITHOUT_CLASSIFICATION,//  that add to outstandingChanges. 
Zookeeper,WITHOUT_CLASSIFICATION,//  clear all the connections on which we are selecting 
Zookeeper,WITHOUT_CLASSIFICATION,//  into looking state or following/leading state. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set to true if and only if constructor of ZooKeeperSaslClient 
Zookeeper,WITHOUT_CLASSIFICATION,//  This means reconfigMode = true and nextHostInReconfigMode will be   called from next 
Zookeeper,WITHOUT_CLASSIFICATION,//  'rmr' is deprecated so the test here is just for backwards 
Zookeeper,WITHOUT_CLASSIFICATION,//  setdata 
Zookeeper,WITHOUT_CLASSIFICATION,//  standalone mode - reconfiguration currently not supported 
Zookeeper,WITHOUT_CLASSIFICATION,//  in Zab V1.0 (ZK 3.4+) we might take a snapshot when we get the NEWLEADER message but in pre V1.0   we take the snapshot on the UPDATE message since Zab V1.0 also gets the UPDATE (after the NEWLEADER) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set the logical clock to 1 on fle instance of server 3. 
Zookeeper,WITHOUT_CLASSIFICATION,//  e.g. "zoo.cfg.dynamic" it returns null. 
Zookeeper,WITHOUT_CLASSIFICATION,//  check that the change has propagated to everyone 
Zookeeper,WITHOUT_CLASSIFICATION,//  Initialize Zookeeper again from the same dataDir. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid of epoch 6 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ensure we get the same value back after round trip conversion 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * Received ack successfully so return                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer has zxid of epoch 4 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is what we want 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Snapshots are taken lazily. It can happen that the child         * znodes of a parent are created after the parent         * is serialized. Therefore while replaying logs during restore a         * create might fail because the node was already         * created.         *         * After seeing this failure we should increment         * the cversion of the parent znode since the parent was serialized         * before its children.         *         * Note such failures on DT should be seen only during         * restore.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  message with bad protocol version 
Zookeeper,WITHOUT_CLASSIFICATION,// setup servers 1-3 to be followers and 4 and 5 to be observers 
Zookeeper,WITHOUT_CLASSIFICATION,//  Border color 
Zookeeper,WITHOUT_CLASSIFICATION,/*  * This code is originally from HDFS see the file name TestMiniKdc there * in case of bug fixing history etc. * * Branch : trunk * Github Revision: 916140604ffef59466ba30832478311d3e6249bd  */
Zookeeper,WITHOUT_CLASSIFICATION,//  We know the total JUnit process count and this test process's ID.   Use these values to calculate the valid range for port assignments   within this test process.  We lose a few possible ports to the   remainder but that's acceptable. 
Zookeeper,WITHOUT_CLASSIFICATION,//  correctly 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since all requests are passed to the request   processor it should wait for setting up the request   processor chain. The state will be updated to RUNNING   after the setup. 
Zookeeper,WITHOUT_CLASSIFICATION,//  some unexpected error warn about it 
Zookeeper,WITHOUT_CLASSIFICATION,//  We expect two notifications before we want to continue         
Zookeeper,WITHOUT_CLASSIFICATION,//  create 7 servers 
Zookeeper,WITHOUT_CLASSIFICATION,// go over outstanding ops in order and try to find a candidate that acked the most ops.  this way it will be the most up-to-date and we'll minimize the number of ops that get dropped 
Zookeeper,WITHOUT_CLASSIFICATION,// 2. Upgrade peer012 with quorum.auth.enableSasl=true and 
Zookeeper,WITHOUT_CLASSIFICATION,//  An authentication error occurred when the SASL client tried to initialize:   for Kerberos this means that the client failed to authenticate with the KDC.   This is different from an authentication error that occurs during communication   with the Zookeeper server which is handled below. 
Zookeeper,WITHOUT_CLASSIFICATION,//  unnecessary code coupling. 
Zookeeper,WITHOUT_CLASSIFICATION,//  There are legal states in some use cases for null KeyManager or TrustManager.   But if a user wanna specify one location is required. Password defaults to empty string if it is not   specified by the user. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Change the snapcount to happen more often 
Zookeeper,WITHOUT_CLASSIFICATION,// invalid acl's 
Zookeeper,WITHOUT_CLASSIFICATION,//  this code requires a key in PKCS8 format which is not the default openssl format   to convert to the PKCS8 format you use : openssl pkcs8 -topk8 ... 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore as this is expected 
Zookeeper,WITHOUT_CLASSIFICATION,//  only make a copy if this thread isn't already holding a lock
Zookeeper,WITHOUT_CLASSIFICATION,//  encoding 
Zookeeper,WITHOUT_CLASSIFICATION,//  There is no log record for the initial config thus after syncing   with leader   /zookeeper/config is empty! it is also possible that last committed   config is propagated during leader election   without the propagation the corresponding log records.   so we should explicitly do this (this is not necessary when we're   already a Follower/Observer only 
Zookeeper,WITHOUT_CLASSIFICATION,//  Local session from the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note that we make no effort here to remove empty mappings   from ipMap. 
Zookeeper,WITHOUT_CLASSIFICATION,//  recalculate the init limit time because retries sleep for 1000 milliseconds 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start everyone but the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Use DigestAuthenticationProvider.base64Encode or   run ZooKeeper jar with org.apache.zookeeper.server.auth.DigestAuthenticationProvider to generate password.   An example:   java -cp zookeeper-3.6.0-SNAPSHOT.jar:lib/log4j-1.2.17.jar:lib/slf4j-log4j12-1.7.5.jar:   lib/slf4j-api-1.7.5.jar org.apache.zookeeper.server.auth.DigestAuthenticationProvider super:test 
Zookeeper,WITHOUT_CLASSIFICATION,//  With peer epoch and version the message became 40 bytes 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * This predicate is true once we don't read any new                             * relevant message from the reception queue                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  This isn't really an error txn; it just has the same   format. The error represents the timeout 
Zookeeper,WITHOUT_CLASSIFICATION,//  now check if their is already existing   parent or child that has quota 
Zookeeper,WITHOUT_CLASSIFICATION,//  save the found address so that it's used during the next   connection attempt 
Zookeeper,WITHOUT_CLASSIFICATION,//  fake propose request 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we have a worker thread pool use that; otherwise do the work   directly. 
Zookeeper,WITHOUT_CLASSIFICATION,// the last snapshot seems incompelte   corrupt the last but one   and use that
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for authFailed event from client's EventThread. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This should stomp the zk handle 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can instantiate a trust manager from the JKS file on disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  add snapshot files to the log version dir 
Zookeeper,WITHOUT_CLASSIFICATION,//  provide time for the falseleader to realize no followers have connected 
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait for request completion with timeout 
Zookeeper,WITHOUT_CLASSIFICATION,/*                          * If it is from a non-voting server (such as an observer or                         * a non-voting follower) respond right away.                          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Do NOT trigger the reverse name service lookup. 
Zookeeper,WITHOUT_CLASSIFICATION,//  method always on top start only SINCE JDK 5 ! 
Zookeeper,WITHOUT_CLASSIFICATION,//  Calculate sizeLimit that we allow to retrieve txnlog from disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  In the test below 1-9/10 = 1/10 chance of disconnecting 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Check if all groups have majority          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Joiner initial config consists of itself and the leader. 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Address of the sender          */
Zookeeper,WITHOUT_CLASSIFICATION,//  remove the old files 
Zookeeper,WITHOUT_CLASSIFICATION,//  Empty snapshot and logfile containing a 1-byte create and 5000-byte set 
Zookeeper,WITHOUT_CLASSIFICATION,//  get information of current leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  3. create a node 
Zookeeper,WITHOUT_CLASSIFICATION,//  Synchronized to sync the containers and ttls change probably   only need to sync on containers and ttls will update it in a 
Zookeeper,WITHOUT_CLASSIFICATION,//  If learner hasn't sync properly yet don't send ping packet   otherwise the learner will crash 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Only proceed if the vote comes from a replica in the current or next                     * voting view for a replica in the current or next voting view.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  do create operation so that injected IOException is thrown 
Zookeeper,WITHOUT_CLASSIFICATION,//  Before sending the request check if the request requires a   global session and what we have is a local session. If so do   an upgrade. 
Zookeeper,WITHOUT_CLASSIFICATION,//  do nothing - exclude persistence from perf 
Zookeeper,WITHOUT_CLASSIFICATION,// LOG.warn("Set clientAddr to " + clientAddr); 
Zookeeper,WITHOUT_CLASSIFICATION,//  we got here so the version was set 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify that the correct exception is thrown 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * put() is going to modify the positions of both                 * buffers put we don't want to change the position of                 * the source buffers (we'll do that after the send if                 * needed) so we save and reset the position after the                 * copy                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  in order to be committed a proposal must be accepted by a quorum.   
Zookeeper,WITHOUT_CLASSIFICATION,//  Set a combination of child/exists/data watches 
Zookeeper,WITHOUT_CLASSIFICATION,//  expected that 
Zookeeper,WITHOUT_CLASSIFICATION,//  stop old watcher if there is one 
Zookeeper,WITHOUT_CLASSIFICATION,//  test done - close the zk not needed 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#connect(java     * .util.Properties)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*  Reusing the index variable to select a follower to connect to  */
Zookeeper,WITHOUT_CLASSIFICATION,//  check that a dynamic configuration file doesn't exist 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note that we do not generate the Xid for the packet yet. It is   generated later at send-time by an implementation of ClientCnxnSocket::doIO() 
Zookeeper,WITHOUT_CLASSIFICATION,//  Color for border 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since the file padding inserts a 0 we will fill the data with 0xff to ensure we corrupt the data if we put the 0 in the data 
Zookeeper,WITHOUT_CLASSIFICATION,//  Convert time -> sessions map to time -> session IDs map 
Zookeeper,WITHOUT_CLASSIFICATION,// start one server 
Zookeeper,WITHOUT_CLASSIFICATION,// the path does not exist  
Zookeeper,WITHOUT_CLASSIFICATION,//  This just avoids complaints by junit 
Zookeeper,WITHOUT_CLASSIFICATION,//  the following commands would not work in the original   cluster of 5 but now that we've removed 2 servers   we have a cluster of 3 servers and one of them is allowed to fail 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * ZOOKEEPER-1624 - We need to store for parent's ChangeRecord             * of the parent node of a request. So that if this is a             * sequential node creation request rollbackPendingChanges()             * can restore previous parent's ChangeRecord correctly.             *             * Otherwise sequential node name generation will be incorrect             * for a subsequent request.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Give the worker threads time to finish executing 
Zookeeper,WITHOUT_CLASSIFICATION,//  request.addRQRec(">sync"); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Should not have touched original file 
Zookeeper,WITHOUT_CLASSIFICATION,//  State of peer that sent this message 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * This is going to reset the buffer position to 0 and the         * limit to the size of the buffer so that we can fill it         * with data from the non-direct buffers that we need to         * send.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Avoid negative cxid values.  In particular cxid values of -4 -2 and -1 are special and   must not be used for requests -- see SendThread.readResponse.   Skip from MAX to 1. 
Zookeeper,WITHOUT_CLASSIFICATION,//  establish the connection to the ZooKeeper cluster 
Zookeeper,WITHOUT_CLASSIFICATION,//  my server is in new config but load should be decreased.   Need to decide if this client   is moving to one of the new servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  Newer than committedLog send trunc and done 
Zookeeper,WITHOUT_CLASSIFICATION,// force /bin/ls except on windows. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Process the touches 
Zookeeper,WITHOUT_CLASSIFICATION,//  see if its set 
Zookeeper,WITHOUT_CLASSIFICATION,/*  joining - comma separated list of server config strings for servers to be added to the ensemble.     * Each entry is identical in syntax as it would appear in a configuration file. Only used for      * incremental reconfigurations.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Look through the logs for output that indicates Node 1 is LEADING or FOLLOWING 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Leader epoch          */
Zookeeper,WITHOUT_CLASSIFICATION,//  We are going to look for a leader by casting a vote for ourself 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *          * @see javax.swing.tree.TreeNode#isLeaf()          */
Zookeeper,WITHOUT_CLASSIFICATION,//  don't allow redoing this redo 
Zookeeper,WITHOUT_CLASSIFICATION,//  Insert random delay to test thread race conditions 
Zookeeper,WITHOUT_CLASSIFICATION,//  Restart halted node and verify count 
Zookeeper,WITHOUT_CLASSIFICATION,// the snapshot directory 
Zookeeper,WITHOUT_CLASSIFICATION,//  create an extra handle so we can index the handles from 1 to qu.ALL   using the server id. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * hasChildren(java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can instantiate a key manager from the PEM file on disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  This code does not exists 
Zookeeper,WITHOUT_CLASSIFICATION,//  shutdown the server itself 
Zookeeper,WITHOUT_CLASSIFICATION,//  used for assertions later 
Zookeeper,WITHOUT_CLASSIFICATION,//  On my box if selector.close() is not called fd diff is > 700. 
Zookeeper,WITHOUT_CLASSIFICATION,//  new config will have three of the servers as followers 
Zookeeper,WITHOUT_CLASSIFICATION,//  Instantiate Notification and set its attributes 
Zookeeper,WITHOUT_CLASSIFICATION,//  check if we have a version that includes config. If so extract config info from message. 
Zookeeper,WITHOUT_CLASSIFICATION,// Store off current pending change records in case we need to rollback 
Zookeeper,WITHOUT_CLASSIFICATION,//  close the existing txnLog and snapLog 
Zookeeper,WITHOUT_CLASSIFICATION,//  updates the dynamic file pointer 
Zookeeper,WITHOUT_CLASSIFICATION,//  tests the case currentHost == null && lastIndex >= 0 
Zookeeper,WITHOUT_CLASSIFICATION,//  if we can't skip we should just read from the start 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure servers 0 1 don't come online - this should be the case 
Zookeeper,WITHOUT_CLASSIFICATION,//  Similar to follower we need to log requests between the snapshot   and UPTODATE 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for things to stabilize 
Zookeeper,WITHOUT_CLASSIFICATION,//  all clients should be disconnected 
Zookeeper,WITHOUT_CLASSIFICATION,//  note setUp() enables this test based on the test name 
Zookeeper,WITHOUT_CLASSIFICATION,/*  we test a normal run. everything should work out well.  */
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF and forward any packet starting at maxCommittedLog 
Zookeeper,WITHOUT_CLASSIFICATION,//  Java 9+ default should have the GCM suites first 
Zookeeper,WITHOUT_CLASSIFICATION,//  execute output stream operation 
Zookeeper,WITHOUT_CLASSIFICATION,//  Everything below and until we get back to the select is   non blocking so time is effectively a constant. That is   Why we just have to do this once here 
Zookeeper,WITHOUT_CLASSIFICATION,//  Generate Xid now because it will be sent immediately   by call to sendThread.sendPacket() below. 
Zookeeper,WITHOUT_CLASSIFICATION,//  joiner should have the following format: server.x = server_spec;client_spec                
Zookeeper,WITHOUT_CLASSIFICATION,// last proposed quorum verifier 
Zookeeper,WITHOUT_CLASSIFICATION,//  default hostprovider 
Zookeeper,WITHOUT_CLASSIFICATION,//  property is set but can not be parsed to int we should get the 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Run another instance of leader election.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  remember to close old instance before replacing it 
Zookeeper,WITHOUT_CLASSIFICATION,//  do nothing 
Zookeeper,WITHOUT_CLASSIFICATION,//  This server should join successfully 
Zookeeper,WITHOUT_CLASSIFICATION,//  create session with max value 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Make sure to create a new object when changing  */
Zookeeper,WITHOUT_CLASSIFICATION,//  We only run if the readyNode exists 
Zookeeper,WITHOUT_CLASSIFICATION,//  Notify server state changes to the registered shutdown handler if any. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this should trigger the watch 
Zookeeper,WITHOUT_CLASSIFICATION,//  whether to remove the watches locally 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Start mock server.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  run servers 0 and 1 normally 
Zookeeper,WITHOUT_CLASSIFICATION,//  checks that conditioning on version works properly 
Zookeeper,WITHOUT_CLASSIFICATION,//  ephemeral node is getting deleted. 
Zookeeper,WITHOUT_CLASSIFICATION,//  currentIndex was set by the call to updateServerList which   called next 
Zookeeper,WITHOUT_CLASSIFICATION,//  Refresh the Ticket Granting Ticket (TGT) periodically. How often to refresh is determined by the   TGT's existing expiry date and the configured MIN_TIME_BEFORE_RELOGIN. For testing and development   you can decrease the interval of expiration of tickets (for example to 3 minutes) by running : 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Creating peer.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Leader mock: Prep -> MockProposal -> Commit -> validate -> Final   Have side thread call commitProc.commit() 
Zookeeper,WITHOUT_CLASSIFICATION,/*        * If the stat fails the node has gone missing between the call to       * getChildren() and exists(). We need to try and become the leader.        */
Zookeeper,WITHOUT_CLASSIFICATION,//  The previous client connection to falseLeader likely closed create a new one 
Zookeeper,WITHOUT_CLASSIFICATION,//  inject problem in server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Try to provide hints to use about what went wrong so they   can fix their configuration.   TODO: introspect about e: look for GSS information. 
Zookeeper,WITHOUT_CLASSIFICATION,//  while OpCode.closeSession 
Zookeeper,WITHOUT_CLASSIFICATION,//  could not create tmp directory to hold JAAS conf file.
Zookeeper,WITHOUT_CLASSIFICATION,// 'groups username' command return is non-consistent across different unixes 
Zookeeper,WITHOUT_CLASSIFICATION,//  12725 days about 34 years 
Zookeeper,WITHOUT_CLASSIFICATION,//  When incremented... 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since we just shut down server 2 its still considered "synced"   by the leader which allows us to start the reconfig   (PrepRequestProcessor checks that a quorum of the new   config is synced before starting a reconfig).   We try to remove server 3 which requires a quorum of {123}   (we have that) and of {12} but 2 is down so we won't get a   quorum of new config ACKs. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We don't want to receive any packets until we are sure that the 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify if there is any change in the proposed leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  When reset... 
Zookeeper,WITHOUT_CLASSIFICATION,//  Simulate a socket channel between a client and a follower 
Zookeeper,WITHOUT_CLASSIFICATION,// last committed quorum verifier 
Zookeeper,WITHOUT_CLASSIFICATION,//  check duplication of addresses and ports 
Zookeeper,WITHOUT_CLASSIFICATION,//  bad hostport string 
Zookeeper,WITHOUT_CLASSIFICATION,//  sleep for 10 seconds 
Zookeeper,WITHOUT_CLASSIFICATION,//  this should exceed threshold (ZKDatabase.snapshotSizeFactor) 
Zookeeper,WITHOUT_CLASSIFICATION,//  adding back the packet to notify of failure in conLossPacket(). 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Reconfig test with unresolved hostnames  */
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore close the send/event threads 
Zookeeper,WITHOUT_CLASSIFICATION,//  make streams and socket do something innocuous 
Zookeeper,WITHOUT_CLASSIFICATION,//  There is ACL however the permission is wrong - need WRITE permission at leaste. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNodeMeta(java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  don't care about the version if it's in LOOKING state 
Zookeeper,WITHOUT_CLASSIFICATION,//  create the pkg directory 
Zookeeper,WITHOUT_CLASSIFICATION,//  We can only test calls to ZKTrustManager using Sockets (not SSLEngines). This can be fine since the logic is the same. 
Zookeeper,WITHOUT_CLASSIFICATION,//  setConfiguration() will work even if the above try() fails due   to a missing Kerberos configuration (unless zookeeper.requireKerberosConfig   is set to true which would not allow execution to reach here due to the   throwing of an IllegalArgumentException above). 
Zookeeper,WITHOUT_CLASSIFICATION,//  takes place 
Zookeeper,WITHOUT_CLASSIFICATION,//  their .next file during startup and will find the next config and join it 
Zookeeper,WITHOUT_CLASSIFICATION,//  Add child watch 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can instantiate a trust manager from the PKCS12 file on disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  Lock object that guard access to quorumVerifier and lastSeenQuorumVerifier. 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * id contains the tag for acks and zxid for notifications          */
Zookeeper,WITHOUT_CLASSIFICATION,//  combine local and global sessions getting local first so upgrades   to global are caught 
Zookeeper,WITHOUT_CLASSIFICATION,//  is client_config a host:port or just a port 
Zookeeper,WITHOUT_CLASSIFICATION,//  Arrange   Create a HostProvider with a list of unresolved server address(es) 
Zookeeper,WITHOUT_CLASSIFICATION,//  (*) setting it to what it should be 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignores its connectstring and next() always returns localhost:2181   it will count down when updateServerList() is called 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Send close connection packet to the client doIO will eventually     * close the underlying machinery (like socket selectorkey etc...)      */
Zookeeper,WITHOUT_CLASSIFICATION,// volatile int round = 1; 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Protocol identifier used among peers      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Server 0 stays down 
Zookeeper,WITHOUT_CLASSIFICATION,//  See ZOOKEEPER-2967 for more details 
Zookeeper,WITHOUT_CLASSIFICATION,//  we expect this to throw an IOException since we're faking socket connect errors every time 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we've timed out do a hard shutdown 
Zookeeper,WITHOUT_CLASSIFICATION,//  see a disconnect for each Assert.failed connection attempt 
Zookeeper,WITHOUT_CLASSIFICATION,//  Pending sync requests. Must access under 'this' lock. 
Zookeeper,WITHOUT_CLASSIFICATION,//  they will be handled in next connection or cleared up if closed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  start with an initial set of candidates that are voters from new config that    acknowledged the reconfig op (there must be a quorum). Choose one of them as  
Zookeeper,WITHOUT_CLASSIFICATION,//  Set up bogus streams 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set to true when connected to a quorum server in read-only mode 
Zookeeper,WITHOUT_CLASSIFICATION,//  With local session on 
Zookeeper,WITHOUT_CLASSIFICATION,//  This was added to avoid running into the problem of ZOOKEEPER-1539 
Zookeeper,WITHOUT_CLASSIFICATION,//  remove host number 0 (the first one in the current list) 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * setDefaultNodeViewerConfiguration(java.io.File java.util.List)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF to (2 0) and forward any packet starting at (2 0) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Assuming that isConnected() is only used to initiate connection   not used by some other connection status judgement. 
Zookeeper,WITHOUT_CLASSIFICATION,//  6. wait for the leader to quit due to not enough followers and come back up as a part of the new quorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  Here peerCommunicationAddress is null also clientAddr is null 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test a hostname that resolves to multiple addresses 
Zookeeper,WITHOUT_CLASSIFICATION,//  pzxid not updated with smaller zxid 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * epoch of the proposed leader          */
Zookeeper,WITHOUT_CLASSIFICATION,//         response.setContentType("text/plain;charset=utf-8"); 
Zookeeper,WITHOUT_CLASSIFICATION,//  not reg so should = 0 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *     * @see org.apache.zookeeper.server.ServerCnxnIface#process(org.apache.zookeeper.proto.WatcherEvent)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  quorum.auth.learnerRequireSasl=true quorum.auth.serverRequireSasl=true 
Zookeeper,WITHOUT_CLASSIFICATION,//  we throw an exception otherwise we continue without authentication. 
Zookeeper,WITHOUT_CLASSIFICATION,//  e.g. serviceHostname := "myhost.foo.com" 
Zookeeper,WITHOUT_CLASSIFICATION,//  Shutdown every one else but the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is expected. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create dummy txn larger than preAllocSize 
Zookeeper,WITHOUT_CLASSIFICATION,//  setowner as the leader itself unless updated   via the follower handlers 
Zookeeper,WITHOUT_CLASSIFICATION,//  resume poor fellow 
Zookeeper,WITHOUT_CLASSIFICATION,// Reset back to default. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Record leader election time      */
Zookeeper,WITHOUT_CLASSIFICATION,//  wait to connect to one of these 
Zookeeper,WITHOUT_CLASSIFICATION,//  any arbitrary constant will do  
Zookeeper,WITHOUT_CLASSIFICATION,//  Observer asks for epoch (mocking LearnerHandler behavior) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Global session 
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait until we can't connect 
Zookeeper,WITHOUT_CLASSIFICATION,//  Otherwise wait for a fixed amount of time 
Zookeeper,WITHOUT_CLASSIFICATION,// force server to restart and load from snapshot not txn log 
Zookeeper,WITHOUT_CLASSIFICATION,//  We use an instance of SyncedLearnerTracker to   track synced learners to make sure we still have a   quorum of current (and potentially next pending) view. 
Zookeeper,WITHOUT_CLASSIFICATION,//  NOTE: wrong password ('test' != 'test1') : this is to test SASL authentication failure.
Zookeeper,WITHOUT_CLASSIFICATION,//  creating the subtree for chRoot clients. 
Zookeeper,WITHOUT_CLASSIFICATION,//  When there is no worker thread pool do the work directly   and wait for its completion 
Zookeeper,WITHOUT_CLASSIFICATION,//  OOM condition; 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * This replica might still believe that the connection to sid is             * up so we have to shut down the workers before trying to open a             * new connection.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  On initial connection write the complete connect request   packet but then disable further writes until after   receiving a successful connection response.  If the   session is expired then the server sends the expiration   response and immediately closes its end of the socket.  If   the client is simultaneously writing on its end then the   TCP stack may choose to abort with RST in which case the   client would never receive the session expired event.  See   http://docs.oracle.com/javase/6/docs/technotes/guides/net/articles/connection_release.html 
Zookeeper,WITHOUT_CLASSIFICATION,//  not) and all server SASL messages have been received. 
Zookeeper,WITHOUT_CLASSIFICATION,//  In this scenario to change 3's role to participant we need to remove it first 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify each quorum peer has expected quorum member view. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Initialize the client's communications with the Zookeeper server by sending the server the first 
Zookeeper,WITHOUT_CLASSIFICATION,//  ipMap is used to limit connections per IP 
Zookeeper,WITHOUT_CLASSIFICATION,//  This could be faster but probably wont be used 
Zookeeper,WITHOUT_CLASSIFICATION,//  good message 
Zookeeper,WITHOUT_CLASSIFICATION,// Thread.sleep(10000); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Given ... 
Zookeeper,WITHOUT_CLASSIFICATION,//  We need to check if we can close the session id.   Sometimes the corresponding ServerCnxnFactory could be null because   we are just playing diffs from the leader. 
Zookeeper,WITHOUT_CLASSIFICATION,//  http://docs.oracle.com/javase/6/docs/technotes/guides/security/jgss/jgss-features.html   """   In addition when performing operations as a   particular   Subject e.g. Subject.doAs(...) or   Subject.doAsPrivileged(...) the to-be-used   GSSCredential should be added to Subject's   private credential set. Otherwise the GSS operations   will fail since no credential is found.   """
Zookeeper,WITHOUT_CLASSIFICATION,//  Send the snapshot we created earlier 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()      */
Zookeeper,WITHOUT_CLASSIFICATION,//  validate CRC 
Zookeeper,WITHOUT_CLASSIFICATION,//  Don't apply any prior change records less than firstZxid.   Note that previous outstanding requests might have been removed   once they are completed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  verifying that other path data watches are removed 
Zookeeper,WITHOUT_CLASSIFICATION,//     make sure everything is consistent 
Zookeeper,WITHOUT_CLASSIFICATION,//  we're good. 
Zookeeper,WITHOUT_CLASSIFICATION,//  5. on the customized leader catch the beginSnapshot call in      LearnerSnapshotThrottler to set the node to value v2 
Zookeeper,WITHOUT_CLASSIFICATION,//  Act & Assert 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Add sid to payload          */
Zookeeper,WITHOUT_CLASSIFICATION,//  represents protocol version (in other words - message type) 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * (non-Javadoc)         *         * @see org.apache.zookeeper.server.RequestProcessor#shutdown()          */
Zookeeper,WITHOUT_CLASSIFICATION,// taken care in finally block 
Zookeeper,WITHOUT_CLASSIFICATION,//  cnxns typically have many watches so use default cap here 
Zookeeper,WITHOUT_CLASSIFICATION,//  intentionally use the wrong password 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF and forward any packet starting at lastProcessedZxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure that server and data bean are registered 
Zookeeper,WITHOUT_CLASSIFICATION,// Give it some time to process the snap  No Snapshot taken yet the SNAP was applied in memory 
Zookeeper,WITHOUT_CLASSIFICATION,//  mySocket.setSoTimeout(20000); 
Zookeeper,WITHOUT_CLASSIFICATION,//  No event ready to emit yet. 
Zookeeper,WITHOUT_CLASSIFICATION,//  suite setup 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note: The first call to getSocket() triggers mode detection which can block 
Zookeeper,WITHOUT_CLASSIFICATION,//  jute toString is horrible remove unnecessary newlines 
Zookeeper,WITHOUT_CLASSIFICATION,//  Get the ack of the new leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  watchers2 
Zookeeper,WITHOUT_CLASSIFICATION,//  list of all the followers 
Zookeeper,WITHOUT_CLASSIFICATION,//  A period that isn't on its own is ok 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers in the new list that are not in the old list 
Zookeeper,WITHOUT_CLASSIFICATION,//  Validate the provided znode path contains the given watcher of   watcherType 
Zookeeper,WITHOUT_CLASSIFICATION,//  leader calls waitForNewLeaderAck first add to ackSet 
Zookeeper,WITHOUT_CLASSIFICATION,//  non-GSSAPI: no final packet from server. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Through the magic of byte buffers txn will not be   pointing 
Zookeeper,WITHOUT_CLASSIFICATION,//  We need to sync and get consensus on any transactions 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seejava.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.     * datatransfer.DataFlavor)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  we are setting the bytes quota 
Zookeeper,WITHOUT_CLASSIFICATION,//  check set 
Zookeeper,WITHOUT_CLASSIFICATION,//  Remove beans which are related to zk client sessions. Strong   assertions cannot be done for these client sessions because   registeration of these beans with server will happen only on their 
Zookeeper,WITHOUT_CLASSIFICATION,//  my server is not in new config and load on old servers must   be decreased so connect to   one of the new servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  of zxid on the second log 
Zookeeper,WITHOUT_CLASSIFICATION,//  on the lookout for timeout 
Zookeeper,WITHOUT_CLASSIFICATION,// new configuration 
Zookeeper,WITHOUT_CLASSIFICATION,//  expected behaviour 
Zookeeper,WITHOUT_CLASSIFICATION,//  We expect leader to lose quorum of proposed config and time out 
Zookeeper,WITHOUT_CLASSIFICATION,//  Remove ReplicatedServer_1 from the ensemble 
Zookeeper,WITHOUT_CLASSIFICATION,//  Intercept when startForwarding is called 
Zookeeper,WITHOUT_CLASSIFICATION,//  Attempt an incremental reconfig. 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for the node to appear 
Zookeeper,WITHOUT_CLASSIFICATION,//  Verify that the exit code is set properly 
Zookeeper,WITHOUT_CLASSIFICATION,//  register createConnection 
Zookeeper,WITHOUT_CLASSIFICATION,//  We should get snap we can do better here but the main logic is   that we should never send diff if we have never seen any txn older 
Zookeeper,WITHOUT_CLASSIFICATION,//  now verify autocreate off works 
Zookeeper,WITHOUT_CLASSIFICATION,//  sets reconfigMode 
Zookeeper,WITHOUT_CLASSIFICATION,//  in sync request processor get flush to disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  If lost the challenge then drop the new connection 
Zookeeper,WITHOUT_CLASSIFICATION,// start and add 2 followers 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't keep this up too long will Assert.assert false below 
Zookeeper,WITHOUT_CLASSIFICATION,//  fake the message 
Zookeeper,WITHOUT_CLASSIFICATION,//  create keytab 
Zookeeper,WITHOUT_CLASSIFICATION,//  do nothing just return it is the same as packet is dropped   by the network 
Zookeeper,WITHOUT_CLASSIFICATION,//  kill peer and wait no more than 5 seconds for read-only server 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we are sending the first packet figure out whether to trunc 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ignore. 
Zookeeper,WITHOUT_CLASSIFICATION,//  not used. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Step time 
Zookeeper,WITHOUT_CLASSIFICATION,//  during first iteration leavingIndex will correspond to a follower 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create some additional znodes without taking a snapshot afterwards. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note that 'Configuration' here refers to javax.security.auth.login.Configuration. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Log the number of fds used before and after a test is run. Verifies         * we are freeing resources correctly. Unfortunately this only works         * on unix systems (the only place sun has implemented as part of the         * mgmt bean api).          */
Zookeeper,WITHOUT_CLASSIFICATION,//  keep findbugs happy 
Zookeeper,WITHOUT_CLASSIFICATION,// turnOffFollowers(); 
Zookeeper,WITHOUT_CLASSIFICATION,//  The exception is thrown on the server side we need to unwrap it
Zookeeper,WITHOUT_CLASSIFICATION,//  spin up a quorum we use a small ticktime to make the test run faster 
Zookeeper,WITHOUT_CLASSIFICATION,//  default not registered 
Zookeeper,WITHOUT_CLASSIFICATION,//  The leader didn't get a quorum of acks - make sure that leader's current epoch is not advanced 
Zookeeper,WITHOUT_CLASSIFICATION,//  Timeout of 0 is not allowed since an infinite timeout can permanently lock up an   accept() thread. 
Zookeeper,WITHOUT_CLASSIFICATION,//  It should fail and shouldn't change outstanding record.
Zookeeper,WITHOUT_CLASSIFICATION,//  leader. This should also fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  The created ephemeral nodes are still around. 
Zookeeper,WITHOUT_CLASSIFICATION,//  simulate snapshot file 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure to snapshot so that we have something there when 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure to map negative ids as well to [0 size-1] 
Zookeeper,WITHOUT_CLASSIFICATION,//  if a log file is more recent we must scan it to find   the highest zxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  Allow subclasses (e.g. StatCommand) to specify their own names 
Zookeeper,WITHOUT_CLASSIFICATION,//  later packet will be notified. 
Zookeeper,WITHOUT_CLASSIFICATION,//  returns whether we are interested in taking new requests which is 
Zookeeper,WITHOUT_CLASSIFICATION,//  Starts listener thread that waits for connection requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  Observers are currently only compatible with LeaderElection 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Do not consider groups with weight zero          */
Zookeeper,WITHOUT_CLASSIFICATION,//  On Java 8 prefer CBC ciphers since AES-NI support is lacking and GCM is slower than CBC. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is good 
Zookeeper,WITHOUT_CLASSIFICATION,//  NIO should not accept conenctions 
Zookeeper,WITHOUT_CLASSIFICATION,//  Let's grab two ports 
Zookeeper,WITHOUT_CLASSIFICATION,// invalid dataversion no 
Zookeeper,WITHOUT_CLASSIFICATION,//  Notification probe = recvqueue.peek(); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Need to process local session requests 
Zookeeper,WITHOUT_CLASSIFICATION,//  the version of this quorumVerifier will be set by leader.lead() in case   the leader is just being established. waitForEpochAck makes sure that readyToStart is true if 
Zookeeper,WITHOUT_CLASSIFICATION,//  Now the resulting ensemble shouldn't be quorate          
Zookeeper,WITHOUT_CLASSIFICATION,//  id but different role / port 
Zookeeper,WITHOUT_CLASSIFICATION,//  old client session can expire restart it 
Zookeeper,WITHOUT_CLASSIFICATION,//  the pointer to the connection in the request 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * This method is called when a client passes authentication data for this     * scheme. The authData is directly from the authentication packet. The     * implementor may attach new ids to the authInfo field of cnxn or may use     * cnxn to send packets back to the client.     *      * @param cnxn     *                the cnxn that received the authentication information.     * @param authData     *                the authentication data received.     * @return TODO      */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#addWatchers     * (java.util.Collection     * org.apache.zookeeper.inspector.manager.NodeListener)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  If we've already starting sending the first packet we better finish 
Zookeeper,WITHOUT_CLASSIFICATION,//  Connect the client after services are restarted (otherwise we would get 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send the packet of death 
Zookeeper,WITHOUT_CLASSIFICATION,// stored files is the list of files greater than  the zxid we are looking for. 
Zookeeper,WITHOUT_CLASSIFICATION,//  needed by jersey 
Zookeeper,WITHOUT_CLASSIFICATION,//  Get zxid of create requests 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see java.lang.Object#equals(java.lang.Object)      */
Zookeeper,WITHOUT_CLASSIFICATION,// setup servers 1-5 to be followers 
Zookeeper,WITHOUT_CLASSIFICATION,// Snapshot was never taken during very simple sync 
Zookeeper,WITHOUT_CLASSIFICATION,/*  PASS  */
Zookeeper,WITHOUT_CLASSIFICATION,//  now check if its the limit node 
Zookeeper,WITHOUT_CLASSIFICATION,//  It is important that this is done before the leader executes waitForEpochAck   so before LearnerHandlers return from their waitForEpochAck   hence before they construct the NEWLEADER message containing   the last-seen-quorumverifier of the leader which we change below 
Zookeeper,WITHOUT_CLASSIFICATION,//  Read the length now get the buffer 
Zookeeper,WITHOUT_CLASSIFICATION,//  Arrange 
Zookeeper,WITHOUT_CLASSIFICATION,//  As above but don't do the throttled read. Make the request bytes wait in the socket 
Zookeeper,WITHOUT_CLASSIFICATION,//  check that there's no reconfig in progress 
Zookeeper,WITHOUT_CLASSIFICATION,//  making sure setdata works on / 
Zookeeper,WITHOUT_CLASSIFICATION,//  do one successful operation on the newly added node 
Zookeeper,WITHOUT_CLASSIFICATION,//  second iteration of the loop will remove the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  allow the clients to run for max 5sec 
Zookeeper,WITHOUT_CLASSIFICATION,//  optimization for read heavy workloads   iff this is a read and there are no pending   flushes (writes) then just pass this to the next   processor 
Zookeeper,WITHOUT_CLASSIFICATION,//  With local session off 
Zookeeper,WITHOUT_CLASSIFICATION,//  The follower reconfiguration will have failed 
Zookeeper,WITHOUT_CLASSIFICATION,//  This test makes sure that client-initiated TLS renegotiation does not 
Zookeeper,WITHOUT_CLASSIFICATION,//  Default case 
Zookeeper,WITHOUT_CLASSIFICATION,//  we're sending the designated leader and if the leader is changing the followers are    responsible for closing the connection - this way we are sure that at least a majority of them  
Zookeeper,WITHOUT_CLASSIFICATION,//  simulate reconfig in progress - servers 0..2 have a temp reconfig 
Zookeeper,WITHOUT_CLASSIFICATION,//  Don't forward local sessions to the leader. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start thread that waits for connection requests from 
Zookeeper,WITHOUT_CLASSIFICATION,//  proposedRefresh is too far in the future: it's after ticket expires: simply return now. 
Zookeeper,WITHOUT_CLASSIFICATION,//  proceeds correctly after this point 
Zookeeper,WITHOUT_CLASSIFICATION,//  enable Client Sasl 
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of machines stayed the same my server is in the new cluster 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create a couple of nodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is the backwardCompatibility mode for no version information 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is just an arbitrary object to represent requests issued by   (aka owned by) this class 
Zookeeper,WITHOUT_CLASSIFICATION,//  Something is wrong.
Zookeeper,WITHOUT_CLASSIFICATION,//  Create 10000 nodes. This should ensure the length of our 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * A real zookeeper would take care of setting the current vote. Here                 * we do it manually.                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Create some ephemeral nodes.  This should force the session to 
Zookeeper,WITHOUT_CLASSIFICATION,//  otherwise : is at the end of the string ignore 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sleep since writing the config files may take time. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this call shouldn't trigger any error or watch 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * I'm done so joining.                               */
Zookeeper,WITHOUT_CLASSIFICATION,//  Trying to load a JKS file with PEM loader should fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  now update if the path is in a quota subtree. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Builds an OCSPHandler that responds with a good status for all certificates   except revokedCert. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We've found the priming-packet. Move it to the beginning of the queue. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Will be fixed in next Kerby version.
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF and forward any packet starting lastProcessedZxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  '/multi' should never have been created as entire op should fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test that data provided when  
Zookeeper,WITHOUT_CLASSIFICATION,//  start of next request 
Zookeeper,WITHOUT_CLASSIFICATION,//  Negative value not allowed will return the default 
Zookeeper,WITHOUT_CLASSIFICATION,// Follower counter 
Zookeeper,WITHOUT_CLASSIFICATION,//  /foo/bar childwatch   /foo 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * We sort leader offers by sequence number (which may not be zero-based or     * contiguous) and keep their paths handy for setting watches.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure it doesn't have the new value that it alone had logged 
Zookeeper,WITHOUT_CLASSIFICATION,//  update last committed quorum verifier write the new config to disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  it by a commit packet 
Zookeeper,WITHOUT_CLASSIFICATION,//  We also use the sessionlessCnxnTimeout as expiring interval for   cnxnExpiryQueue. These don't need to be the same but the expiring   interval passed into the ExpiryQueue() constructor below should be   less than or equal to the timeout. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Either client is not configured to use a tunnelled authentication   scheme or tunnelled authentication has completed (successfully or 
Zookeeper,WITHOUT_CLASSIFICATION,//  Remove the buffers that we have sent 
Zookeeper,WITHOUT_CLASSIFICATION,//  by default create snap/log dirs but otherwise complain instead 
Zookeeper,WITHOUT_CLASSIFICATION,//  snapCount must be 2 or more. See org.apache.zookeeper.server.SyncRequestProcessor 
Zookeeper,WITHOUT_CLASSIFICATION,/*  borrowed from Path.WINDOWS  */
Zookeeper,WITHOUT_CLASSIFICATION,/*  * This code is originally from HDFS see the file name MiniKdc there * in case of bug fixing history etc. * * Branch : trunk * Github Revision: 916140604ffef59466ba30832478311d3e6249bd  */
Zookeeper,WITHOUT_CLASSIFICATION,//  verify the session existence 
Zookeeper,WITHOUT_CLASSIFICATION,//  for cmds. They are all 4-bytes which fits inside of an int 
Zookeeper,WITHOUT_CLASSIFICATION,//  We are adding two new servers to the ensemble. These two servers should have the config which includes   all five servers (the old three servers plus the two servers added). The old three servers should only   have the old three server config because disabling reconfig will prevent synchronizing configs between   peers. 
Zookeeper,WITHOUT_CLASSIFICATION,// Make sure that we did take the snapshot now 
Zookeeper,WITHOUT_CLASSIFICATION,//  OP_READ means "can read" but OP_WRITE means "cannot write"   it's weird. 
Zookeeper,WITHOUT_CLASSIFICATION,//  LOG.info("starting forward for "+toClose); 
Zookeeper,WITHOUT_CLASSIFICATION,//  "zookeeper.server.realm" is set). 
Zookeeper,WITHOUT_CLASSIFICATION,//  7. start follower A to do snapshot sync 
Zookeeper,WITHOUT_CLASSIFICATION,//  Add ReplicatedServer_1 back to the ensemble 
Zookeeper,WITHOUT_CLASSIFICATION,//  call command and put result in byteStream 
Zookeeper,WITHOUT_CLASSIFICATION,//  remove self as it is local bean 
Zookeeper,WITHOUT_CLASSIFICATION,//  Only do extra logging so we know what kind of session this is   if we're supporting both kinds of sessions 
Zookeeper,WITHOUT_CLASSIFICATION,//  We will send DIFF for this kind of zxid in any case. This if-block   is the catch when our history older than learner and there is   no new txn since then. So we need an empty diff 
Zookeeper,WITHOUT_CLASSIFICATION,//  Restart leader election 
Zookeeper,WITHOUT_CLASSIFICATION,//  by waiting for the callback we're assured that the event queue is flushed 
Zookeeper,WITHOUT_CLASSIFICATION,//  commit proposals in order 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer have some proposals that the leader hasn't seen yet   it may used to be a leader 
Zookeeper,WITHOUT_CLASSIFICATION,// corrupt all the snapshot in the snapshot directory 
Zookeeper,WITHOUT_CLASSIFICATION,//  should work 
Zookeeper,WITHOUT_CLASSIFICATION,//  -4 is the xid for AuthPacket                
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Message type: 0 notification 1 acknowledgement          */
Zookeeper,WITHOUT_CLASSIFICATION,//  start 3 servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait until followers time out in waitForEpochAck - they shouldn't return 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * getNumChildren(java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  set the snap count to something low so that we force log rollover   and verify that is working as part of the epoch rollover. 
Zookeeper,WITHOUT_CLASSIFICATION,//  close wasn't successful try to delete the tmp file 
Zookeeper,WITHOUT_CLASSIFICATION,//  now verify that the FileTxnLog reads every transaction only once 
Zookeeper,WITHOUT_CLASSIFICATION,//  generate some transactions 
Zookeeper,WITHOUT_CLASSIFICATION,/*  * We suppress the "try" warning here because the close() method's signature * allows it to throw InterruptedException which is strongly advised against * by AutoCloseable (see: http://docs.oracle.com/javase/7/docs/api/java/lang/AutoCloseable.html#close()). * close() will never throw an InterruptedException but the exception remains in the * signature for backwards compatibility purposes. */
Zookeeper,WITHOUT_CLASSIFICATION,//  password is test 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Connection time out value in milliseconds      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait until we can connect 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure that ops are committed in order. With reconfigurations it is now possible   that different operations wait for different sets of acks and we still want to enforce   that they are committed in order. Currently we only permit one outstanding reconfiguration   such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is   pending all wait for a quorum of old and new config so it's not possible to get enough acks   for an operation without getting enough acks for preceding ops. But in the future if multiple 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Turn each child of rootNodeName into a leader offer. This is a tuple of     * the sequence number and the node name.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  New contents replace original file 
Zookeeper,WITHOUT_CLASSIFICATION,// LOG.info("Created a new client: " + zk.describeCNXN()); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sleeps on receive 
Zookeeper,WITHOUT_CLASSIFICATION,//  Add the root logger to the Hierarchy MBean   org.apache.log4j.Logger rootLogger = 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is only true because we're setting cmdName to the primary name 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we have written more than we have previously preallocated we need to make sure the new   file size is larger than what we already have 
Zookeeper,WITHOUT_CLASSIFICATION,//  create top level znode 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer is already sync 
Zookeeper,WITHOUT_CLASSIFICATION,//  resetting watcher so that this watcher can be again used to ensure   that the zkClient is able to re-establish connection with the 
Zookeeper,WITHOUT_CLASSIFICATION,//  canonicalize authorization id according to system properties:   zookeeper.kerberos.removeRealmFromPrincipal(={truefalse})   zookeeper.kerberos.removeHostFromPrincipal(={truefalse}) 
Zookeeper,WITHOUT_CLASSIFICATION,//  OK expected that 
Zookeeper,WITHOUT_CLASSIFICATION,//  we failed on the most recent snapshot   must be incomplete   try reading the next one   after corrupting 
Zookeeper,WITHOUT_CLASSIFICATION,//  leader calls waitForEpochAck first add to electingFollowers 
Zookeeper,WITHOUT_CLASSIFICATION,//  Get a three server quorum. 
Zookeeper,WITHOUT_CLASSIFICATION,//  cleanup 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer     * .DataFlavor)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  We are requesting half the number of transaction from the snapshot 
Zookeeper,WITHOUT_CLASSIFICATION,//  entry point for quorum/Learner.java 
Zookeeper,WITHOUT_CLASSIFICATION,/*                          * Before joining an established ensemble verify that                         * a majority are following the same leader.                          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Errors are okay since hosts may be   down 
Zookeeper,WITHOUT_CLASSIFICATION,//  bad gateway
Zookeeper,WITHOUT_CLASSIFICATION,//  Got a EOF right away definitely not using TLS. Fallthrough. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that new dynamic config includes the updated client port.   Check that server changedServerId erased clientPort from static config.   Check that other servers still have clientPort in static config. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Only update pzxid when the zxid is larger than the current pzxid   otherwise we might override higher pzxid set by a following create    Txn which could cause the cversion and pzxid inconsistent
Zookeeper,WITHOUT_CLASSIFICATION,//  truncateLog reloads the db 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set threshold to -1 as after the first commit it takes 0ms to commit to disk. 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Set the state of the peer to LOOKING and look for leader                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  this is ok - the leader has dropped leadership 
Zookeeper,WITHOUT_CLASSIFICATION,//  If unable to pull a new connection off the accept   queue pause accepting to give us time to free   up file descriptors and so the accept thread   doesn't spin in a tight loop. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure that the magic number is written before padding. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Must be Java 9 or later 
Zookeeper,WITHOUT_CLASSIFICATION,//  this means that the file has ended   we should go to the next file 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * loadNodeViewersFile(java.io.File)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  If sasl is not required when a server initializes a   connection it will try to log in but it will also   accept connections that do not start with a sasl
Zookeeper,WITHOUT_CLASSIFICATION,//  We cannot send TRUNC that cross epoch boundary.   The learner will crash if it is asked to do so.   We will send snapshot this those cases. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Since the SASL authenticator will usually be used with Kerberos authentication   it should enforce that these names are valid according to Kerberos's   syntax for principals.     Use the KerberosName(id) constructor to define validity:   if KerberosName(id) throws IllegalArgumentException then id is invalid.   otherwise it is valid.   
Zookeeper,WITHOUT_CLASSIFICATION,//  it does not commit ops after committing the reconfig 
Zookeeper,WITHOUT_CLASSIFICATION,//  This is safe inside an iterator as per   http://download.oracle.com/javase/1.5.0/docs/api/java/util/Map.Entry.html 
Zookeeper,WITHOUT_CLASSIFICATION,//  as a result of the I/O operations we just performed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  find the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  as we look through proposals this variable keeps track of previous   proposal Id. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Max number of toasters for the sceen 
Zookeeper,WITHOUT_CLASSIFICATION,//  need it for calloc() & free() 
Zookeeper,WITHOUT_CLASSIFICATION,//  receive the commit message. 
Zookeeper,WITHOUT_CLASSIFICATION,//  for no such child 
Zookeeper,WITHOUT_CLASSIFICATION,//  Great this is what we were hoping for! 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * ZOOKEEPER-2693: test white list of four letter words.     * For 3.5.x default white list is empty. Verify that is     * the case (except 'stat' command which is enabled in ClientBase     * which other tests depend on.).      */
Zookeeper,WITHOUT_CLASSIFICATION,//  disconnected 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-2743:   Always unregister connection upon close to prevent   connection bean leak under certain race conditions. 
Zookeeper,WITHOUT_CLASSIFICATION,//  2. SASL login failed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  null if factory never started 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore for this test 
Zookeeper,WITHOUT_CLASSIFICATION,//  All zxid should match what we created 
Zookeeper,WITHOUT_CLASSIFICATION,//  This class holds the servers and clients for those servers 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Adds up weights per group          */
Zookeeper,WITHOUT_CLASSIFICATION,//  qcm outside QV_LOCK to avoid a deadlock against other callers of qcm.connectOne(). 
Zookeeper,WITHOUT_CLASSIFICATION,//  If quorumpeer learner is not auth enabled then self won't be able to   join quorum. So this condition is ensuring that the quorumpeer learner 
Zookeeper,WITHOUT_CLASSIFICATION,//  Read without sending data. Verify timeout. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore we've simply come to the end of the file 
Zookeeper,WITHOUT_CLASSIFICATION,//  Receive and handle the connection request   asynchronously if the quorum sasl authentication is   enabled. This is required because sasl server   authentication process may take few seconds to finish   this may delay next peer connection requests. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Separated this method from the main run loop     * for test purposes (ZOOKEEPER-1863)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  rewrite to option 
Zookeeper,WITHOUT_CLASSIFICATION,//  LoginThread will sleep until 80% of time from last refresh to   ticket's expiry has been reached at which time it will wake 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Used to send a QuorumVerifier (configuration info)          */
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * Print notification info                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  new server 3 has still its invalid joiner config - everyone in old 
Zookeeper,WITHOUT_CLASSIFICATION,//  Commit /foo1 update 
Zookeeper,WITHOUT_CLASSIFICATION,//  create child znodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note: getting the input stream should not block the thread or trigger mode detection.
Zookeeper,WITHOUT_CLASSIFICATION,//  mapping was present clean up the previous expiry bucket. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We can get here if we don't have op packet to queue   or there is a duplicate txn in a given iterator 
Zookeeper,WITHOUT_CLASSIFICATION,//  We only want to print anything if things have had a   chance to change 
Zookeeper,WITHOUT_CLASSIFICATION,//  to removed server 
Zookeeper,WITHOUT_CLASSIFICATION,//  We can't call outgoingQueue.clear() here because   between iterating and clear up there might be new   packets added in queuePacket(). 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't re-establish connection if we are closing 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start the servers with a static config file without a dynamic 
Zookeeper,WITHOUT_CLASSIFICATION,//  Find zxid for the second log 
Zookeeper,WITHOUT_CLASSIFICATION,//  crank up the epoch numbers 
Zookeeper,WITHOUT_CLASSIFICATION,// "This should never happen you can't have a filter exception without a filter"); 
Zookeeper,WITHOUT_CLASSIFICATION,//  All new sessions local by default. 
Zookeeper,WITHOUT_CLASSIFICATION,//  handle clientPath = "/" 
Zookeeper,WITHOUT_CLASSIFICATION,//  2. set force snapshot to be true 
Zookeeper,WITHOUT_CLASSIFICATION,//  Nothing to do we are shutting things down so an exception here is irrelevant 
Zookeeper,WITHOUT_CLASSIFICATION,//  free the error stream buffer 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * If sending message to myself then simply enqueue it (loopback).          */
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * Choose identifier at random. We need a value to identify                 * the connection.                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  entry point for FinalRequestProcessor.java 
Zookeeper,WITHOUT_CLASSIFICATION,//  closing session should remove ephemeral nodes and trigger data   watches if any 
Zookeeper,WITHOUT_CLASSIFICATION,//  stopping the ELECTED node so re-election will happen. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We expect this to happen. 
Zookeeper,WITHOUT_CLASSIFICATION,// return "    "+capitalize(fname)+"=a_.Read"+mMethodSuffix+"(" + capitalize(fname) + "\""+tag+"\");\n"; 
Zookeeper,WITHOUT_CLASSIFICATION,//  Show time 
Zookeeper,WITHOUT_CLASSIFICATION,//  listener thread should stop and throws error which notify QuorumPeer about error.   QuorumPeer should start shutdown process   set wait time if listener contains bug and thread not stops. 
Zookeeper,WITHOUT_CLASSIFICATION,// LOG.warn("ClientParts: " + serverClientParts[1]); 
Zookeeper,WITHOUT_CLASSIFICATION,//  some tests initialize QuorumPeer without a static config file 
Zookeeper,WITHOUT_CLASSIFICATION,// zk.close(); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Setting used for snapRetainCount in this test. 
Zookeeper,WITHOUT_CLASSIFICATION,//  NIOServerCnxnFactory 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Update the election vote here to ensure that all members of the         * ensemble report the same vote to new servers that start up and         * send leader election notifications to the ensemble.         *          * @see https://issues.apache.org/jira/browse/ZOOKEEPER-1732          */
Zookeeper,WITHOUT_CLASSIFICATION,//  subject is non-null it can be assumed to be GSSAPI. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Should be able to dump the recovered logfile with no CRC error 
Zookeeper,WITHOUT_CLASSIFICATION,//  check content of transaction log and snapshot dirs if they are two different directories 
Zookeeper,WITHOUT_CLASSIFICATION,//  Run the command 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sending id and challenge 
Zookeeper,WITHOUT_CLASSIFICATION,//  assume that server and client are in the same realm (by default;   unless the system property 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Messages to send both Notifications and Acks      */
Zookeeper,WITHOUT_CLASSIFICATION,//  resolution occured every time 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore "/" chroot spec same as null 
Zookeeper,WITHOUT_CLASSIFICATION,//  This was added in ZOOKEEPER-1783. The initial config has version 0 (not explicitly   specified by the user; the lack of version in a config file is interpreted as version=0).    As soon as a config is established we would like to increase its version so that it   takes presedence over other initial configs that were not established (such as a config   of a server trying to join the ensemble which may be a partial view of the system not the full config).    We chose to set the new version to the one of the NEWLEADER message. However before we can do that   there must be agreement on the new version so we can only change the version when sending/receiving UPTODATE   not when sending/receiving NEWLEADER. In other words we can't change curQV here since its the committed quorum verifier    and there's still no agreement on the new version that we'd like to use. Instead we use    lastSeenQuorumVerifier which is being sent with NEWLEADER message   so its a good way to let followers know about the new version. (The original reason for sending    lastSeenQuorumVerifier with NEWLEADER is so that the leader completes any potentially uncommitted reconfigs   that it finds before starting to propose operations. Here we're reusing the same code path for    reaching consensus on the new version number.) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Clean up for shutdown. 
Zookeeper,WITHOUT_CLASSIFICATION,//  just make sure that we actually did get it in process at the   leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  remove the error 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create a file at destination 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure we don't mess with request itself 
Zookeeper,WITHOUT_CLASSIFICATION,/*  if we are not truncating or sending a diff just send a snapshot  */
Zookeeper,WITHOUT_CLASSIFICATION,//  send a response... 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start peer012 servers with quorum.auth.enableSasl=false and   quorum.auth.learnerRequireSasl=false quorum.auth.serverRequireSasl=false 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set sizeLimit to be very high number so we can pull all transactions 
Zookeeper,WITHOUT_CLASSIFICATION,//  response as with other packets. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Multiply by 1000 to get   reqs/sec 
Zookeeper,WITHOUT_CLASSIFICATION,//  initial data is written. 
Zookeeper,WITHOUT_CLASSIFICATION,//  We want to queue the request to be processed before we submit   the request to the leader so that we are ready to receive 
Zookeeper,WITHOUT_CLASSIFICATION,//  add back host number 0 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can instantiate a trust manager from the PEM file on disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  0xff = Extended feature is ON   0x0001 = Unsupported extended type id (1) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Explicitly add to global session if the flag is not set 
Zookeeper,WITHOUT_CLASSIFICATION,//  request.addRQRec(">final"); 
Zookeeper,WITHOUT_CLASSIFICATION,//  the files   are sorted with zxid's 
Zookeeper,WITHOUT_CLASSIFICATION,//  If the connection is not in the master list it's already been closed 
Zookeeper,WITHOUT_CLASSIFICATION,/*  this 'Client' section has the correct password but we're not configured                                  to  use it (we're configured by the above System.setProperty(...LOGIN_CONTEXT_NAME_KEY...) to                                   use the 'MyZookeeperClient' section which has an incorrect password). */
Zookeeper,WITHOUT_CLASSIFICATION,//  parse the output   clear the input stream buffer 
Zookeeper,WITHOUT_CLASSIFICATION,//  check for more than 2 children --   if zookeeper_stats and zookeeper_quotas   are not the children then this path   is an ancestor of some path that 
Zookeeper,WITHOUT_CLASSIFICATION,//  quorum.auth.learnerRequireSasl=false quorum.auth.serverRequireSasl=false 
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait for falseLeader to rejoin the quorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  parent channel options 
Zookeeper,WITHOUT_CLASSIFICATION,//  Validate status code at the end of authentication exchange. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorManager#disconnect()      */
Zookeeper,WITHOUT_CLASSIFICATION,//  *************** <END> CientCnxnSocketNetty </END> ****************** 
Zookeeper,WITHOUT_CLASSIFICATION,//  Otherwise proceed with the connection 
Zookeeper,WITHOUT_CLASSIFICATION,//  input buffer until after throttling is turned off. Need to make sure both modes work. 
Zookeeper,WITHOUT_CLASSIFICATION,//  check exceptions 
Zookeeper,WITHOUT_CLASSIFICATION,//  Find the leader by id 
Zookeeper,WITHOUT_CLASSIFICATION,//  For Invalid ACls should not throw exception 
Zookeeper,WITHOUT_CLASSIFICATION,//  create child to see NodeChildren notification 
Zookeeper,WITHOUT_CLASSIFICATION,//     private void notestConnections()          throws IOException InterruptedException KeeperException      {          ZooKeeper zk; 
Zookeeper,WITHOUT_CLASSIFICATION,//  found path watchers 
Zookeeper,WITHOUT_CLASSIFICATION,//  the sleep is necessary so that the leader figures out 
Zookeeper,WITHOUT_CLASSIFICATION,//  sanity check 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Methods to aid in testing follow.     *      * THESE METHODS ARE EXPECTED TO BE USED FOR TESTING ONLY!!!      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Use subject.getPrincipals().isEmpty() as an indication of which SASL   mechanism to use: if empty use DIGEST-MD5; otherwise use GSSAPI. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  new client port  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Animate from top! 
Zookeeper,WITHOUT_CLASSIFICATION,//  DIFF + 2 proposals + 2 commit 
Zookeeper,WITHOUT_CLASSIFICATION,//  Generate snapshot and close files. 
Zookeeper,WITHOUT_CLASSIFICATION,//  create with valid sequential flag 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check whether it's a global session. We can ignore those   because they are handled at the leader but if not rethrow.   We check local session status first to avoid race condition   with session upgrading. 
Zookeeper,WITHOUT_CLASSIFICATION,//  add all non-excluded log files 
Zookeeper,WITHOUT_CLASSIFICATION,//  test the most likely situation only: server is stated as observer in 
Zookeeper,WITHOUT_CLASSIFICATION,//  iterator points to   the first valid txn when initialized 
Zookeeper,WITHOUT_CLASSIFICATION,//  delete 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Requests coming from the learner should have gone through         * submitRequest() on each server which already perform some request         * validation so we don't need to do it again.         *         * Additionally LearnerHandler should start submitting requests into         * the leader's pipeline only when the leader's server is started so we         * can submit the request directly into PrepRequestProcessor.         *         * This is done so that requests from learners won't go through         * LeaderRequestProcessor which perform local session upgrade.          */
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * It is possible that committedLog is empty. In that case                 * setting these value to the latest txn in leader db                 * will reduce the case that we need to handle                 *                 * Here is how each case handle by the if block below                 * 1. lastProcessZxid == peerZxid -> Handle by (2)                 * 2. lastProcessZxid < peerZxid -> Handle by (3)                 * 3. lastProcessZxid > peerZxid -> Handle by (5)                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer zxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  Grab a list iterator starting at the END of the list so we can iterate in reverse 
Zookeeper,WITHOUT_CLASSIFICATION,//  0 value not allowed will return the default 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test view contains self 
Zookeeper,WITHOUT_CLASSIFICATION,//  Wait until all updates return 
Zookeeper,WITHOUT_CLASSIFICATION,//  log request 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure the data was recorded in the filesystem ok 
Zookeeper,WITHOUT_CLASSIFICATION,//  Child watcher 
Zookeeper,WITHOUT_CLASSIFICATION,//  Now try an ephemeral node.  This should fail since we 
Zookeeper,WITHOUT_CLASSIFICATION,//  stop all severs 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-2722: wait until we can connect to a read-write server after the quorum   is formed. Otherwise it is possible that client first connects to a read-only server   then drops the connection because of shutting down of the read-only server caused   by leader election / quorum forming between the read-only server and the newly started   server. If we happen to execute the zk.create after the read-only server is shutdown and   before the quorum is formed we will get a ConnectLossException. 
Zookeeper,WITHOUT_CLASSIFICATION,//  If an exception occurred we misdetected a sequence suffix   so return -1. 
Zookeeper,WITHOUT_CLASSIFICATION,//  double check for the file existence 
Zookeeper,WITHOUT_CLASSIFICATION,//  We now ship the request to the leader. As with all   other quorum operations sync also follows this code   path but different from others we need to keep track   of the sync operations this follower has pending so we 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Now we start a new connection              */
Zookeeper,WITHOUT_CLASSIFICATION,//  TODO: introduce JuteTestCase as in ZKTestCase 
Zookeeper,WITHOUT_CLASSIFICATION,// there should be only two files   one the snapshot and the other logFile 
Zookeeper,WITHOUT_CLASSIFICATION,//  now corrupt the leader's database 
Zookeeper,WITHOUT_CLASSIFICATION,//  flush the config to server 2 
Zookeeper,WITHOUT_CLASSIFICATION,//  fake messages from the server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Put the new set in the map but only if another thread 
Zookeeper,WITHOUT_CLASSIFICATION,/*                          * Consider all notifications from the same epoch                         * together.                          */
Zookeeper,WITHOUT_CLASSIFICATION,//  this is a test that a reconfig will only succeed   if there is a quorum up in new config. Below there is no   quorum so it should fail 
Zookeeper,WITHOUT_CLASSIFICATION,//  simulate the upgrading case where the config node will be created 
Zookeeper,WITHOUT_CLASSIFICATION,/*  this 'Client' section has an incorrect password but we're not configured                                  to  use it (we're configured by the above System.setProperty(...LOGIN_CONTEXT_NAME_KEY...) to                                   use the 'MyZookeeperClient' section below which has the correct password). */
Zookeeper,WITHOUT_CLASSIFICATION,//  call is no-op if session isn't tracked so safe to call both 
Zookeeper,WITHOUT_CLASSIFICATION,//  Need to be short since we need to wait for session to expire 
Zookeeper,WITHOUT_CLASSIFICATION,// 1. Upgrade peer012 with quorum.auth.enableSasl=true and 
Zookeeper,WITHOUT_CLASSIFICATION,//  It would be great to test the value of PKIXBuilderParameters#setRevocationEnabled but it does not appear to be 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * getConnectionPropertiesTemplate()      */
Zookeeper,WITHOUT_CLASSIFICATION,//  If this request is the commit request that was blocking   the processor clear. 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for selector and worker threads to shutdown 
Zookeeper,WITHOUT_CLASSIFICATION,//  Reset to default value since some test cases set this to true.   Needed for JDK7 since unit test can run is random order 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Address of recipient          */
Zookeeper,WITHOUT_CLASSIFICATION,//  never true if tmpfile does it's job 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Note that addAck already checks that the learner             * is a PARTICIPANT.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  this server will be added back as an observer 
Zookeeper,WITHOUT_CLASSIFICATION,//  ... and finally disable throttling after 2 seconds. 
Zookeeper,WITHOUT_CLASSIFICATION,// All the rest don't need to create a Txn - just verify session 
Zookeeper,WITHOUT_CLASSIFICATION,//  we've asked to close wait for it to finish closing   all the sub-threads otw the selector may not be   closed when we check (false positive on test Assert.failure 
Zookeeper,WITHOUT_CLASSIFICATION,//  only use jline if it's in the classpath 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't try to handle jersey exceptions ourselves 
Zookeeper,WITHOUT_CLASSIFICATION,//  ulimit isn't supported on Windows
Zookeeper,WITHOUT_CLASSIFICATION,//  get new designated leader from (current) leader's message 
Zookeeper,WITHOUT_CLASSIFICATION,/*  this 'Server' section has an incorrect password but we're not configured         * to  use it (we're configured by the above System.setProperty(...LOGIN_CONTEXT_NAME_KEY...)         * to use the 'MyZookeeperServer' section below which has the correct password).          */
Zookeeper,WITHOUT_CLASSIFICATION,//  c.f. HADOOP-6559 
Zookeeper,WITHOUT_CLASSIFICATION,//  close clients 
Zookeeper,WITHOUT_CLASSIFICATION,//  start creating all the parents 
Zookeeper,WITHOUT_CLASSIFICATION,//  this data structure must be accessed under the outstandingChanges lock 
Zookeeper,WITHOUT_CLASSIFICATION,//  go through buffer until i find a \n if i reach end of buffer first put whats in buffer into string buffer   repeat 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * A real zookeeper would take care of setting the current vote. Here                     * we do it manually.                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  we should catch the exceptions   from the valid snapshot and continue   until we find a valid one 
Zookeeper,WITHOUT_CLASSIFICATION,//  Cannot use createClient here because server may close session before    JMXEnv.ensureAll is called which will fail the test case 
Zookeeper,WITHOUT_CLASSIFICATION,//  lastProcessedZxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  nothing interesting to do if out == null 
Zookeeper,WITHOUT_CLASSIFICATION,//  transaction log and snapshot files in the same dir 
Zookeeper,WITHOUT_CLASSIFICATION,//  observer calls waitForEpochAck should fail verifier.containsQuorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  Trying to get a second txn on second txnlog give us the 
Zookeeper,WITHOUT_CLASSIFICATION,/*  some useful information - log the number of fds used before         * and after a test is run. Helps to verify we are freeing resources         * correctly. Unfortunately this only works on unix systems (the         * only place sun has implemented as part of the mgmt bean api.          */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.encryption.DataEncryptionManager#encryptData     * (java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Here are the cases that we want to handle             *             * 1. Force sending snapshot (for testing purpose)             * 2. Peer and leader is already sync send empty diff             * 3. Follower has txn that we haven't seen. This may be old leader             *    so we need to send TRUNC. However if peer has newEpochZxid             *    we cannot send TRUNC since the follower has no txnlog             * 4. Follower is within committedLog range or already in-sync.             *    We may need to send DIFF or TRUNC depending on follower's zxid             *    We always send empty DIFF if follower is already in-sync             * 5. Follower missed the committedLog. We will try to use on-disk             *    txnlog + committedLog to sync with follower. If that fail             *    we will send snapshot              */
Zookeeper,WITHOUT_CLASSIFICATION,//  my server is in new config and load should be increased so   stay with this server and do nothing special 
Zookeeper,WITHOUT_CLASSIFICATION,// the transaction logs 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set the last accepted epoch and current epochs to be 1 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Proposed leader in the case of notification          */
Zookeeper,WITHOUT_CLASSIFICATION,//  visiable for test 
Zookeeper,WITHOUT_CLASSIFICATION,//  Purge snapshot and log files. 
Zookeeper,WITHOUT_CLASSIFICATION,//  e.g. servicePrincipalNameAndHostname := 
Zookeeper,WITHOUT_CLASSIFICATION,//  for now. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Take any necessary action if we need to send TRUNC or DIFF 
Zookeeper,WITHOUT_CLASSIFICATION,//  'domain' parameter is hard-wired between the server and client 
Zookeeper,WITHOUT_CLASSIFICATION,/*  this is ok  */
Zookeeper,WITHOUT_CLASSIFICATION,//     txn proposal and commit for v1 value update 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * When a new leader starts executing Leader#lead it          * invokes this method. The database however has been         * initialized before running leader election so that         * the server could pick its zxid for its initial vote.         * It does it by invoking QuorumPeer#getLastLoggedZxid.         * Consequently we don't need to initialize it once more         * and avoid the penalty of loading it a second time. Not          * reloading it is particularly important for applications         * that host a large database.         *          * The following if block checks whether the database has         * been initialized or not. Note that this method is         * invoked by at least one other method:          * ZooKeeperServer#startdata.         *           * See ZOOKEEPER-1642 for more detail.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Depricated: rmr 
Zookeeper,WITHOUT_CLASSIFICATION,//  server error or shutdown state changes. 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * For future unwary socket programmers: although connect 'blocks' it                 * does not require an accept on the server side to return. Therefore                 * you can not assume that all the sockets are connected at the end of                 * this for loop.                  */
Zookeeper,WITHOUT_CLASSIFICATION,/*          * zxid of the proposed leader          */
Zookeeper,WITHOUT_CLASSIFICATION,//  / marks end of stream   we need to check if clear had been called in between the snapshot. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ensure we have the leader's correct IP address before   attempting to connect. 
Zookeeper,WITHOUT_CLASSIFICATION,//  this should break the run() loop 
Zookeeper,WITHOUT_CLASSIFICATION,//  LOG.info("Prep>>> cxid = " + request.cxid + " type = " + 
Zookeeper,WITHOUT_CLASSIFICATION,//  LOG.warn("sid = " + sid + " addressStr = " + addressStr); 
Zookeeper,WITHOUT_CLASSIFICATION,//  case-1) 'quorum.auth.enableSasl' is off. Tries to enable learner sasl. 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-2819: overwrite config node content extracted   from leader snapshot with local config to avoid potential 
Zookeeper,WITHOUT_CLASSIFICATION,//  All dynamic files created with the same version should have 
Zookeeper,WITHOUT_CLASSIFICATION,//  Creating child using chRoot client. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send the valid or invalid session packet to the follower 
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Do the flip: limit becomes position position gets set to             * 0. This sets us up for the write.              */
Zookeeper,WITHOUT_CLASSIFICATION,//  wildCard address(0.0.0.0)   loopback address(localhost/127.0.0.1) 
Zookeeper,WITHOUT_CLASSIFICATION,//  transaction log files in log dir 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make tracked buffers eligible for GC 
Zookeeper,WITHOUT_CLASSIFICATION,// deserialize a DataTree; this should clear the old /bug nodes and pathTrie 
Zookeeper,WITHOUT_CLASSIFICATION,//  now truncate at the current position 
Zookeeper,WITHOUT_CLASSIFICATION,//  upgrade this once we have Google-Guava or Java 7+ 
Zookeeper,WITHOUT_CLASSIFICATION,//  Should be noop 
Zookeeper,WITHOUT_CLASSIFICATION,//  when we do the Cversion we need to translate from the count of the creates   to the count of the changes (v3 semantics)   for every create there is a delete except for the children still present 
Zookeeper,WITHOUT_CLASSIFICATION,// This will fast forward the database to the latest recorded transactions 
Zookeeper,WITHOUT_CLASSIFICATION,//  Original contents still in place 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Format version introduced in 3.4.6          */
Zookeeper,WITHOUT_CLASSIFICATION,//  same port. 
Zookeeper,WITHOUT_CLASSIFICATION,//  capture QuorumPeer logging 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify that the size is just 2 - ie connect then disconnect   if the client attempts reconnect and we are not handling current   state correctly (ie eventing on duplicate disconnects) then we'll 
Zookeeper,WITHOUT_CLASSIFICATION,//  catch this. 
Zookeeper,WITHOUT_CLASSIFICATION,//  now shut down the servers and restart them 
Zookeeper,WITHOUT_CLASSIFICATION,//  create dummy log and transaction file 
Zookeeper,WITHOUT_CLASSIFICATION,//  Register watch 
Zookeeper,WITHOUT_CLASSIFICATION,//  /10 wont work because the session expiration   will match the zxid for /10 and so we wont   actually truncate the zxid for /10 creation   due to an artifact of switching the xid of the standalone   /11 is the last entry in the log for the xid   as a result /12 is the first of the truncated znodes to check for
Zookeeper,WITHOUT_CLASSIFICATION,// } 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure that previous request is finished 
Zookeeper,WITHOUT_CLASSIFICATION,//  TODO lets assert that we are no longer the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Recreate a client session since the previous session was not persisted. 
Zookeeper,WITHOUT_CLASSIFICATION,//  for them that a reconfiguration was in progress when they failed 
Zookeeper,WITHOUT_CLASSIFICATION,//  Calling closeSession() after losing the cnxn results in the client close session response being dropped. 
Zookeeper,WITHOUT_CLASSIFICATION,//  start the old leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore simply end of file though really (line!=null) should have caught this 
Zookeeper,WITHOUT_CLASSIFICATION,/*                                  * Assert that the state of the thread is the one expected.                                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  get the value from the map 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#getData     * (java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  If SASL authentication is currently in progress construct and   send a response packet immediately rather than queuing a 
Zookeeper,WITHOUT_CLASSIFICATION,//  specify all of the commands that are available 
Zookeeper,WITHOUT_CLASSIFICATION,// Wait for the transactions to be written out. The thread that writes them out 
Zookeeper,WITHOUT_CLASSIFICATION,//  Use gathered write call. This updates the positions of the   byte buffers to reflect the bytes that were written out. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Try to load a password-protected private key without providing a password 
Zookeeper,WITHOUT_CLASSIFICATION,//  The proposal has already been committed 
Zookeeper,WITHOUT_CLASSIFICATION,//  sanitise start and end times 
Zookeeper,WITHOUT_CLASSIFICATION,/*  expected  */
Zookeeper,WITHOUT_CLASSIFICATION,//  two of the servers as observers and all ports different 
Zookeeper,WITHOUT_CLASSIFICATION,//  if we're here I shouldn't be the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Use a single listener instance to reduce GC 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * We want to make sure we implement the state machine                             * correctly. If we are a PARTICIPANT once a leader                             * is elected we can move either to LEADING or                             * FOLLOWING. However if we are an OBSERVER it is an                             * error to be elected as a Leader.                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  Try reconnecting with a new session.   The data should be persisted even though the session was not. 
Zookeeper,WITHOUT_CLASSIFICATION,//  survives the exception thrown by the first callback. 
Zookeeper,WITHOUT_CLASSIFICATION,//  not the case for 4letterword 
Zookeeper,WITHOUT_CLASSIFICATION,//  clear all the connections 
Zookeeper,WITHOUT_CLASSIFICATION,//  giving a grace period of 10seconds 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can instantiate a key manager from the JKS file on disk 
Zookeeper,WITHOUT_CLASSIFICATION,//  and add back hosts 6 7 and 8 
Zookeeper,WITHOUT_CLASSIFICATION,//  the watch contains the un-chroot path 
Zookeeper,WITHOUT_CLASSIFICATION,//  OK now the follower knows that the session is valid or invalid let's try 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify super with bad pass Assert.fails 
Zookeeper,WITHOUT_CLASSIFICATION,//  For global session if we don't know it it is already expired 
Zookeeper,WITHOUT_CLASSIFICATION,// non-incremental membership change                   
Zookeeper,WITHOUT_CLASSIFICATION,//  setup redirect out/err streams to get System.in/err use this   judiciously!   get current err 
Zookeeper,WITHOUT_CLASSIFICATION,//  watches which require multiple SetWatches calls. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  configure socket to be blocking            * so that we dont have to do write in            * a tight while loop             */
Zookeeper,WITHOUT_CLASSIFICATION,//  Start 3rd peer and check if it goes in LEADING state 
Zookeeper,WITHOUT_CLASSIFICATION,//  We are simulating an established leader so the epoch is 1 
Zookeeper,WITHOUT_CLASSIFICATION,//  leader will shutdown remaining followers will elect a new leader 
Zookeeper,WITHOUT_CLASSIFICATION,// / delete the direct children first 
Zookeeper,WITHOUT_CLASSIFICATION,//  have we read length bytes?   sock is non-blocking so ok 
Zookeeper,WITHOUT_CLASSIFICATION,//  add back server 7 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets try look up the current ID if we failed    in the middle of creating the znode 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore this just means server is not up 
Zookeeper,WITHOUT_CLASSIFICATION,/*                          * we now wait until a quorum supports the same leader.                          */
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Building challenge request packet to send                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Sending a nonexisting opcode should cause the server to disconnect 
Zookeeper,WITHOUT_CLASSIFICATION,//  shutdown and start zookeeper again 
Zookeeper,WITHOUT_CLASSIFICATION,//  new server joining 
Zookeeper,WITHOUT_CLASSIFICATION,//  Server.start() only throws Exception so let's at least wrap it   in an identifiable subclass 
Zookeeper,WITHOUT_CLASSIFICATION,//  NumberFormatException 
Zookeeper,WITHOUT_CLASSIFICATION,//  Mock processor used in zookeeper server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Replace trusted keys with a valid key that is not trusted by the server 
Zookeeper,WITHOUT_CLASSIFICATION,//  do nothing for the root.   we are not keeping a quota on the zookeeper   root node for now. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set message color 
Zookeeper,WITHOUT_CLASSIFICATION,//  add all non-excluded snapshot files to the deletion list 
Zookeeper,WITHOUT_CLASSIFICATION,//  server.  This should fail since it is a local sesion.
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Receives a socket and max number of attempts as input              */
Zookeeper,WITHOUT_CLASSIFICATION,//  change leader's leading port - should renounce leadership 
Zookeeper,WITHOUT_CLASSIFICATION,//  Do nothing 
Zookeeper,WITHOUT_CLASSIFICATION,//  second add to ackSet verifier.containsQuorum=true waitForNewLeaderAck returns without exceptions 
Zookeeper,WITHOUT_CLASSIFICATION,//  inconsistency of config node content during rolling restart. 
Zookeeper,WITHOUT_CLASSIFICATION,//  32 cores sweet spot seems to be 4 selector threads 
Zookeeper,WITHOUT_CLASSIFICATION,// This is the real assertion - could another thread lock  the DataNode we're currently writing 
Zookeeper,WITHOUT_CLASSIFICATION,//  that id 
Zookeeper,WITHOUT_CLASSIFICATION,//  Restore former value. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that return code of all request are correct 
Zookeeper,WITHOUT_CLASSIFICATION,//  Allows the JVM to shutdown even if this thread is still running. 
Zookeeper,WITHOUT_CLASSIFICATION,//  standalone mode doens't need myid 
Zookeeper,WITHOUT_CLASSIFICATION,//  re-open the txnLog and snapLog   I'd rather just close/reopen this object itself however that    would have a big impact outside ZKDatabase as there are other
Zookeeper,WITHOUT_CLASSIFICATION,//  Resolver called 10 times because we shouldn't cache the resolved addresses
Zookeeper,WITHOUT_CLASSIFICATION,//  Non-priming packet: defer it until later leaving it in the queue   until authentication completes. 
Zookeeper,WITHOUT_CLASSIFICATION,// check if I'm an observer in new config 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets sort them explicitly (though they do seem to come back in order ususally :) 
Zookeeper,WITHOUT_CLASSIFICATION,//  initialization 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is the limit node   get the parent and add it to the trie 
Zookeeper,WITHOUT_CLASSIFICATION,//  this is a server id and not a protocol version 
Zookeeper,WITHOUT_CLASSIFICATION,//  Hard close immediately discarding buffers 
Zookeeper,WITHOUT_CLASSIFICATION,//  the initial message (without the protocol version) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ignore. We'll check instead whether it's a global session 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check if this is a local session and we are trying to create   an ephemeral node in which case we upgrade the session 
Zookeeper,WITHOUT_CLASSIFICATION,/*  this 'Client' section has the correct password but we're not configured                                  to  use it - we're configured instead by the above                                  System.setProperty(...LOGIN_CONTEXT_NAME_KEY...) to                                  use the (nonexistent) 'MyZookeeperClient' section.  */
Zookeeper,WITHOUT_CLASSIFICATION,//  only happens during tests 
Zookeeper,WITHOUT_CLASSIFICATION,/*  ZOOKEEPER-706: If a session has a large number of watches set then     * attempting to re-establish those watches after a connection loss may     * fail due to the SetWatches request exceeding the server's configured     * jute.maxBuffer value. To avoid this we instead split the watch     * re-establishement across multiple SetWatches calls. This constant     * controls the size of each call. It is set to 128kB to be conservative     * with respect to the server's 1MB default for jute.maxBuffer.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  server is using a JAAS-authenticated subject: determine service   principal name and hostname from zk server's subject. 
Zookeeper,WITHOUT_CLASSIFICATION,//  hasn't beaten us to it 
Zookeeper,WITHOUT_CLASSIFICATION,//  skip to the offset of latest skip point before starttime 
Zookeeper,WITHOUT_CLASSIFICATION,//  Point server at testDir 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure that empty password and null password are treated the same 
Zookeeper,WITHOUT_CLASSIFICATION,//  create ephemeral sequential node 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make all snapshots empty 
Zookeeper,WITHOUT_CLASSIFICATION,//  We keep a queue of requests. As requests get submitted they are   stored here. The queue is drained in the run() method. 
Zookeeper,WITHOUT_CLASSIFICATION,//  some of the operations will be executed by a client connected to   the removed server   while others are invoked by a client connected to some other   server.   when we're removing the leader zk1 will be the client connected 
Zookeeper,WITHOUT_CLASSIFICATION,//  ok. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorNodeTreeManager#createNode     * (java.lang.String java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  On windows renameTo does not replace. 
Zookeeper,WITHOUT_CLASSIFICATION,//  If this is a request for a local session and it is to   create an ephemeral node then upgrade the session and return   a new session request for the leader.   This is called by the request processor thread (either follower   or observer request processor) which is unique to a learner.   So will not be called concurrently by two threads. 
Zookeeper,WITHOUT_CLASSIFICATION,//  from txnlog 
Zookeeper,WITHOUT_CLASSIFICATION,//  warn but generally this is ok 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start the prepared thread so that it is writing znodes while   the follower is restarting. On the first restart the follow   should use txnlog to catchup. For subsequent restart the   follower should use a diff to catchup. 
Zookeeper,WITHOUT_CLASSIFICATION,//  take the last server to which we were connected 
Zookeeper,WITHOUT_CLASSIFICATION,//  convert to milliseconds 
Zookeeper,WITHOUT_CLASSIFICATION,//  therefore authentication is (at the earliest stage of being) in progress. 
Zookeeper,WITHOUT_CLASSIFICATION,//  wait for the process to finish and check the exit code 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Building notification packet to send          */
Zookeeper,WITHOUT_CLASSIFICATION,/*              * Lower epoch must return false              */
Zookeeper,WITHOUT_CLASSIFICATION,// we need to truncate the log to the lastzxid of the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send diff and fall through if zxid is of a new-epoch 
Zookeeper,WITHOUT_CLASSIFICATION,//  next two steps - related to sequential processing   1) verify that empty child name Assert.fails if not sequential 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test view does not contain non-existant servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  break the quorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  getting called by PrepRequestProcessor 
Zookeeper,WITHOUT_CLASSIFICATION,/*                          * quora keeps the supporters of a given leader so                          * we first update it with the vote of this peer.                          */
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF to (60) and forward any packet starting at (6 0) 
Zookeeper,WITHOUT_CLASSIFICATION,//  register with JMX 
Zookeeper,WITHOUT_CLASSIFICATION,//  test fails if we still can't connect to the quorum after   30 seconds. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Per RFC 5280 section 4.1.2.2 X509 certificates can use up to 20 bytes == 160 bits for serial numbers. 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Building notification packet to send this is called directly only in tests          */
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Normalize IPv6 or DNS name.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  add childremove child and then call getChildren 
Zookeeper,WITHOUT_CLASSIFICATION,//  First add the elem to the new expiry time bucket in expiryMap. 
Zookeeper,WITHOUT_CLASSIFICATION,//  It's possible our session expired - but this is ok shows we  
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.gui.NodeViewersChangeListener#     * nodeViewersChanged(java.util.List)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Reconfigure 
Zookeeper,WITHOUT_CLASSIFICATION,//  If qcm is non-null we may call qcm.connectOne() which will take the lock on qcm   and then take QV_LOCK.  Take the locks in the same order to ensure that we don't   deadlock against other callers of connectOne().  If qcmRef gets set in another   thread while we're inside the synchronized block that does no harm; if we didn't   take a lock on qcm (because it was null when we sampled it) we won't call   connectOne() on it.  (Use of an AtomicReference is enough to guarantee visibility   of updates that provably happen in another thread before entering this method.) 
Zookeeper,WITHOUT_CLASSIFICATION,//  sessionMap is used by closeSession() 
Zookeeper,WITHOUT_CLASSIFICATION,//  any arbitrary constant will do 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * For ZOOKEEPER-975 verify that a peer joining an established cluster     * does not go in LEADING state.      */
Zookeeper,WITHOUT_CLASSIFICATION,/*         On startup it's possible that we'll try calling addUsage of an ID not in the cache.  This is safe to ignore        as it'll be added later when we traverse the tranlog.  See discussion here:        http://mail-archives.apache.org/mod_mbox/zookeeper-user/201507.mbox/%3CCAB5oV2_ujhvBA1sEkCG2WRakPjCy%2BNR10620WK2G1GGgmEO44g%40mail.gmail.com%3E        This test makes sure that we don't add the ID to the cache in this case as that would result in dupes later        and consequently incorrect counts and entries that will never be cleaned out.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  setting back 
Zookeeper,WITHOUT_CLASSIFICATION,//  should always be the case 
Zookeeper,WITHOUT_CLASSIFICATION,//  Flag that indicate if use alwaysOnTop or not. 
Zookeeper,WITHOUT_CLASSIFICATION,//  corrupt the logfile 
Zookeeper,WITHOUT_CLASSIFICATION,//  creating ephemeral with wrong option. 
Zookeeper,WITHOUT_CLASSIFICATION,//  set on watch 
Zookeeper,WITHOUT_CLASSIFICATION,// reduce the set of candidates to those that acknowledged p 
Zookeeper,WITHOUT_CLASSIFICATION,//  remember this server so we can add it back later 
Zookeeper,WITHOUT_CLASSIFICATION,//  Simulate a bit of network latency... 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.manager.ZooInspectorNodeTreeManager#deleteNode     * (java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  Write only 2 bytes of the message wait a bit then write the rest.   This makes sure that writes smaller than 5 bytes don't break the plaintext mode on the server   once it decides that the input doesn't look like a TLS handshake. 
Zookeeper,WITHOUT_CLASSIFICATION,//  call reconfig API when the new server has received 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send watches packet to server connection 
Zookeeper,WITHOUT_CLASSIFICATION,//  We have to get at least a majority of servers in sync with   us. We do this by waiting for the NEWLEADER packet to get   acknowledged 
Zookeeper,WITHOUT_CLASSIFICATION,//  Pattern.compile("Notification: \\d+ (\\d+) (\\d+) \\d+ [^]* [^]* (\\d+)");// LOOKING LOOKING 2 
Zookeeper,WITHOUT_CLASSIFICATION,//  Shutdown sequence guarantee that all pending requests 
Zookeeper,WITHOUT_CLASSIFICATION,//     wait it hit data tree 
Zookeeper,WITHOUT_CLASSIFICATION,//  Mimic sessionId generated by follower's local session tracker 
Zookeeper,WITHOUT_CLASSIFICATION,//  validate lower limit 
Zookeeper,WITHOUT_CLASSIFICATION,//  sets lastIndex resets reconfigMode 
Zookeeper,WITHOUT_CLASSIFICATION,//  remove host number 8 (the last one in a list of 9 hosts) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Format and print the output of the command 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer miss the txnlog 
Zookeeper,WITHOUT_CLASSIFICATION,//  Skip the xid 
Zookeeper,WITHOUT_CLASSIFICATION,//  Peer zxid is in txnlog range 
Zookeeper,WITHOUT_CLASSIFICATION,//  setup the logger to capture all logs 
Zookeeper,WITHOUT_CLASSIFICATION,//  Get expected exception 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * getLastConnectionProps()      */
Zookeeper,WITHOUT_CLASSIFICATION,//  now start the third server so that new config has quorum 
Zookeeper,WITHOUT_CLASSIFICATION,// Check format 
Zookeeper,WITHOUT_CLASSIFICATION,//  by setting the value to 2 
Zookeeper,WITHOUT_CLASSIFICATION,//  message too long 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Rather than fight it let root have an alias  */
Zookeeper,WITHOUT_CLASSIFICATION,//  TODO only show add if a selected node isn't being   watched and only show remove if a selected node is being   watched
Zookeeper,WITHOUT_CLASSIFICATION,//  Since we preallocate we define EOF to be an   empty transaction 
Zookeeper,WITHOUT_CLASSIFICATION,//  now shutdown the server and restart it 
Zookeeper,WITHOUT_CLASSIFICATION,// If we are not going to take the snapshot be sure the transactions are not applied in memory 
Zookeeper,WITHOUT_CLASSIFICATION,// Keep these two lines together to keep the initialization order explicit 
Zookeeper,WITHOUT_CLASSIFICATION,// check to see if the leader zxid is lower than ours  this should never happen but is just a safety check 
Zookeeper,WITHOUT_CLASSIFICATION,//  ignore silently 
Zookeeper,WITHOUT_CLASSIFICATION,//  resolution occurred 
Zookeeper,WITHOUT_CLASSIFICATION,//  If we failed when flushing try to close it to not leak   an FD 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Tests that if a quorum of a new config is synced with the leader and a reconfig     * is allowed to start but then the new quorum is lost the leader will time out and     * we go to leader election.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  We send DIFF to (1 2) and forward any packet starting at (1 2) 
Zookeeper,WITHOUT_CLASSIFICATION,/*                              * If this server is looking then send proposed leader                              */
Zookeeper,WITHOUT_CLASSIFICATION,//  We want to track the change with a callback rather than depending on timing 
Zookeeper,WITHOUT_CLASSIFICATION,//  server_config should be either host:port:port or host:port:port:type 
Zookeeper,WITHOUT_CLASSIFICATION,//  Node 2 started last kicks off leader election 
Zookeeper,WITHOUT_CLASSIFICATION,//  Ignore. This may be local session from other servers. 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets remove someone who's not the leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  get the new configuration from the request 
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-2693: don't execute 4lw if it's not enabled. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Set SSL system properties and port unification begin restarting servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  now parse it 
Zookeeper,WITHOUT_CLASSIFICATION,/*                      * Exponential backoff                      */
Zookeeper,WITHOUT_CLASSIFICATION,//  and the leader will complete it 
Zookeeper,WITHOUT_CLASSIFICATION,/*  nThreads  */
Zookeeper,WITHOUT_CLASSIFICATION,//  setting up the quorum has a transaction overhead for creating and closing the session 
Zookeeper,WITHOUT_CLASSIFICATION,/*  Prep the request and convert to a Txn  */
Zookeeper,WITHOUT_CLASSIFICATION,//    test get/exists with two sets of watchers 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorReadOnlyManager#     * isAllowsChildren(java.lang.String)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*  Once we've figured out where we are we're done.  */
Zookeeper,WITHOUT_CLASSIFICATION,//  lets see one successful operation 
Zookeeper,WITHOUT_CLASSIFICATION,//  try to reestablish the quorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  Same as for element.  Should refactor this.
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure zkclient works 
Zookeeper,WITHOUT_CLASSIFICATION,//  start server 3 with new config 
Zookeeper,WITHOUT_CLASSIFICATION,//  or none if not ready yet. Sets saslState to COMPLETE as a side-effect. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Instead of starting roZk immediately wait some grace   period before we decide we're partitioned.     Thread is used here because otherwise it would require   changes in each of election strategy classes which is 
Zookeeper,WITHOUT_CLASSIFICATION,//  This should never happen 
Zookeeper,WITHOUT_CLASSIFICATION,//  LOG.warn("Ack>>> cxid = " + request.cxid + " type = " +   request.type + " id = " + request.sessionId);   request.addRQRec(">prop"); 
Zookeeper,WITHOUT_CLASSIFICATION,//  Default constructor
Zookeeper,WITHOUT_CLASSIFICATION,//  This method can return empty iterator if the requested zxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  log at error level as we are returning a marshalling   error to the user 
Zookeeper,WITHOUT_CLASSIFICATION,//  if we have read data from the file and it matchs the timep pattern 
Zookeeper,WITHOUT_CLASSIFICATION,//  No change so nothing to update 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure to atomically check local session status upgrade   session and make the session creation request.  This is to   avoid another thread upgrading the session in parallel. 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * For each leader offer find out where we fit in. If we're first we     * become the leader. If we're not elected the leader attempt to stat the     * offer just less than us. If they exist watch for their failure but if     * they don't become the leader.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  ZOOKEEPER-3056: provides an escape hatch for users upgrading   from old versions of zookeeper (3.4.x pre 3.5.3). 
Zookeeper,WITHOUT_CLASSIFICATION,//  the follower acceptor thread 
Zookeeper,WITHOUT_CLASSIFICATION,//  c.f. org.apache.hadoop.security.UserGroupInformation. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Now kill one of the other real servers         
Zookeeper,WITHOUT_CLASSIFICATION,//  servers with authentication interfaces configured 
Zookeeper,WITHOUT_CLASSIFICATION,//  resets "zookeeper.datadir.autocreate" flag 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note: mode is UNKNOWN or PLAINTEXT 
Zookeeper,WITHOUT_CLASSIFICATION,//  Disable throttling and resume acceptance of new requests. If this   entailed a state change register an interest op update request with 
Zookeeper,WITHOUT_CLASSIFICATION,//  and add it back (as follower) 
Zookeeper,WITHOUT_CLASSIFICATION,//  create a file logger url from the command line args 
Zookeeper,WITHOUT_CLASSIFICATION,//  check delete 
Zookeeper,WITHOUT_CLASSIFICATION,//  leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Input may be delimited by either commas or newlines so convert to common newline separated format 
Zookeeper,WITHOUT_CLASSIFICATION,//  return number of session expiry calls 
Zookeeper,WITHOUT_CLASSIFICATION,//  Touch table for the global sessions 
Zookeeper,WITHOUT_CLASSIFICATION,//  watcher1 
Zookeeper,WITHOUT_CLASSIFICATION,//  init quorum auth server & learner 
Zookeeper,WITHOUT_CLASSIFICATION,//  verify bad pass Assert.fails 
Zookeeper,WITHOUT_CLASSIFICATION,//  verifying that other path child watches are not affected 
Zookeeper,WITHOUT_CLASSIFICATION,//  start 2 peers and verify if they form the cluster 
Zookeeper,WITHOUT_CLASSIFICATION,//  This server should fail to join the quorum as it is not using ssl. 
Zookeeper,WITHOUT_CLASSIFICATION,//  check if the path exists. We cannot create   quota for a path that already exists in zookeeper 
Zookeeper,WITHOUT_CLASSIFICATION,//  if no matching option -c or -d or -a is specified we remove   the watches of the given node by choosing WatcherType.Any 
Zookeeper,WITHOUT_CLASSIFICATION,/*                                  * Version added in 3.4.6                                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  we want to loop through the list twice 
Zookeeper,WITHOUT_CLASSIFICATION,//  create transaction and snapshot files in different-different 
Zookeeper,WITHOUT_CLASSIFICATION,//  set a watch on the root node 
Zookeeper,WITHOUT_CLASSIFICATION,//  the selector. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Note: according to the Socket javadocs setTrafficClass() may be   ignored by socket implementations so we don't check that the value   we set is returned. 
Zookeeper,WITHOUT_CLASSIFICATION,//  execute from commandMap 
Zookeeper,WITHOUT_CLASSIFICATION,//  sub process used to execute the command 
Zookeeper,WITHOUT_CLASSIFICATION,//  Now participant asks for epoch (mocking LearnerHandler behavior). Second add to connectingFollowers.   Triggers verifier.containsQuorum = true 
Zookeeper,WITHOUT_CLASSIFICATION,//  that the switched off servers are down 
Zookeeper,WITHOUT_CLASSIFICATION,// LOG.warn("designated leader is: " + designatedLeader); 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Creates a leader election notification message.      */
Zookeeper,WITHOUT_CLASSIFICATION,//  we want to send our version of the request. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This should be enough time for the first session to expire and for   the closeSession request to propagate to other machines (if there is a bug)   Since it is time sensitive we have false negative when test 
Zookeeper,WITHOUT_CLASSIFICATION,//  Here we start populating the server and shutdown the follower after 
Zookeeper,WITHOUT_CLASSIFICATION,//  clear our internal buffer 
Zookeeper,WITHOUT_CLASSIFICATION,//  Access to ipMap or to any Set contained in the map needs to be   protected with synchronized (ipMap) { ... } 
Zookeeper,WITHOUT_CLASSIFICATION,//  choose "current" server according to the client rebalancing algorithm 
Zookeeper,WITHOUT_CLASSIFICATION,// create/close session don't require request record 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Start one LEThread for each peer we want to run.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Grab some memory so that it is easier to cause an 
Zookeeper,WITHOUT_CLASSIFICATION,//  Doing a delete 
Zookeeper,WITHOUT_CLASSIFICATION,//  ensure zk got connected 
Zookeeper,WITHOUT_CLASSIFICATION,//  use synchronized(this) to access 
Zookeeper,WITHOUT_CLASSIFICATION,//  Defaults ServerCnxnFactory would be instantiated with 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure there is a leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  now create the direct children 
Zookeeper,WITHOUT_CLASSIFICATION,//  add back servers 7 and 8 while still in reconfigMode (we didn't call 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create Zookeeper and connect to it. 
Zookeeper,WITHOUT_CLASSIFICATION,// quorumPeer.setQuorumPeers(config.getAllMembers()); 
Zookeeper,WITHOUT_CLASSIFICATION,//  we only import NodeViewers 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Challenge counter to avoid replay attacks      */
Zookeeper,WITHOUT_CLASSIFICATION,// Check that the node path is removed from pTrie 
Zookeeper,WITHOUT_CLASSIFICATION,//  including the header and the last / bytes   the snapshot should be at least 10 bytes 
Zookeeper,WITHOUT_CLASSIFICATION,//  not a CA 
Zookeeper,WITHOUT_CLASSIFICATION,//  number of entries skipped to get to the end of the iterator less the number skipped to get to the start 
Zookeeper,WITHOUT_CLASSIFICATION,/*  save the return error code by the server  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Change the '1' to e.g. 5 to change this to 5 minutes. 
Zookeeper,WITHOUT_CLASSIFICATION,//  authenticate learner 
Zookeeper,WITHOUT_CLASSIFICATION,//  The test method threw an exception but it might be an   expected exception as defined in the @Test annotation.   Check the annotation and log an appropriate message. 
Zookeeper,WITHOUT_CLASSIFICATION,//  register an interest op update request with the selector. 
Zookeeper,WITHOUT_CLASSIFICATION,//  This must be a global request 
Zookeeper,WITHOUT_CLASSIFICATION,//  Here we create 13000 znodes 
Zookeeper,WITHOUT_CLASSIFICATION,//  The change should happen now 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * Request processors      */
Zookeeper,WITHOUT_CLASSIFICATION,//  1238 1237 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create and Register the top level Log4J MBean 
Zookeeper,WITHOUT_CLASSIFICATION,//  Test basic create ls and getData 
Zookeeper,WITHOUT_CLASSIFICATION,//  No entries in jaas.conf   If there's a configuration exception fetching the jaas section and   the user has required sasl by specifying a LOGIN_CONTEXT_NAME_KEY or a jaas file 
Zookeeper,WITHOUT_CLASSIFICATION,//  don't waste memory if there are few watches on a node   rehash when the 4th entry is added doubling size thereafter   seems like a good compromise 
Zookeeper,WITHOUT_CLASSIFICATION,//  creating sequential nodes is stored properly 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers and then bounce the other servers one by one 
Zookeeper,WITHOUT_CLASSIFICATION,//  than peer zxid 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that when a server starts from old style config it should keep the client 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Send the same messages this time should not make 0 the leader.          */
Zookeeper,WITHOUT_CLASSIFICATION,//  start additional new servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  pretend each connect attempt takes 4000 milliseconds 
Zookeeper,WITHOUT_CLASSIFICATION,//  servers 4 and 5 should be able to work independently 
Zookeeper,WITHOUT_CLASSIFICATION,/*  We've sent the whole buffer so drop the buffer  */
Zookeeper,WITHOUT_CLASSIFICATION,/*               * Start a new connection if doesn't have one already.               */
Zookeeper,WITHOUT_CLASSIFICATION,//  watcher2 
Zookeeper,WITHOUT_CLASSIFICATION,//  Send the connection request as a client do 
Zookeeper,WITHOUT_CLASSIFICATION,//  This value will be used directly in {@link CODE#SESSIONMOVED}   public static final int SessionMoved = -118;        
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @see     * org.apache.zookeeper.inspector.gui.nodeviewer.ZooInspectorNodeViewer#     * setZooInspectorManager     * (org.apache.zookeeper.inspector.manager.ZooInspectorNodeManager)      */
Zookeeper,WITHOUT_CLASSIFICATION,//  this is ok -- just a packet from an old client which   doesn't contain readOnly field 
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of machines increased my server is in the new cluster   Here whether to move or not depends on the difference of cluster   sizes   With probability 1 - |old|/|new} the client disconnects 
Zookeeper,WITHOUT_CLASSIFICATION,//  In this case the hostname equals literal IP address. 
Zookeeper,WITHOUT_CLASSIFICATION,//  queuedBuffer has reached its component limit so combine the existing components. 
Zookeeper,WITHOUT_CLASSIFICATION,//  check if being waken up on closing. 
Zookeeper,WITHOUT_CLASSIFICATION,//  abort if we hit the limit 
Zookeeper,WITHOUT_CLASSIFICATION,/*          * Start mock server 1          */
Zookeeper,WITHOUT_CLASSIFICATION,//  start server again with intact database 
Zookeeper,WITHOUT_CLASSIFICATION,//  so this shouldn't break anything. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Resolve hostname for this server in case the   underlying ip address has changed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  lets remove the leader and some other server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Throw an error if there were any leaked buffers 
Zookeeper,WITHOUT_CLASSIFICATION,//  delete till you can find a node with more than   one child 
Zookeeper,WITHOUT_CLASSIFICATION,// shutdown leader- quorum should still exist 
Zookeeper,WITHOUT_CLASSIFICATION,/*      * (non-Javadoc)     *      * @seeorg.apache.zookeeper.inspector.manager.ZooInspectorManager#     * saveNodeViewersFile(java.io.File java.util.List)      */
Zookeeper,WITHOUT_CLASSIFICATION,/*  Election instance  */
Zookeeper,WITHOUT_CLASSIFICATION,//  if no TGT do not bother with ticket management. 
Zookeeper,WITHOUT_CLASSIFICATION,//  each watcher will process the event 
Zookeeper,WITHOUT_CLASSIFICATION,//  7. restart the previous leader to force it to replay the edits and possibly come up in a bad state 
Zookeeper,WITHOUT_CLASSIFICATION,//  shutdown 2 followers so that leader does not have majority and goes 
Zookeeper,WITHOUT_CLASSIFICATION,//  make sure they joined the new config without any change to it 
Zookeeper,WITHOUT_CLASSIFICATION,//  where the packet is actually sent. 
Zookeeper,WITHOUT_CLASSIFICATION,//  write message 
Zookeeper,WITHOUT_CLASSIFICATION,//  Get each logger from the Log4J Repository and add it to the   Hierarchy MBean created above.   org.apache.log4j.spi.LoggerRepository r = 
Zookeeper,WITHOUT_CLASSIFICATION,//  We send snap 
Zookeeper,WITHOUT_CLASSIFICATION,//  a different larger version dynamic file 
Zookeeper,WITHOUT_CLASSIFICATION,//  Start up the ZK server to automatically create the necessary directories   and capture the directory where data is stored 
Zookeeper,WITHOUT_CLASSIFICATION,//  look for the clients to finish their create operations 
Zookeeper,WITHOUT_CLASSIFICATION,//  default constructor 
Zookeeper,WITHOUT_CLASSIFICATION,//  it later 
Zookeeper,WITHOUT_CLASSIFICATION,//  startForwarding() will be called in all cases 
Zookeeper,WITHOUT_CLASSIFICATION,// send a ping request either time is due or no packet sent out within MAX_SEND_PING_INTERVAL 
Zookeeper,WITHOUT_CLASSIFICATION,//  some of the operations will be executed by a client connected to   the removed server   while others are invoked by a client connected to some other   server.   when we're removing the leader zk1 will be the client connected   to removed server 
Zookeeper,WITHOUT_CLASSIFICATION,//  Again the user explicitly set something SASL-related so   they probably expected SASL to succeed. 
Zookeeper,WITHOUT_CLASSIFICATION,//  content preserved 
Zookeeper,WITHOUT_CLASSIFICATION,//  1246 1245 1244 1243 1242 1241 1240 1139 
Zookeeper,WITHOUT_CLASSIFICATION,//  check to avoid startup follows shutdown 
Zookeeper,WITHOUT_CLASSIFICATION,//  sleep for 10 millisecond and then again check 
Zookeeper,WITHOUT_CLASSIFICATION,//  check the existence of name in bean 
Zookeeper,WITHOUT_CLASSIFICATION,/*                  * When local session upgrading is disabled leader will                 * reject the ephemeral node creation due to session expire.                 * However if this is the follower that issue the request                 * it will have the correct error code so we should use that                 * and report to user                  */
Zookeeper,WITHOUT_CLASSIFICATION,//  Only called as callback from zkServer.processPacket() 
Zookeeper,WITHOUT_CLASSIFICATION,// If the test failes it will most likely fail with a NoAuth exception before it ever gets to this assertion 
Zookeeper,WITHOUT_CLASSIFICATION,//  loop through the args (must be key/value sequence) 
Zookeeper,WITHOUT_CLASSIFICATION,//  Falls back to filename detection if no property value 
Zookeeper,WITHOUT_CLASSIFICATION,//  3. start up the followers to form a new quorum 
Zookeeper,WITHOUT_CLASSIFICATION,//  Number of machines became smaller my server is not in the new   cluster 
Zookeeper,WITHOUT_CLASSIFICATION,//     the node value is same as what we have on leader 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that the static config was split into static and dynamic files correctly. 
Zookeeper,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see org.apache.zookeeper.ClientWatchManager#materialize(Event.KeeperState          *                                                        Event.EventType java.lang.String)          */
Zookeeper,WITHOUT_CLASSIFICATION,//  Signal for graceful shutdown 
Zookeeper,WITHOUT_CLASSIFICATION,//  proceed to the next processor 
Zookeeper,WITHOUT_CLASSIFICATION,//  do cleanup 
Zookeeper,WITHOUT_CLASSIFICATION,//  halt one of the listeners and verify count 
Zookeeper,WITHOUT_CLASSIFICATION,//  Throttle when there are too many concurrent snapshots being sent to observers 
Zookeeper,WITHOUT_CLASSIFICATION,//  should only happen during upgrade 
Zookeeper,WITHOUT_CLASSIFICATION,// check for any parent that has been quota 
Zookeeper,WITHOUT_CLASSIFICATION,//  take one of the new servers if it is possible (there are still such   servers we didn't try)   and either the probability tells us to connect to one of the new   servers or if we already   tried all the old servers 
Zookeeper,WITHOUT_CLASSIFICATION,//  We won't race another upgrade attempt because only one thread   will get the timeout from the map 
Zookeeper,WITHOUT_CLASSIFICATION,//  findbugs2.0.3 complains about get after put.   long term strategy would be use computeIfAbsent after JDK 1.8 
Zookeeper,WITHOUT_CLASSIFICATION,//  jaas.conf entry available 
Zookeeper,WITHOUT_CLASSIFICATION,//  Create the node with another session 
Zookeeper,WITHOUT_CLASSIFICATION,//  The node doesn't exist anymore so skip it 
Zookeeper,WITHOUT_CLASSIFICATION,//  sid 
Zookeeper,WITHOUT_CLASSIFICATION,//  The first allowable character 
Zookeeper,WITHOUT_CLASSIFICATION,//  during first and second iteration leavingIndex will correspond to a   follower   during third and fouth iteration leavingIndex will be the index of 
Zookeeper,WITHOUT_CLASSIFICATION,//  If the socket times out we count that as Assert.failed - 
Zookeeper,WITHOUT_CLASSIFICATION,//  Make sure we can handle any type of correct wrapper 
Zookeeper,WITHOUT_CLASSIFICATION,// the direcotry containing the 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sets authorization flag 
Zookeeper,WITHOUT_CLASSIFICATION,//  Setup a database with a single /foo node 
Zookeeper,WITHOUT_CLASSIFICATION,//  Sun doesn't include the address that causes this   exception to be thrown so we wrap the exception   in order to capture this critical detail. 
Zookeeper,WITHOUT_CLASSIFICATION,//  Check that storage space return some value 
Zookeeper,WITHOUT_CLASSIFICATION,//  log that precedes first retained snapshot is also retained 

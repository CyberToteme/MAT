projectname,classification,commenttext
Gradle,SATD,//  TODO this should not be using the default charset because it's not an input and might introduce flakiness 
Gradle,SATD,//  TODO Make this work with pending elements
Gradle,SATD,/*  * The DSL for declaring plugins to inject into an included build. * * TODO: Plugins need to be located in this build's buildSrc. * * @since 4.6  */
Gradle,SATD,//  TODO some kind of context of why the method was attached (e.g. which plugin declared the rule)   TODO some kind of instance state for the method (might be the same as context above) 
Gradle,SATD,//  TODO: Need to track version/implementation of symbol strip tool. 
Gradle,SATD,// TODO move to base-services once the ProgressLogger dependency is removed
Gradle,SATD,//  Return a dummy implementation of this as creating a real hasher drags ~20 more services   along with it and a hasher isn't actually needed on the worker process side at the moment. 
Gradle,SATD,//  there's a risk for some methods that the hash is always   recomputed but it won't be worse than before 
Gradle,SATD,//  This isn't quite right. Should close the worker classpath cache once we're finished with the worker processes. This may be before the end of this build   or they may be used across multiple builds 
Gradle,SATD,//  TODO Need a better mechanism to wire tasks into lifecycle 
Gradle,SATD,//  TODO:Cedric This is not quite right. We assume that if we are asking for a specific binary then we resolve to the assembly instead   of the jar but it should be somehow parameterized 
Gradle,SATD,//  Ensure that at most one action that may have access to the mutable state of the build runs at a given time   TODO - move this to a better home and reuse 
Gradle,SATD,//  TODO(ew): inject BuildOperationIdentifierRegistry instead of static use
Gradle,SATD,//  TODO:HH Use managed views for this only applied when the respective language is applied
Gradle,SATD,//  TODO: There has to be a simpler way to do this.   We want to create a buildable filecollection based on a filtered view of selected source directory sets 
Gradle,SATD,//  Passing null for sha1 - TODO - consider using the etag which is an MD5 hash of the file (when less than 5Gb) 
Gradle,SATD,//  TODO:ADAM - need to do this earlier 
Gradle,SATD,//  TODO - exception when no default type 
Gradle,SATD,//  Don't force evaluation of rules here let the task container do what it needs to
Gradle,SATD,//  result is a scala.util.Either   right is a Seq of files that were generated   left is routes compilation errors   TODO: It might be nice to pass along these errors in some way 
Gradle,SATD,//  TODO deleteOnExit won't clean up non-empty directories (and it leaks memory for long-running processes). 
Gradle,SATD,/*  * Meta-info about a Java component. * * TODO - this is some legacy stuff to be merged into other component interfaces  */
Gradle,SATD,//  TODO: Need to track version/implementation of symbol extraction tool. 
Gradle,SATD,//  TODO: This should be modeled differently perhaps as a dependency on the implementation configuration 
Gradle,SATD,//  This is not super nice but dependencies are created through reflection for decoration   and assume a constructor with 3 arguments (Group Name Version) which is suitable for   most cases. We could create an empty attribute set directly in the AbstractDependencyImpl   but then it wouldn't be mutable. Therefore we proceed with "late injection" of the attributes 
Gradle,SATD,//  TODO(ew): Consider whether this belongs in Console or here
Gradle,SATD,//  TODO - should split this up so that the inputs are attached to an object that represents the binary which is then later used to configure the link/assemble tasks 
Gradle,SATD,//  we need to wrap this into a loop because there's always a risk   that the method which is weakly referenced has been collected   in between the creation time and now 
Gradle,SATD,//  TODO(daniel): Should support in a better way multi file invocation. 
Gradle,SATD,//  It's true right now that this is always coming from the TestKit but might not be in the future.
Gradle,SATD,//  TODO - don't select again here as the selection is already performed to select the toolchain 
Gradle,SATD,//  TODO include link to documentation giving more explanation of what's going on here. 
Gradle,SATD,//  TODO: Migrate this away from here 
Gradle,SATD,//  This looks ugly very ugly but that is apparently what Ant does itself 
Gradle,SATD,//  TODO - should be incremental 
Gradle,SATD,//  TODO: this is terrible 
Gradle,SATD,//  TODO: This should actually be a Routable message with a single handler   but we need some way to correlate a given request with a specific response channel 
Gradle,SATD,//  TODO - this is pretty nasty look at avoiding using a time bomb stub here 
Gradle,SATD,// TODO:rbo Change the parameter type to `Transformer<String @Nullable String>` once we migrate to Java 8
Gradle,SATD,// TODO - make this work on windows  originalIn.close();
Gradle,SATD,//  TODO better exception type 
Gradle,SATD,//  Note: This would be better housed in a scope that encapsulated the tree of Gradle objects. 
Gradle,SATD,/*  * A {@link org.gradle.api.file.ConfigurableFileCollection} that can be used as a task input property. Caches the matching set of files during task execution and discards the result after task execution. * * TODO - disallow further changes to this collection once task has started * TODO - keep the file entries to snapshot later to avoid a stat on each file during snapshot  */
Gradle,SATD,//  TODO This class DefaultBuildOperationQueue and ExecutionPlan have many of the same   behavior and concerns - we should look for a way to generalize this pattern. 
Gradle,SATD,// TODO:instant-execution: remove this 
Gradle,SATD,//  Can only set once: should really be part of the constructor   Can only set once: should really be part of the constructor
Gradle,SATD,//  This isn't quite right as we may lose precision when converting to a double 
Gradle,SATD,//  decimalFormat is not thread safe - synchronize access to the instance 
Gradle,SATD,//  TODO - wire this stuff in properly 
Gradle,SATD,//  TODO:ADAM - need to cleanup completion too if not used 
Gradle,SATD,//  TODO: Need to check for proper type/cast 
Gradle,SATD,//  TODO - should use a resolver so that this method is consistent with Project.uri(string) 
Gradle,SATD,//  TODO wolfs - schedule fingerprinting separately it can be done without having the project lock 
Gradle,SATD,//  Note: don't actually remove this in 6.0 the deprecation is here to encourage people to use ObjectFactory instead. Just remove the overload and the nag and leave the method here
Gradle,SATD,//  todo: consider multithreading/multiprocess issues   Teamcity has the concept of a "wave" of messages   where each thread/process uses a unique wave id 
Gradle,SATD,//  TODO - reduce duplication with Swift binary 
Gradle,SATD,// TODO: move bootclasspath to platform 
Gradle,SATD,//  TODO: This should be modeled as a source set 
Gradle,SATD,//  TODO - the project model should be reachable from ProjectState without another lookup 
Gradle,SATD,//  TODO: Locate this tool from a tool provider   hide main symbol 
Gradle,SATD,//  TODO: This prefix shouldn't be hardcoded 
Gradle,SATD,//  TODO:LPTR Remove projection for reference node   This shouldn't be needed but if there's no actual value referenced model report can only   show the type of the node if we do this for now. It should use the schema instead to find   the type of the property node instead. 
Gradle,SATD,//  TODO:ADAM - switch the logging back on. Need to make sending messages from daemon to client async wrt log event generation                  LOGGER.debug("Ignoring failure to extract throwable stack trace." ignored); 
Gradle,SATD,//  TODO: Need failure handling e.g. cannot clone repository 
Gradle,SATD,//  TODO This should actually compare a SortedSet 
Gradle,SATD,//  TODO - validate that it's a valid model path 
Gradle,SATD,//  The visual C++ tools use the path to find other executables   TODO:ADAM - restrict this to the specific path for the target tool 
Gradle,SATD,//  TODO:pm Move this to WARN level once we fixed maven-publish see gradle/gradle#1662 
Gradle,SATD,//  TODO:ADAM - This isn't quite right   MB: I think ^ refers to the first capable classloader loading the class. This could be different   from the loader which originally loaded it which could pose equality and lifecycle issues. 
Gradle,SATD,//  TODO:Cedric This is an approximation: when a component wants to compile against the assembly of   a library (not the jar) then we should give it the *stubbed classes* instead of the raw classes. However:   - there's no such thing as a "stubbed classes assembly"   - for performance reasons only the classes that belong to the API are stubbed so we would miss the classes that do not belong to the API   So this makes the UsageKind.API misleading (should this be COMPILE?).
Gradle,SATD,/*  * An _immutable_ view of the variant of a component. * * TODO - this should replace or merge into VariantResolveMetadata OutgoingVariant ConfigurationMetadata  */
Gradle,SATD,//  because it's a capability conflict resolution there is only one candidate per module identifier   so we can be lenient wrt the version number used in the descriptor which helps whenever the user   used the convenience "notation" method 
Gradle,SATD,//  TODO improve lookup by reusing AvailableJavaHomes testfixture   for now we play it safe and just return false; 
Gradle,SATD,//  TODO - should decorate 
Gradle,SATD,//  TODO removing this stuff from the store should be handled through some sort of decoration 
Gradle,SATD,//  TODO: fix the way we work out which exception is important: TaskExecutionException is not always the most helpful
Gradle,SATD,//  TODO: do we need any factories here? 
Gradle,SATD,//  TODO:HH This should be moved back into languageNative project 
Gradle,SATD,//  TODO make this work with pending elements
Gradle,SATD,//  TODO: Ultimately this should be some kind of 3rd party dependency that's visible to dependency management.
Gradle,SATD,//  TODO: These should come from somewhere else probably 
Gradle,SATD,//  TODO: This should become smarter and move into the compiler infrastructure instead     of the task similar to how the other native languages are done.     For now this does a rudimentary incremental build analysis by looking at     which files changed . 
Gradle,SATD,/*  * A minimal resolver which does not use any native services. Used during bootstrap only. You should generally use {@link FileResolver} instead. * * TODO - share more stuff with AbstractFileResolver.  */
Gradle,SATD,// a list instance is needed here as org.gradle.internal.snapshot.ValueSnapshotter.processValue() does not support  serializing Iterators directly 
Gradle,SATD,//  TODO:lptr this should be added only if the scan plugin is applied but SnapshotTaskInputsOperationIntegrationTest   TODO:lptr expects it to be added also when the build cache is enabled (but not the scan plugin) 
Gradle,SATD,//  TODO: We should set this for macOS but this currently breaks XCTest support for Swift   when Swift depends on C++ libraries built by Gradle. 
Gradle,SATD,//  TODO:lptr When we drop Java 8 support we can switch to using ClassLoader.getName() instead of storing our own
Gradle,SATD,//  TODO: Provide an abstraction for accessing resources within the same module (maven-metadata directory listing etc)   That way we can avoid passing `ivyPatterns` and `artifactPatterns` around everywhere 
Gradle,SATD,//  TODO:instant-execution - remove kotlin predicate after updating the wrapper
Gradle,SATD,/*      * Closes the tooling API releasing all resources. Blocks until completed.     *     * <p>May attempt to expire some or all daemons started by this tooling API client. The exact behaviour here is implementation-specific and not guaranteed.     * The expiration is best effort only. This method may return before the daemons have stopped.</p>     *     * <p>Note: this is not yet part of the public tooling API yet.</p>     *     * TODO - need to model this as a long running operation and allow stdout stderr and progress listener to be supplied.     * TODO - need to define exceptions.     * TODO - no further operations are allowed after this has been called     * TODO - cancel current operations or block until complete     * TODO - introduce a 'tooling API client' interface and move this method there      */
Gradle,SATD,//  TODO LD use something more stable than a cast here 
Gradle,SATD,//  TODO: Make this more intelligent by matching the attributes of the runtime usage on the variant identities 
Gradle,SATD,//  Workaround for backwards compatibility. Previously this case would unintentionally cause the method to be invoked on the owner   continue below 
Gradle,SATD,//  TODO - capitalise the target name in the task name   TODO - don't create a launch target for a library 
Gradle,SATD,/*      * Create binaries for test suites. TODO: This should really be a @ComponentBinaries rule but at this point we have no clue what the concrete binary type is so everything has to be duplicated in     * specific plugins. See usages for example.      */
Gradle,SATD,//  Did we already consider it as an output after the previous execution? 
Gradle,SATD,//  TODO: To get rid of this we need a `FunctionalSourceSet` instance here and that's surprisingly difficult to get. 
Gradle,SATD,//  TODO generic model related super exception? 
Gradle,SATD,//  TODO - this should work for any build rather than just an included build 
Gradle,SATD,//  Workaround for https://issues.gradle.org/browse/GRADLE-2625 
Gradle,SATD,//  TODO: We basically don't support copying custom Javadoc options
Gradle,SATD,//  TODO: This exists because we detect all available native tool chains on a system (clang gcc swiftc msvc).     Many of our old tests assume that available tool chains can compile many/most languages so they do not try to   restrict the required set of tool chains.     The swiftc tool chain can build _only_ Swift so tests that expect to use the swiftc tool chain properly annotate   their requirements with ToolChainRequirement.SWIFTC (or a version-specific requirement).     Our multi-test runner is smart enough to disable tests that do not meet the test's requirements but since many   of the old tests do not have requirements we assume the tests require a "C" like tool chain (GCC Clang MSVC).     In the future... we want to go back to old tests and annotate them with tool chains requirements.
Gradle,SATD,// we don't handle Variables at the moment because users didn't request it yet  and it would probably push us to add support in the tooling api to retrieve the variable mappings.
Gradle,SATD,//  TODO: VersionSelector should be more descriptive so it can be directly translated 
Gradle,SATD,//  TODO:LPTR Should be a content-less @InputDirectory 
Gradle,SATD,//  TODO Need a smarter way to map usage to artifact classifier 
Gradle,SATD,/*      * TODO once source compatibility is raised to 1.7 this should be rewritten using the java.nio.FileSystem API     * which can deal with jars and folders the same way instead of duplicating code.      */
Gradle,SATD,//  TODO - better exception 
Gradle,SATD,// TODO SF this method accepts Closure instance as parameter but does not work correctly for it 
Gradle,SATD,//  TODO find a better way to present this information in the error message   Attempt to mimic Gradle nested exception output 
Gradle,SATD,//  TODO: we should really find a better solution for this...   maybe we could use a FilterReader instead of a FilterInputStream? 
Gradle,SATD,//  not fully accurate but a sensible fallback   see http://stackoverflow.com/questions/1288102/how-do-i-detect-whether-the-file-system-is-case-sensitive 
Gradle,SATD,//  TODO not sure if we can clean up the generics here and do less unchecked casting 
Gradle,SATD,//  TODO - deal with more than one header dir e.g. generated public headers 
Gradle,SATD,//  TODO: projectDependency should be transformed based on defaultProject (and other context) elsewhere. 
Gradle,SATD,//  TODO: This will have to be changed when we support setting credentials directly on the authentication 
Gradle,SATD,//  TODO: this is an approximation as we know swift currently supports only 64-bit runtimes - eventually we'll want to query for this 
Gradle,SATD,// TODO the async work tracker should wait for children of an operation to finish first.  It should not be necessary to call it here. 
Gradle,SATD,//  TODO - reduce duplication with C++ binary 
Gradle,SATD,//  TODO: This should be more specific to just the tasks that create the class files? 
Gradle,SATD,//  TODO: we aren't considering the filter 
Gradle,SATD,//  Send a end-of-line. This is a workaround to convince the console that the cursor is at the start of the line to avoid indenting the next line of text that is displayed   It would be better for the console to listen for stuff read from stdin that would also be echoed to the output and update its state based on this
Gradle,SATD,//  TODO - exception when type cannot be created 
Gradle,SATD,//  TODO bind with the sourceCompatibility property   TODO link to runtime configuration ? 
Gradle,SATD,//  We track this as an input since the Scala compiler output may depend on it.   TODO: This should be replaced by a property in the Scala toolchain as soon as we model these. 
Gradle,SATD,//  TODO:LPTR Instead of the first view property we should figure out these parameters from the actual property 
Gradle,SATD,//  TODO - DSL documentation? 
Gradle,SATD,//  TODO We can probably now support more versions with `strictly` but we'll need more test coverage 
Gradle,SATD,//  TODO: move this to ObjectFactory 
Gradle,SATD,// there are some exceptions attached to the suite. Let's make sure they are reported to the user.  this may happen for example when suite initialisation fails and no tests are executed 
Gradle,SATD,//  TODO: Does a static library have runtime elements? 
Gradle,SATD,//  TODO:LPTR This ignores changes to Project.buildDir after model node has been created
Gradle,SATD,//  TODO:LPTR Remove projection for reference node   This shouldn't be needed but if there's no actual value referenced model report can only   show the type of the node if we do this for now. It should use the schema instead to find 
Gradle,SATD,//  TODO: what if this errors? 
Gradle,SATD,//  TODO:instant-execution - remove this 
Gradle,SATD,//  TODO: remove this special case 
Gradle,SATD,//  Need to move those implicit JVM args that contain a space to the Gradle command-line (if possible)   Note that this isn't strictly correct as some system properties can only be set on JVM start up.   Should change the implementation to deal with these properly
Gradle,SATD,//  Doesn't really make sense 
Gradle,SATD,// "type-only model reference of type '%s'%s is ambiguous as multiple model elements are available for this type:%n  %s (created by %s)%n  %s (created by %s)"
Gradle,SATD,//  TODO - exceptions thrown here should point to some extensive documentation on the concept of class rule sources 
Gradle,SATD,// (SF) this is a workaround until this story is completed. I'm hardcoding setting the idle timeout to be max X mins.  this way we avoid potential runaway daemons that steal resources on linux and break builds on windows.
Gradle,SATD,//  TODO - move this to a base plugin   Setup the dependency on the main binary   This should all be replaced by a single dependency that points at some "testable" variants of the main binary 
Gradle,SATD,//  TODO - should we support this?   Adds a void $propName(Object value) method that simply delegates to the converting setter method 
Gradle,SATD,//  TODO: Send a message to workers to change their log level rather than stopping 
Gradle,SATD,//  TODO - this should also be using the decorating instantiator but cannot for backwards compatibility 
Gradle,SATD,//  TODO - visit the contents of this collection instead.   This is just a super simple implementation for now 
Gradle,SATD,//  TODO We should get rid of this reflection (will need to reimplement the parser to act on the metadata directly) 
Gradle,SATD,//  TODO: do we want to keep using SourceDirectorySet in the new API?   would feel more natural if dirs could be added directly to LanguageSourceSet   could also think about extending SourceDirectorySet 
Gradle,SATD,//  TODO:LPTR This should be removed once BinaryContainer is a ModelMap   We need to also implement all the interfaces of the delegate type because otherwise   BinaryContainer won't recognize managed binaries as BinarySpecInternal
Gradle,SATD,//  todo - stream serialised value to file   todo - handle hash collisions (properly this time)   todo - don't store null links to child blocks in leaf index blocks   todo - align block boundaries   todo - thread safety control   todo - merge small values into a single data block   todo - discard when file corrupt   todo - include data directly in index entry when serializer can guarantee small fixed sized data   todo - free list leaks disk space   todo - merge adjacent free blocks   todo - use more efficient lookup for free block with nearest size 
Gradle,SATD,//  This is a workaround for https://issues.gradle.org/browse/GRADLE-3324.   Somehow the ArrayList 'result' in `org.sonatype.aether.impl.internal.Utils#sortMetadataGeneratorFactories` ends up   being a list of nulls on windows and IBM's 1.6 JDK.
Gradle,SATD,//  TODO - binaries aren't an input to this rule they're an input to the action 
Gradle,SATD,/*  * Specifies how to build and where to place a native executable file. * * <p>TODO:HH resolve naming conflict with existing NativeExecutableSpec</p>  */
Gradle,SATD,//  This should be replaced by some stronger modelling and made open rather than hardcoding a set of source languages here 
Gradle,SATD,//  We moved the API back into internal so this isn't really correct. 
Gradle,SATD,//  TODO - refactor this action out so it can be unit tested 
Gradle,SATD,//  TODO - error if there are unknowns? 
Gradle,SATD,//  TODO:ADAM - using a UUID means we create a ClassLoader hierarchy for each daemon process we talk to. Instead use the spec to decide whether to reuse a ClassLoader 
Gradle,SATD,//  TODO - should supply and check for the same parameters as passed to reserveNewClient() 
Gradle,SATD,//  TODO - should use the _install_ task for an executable 
Gradle,SATD,//  Implement this if you need to specify individual toolchains via "org.gradle.integtest.versions" 
Gradle,SATD,//  todo annotate as required 
Gradle,SATD,//  TODO: CC cannot enable this assertion because moduleSource is not serialized so doesn't appear in the deserialized form  assert metadata.equals(forceRead);
Gradle,SATD,//  todo An ExcludeRule is a value object but we don't enforce immutability for DefaultExcludeRule as strong as we   should (we expose the Map). We should provide a better API for ExcludeRule (I don't want to use unmodifiable Map).   As soon as DefaultExcludeRule is truly immutable we don't need to create a new instance of DefaultExcludeRule.
Gradle,SATD,//  production code should handle these exceptions more gracefully 
Gradle,SATD,//  TODO - this isn't quite right 
Gradle,SATD,//  The isEmpty check is not required might look innocent but Guava's performance bad for an empty immutable list   because it still creates an inner class for an iterator which delegates to an Array iterator which does... nothing.   so just adding this check has a significant impact because most components do not declare any capability 
Gradle,SATD,//  TODO we are relying on the registration having established these links we should be checking
Gradle,SATD,// TODO SF add quotes to both formats (there will be *lots* of tests failing so I'm not sure if it is worth it). 
Gradle,SATD,//  TODO(ew): Consider whether this belongs in BuildProgressArea or here 
Gradle,SATD,//  TODO It would be better if these were added via a separate managed view rather than hard coded. 
Gradle,SATD,//  Shouldn't really be here. Currently this goal is used by {@link #bindAllReferences} which also expects the subject to be bound 
Gradle,SATD,//  This doesn't work.   It used to because at the bottom of the hierarchy chain the object implemented methodMissing().   However our normal “decorated” classes do not do this so it is not realistic. 
Gradle,SATD,//  TODO: This returns the wrong public type for domain objects   created with the eager APIs or added directly to the container.   This can leak internal types.   We do not currently keep track of the type used when creating   a domain object (via create) or the type of the container when   a domain object is added directly (via add). 
Gradle,SATD,//  TODO:LPTR What happens when the property has multiple accessors in the same role but with different type? 
Gradle,SATD,//  TODO: Should not be ignoring DEPENDENCY_ATTRIBUTE modifications after resolve
Gradle,SATD,// TODO this should be a container of platforms 
Gradle,SATD,/*      * TODO - hack to avoid classloading issues. We should use org.gradle.util.TextUtil     *     * Currently we can't use it reliably because it causes CNF issues with cross version integration tests running against tooling api < 1.3.      */
Gradle,SATD,//  TODO: else verify that the build definition is the same 
Gradle,SATD,//  TODO - make this lazy 
Gradle,SATD,//  TODO should this take Object? 
Gradle,SATD,//  Used by the Kotlin-dsl base plugin   TODO - remove this 
Gradle,SATD,//  TODO - sources is not actual an input to binaries it's an input to each binary
Gradle,SATD,//  TODO - mix in Groovy support using bytecode decoration instead   TODO - validate closure parameters to check they are within bounds
Gradle,SATD,// TODO this class attempts to mimic the behavior of the output of mvn help:effective-pom  instead of this class we should walk the maven project object model (instead of parsing the xml!)
Gradle,SATD,/*      * we have a name foo.bar and an import foo.foo. This means foo.bar is possibly     * foo.foo.bar rather than foo.bar. This means to cut at the dot in foo.bar and     * foo for import      */
Gradle,SATD,//  TODO - remove this once the above is removed 
Gradle,SATD,//  This is a workaround for https://github.com/gradle/gradle-private/issues/1690
Gradle,SATD,/*  * TODO only here because Kotlin DSL uses this. Please remove once that is fixed.  */
Gradle,SATD,//  Hold the lock while creating the connection. Not generally good form.   In this instance blocks other threads from creating the connection at the same time 
Gradle,SATD,//  Currently retains strong references to types that are not loaded using a VisitableURLClassLoader   This is fine for JVM types but a problem when a custom ClassLoader is used (which should probably be deprecated instead of supported) 
Gradle,SATD,// We might fail hard here on the assumption that something weird happened to the daemon.  However since we haven't yet started running the build we can recover by just trying again... 
Gradle,SATD,//  todo: improve configuration of reports 
Gradle,SATD,//  TODO: Fix tests that rely on this being set before we process arguments like this...
Gradle,SATD,//  TODO: turn into Set? 
Gradle,SATD,/*             There's a potential problem here in that DisconnectableInputStream reads from input in the background.            This won't automatically stop when the process is over. Therefore if input is not closed then this thread            will run forever. It would be better to ensure that this thread stops when the process does.          */
Gradle,SATD,//  TODO - need to do a better job of routing messages when there are multiple endpoints. This is just going to forward all queued messages to the first   waiting endpoint even if there are multiple waiting to do work 
Gradle,SATD,//  Create test suite component   TODO - Reuse logic from Swift*Plugin   TODO - component name and extension name aren't the same   TODO - should use `src/xctest/swift` as the convention?   Add the test suite and extension 
Gradle,SATD,//  Do not use this. It's here because some of the services this type needs are not easily accessed in certain cases and will be removed ay some point. Use one of the other methods instead 
Gradle,SATD,//  TODO: should validate that clazz is of a non parameterized type
Gradle,SATD,//  Workaround for when the task is given an input file that doesn't exist
Gradle,SATD,//  TODO: Figure out how to get rid of origin scope id in snapshot outputs step 
Gradle,SATD,//  get rid of the ivy [] token as [ ] are not valid URI characters 
Gradle,SATD,//  todo remove this property once configuration can handle normal file system dependencies 
Gradle,SATD,//  This piece of ugliness copies the JAXP (ie XML API) provider if any from the system ClassLoader. Here's why:     1. When looking for a provider JAXP looks for a service resource in the context ClassLoader which is our isolated ClassLoader. If our classpath above does not contain a      provider this returns null. If it does contain a provider JAXP extracts the classname from the service resource.   2. If not found JAXP looks for a service resource in the system ClassLoader. This happens to include all the application classes specified on the classpath. If the application      classpath does not contain a provider this returns null. If it does contain a provider JAXP extracts the implementation classname from the service resource.   3. If not found JAXP uses a default classname   4. JAXP attempts to load the provider using the context ClassLoader. which is our isolated ClassLoader. This is fine if the classname came from step 1 or 3. It blows up if the      classname came from step 2.     So as a workaround locate and make visible XML parser classes from the system classloader in our isolated ClassLoader.     Note that in practise this is only triggered when running in our tests 
Gradle,SATD,//  TODO Will be implemented without hard-coded access to `$GRADLE_USER_HOME/gradle.properties` for 5.1 in #6084 
Gradle,SATD,//  TODO: This hard-codes the assumption of a 'compile' configuration on the external module   Instead we should be creating an API configuration for each resolved module 
Gradle,SATD,//  This is a legacy quirk.   Scans use this to determine that progress logging is indicating start/finish of tasks.   This can be removed in Gradle 5.0 (along with the concept of a “logging category” of an operation) 
Gradle,SATD,//  See the comment in #taskCompleted above for why this is here and why this is a problem 
Gradle,SATD,//  TODO: CC the special casing of virtual platform should go away if we can implement   disambiguation of variants for a _single_ component 
Gradle,SATD,//  TODO This should actually extend from the api dependencies but since Swift currently   requires all dependencies to be treated like api dependencies (with transitivity) we just   use the implementation dependencies here.  See https://bugs.swift.org/browse/SR-1393. 
Gradle,SATD,//  TODO: Replace this with `JvmAssembly` once that type is public 
Gradle,SATD,// this is not very nice might be good enough until we get rid of ResolvedConfiguration and friends  avoid traversing the graph causing the full ResolvedDependency graph to be loaded for the most typical scenario 
Gradle,SATD,//  Not implemented - not yet required. Please implement if required 
Gradle,SATD,//  TODO: Extract the non-filesystem parts of the FileSystemChangeWaiter into a separate interface   This isn't really tied to file system watching we just need another type of waiter. 
Gradle,SATD,/*  * TODO: This class sources Gradle metadata files but there's no corresponding ModuleComponentResolveMetadata for this metadata yet. * Because of this we will generate an empty instance (either a Ivy or Maven) based on the repository type.  */
Gradle,SATD,//  TODO - this isn't correct assumes that a side effect is to add the element 
Gradle,SATD,//  TODO: `classes` should be a little more tied to the classesDirs for a SourceSet so every plugin   doesn't need to do this. 
Gradle,SATD,//  This is really not cool but we cannot rely on `readAttributes` because it will   THROW AN EXCEPTION if the file is missing which is really incredibly slow just   to determine if a file exists or not. 
Gradle,SATD,// TODO: use Twirl library instead? 
Gradle,SATD,//  DO NOT USE THIS CONSTRUCTOR DIRECTLY   It's only there for backwards compatibility with the Nebula plugin 
Gradle,SATD,//  Groovy does something very strange here.   For some reason (probably because the class is Java) it won't employ any dynamism.   Even implementing invokeMethod at the Java level has no effect. 
Gradle,SATD,//  TODO: We should see if we can go back to using HttpClient again.   This implementation is borrowed from the Apache HttpClient project   https://github.com/apache/httpclient/blob/4.2.2/httpclient/src/main/java/org/apache/http/conn/ssl/SSLSocketFactory.java#L246-L354
Gradle,SATD,//  TODO Change to Set? 
Gradle,SATD,//  TODO(daniel): Should support in a better way multi file invocation.   Override this method to have multi file invocation 
Gradle,SATD,//  @Todo: refactor this task configuration to extend a copy task and use replace tokens 
Gradle,SATD,//  TODO:REUSE Refactor after removing reuse   This is horrendously bad.   We need to set the platform _before_ the @Defaults rules of NativeBinaryRules assign the toolchain.   We can't just assign the toolchain here because the initializer would be closing over the toolchain which is not reusable and this breaks model reuse.   So here we are just closing over the safely reusable things and then using proper dependencies for the tool chain registry.   Unfortunately we can't do it in the create action because that would fire _after_ @Defaults rules.   We have to use a @Defaults rule to assign the tool chain because it needs to be there in user @Mutate rules   Or at least the file locations do so that they can be tweaked.   LD - 5/6/14 
Gradle,SATD,//  Check enum equality without checking loading ClassLoader.   There is a slight risk that two versions of the same enum class are compared   (that's why classloaders are used in equality checks) but checking both name   and ordinal should make this very unlikely. 
Gradle,SATD,// TODO version - could be different from main artifact's version 
Gradle,SATD,//  Should really be a parameter to the 'withContent' methods or baked into the accessor 
Gradle,SATD,//  TODO - error messages   TODO - display names for this container and the Provider implementations 
Gradle,SATD,//  Not subtypes as we don't know whether they are immutable or not 
Gradle,SATD,//  TODO: This check should really be done in the compiler process 
Gradle,SATD,//  Forced dependencies are only supported for enforced platforms so it is currently hardcoded.   Should we want to add this as a first class concept to Gradle metadata then it should be available on the component variant   metadata as well. 
Gradle,SATD,//  TODO Remove this attempt to guess packaging from artifacts. Packaging should come from component or be explicitly set.
Gradle,SATD,//  Was it created during execution? 
Gradle,SATD,//  TODO: Deprecate and eventually prevent these mutations when already resolved
Gradle,SATD,//  TODO: this doesn't quite guarantee immutability because the source may be holding closures that are doing god knows what 
Gradle,SATD,//  TODO: Get rid of destinationDirectory entirely and replace it with a   collection of link outputs 
Gradle,SATD,//  TODO: Migrate this to the worker API once the FileSystem and FileOperations services can be injected
Gradle,SATD,//  TODO:LPTR Have the paths of the projects serve as @Input maybe? 
Gradle,SATD,//  This could be handled just not implemented yet 
Gradle,SATD,//  TODO: Wrong using the full classpath of the application
Gradle,SATD,//  this is not very beautiful but at some point we will   get rid of ArchiveOutputStreamFactory in favor of the writable Resource 
Gradle,SATD,// this if is a bit cheesy but 1-letter classname surely means a generic type and the warning will be useless 
Gradle,SATD,/*      * Creates an instance of the given task type without invoking its constructors. This is used to recreate a task instance from the instant execution cache.     *     * TODO:instant-execution - review this      */
Gradle,SATD,//  TODO - this selection should happen per target platform
Gradle,SATD,//  TODO Resolve the JavaPlatform and ScalaPlatform from their PlatformResolvers rather than instantiating directly
Gradle,SATD,//  TODO should include some context on what the rule was trying to do (create vs. mutate) 
Gradle,SATD,//  TODO: Get this from somewhere else? 
Gradle,SATD,//  This is here to trigger creation of the ShutdownCoordinator. Could do this in a nicer way 
Gradle,SATD,//  TODO:pm Move this to RunAsBuildOperationBuildActionRunner when BuildOperationWorkerRegistry scope is changed 
Gradle,SATD,// TODO - outputEventListener and buildStandardInput are per-build settings  so down the road we should refactor the code accordingly and potentially attach them to BuildActionParameters 
Gradle,SATD,/*  * Exposes methods for those properties whose value is a closure. * * TODO: use composition instead of inheritance  */
Gradle,SATD,//  Platform specific arguments   TODO: Need to lazily configure compile task
Gradle,SATD,//  If this occurs while running gradle or running integration tests it is indicative of a problem.   If this occurs while running unit tests then either use the NativeServicesTestFixture or the '@UsesNativeServices' annotation. 
Gradle,SATD,//  Ugly but there are a few places where we need to instantiate a JavaDebugOptions and a regular ObjectFactory service   is not available. 
Gradle,SATD,// TODO adding the parent project first because the converter needs it this way ATM. This is oversimplified.  the converter should not depend on the order of reactor projects.  we should add coverage for nested multi-project builds with multiple parents. 
Gradle,SATD,//  there's a possibility that this listener is called concurrently with   the build finished listener. If the message happens to be a graceful expire   one then there's a large risk that we create a deadlock because we're trying to   remove the same listener from 2 different notifications. To avoid this we just   set the reference to null which says that we're taking care of removing the listener
Gradle,SATD,//  TODO: Need to track version/implementation of ar tool.
Gradle,SATD,//  This is copied from Ant (see org.apache.tools.ant.util.FileUtils.tryHardToDelete).   It mentions that there is a bug in the Windows JDK impls that this is a valid   workaround for. I've been unable to find a definitive reference to this bug.   The thinking is that if this is good enough for Ant it's good enough for us.
Gradle,SATD,//  TODO Change this to only add SWIFT_API artifacts and instead parse modulemaps to discover compile task inputs
Gradle,SATD,//  Rough implementation to get something to work 
Gradle,SATD,//  TODO: remove these special cases
Gradle,SATD,//  TODO: This is not a great paradigm for creating a temporary directory.   See http://guava-libraries.googlecode.com/svn/tags/release08/javadoc/com/google/common/io/Files.html#createTempDir%28%29 for an alternative. 
Gradle,SATD,//  TODO: This should be part of the cached result? 
Gradle,SATD,//  Implementation is currently dumb can be made smarter 
Gradle,SATD,//  TODO:RBO Clarify what it means and what's possible to do with it.   TODO:RBO E.g. Can the return value always be used to resolve back to the identified component? If so how?   TODO:RBO Wouldn't it be better to define a proper type for project/model paths?
Gradle,SATD,//  TODO: This can throw a NPE: will need an identifier for a variant without an owning component 
Gradle,SATD,//  This implementation is broken. It does not consider include and exclude patterns 
Gradle,SATD,//  TODO LJA Using the root as the NodeState here is a bit of a cheat investigate if we can track the proper NodeState 
Gradle,SATD,/*      * Produces an ArtifactIdentifier for this artifact (it's not actually an identifier - just a bucket of attributes).     * TODO:ADAM - remove this      */
Gradle,SATD,//  TODO - property order needs to be deterministic across JVM invocations i.e. sort the properties by name
Gradle,SATD,//  TODO - this will leave invalid types in the cache when it fails 
Gradle,SATD,//  Should repositories be able to participate in incremental?   At the least they may be able to express themselves as output files   They *might* have input files and other dependencies as well though   Inputs: The credentials they need may be expressed in a file   Dependencies: Can't think of a case here 
Gradle,SATD,//  TODO - have to do much better here 
Gradle,SATD,//  TODO: these should be moved off to a separate type
Gradle,SATD,//  TODO:LPTR This should be @Defaults @Each PlayApplicationBinarySpecInternal 
Gradle,SATD,//  TODO we should refactor this to general compatibility mapping solution as we have it for model loading. See HasCompatibilityMapping class. 
Gradle,SATD,//  This is a heuristic more than truth: it is possible that the 2 long hashs   are identical AND that the sizes of collections are identical but it's   extremely unlikely (never happened on test cases even on large dependency graph) 
Gradle,SATD,//  failing seems to be that set method override doesn't work for iterables - GRADLE-2097  assertThat(call("{ bean list -> bean.things(list) }" bean new LinkedList<Object>()) nullValue());  assertThat(bean.getThings().size() equalTo(0)); 
Gradle,SATD,//  TODO: This isn't quite right. We're leaking the _implementation_ type here.  But for tasks this is usually right. 
Gradle,SATD,//  TODO return a richer data structure that provides meta data about how the source was found for use is diagnostics 
Gradle,SATD,//  The configuration has been used in a resolution and it is an error for build logic to change any dependencies   exclude rules or parent configurations (values that will affect the resolved graph).
Gradle,SATD,//  This method is sometimes called directly (i.e. not via an operation executor).   In these cases the context is null. 
Gradle,SATD,//  TODO:LPTR What is with the "metaClass" property here? 
Gradle,SATD,//  TODO this doesn't belong here that java plugin should add an extension to this guy with this 
Gradle,SATD,//  need to make this better 
Gradle,SATD,//  TODO: maybe we need to allow additional dirs like SourceSetOutput does   (esp. for backwards compatibility). Wonder if it's still necessary to distinguish   between classes and resources dirs instead of just maintaining a collection of dirs.   As far as generated resources are concerned it might be better to model   them as an additional (Buildable) ResourceSet.
Gradle,SATD,//  workaround for bug in TestNG 6.2 (apparently fixed in some 6.3.x): listener is notified twice per event 
Gradle,SATD,//  TODO: This isn't correct. This means that we've detected a cycle while determining the execution plan but the graph walker did not find one.   https://github.com/gradle/gradle/issues/2293 
Gradle,SATD,//  TODO:Cedric The following validation should in theory happen in its own rule but it is not possible now because   there's no way to iterate on the map as subject of a `@Validate` rule without Gradle thinking you're trying to mutate it
Gradle,SATD,// TODO: Simplify this class by busting it up into a locator for legacy SDKs and locator(s) for Windows 8 kits 
Gradle,SATD,//  TODO - this is all terribly lame. We need some proper reporting here (which means implementing Reporting). 
Gradle,SATD,//  TODO - implement these cases 
Gradle,SATD,//  TODO(daniel): Swift compiler should extends from an abstraction of NativeCompiler (most of it applies to SwiftCompiler) 
Gradle,SATD,//  TODO: should use target platform to make this decision 
Gradle,SATD,//  TODO There should be a more explicit way to execute an action against existing services 
Gradle,SATD,//  Have an unprocessed/new selector for this module. Need to re-select the target version. 
Gradle,SATD,//  TODO: Assets should probably be a source set too 
Gradle,SATD,// TODO:instant-execution - use the class generator instead 
Gradle,SATD,//  TODO - implement this by moving this resolver to live alongside the external resolvers 
Gradle,SATD,//  TODO This should use the same `MutationValidator` infrastructure that we use for other mutation types 
Gradle,SATD,//  TODO: we should just cache these classloaders and eject/stop them when they are no longer in use 
Gradle,SATD,//  TODO - should be >= self closed 
Gradle,SATD,//  TODO:LPTR We should collect all source sets in the project source set however this messes up ComponentReportRenderer 
Gradle,SATD,//  TODO Only log expired workers count log their "identity" once they are nameable/describable 
Gradle,SATD,//  TODO This is not nice: work out a better way to collect the plugin requests from invoking the plugins block. 
Gradle,SATD,//  TODO This is a brain-dead way to ensure that the reference project's model is ready to access 
Gradle,SATD,//  TODO - this is not quite right eg given *!A->A;*!B->B the result should be B->A and A->B but will in fact be B-> and A-> 
Gradle,SATD,//  The very first event starts the Initializing phase   TODO - should use BuildRequestMetaData to determine the build start time 
Gradle,SATD,//  one should really avoid using this constructor as it is totally inefficient   and reserved to spurious cases when the components have dots in names   (and this can happen if a task name contains dots)
Gradle,SATD,//  TODO - bust up this hierarchy and compose using interfaces instead 
Gradle,SATD,//  Simulate a stuck worker. There's probably a way to inject this failure... 
Gradle,SATD,//  TODO - this should be an outgoing variant of the component under test 
Gradle,SATD,//  Add an install task   TODO - should probably not add this for all executables? 
Gradle,SATD,//  TODO:lptr why don't we check runningNodes here like we do in hasNodesRemaining()? 
Gradle,SATD,//  Dumb terminal doesn't support ANSI control codes.   TODO - remove this when we use Terminal rather than JAnsi to render to console 
Gradle,SATD,//  This is a workaround for https://github.com/gradle/gradle/issues/4241   Several early typed operations have `buildPath` property   the value of which can only be determined after the settings file for the build has loaded.     The workaround is to buffer all operation notifications in memory until the root build's settings have loaded.   This works because all possible settings files have been evaluated by the time the root one has been.   This is not guaranteed to hold into the future.   A proper solution would be to change the operation details/results to be   truly immutable and convey values known at the time.
Gradle,SATD,/*  * An amount is an immutable value of some quantity such as duration or length. Each amount has a decimal value and associated units. * * TODO - need to sort out scaling when dividing or converting between units.  */
Gradle,SATD,//  TODO - move this to PropertyValue instead
Gradle,WITHOUT_CLASSIFICATION,//  Trailing slash in name indicates that entry is a directory 
Gradle,WITHOUT_CLASSIFICATION,//  allow organisation synonyms like 'org' or 'organization' 
Gradle,WITHOUT_CLASSIFICATION,//  No include expression ignore 
Gradle,WITHOUT_CLASSIFICATION,//  rc-1 1.0 
Gradle,WITHOUT_CLASSIFICATION,//  noop 
Gradle,WITHOUT_CLASSIFICATION,//  If node was previously traversed need to remove outgoing edges. 
Gradle,WITHOUT_CLASSIFICATION,//  Simple scheme is to just present the public type of the container 
Gradle,WITHOUT_CLASSIFICATION,//  A nullable reference 
Gradle,WITHOUT_CLASSIFICATION,//  Always publish `ComponentWithVariants` 
Gradle,WITHOUT_CLASSIFICATION,/*      * Maven supports wildcards in exclusion rules according to:     * http://www.smartjava.org/content/maven-and-wildcard-exclusions     * https://issues.apache.org/jira/browse/MNG-3832     * This should be used for non-transitive dependencies      */
Gradle,WITHOUT_CLASSIFICATION,//  Returns an approximation of a composite variant 
Gradle,WITHOUT_CLASSIFICATION,//  We have some batched up conflicts. Resolve the first and continue traversing the graph 
Gradle,WITHOUT_CLASSIFICATION,// Each build request carries it's own log level and it is used during the execution of the build (see LogToClient) 
Gradle,WITHOUT_CLASSIFICATION,//  Implementation note: It is only necessary to override visit methods   for AST nodes that reference statements. For ClosureExpression we rely on   the assumption that it always references a BlockStatement and hence our   visitBlockStatement() method gets called.
Gradle,WITHOUT_CLASSIFICATION,//  Workspace scope is expected to be persisted in the project cache dir since 4.0. 
Gradle,WITHOUT_CLASSIFICATION,//  register eagerly so stop() is triggered when services are being stopped 
Gradle,WITHOUT_CLASSIFICATION,//  may be we have C[k1:v1] -> should become (C)([k1:v1]) 
Gradle,WITHOUT_CLASSIFICATION,//  Construct a new CompilerOptions class 
Gradle,WITHOUT_CLASSIFICATION,//    Add `publicType`   
Gradle,WITHOUT_CLASSIFICATION,//  Swap the Foreground and Background bits. 
Gradle,WITHOUT_CLASSIFICATION,//  Configure the component 
Gradle,WITHOUT_CLASSIFICATION,//  This is called from the download thread. Only forward the events when not cancelled 
Gradle,WITHOUT_CLASSIFICATION,//  This insanity is needed for the case where someone calls pluginContainer.add(new SomePlugin())   That is the plugin container has the instance that we want but we don't think (we can't know) it has been applied
Gradle,WITHOUT_CLASSIFICATION,//  Register the project's source set output directories 
Gradle,WITHOUT_CLASSIFICATION,// no scheme means someone passed a relative url. In our context only file relative urls make sense. 
Gradle,WITHOUT_CLASSIFICATION,//  Sha256 is not part of core-services (i.e. no Hashing.sha256() available) hence we use plain Guava classes here. 
Gradle,WITHOUT_CLASSIFICATION,//  anything other than PropertyExpressions or   VariableExpressions will stop resolving 
Gradle,WITHOUT_CLASSIFICATION,//  If a delimiter; if dot swap to groupToken otherwise the rest belongs in qualifier. 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE ConfigureUtil.configureUsing(v); 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore the rule if it expects Ivy metadata and this isn't an Ivy module 
Gradle,WITHOUT_CLASSIFICATION,//  Missing files can be ignored 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier> <operator> <expression> | task <string> <operator> <expression>   Map to: passThrough(task('<identifier>') <operator> <expression>) | passThrough(task(<string>) <operator> <expression>) 
Gradle,WITHOUT_CLASSIFICATION,//  No overlap no cry 
Gradle,WITHOUT_CLASSIFICATION,//  CopyProcessingSpec overrides to broaden return type 
Gradle,WITHOUT_CLASSIFICATION,//  Assume individual files have no dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  For testing 
Gradle,WITHOUT_CLASSIFICATION,//  a local component that provides a JVM assembly 
Gradle,WITHOUT_CLASSIFICATION,//  we hold other project locks that we should release first 
Gradle,WITHOUT_CLASSIFICATION,//  Retain buffer if there is capacity in the queue otherwise discard 
Gradle,WITHOUT_CLASSIFICATION,//  Sort source files to work around https://issues.apache.org/jira/browse/GROOVY-7966 
Gradle,WITHOUT_CLASSIFICATION,//  No macro includes were seen in the include graph of this file so the result can be reused if this file is seen again 
Gradle,WITHOUT_CLASSIFICATION,//  Use an injected ObjectFactory to create a Server object 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:ADAM - switch the logging back on.                  LOGGER.debug("Ignoring failure to extract throwable cause." ignored);
Gradle,WITHOUT_CLASSIFICATION,//  On Windows / and \ are separators on Unix only / is a separator. 
Gradle,WITHOUT_CLASSIFICATION,//  Discard the body when the expression is not resolvable 
Gradle,WITHOUT_CLASSIFICATION,//  GROOVY-4043: Do this check up the hierarchy if needed 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - add stripped symbols to the installation
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier>(<options-map>) <closure> 
Gradle,WITHOUT_CLASSIFICATION,//  Take a snapshot while holding lock 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - all this matching stuff is constant for a given DependencyMetadata instance
Gradle,WITHOUT_CLASSIFICATION,//  -----------------------------------------------   ---- Delegate CopySpec methods to rootSpec ----   ----------------------------------------------- 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier> <closure> 
Gradle,WITHOUT_CLASSIFICATION,//  Only for relative positioning 
Gradle,WITHOUT_CLASSIFICATION,//  Capture changes in execution outcome 
Gradle,WITHOUT_CLASSIFICATION,//  Mark this listener type as being notified 
Gradle,WITHOUT_CLASSIFICATION,//  Register as a 'logger' to support this being replaced by build logic. 
Gradle,WITHOUT_CLASSIFICATION,//  Fallback to failing the task in case we don't know anything special   about the error 
Gradle,WITHOUT_CLASSIFICATION,//  Notify caches that lock is to be released. The caches may do work on the cache files during this 
Gradle,WITHOUT_CLASSIFICATION,//  Don't list versions for gradleMetadata if maven-metadata.xml will be checked. 
Gradle,WITHOUT_CLASSIFICATION,//  since we have B and want to get A we start with the most   outer class put them together and then see if that does   already exist. In case of B from within A$B we are done   after the first step already. In case of for example   A.B.C.D.E.F and accessing E from F we test A$E=failed   A$B$E=failed A$B$C$E=fail A$B$C$D$E=success 
Gradle,WITHOUT_CLASSIFICATION,//  not supported by javax.xml.transform.Transformer; use two spaces instead 
Gradle,WITHOUT_CLASSIFICATION,//  Short circuit logic when only 2 candidates 
Gradle,WITHOUT_CLASSIFICATION,//  In a similar way to Ivy Maven may use other hosts for additional artifacts but not POMs 
Gradle,WITHOUT_CLASSIFICATION,//  TODO get normal resolving to set declaring class
Gradle,WITHOUT_CLASSIFICATION,//  copy in case any actions mutate the store 
Gradle,WITHOUT_CLASSIFICATION,//  we would normally log at a lower level than lifecycle but the Ant message priority is actually higher   than (or equal to) the set lifecycle log level 
Gradle,WITHOUT_CLASSIFICATION,//  producer doesn't declare anything so we assume that it only provides the implicit capability 
Gradle,WITHOUT_CLASSIFICATION,//  Source dir already at the start of the path just use the include path 
Gradle,WITHOUT_CLASSIFICATION,//  Configuration artifacts are determined locally 
Gradle,WITHOUT_CLASSIFICATION,//  Can discard the state required to create instance 
Gradle,WITHOUT_CLASSIFICATION,//  For stats we don't really care about thread safety 
Gradle,WITHOUT_CLASSIFICATION,/* Mutable */
Gradle,WITHOUT_CLASSIFICATION,//  No parent we're done 
Gradle,WITHOUT_CLASSIFICATION,//  Skip visitor is not interested 
Gradle,WITHOUT_CLASSIFICATION,//  complete cancelling key 
Gradle,WITHOUT_CLASSIFICATION,// noinspection OptionalGetWithoutIsPresent 
Gradle,WITHOUT_CLASSIFICATION,//  library albeit only for selected classes that run a high risk of being statically referenced from a transform.
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public <type> <getter>() { return <field> } 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE private DynamicObject dynamicObjectHelper 
Gradle,WITHOUT_CLASSIFICATION,//  Always treat as non-empty 
Gradle,WITHOUT_CLASSIFICATION,//  the type of the property node instead. 
Gradle,WITHOUT_CLASSIFICATION,//  If the failure handler rethrows exception then execution of other nodes is aborted. (--continue will collect failures) 
Gradle,WITHOUT_CLASSIFICATION,// exclude rules for a dependency specified in gradle DSL 
Gradle,WITHOUT_CLASSIFICATION,//  Create a processor that processes events in its own thread 
Gradle,WITHOUT_CLASSIFICATION,//  Only consider one candidate because matchesUniqueVersion means that there's no ambiguity on the version number 
Gradle,WITHOUT_CLASSIFICATION,//  Not required but Guava's performance bad for an empty immutable list 
Gradle,WITHOUT_CLASSIFICATION,/*  unsupported by this transformer  */
Gradle,WITHOUT_CLASSIFICATION,//  Always schedule the generation task after the clean task 
Gradle,WITHOUT_CLASSIFICATION,//  If there's more than one module merge them into a module set 
Gradle,WITHOUT_CLASSIFICATION,//  some impls support this but not factory.setAttribute("indent-number") 
Gradle,WITHOUT_CLASSIFICATION,//  If any of the child strategies don't expire the daemon the daemon will not expire.   Otherwise the daemon will expire and aggregate the reasons together. 
Gradle,WITHOUT_CLASSIFICATION,// it means the registry didn't exist yet 
Gradle,WITHOUT_CLASSIFICATION,//  not supported 
Gradle,WITHOUT_CLASSIFICATION,//  If there is a transform for the language into one of the component inputs add a default source set 
Gradle,WITHOUT_CLASSIFICATION,//  Allows individual identification for debugging 
Gradle,WITHOUT_CLASSIFICATION,//  only print first Gradle script stack trace element 
Gradle,WITHOUT_CLASSIFICATION,//  Finalizing here as we need this to run after any 'assembling' task (jar link etc) is created.   TODO: Convert this to `@BinaryTasks` when we model a `NativeAssembly` instead of wiring compile tasks directly to LinkTask 
Gradle,WITHOUT_CLASSIFICATION,//  Never use empty settings when the settings were explicitly set 
Gradle,WITHOUT_CLASSIFICATION,//  Need to double check that the target still has hard edges to it 
Gradle,WITHOUT_CLASSIFICATION,//  We will only add dependencies to the leaves if there is such a published module 
Gradle,WITHOUT_CLASSIFICATION,//  Don't bother searching remotely 
Gradle,WITHOUT_CLASSIFICATION,//  Disallow classes from Groovy Jar that reference external classes. Such classes must be loaded from astTransformClassLoader   or a NoClassDefFoundError will occur. Essentially this is drawing a line between the Groovy compiler and the Groovy 
Gradle,WITHOUT_CLASSIFICATION,//  When a Provider is used as a task dependency (rather than as a task input) need to unpack the value 
Gradle,WITHOUT_CLASSIFICATION,//  Metadata builder uses mutable project state so synchronize access to the project state 
Gradle,WITHOUT_CLASSIFICATION,//  This special case is for Maven snapshots with Gradle Module Metadata when we need to remap the file name which   corresponds to the unique timestamp to the SNAPSHOT version for backwards compatibility 
Gradle,WITHOUT_CLASSIFICATION,//  Part of a strongly connected component (ie cycle) - move values to root of the component   The root is the first node of the component we encountered 
Gradle,WITHOUT_CLASSIFICATION,//    Add `getName()`   
Gradle,WITHOUT_CLASSIFICATION,//  Remove all the classes other than the main class 
Gradle,WITHOUT_CLASSIFICATION,//  Necessary for Groovy compilation to pick up output of regular and joint Java compilation   and for joint Java compilation to pick up the output of regular Java compilation.   Assumes that output of regular Java compilation (which is not under this task's control) also goes   into spec.getDestinationDir(). We could configure this on source set level but then spec.getDestinationDir()   would end up on the compile class path of every compile task for that source set which may not be desirable.
Gradle,WITHOUT_CLASSIFICATION,//  Call directly on the delegate to avoid some dynamic dispatch 
Gradle,WITHOUT_CLASSIFICATION,//  We need to sort here since the file order obtained from the filesystem   can change between machines and we always want to have the same shaded jars. 
Gradle,WITHOUT_CLASSIFICATION,//  Check that the object has already been serialized. 
Gradle,WITHOUT_CLASSIFICATION,//  This configuration cannot be mutated but some parent configurations provide artifacts 
Gradle,WITHOUT_CLASSIFICATION,// This one should go away once we complete the auto-apply plugins 
Gradle,WITHOUT_CLASSIFICATION,/*         Note: Aether implicitly uses a thread pool and tasks to perform transfers        so we manually propagate the current build operation ref so logging is correctly associated.      */
Gradle,WITHOUT_CLASSIFICATION,//  throw new MissingPropertyException(name <view-type>.class) 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE getInstantiator() 
Gradle,WITHOUT_CLASSIFICATION,//  Find the candidates with the highest base version 
Gradle,WITHOUT_CLASSIFICATION,//  Hold the lock until we actually start accepting connections for the case when stop is called from another   thread while we are in the middle here. 
Gradle,WITHOUT_CLASSIFICATION,//  the platform itself is greater than the forced version 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE services.get(ObjectFactory.class) 
Gradle,WITHOUT_CLASSIFICATION,//  Replace result if we fail on warning 
Gradle,WITHOUT_CLASSIFICATION,//  Find and remove common prefix 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize the worker implementation classpath this is consumed by GradleWorkerMain 
Gradle,WITHOUT_CLASSIFICATION,//  else might be a link which points to nothing or has been removed while we're visiting or ... 
Gradle,WITHOUT_CLASSIFICATION,//  Try to configure an element 
Gradle,WITHOUT_CLASSIFICATION,/*      * Returns Whether the transformer can transform     * these arguments at all.      */
Gradle,WITHOUT_CLASSIFICATION,//  Do not check for opaque properties when implementing PropertyMixIn as this is expensive 
Gradle,WITHOUT_CLASSIFICATION,//  This does almost the same thing as passing through DesugaredAttributeContainerSerializer / DesugaringAttributeContainerSerializer.   Those make some assumptions about allowed attribute value types that we can't - we serialize everything else to a string instead. 
Gradle,WITHOUT_CLASSIFICATION,//  We don't adjust the column value as in the event we unwrap we want to keep correctness 
Gradle,WITHOUT_CLASSIFICATION,//  see if the grammar if out-of-date by way of its importVocab 
Gradle,WITHOUT_CLASSIFICATION,//  only way I know of to determine current log level 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Reuse more of CommandlineActionFactory
Gradle,WITHOUT_CLASSIFICATION,//  Serialize the actual security manager type this is consumed by BootstrapSecurityManager 
Gradle,WITHOUT_CLASSIFICATION,//  The accumulated exclusions that apply to this edge based on the path from the root 
Gradle,WITHOUT_CLASSIFICATION,// prefix internal fields with _ so that they don't get into the way of propertyMissing() 
Gradle,WITHOUT_CLASSIFICATION,//  TODO validate that the plugin accepts this kind of argument
Gradle,WITHOUT_CLASSIFICATION,//  We must be on some Unix variant including Cygwin or MSYS(2) on Windows... 
Gradle,WITHOUT_CLASSIFICATION,//  Guard against TestNG calling this hook more than once with the same testClass.   See https://github.com/cbeust/testng/issues/1618 for details. 
Gradle,WITHOUT_CLASSIFICATION,//  Parallel configuration 
Gradle,WITHOUT_CLASSIFICATION,//  Should not reach this point as this is validated in the test framework implementation - just propagate the failure 
Gradle,WITHOUT_CLASSIFICATION,//  consumer expressed no preference defaults to library 
Gradle,WITHOUT_CLASSIFICATION,//  Order is significant. Injection handler should be at the end 
Gradle,WITHOUT_CLASSIFICATION,//  https://en.wikipedia.org/wiki/Standard_error 
Gradle,WITHOUT_CLASSIFICATION,//  Queue this up for checking again later 
Gradle,WITHOUT_CLASSIFICATION,//  All of these field names are really long to prevent collisions with the groovy setters.   Groovy will try to set the private fields if given the opportunity.   This makes it much more difficult for this to happen accidentally.
Gradle,WITHOUT_CLASSIFICATION,//  Get any errors from the compiler result 
Gradle,WITHOUT_CLASSIFICATION,//  [baseName]-[appendix]-[version]-[classifier].[extension] 
Gradle,WITHOUT_CLASSIFICATION,//  Try to infer the effective jvm options for the currently running process.   We only care about 'managed' jvm args anything else is unimportant to the running build 
Gradle,WITHOUT_CLASSIFICATION,//  Add the library and extension 
Gradle,WITHOUT_CLASSIFICATION,//  Should use ProjectState instead
Gradle,WITHOUT_CLASSIFICATION,//  2. the graph contains first-level dependencies which have been substituted (likely) so we're going to iterate on dependencies instead 
Gradle,WITHOUT_CLASSIFICATION,//  Reuse the same version as last build 
Gradle,WITHOUT_CLASSIFICATION,//  Used just to test the mechanism 
Gradle,WITHOUT_CLASSIFICATION,//  Add incoming artifact transforms 
Gradle,WITHOUT_CLASSIFICATION,//  This should live closer to the project itself
Gradle,WITHOUT_CLASSIFICATION,//  no daemon process has started yet 
Gradle,WITHOUT_CLASSIFICATION,//  Treat everything else as a single file 
Gradle,WITHOUT_CLASSIFICATION,//  TODO Add a deprecation warning in Gradle 6.0
Gradle,WITHOUT_CLASSIFICATION,//  Convert once in order to write the Ivy descriptor with _all_ configurations 
Gradle,WITHOUT_CLASSIFICATION,//  no outputs file 
Gradle,WITHOUT_CLASSIFICATION,//  build tasks without project reference 
Gradle,WITHOUT_CLASSIFICATION,//  XCTest executable   Sync the binary to the BUILT_PRODUCTS_DIR otherwise Xcode won't find any tests 
Gradle,WITHOUT_CLASSIFICATION,// supplied java location 
Gradle,WITHOUT_CLASSIFICATION,//  If we can't discover the version from the normal metadata make some assumptions 
Gradle,WITHOUT_CLASSIFICATION,//  Create tasks for solutions projects and filters 
Gradle,WITHOUT_CLASSIFICATION,//  this loop builds a name from right to left each name part   separated by "." 
Gradle,WITHOUT_CLASSIFICATION,//  No args 
Gradle,WITHOUT_CLASSIFICATION,//  Else continue below 
Gradle,WITHOUT_CLASSIFICATION,//  Rename `LinuxMain.swift` to `main.swift` so the entry point is correctly detected by swiftc 
Gradle,WITHOUT_CLASSIFICATION,// class results may be created earlier where we don't yet have access to the start time 
Gradle,WITHOUT_CLASSIFICATION,//  Add to the end of the queue so that we traverse the graph in breadth-wise order to pick up as many conflicts as   possible before attempting to resolve them 
Gradle,WITHOUT_CLASSIFICATION,//  Use the index here so we can apply any filters to the realized element 
Gradle,WITHOUT_CLASSIFICATION,//  this work has to be done before classes are loaded otherwise there are risks that   the PermGen space is full before we create the reflection methods 
Gradle,WITHOUT_CLASSIFICATION,//  GroovySystem.getMetaClassRegistry() 
Gradle,WITHOUT_CLASSIFICATION,//  parallel safe version of Compiler.compilerInterface() 
Gradle,WITHOUT_CLASSIFICATION,//  visit the method call because one of the args may be an input method call 
Gradle,WITHOUT_CLASSIFICATION,//  We can't close replaced loaders immediately because their classes may be used during shutdown   after the return of the reload() call that caused the loader to be swapped out.   We have no way of knowing when the loader is actually done with so we use the request after the request   that triggered the reload as the trigger point to close the replaced loader. 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <method-call> <operator> <expression> 
Gradle,WITHOUT_CLASSIFICATION,//  A ∪ (A ∩ B) ∪ (A ∩ C) -> A 
Gradle,WITHOUT_CLASSIFICATION,// In case the output event arrives after completion of the test  and we need to have a matching descriptor to inform the user which test this output belongs to  we will use the current parent 
Gradle,WITHOUT_CLASSIFICATION,//  generate documentation 
Gradle,WITHOUT_CLASSIFICATION,//  This is a hidden property that may be useful to track down issues. Remove when NTLM Auth is solid. 
Gradle,WITHOUT_CLASSIFICATION,//  Should not happen when reading from a StringReader 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE private MetaClass metaClass = GroovySystem.getMetaClassRegistry().getMetaClass(getClass()) 
Gradle,WITHOUT_CLASSIFICATION,//  If we reach this point it means we have a dependency which doesn't belong to the resolution result   Which can mean two things: 
Gradle,WITHOUT_CLASSIFICATION,//  Wrap the processor in an actor to make it thread-safe 
Gradle,WITHOUT_CLASSIFICATION,//  from this point down logging is sent back to the client 
Gradle,WITHOUT_CLASSIFICATION,//  Java source files are supported too. Therefore we should care about the relative path. 
Gradle,WITHOUT_CLASSIFICATION,//  Show any contextual cause recursively 
Gradle,WITHOUT_CLASSIFICATION,//  Use an arbitrary ordering when the artifacts have the same public attributes 
Gradle,WITHOUT_CLASSIFICATION,//  Other home dir cached and not in use clean it up
Gradle,WITHOUT_CLASSIFICATION,//  We're making an assumption here that the target's plugin registry is backed classLoaderScope.   Because we are only build.gradle files right now this holds. 
Gradle,WITHOUT_CLASSIFICATION,//  Build configuration for GradleWorkerMain 
Gradle,WITHOUT_CLASSIFICATION,//  start logging now that the logging manager is connected 
Gradle,WITHOUT_CLASSIFICATION,//  First try to resolve the artifacts locally before going remote 
Gradle,WITHOUT_CLASSIFICATION,//  Add to the front of the queue to flush out configurations that are no longer required. 
Gradle,WITHOUT_CLASSIFICATION,//  Controls when to disable reading default authentication credentials should be used in tests only 
Gradle,WITHOUT_CLASSIFICATION,//  If the jansi.force property is set then we force to output 
Gradle,WITHOUT_CLASSIFICATION,//  Using the test sources feature introduced in Eclipse Photon 
Gradle,WITHOUT_CLASSIFICATION,//  Flaky 
Gradle,WITHOUT_CLASSIFICATION,//  Mix in some Groovy DSL support. Should decorate instead 
Gradle,WITHOUT_CLASSIFICATION,//  don't care 
Gradle,WITHOUT_CLASSIFICATION,//  Service calls have no effect no need to register them 
Gradle,WITHOUT_CLASSIFICATION,//  just serialize as a String as best we can 
Gradle,WITHOUT_CLASSIFICATION,//  Create Visual Studio project extensions 
Gradle,WITHOUT_CLASSIFICATION,//  See https://issues.gradle.org/browse/GRADLE-1589 
Gradle,WITHOUT_CLASSIFICATION,//  Run the build and get the build outcomes model 
Gradle,WITHOUT_CLASSIFICATION,//  Done 
Gradle,WITHOUT_CLASSIFICATION,//  Reach into meta class to avoid lookup 
Gradle,WITHOUT_CLASSIFICATION,//  Windows at least will sometimes throw odd exceptions like java.nio.file.AccessDeniedException   if the file gets deleted while the watch is being set up. 
Gradle,WITHOUT_CLASSIFICATION,// verify that the parsed descriptor is the correct parent module. 
Gradle,WITHOUT_CLASSIFICATION,//  We need to attach failures on unattached dependencies too in case a node wasn't selected   at all but we still want to see an error message for it. 
Gradle,WITHOUT_CLASSIFICATION,//  For now we only create test suites for static library variants 
Gradle,WITHOUT_CLASSIFICATION,//  We'll get this when we try to look up "ProgramFilesDir (x86)" on a 32-bit OS 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize configuration for the worker process to it stdin 
Gradle,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getVersion()          */
Gradle,WITHOUT_CLASSIFICATION,//  Only use this for top level init scripts 
Gradle,WITHOUT_CLASSIFICATION,//  Never up to date; we don't understand the data structures. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Combine these with MutationGuard
Gradle,WITHOUT_CLASSIFICATION,//  setup the default configurations used when mapping to resolved versions 
Gradle,WITHOUT_CLASSIFICATION,//  A very dumb strategy for invalidating cache 
Gradle,WITHOUT_CLASSIFICATION,//  There is a chance we could not attach target configurations previously 
Gradle,WITHOUT_CLASSIFICATION,//  Add the Gradle API filter between the user classloader and the worker infrastructure classloader 
Gradle,WITHOUT_CLASSIFICATION,//  We need a consistent index here 
Gradle,WITHOUT_CLASSIFICATION,//  Object converted = $typeConverter.convert(foo Float.class false); 
Gradle,WITHOUT_CLASSIFICATION,//  Read body 
Gradle,WITHOUT_CLASSIFICATION,//  Mixed case 
Gradle,WITHOUT_CLASSIFICATION,//  Always expand empty node 
Gradle,WITHOUT_CLASSIFICATION,//  A dependency artifact will be defined if the descriptor specified a classifier or non-default type attribute. 
Gradle,WITHOUT_CLASSIFICATION,//  stream has been closed don't bother reading anything else 
Gradle,WITHOUT_CLASSIFICATION,//  only care about HTTP hosts right now 
Gradle,WITHOUT_CLASSIFICATION,//  Call return new <implClass>(param1) 
Gradle,WITHOUT_CLASSIFICATION,//  Listen for the end of configuration of the root project of the root build   and discard buffered notifications if no listeners have yet appeared.   This avoids buffering until the end of the build when no listener comes. 
Gradle,WITHOUT_CLASSIFICATION,//  Assume that test has renamed itself (this can actually happen) 
Gradle,WITHOUT_CLASSIFICATION,//  Expire recently unused Daemons when memory pressure is high 
Gradle,WITHOUT_CLASSIFICATION,//  FindBugs cannot handle missing directories 
Gradle,WITHOUT_CLASSIFICATION,//  Only count non-CREATE events since creation also causes a modification event unless the event is for a directory. 
Gradle,WITHOUT_CLASSIFICATION,//  Retain strong reference 
Gradle,WITHOUT_CLASSIFICATION,//  Augment the environment for the execution 
Gradle,WITHOUT_CLASSIFICATION,//  Transient don't serialize all the views that happen to have been visited recreate them when visited via the deserialized view 
Gradle,WITHOUT_CLASSIFICATION,//  some implementation uses null to represent bootstrap classloader   i.e. Object.class.getClassLoader()==null 
Gradle,WITHOUT_CLASSIFICATION,//  TaskListenerInternal 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore. Currently the actions don't need to run it's just better if they do   By the time this node is notified that the task in the other build has completed it's too late to run the action   Instead the action should be attached to the task in the other build rather than here 
Gradle,WITHOUT_CLASSIFICATION,//  Here we will distribute A ∩ (B ∪ C) if and only if at   least one of the distribution operations (A ∩ B) can be simplified 
Gradle,WITHOUT_CLASSIFICATION,//  Find the nearest parent up that we care about and use that as the parent. 
Gradle,WITHOUT_CLASSIFICATION,//  When the outputs are generated throw away all state for files that do not live in an append-only cache.   This is intentionally very simple to be improved later 
Gradle,WITHOUT_CLASSIFICATION,//  and class as property 
Gradle,WITHOUT_CLASSIFICATION,//  A launchable created by the provider - just hand it back 
Gradle,WITHOUT_CLASSIFICATION,//  Must run each action 
Gradle,WITHOUT_CLASSIFICATION,//  The other is better current is not part of result 
Gradle,WITHOUT_CLASSIFICATION,//  this shouldn't happen resolvers should call notFound() 
Gradle,WITHOUT_CLASSIFICATION,//  Redirect stderr to stdout when both stdout and stderr are attached to a console. Assume that they are attached to the same console   This avoids interleaving problems when stdout and stderr end up at the same location 
Gradle,WITHOUT_CLASSIFICATION,//  get(<type>) 
Gradle,WITHOUT_CLASSIFICATION,//  Should get back some kind of reference that can be queried below instead of looking the task up every time 
Gradle,WITHOUT_CLASSIFICATION,//  This is the root block. Can have any number of children <= maxChildIndexEntries 
Gradle,WITHOUT_CLASSIFICATION,//  There are enough entries in this block and the left sibling to make up 2 blocks so redistribute   the entries evenly between them 
Gradle,WITHOUT_CLASSIFICATION,//  the deployment descriptor already exists; no need to generate it 
Gradle,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getGroupId()          */
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE objectFactory.directoryProperty() 
Gradle,WITHOUT_CLASSIFICATION,//  Sanitise the exception and report it 
Gradle,WITHOUT_CLASSIFICATION,//  https://github.com/gradle/gradle/issues/2319 
Gradle,WITHOUT_CLASSIFICATION,//  Return the group to use for the given build operation searching up the build operation hierarchy for the first group 
Gradle,WITHOUT_CLASSIFICATION,//  Split line if a single line goes over 1 MB 
Gradle,WITHOUT_CLASSIFICATION,//  Intentionally not the text 
Gradle,WITHOUT_CLASSIFICATION,//  in which case we output "" to stay compatible with existing builds that scan the script for it 
Gradle,WITHOUT_CLASSIFICATION,//  Resolving a project component can cause traversal to other projects at which   point we could release the project lock and allow another task to run.  We can't   use a cache loader here because it is synchronized.  If the other task also tries   to resolve a project component he can block trying to get the lock around the   loader while still holding the project lock.  To avoid this deadlock we check   then release the project lock only if we need to resolve the project and ensure   that only the thread holding the lock can populate the metadata for a project.
Gradle,WITHOUT_CLASSIFICATION,//  the name is a type so remove it from the scoping   as it is only a classvariable it is only in   referencedClassVariables but must be removed   for each parentscope too 
Gradle,WITHOUT_CLASSIFICATION,//  Layout 
Gradle,WITHOUT_CLASSIFICATION,//  Add any finalizers to the queue 
Gradle,WITHOUT_CLASSIFICATION,//  We know all are compatibles so this is only possible if some disambiguation happens but not getting us to 1 candidate 
Gradle,WITHOUT_CLASSIFICATION,//  should this be null?
Gradle,WITHOUT_CLASSIFICATION,//  /proc/meminfo is in kB since Linux 4.0 see https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/proc/task_mmu.c?id=39a8804455fb23f09157341d3ba7db6d7ae6ee76#n22 
Gradle,WITHOUT_CLASSIFICATION,//  Because the same suffix is used for all decorating class generator instances share the same cache as well 
Gradle,WITHOUT_CLASSIFICATION,//  check if directory is already watched   on Windows check if any parent is already watched 
Gradle,WITHOUT_CLASSIFICATION,//  Should really fail here if sourcesToCompile is not empty: no transform for this source set in this binary 
Gradle,WITHOUT_CLASSIFICATION,//  Include the shortest path from each version that has a direct dependency on the broken dependency back to the root 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore the subkey if it doesn't have a folder and version 
Gradle,WITHOUT_CLASSIFICATION,// directly printing to the stream to avoid log level filtering. 
Gradle,WITHOUT_CLASSIFICATION,/*         The song and dance with Action<Runnable> is to ease testing.        See DisconnectableInputStreamTest      */
Gradle,WITHOUT_CLASSIFICATION,//  Add dependencies to the start of the queue 
Gradle,WITHOUT_CLASSIFICATION,//  end element marker 
Gradle,WITHOUT_CLASSIFICATION,// when 
Gradle,WITHOUT_CLASSIFICATION,//  Don't configure anything 
Gradle,WITHOUT_CLASSIFICATION,//  Target: arm 
Gradle,WITHOUT_CLASSIFICATION,//  Add if absent 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE private ConventionMapping mapping 
Gradle,WITHOUT_CLASSIFICATION,//  Initialize Matchers once and then reset them for performance 
Gradle,WITHOUT_CLASSIFICATION,//  Project has no publications: simply use the project name in place of the dependency name 
Gradle,WITHOUT_CLASSIFICATION,//  only add confs if they are specified. if they aren't endElement will handle this 
Gradle,WITHOUT_CLASSIFICATION,//  This second check is only done so that we can make the difference between an uninitialized rule (never seen before) and   a rule which is not reusable 
Gradle,WITHOUT_CLASSIFICATION,//  this.getServices() 
Gradle,WITHOUT_CLASSIFICATION,//  Currently visiting the successor node - we're in a cycle 
Gradle,WITHOUT_CLASSIFICATION,// for gradle distribution specific dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  Handle anyOf first because we don't want to special case it in   every other case 
Gradle,WITHOUT_CLASSIFICATION,//  Adds a void $propName(Closure<?> cl) method that executes the closure 
Gradle,WITHOUT_CLASSIFICATION,//  Stopping so result doesn't really matter. 
Gradle,WITHOUT_CLASSIFICATION,//  More information: http://blog.jetbrains.com/scala/2014/10/30/scala-plugin-update-for-intellij-idea-14-rc-is-out/ 
Gradle,WITHOUT_CLASSIFICATION,//  Configurations are built on-demand but only once. 
Gradle,WITHOUT_CLASSIFICATION,//  We have enough local data to make a comparison get the remote metadata 
Gradle,WITHOUT_CLASSIFICATION,//  we do not resolve a vanilla name starting with a lower case letter   try to resolve against a default import because we know that the 
Gradle,WITHOUT_CLASSIFICATION,//  A launchable synthesized by the consumer - unpack it into a set of task names 
Gradle,WITHOUT_CLASSIFICATION,// offset based implementation is only safe up to certain figure  because of the int max value  for large streams/files (huge builds) we need to roll the file 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - deal with more than one directory
Gradle,WITHOUT_CLASSIFICATION,//  private member: implementation details 
Gradle,WITHOUT_CLASSIFICATION,//  Don't inline the Groovy jar as the Groovy “tools locator” searches for it by name 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:ADAM - switch the logging back on.                  LOGGER.debug("Ignoring failure to serialize throwable." ignored);
Gradle,WITHOUT_CLASSIFICATION,//  min chunk size 4kB max size 1MB 
Gradle,WITHOUT_CLASSIFICATION,// for updates to private JDK caches of the environment state 
Gradle,WITHOUT_CLASSIFICATION,//  Set the system properties and use this process 
Gradle,WITHOUT_CLASSIFICATION,//  Was it updated during execution?
Gradle,WITHOUT_CLASSIFICATION,//  Foreground daemon cannot be 'told' what's his startup options as the client sits in the same process so we will infer the jvm opts from the inputArguments() 
Gradle,WITHOUT_CLASSIFICATION,//  round to nearest second 
Gradle,WITHOUT_CLASSIFICATION,//  this.field = value 
Gradle,WITHOUT_CLASSIFICATION,//  Configure the included build to discover available modules 
Gradle,WITHOUT_CLASSIFICATION,//  Initialize SSLContext 
Gradle,WITHOUT_CLASSIFICATION,//  J flags can not be set in the option file   add additional option files 
Gradle,WITHOUT_CLASSIFICATION,//  use the max heap as an approximation 
Gradle,WITHOUT_CLASSIFICATION,//  Collect artifact sets in a list using the id of the set as its index in the list 
Gradle,WITHOUT_CLASSIFICATION,//  If no errors get the compiled source and write it to the destination file 
Gradle,WITHOUT_CLASSIFICATION,//  For now required and preferred are treated the same 
Gradle,WITHOUT_CLASSIFICATION,//  Does not need to be redrawn if component is out of bound 
Gradle,WITHOUT_CLASSIFICATION,//  Prevent construction 
Gradle,WITHOUT_CLASSIFICATION,//  the removal of the method will be reported   the removed methods will be reported   the added methods will be reported 
Gradle,WITHOUT_CLASSIFICATION,/*              * We know that DefaultScript & friends don't have user-visible nested types             * so don't try to look up nonsensical types like org.gradle.Script#sourceCompatibility              */
Gradle,WITHOUT_CLASSIFICATION,//  We don't know what the type is - let Guava take care of it. 
Gradle,WITHOUT_CLASSIFICATION,//  Query the declared methods of the meta class 
Gradle,WITHOUT_CLASSIFICATION,//  check interfaces at this level first 
Gradle,WITHOUT_CLASSIFICATION,//  Could be different to ids in the requests as they may be unqualified 
Gradle,WITHOUT_CLASSIFICATION,//  Could potentially also look whether we have the details for an ancestor directory tree   Could possibly infer that the path refers to a directory if we have details for a descendant path (and it's not a missing file) 
Gradle,WITHOUT_CLASSIFICATION,//  set up a configuration named 'antlr' for the user to specify the antlr libs to use in case   they want a specific version etc. 
Gradle,WITHOUT_CLASSIFICATION,//  <class>.getDeclaredMethod(<getter-name>) 
Gradle,WITHOUT_CLASSIFICATION,//  This will propagate through the graph and prune configurations that are no longer required. 
Gradle,WITHOUT_CLASSIFICATION,// by keying the failures only by 'requested' we lose some precision  at edge case we'll lose info about a different exception if we have different failure for the same requested version 
Gradle,WITHOUT_CLASSIFICATION,//  wait for it to open 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize the application classpath this is consumed by BootstrapSecurityManager 
Gradle,WITHOUT_CLASSIFICATION,// TODO: all methods 
Gradle,WITHOUT_CLASSIFICATION,//  check module node imports aliases   the while loop enables a check for inner classes which are not fully imported 
Gradle,WITHOUT_CLASSIFICATION,//  this situation occurs when there was no branch defined   in the original dependency descriptor. So the dynamicId   shouldn't contain a branch neither 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Honor changes to build directory 
Gradle,WITHOUT_CLASSIFICATION,//  the target component exists so we need to fallback to the traditional selection process 
Gradle,WITHOUT_CLASSIFICATION,//  happens when dispatching to taskdef via createNode() 
Gradle,WITHOUT_CLASSIFICATION,// is it sane enough?
Gradle,WITHOUT_CLASSIFICATION,//  Retain strong references to the values created for this session 
Gradle,WITHOUT_CLASSIFICATION,//  Configure test binary to compile against binary under test 
Gradle,WITHOUT_CLASSIFICATION,//  If this task uses a pre-compiled header 
Gradle,WITHOUT_CLASSIFICATION,//  only define a Scala SDK for a module if we could create a scalaSdkLibrary 
Gradle,WITHOUT_CLASSIFICATION,//  Flushing data split across previous and current appending 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public DynamicObject getAsDynamicObject() { 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Publishing for test executable?
Gradle,WITHOUT_CLASSIFICATION,//  Skip things that aren't files 
Gradle,WITHOUT_CLASSIFICATION,//  next character is not a separator 
Gradle,WITHOUT_CLASSIFICATION,//  need to run operation under cache lock 
Gradle,WITHOUT_CLASSIFICATION,//  Total number of garbage collection events observed in the window 
Gradle,WITHOUT_CLASSIFICATION,//  Buckets of dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  Force loading to check if method handle is supported 
Gradle,WITHOUT_CLASSIFICATION,//  Wrap in generic 'build failed' cross version exception 
Gradle,WITHOUT_CLASSIFICATION,//  Otherwise macro or macro function call 
Gradle,WITHOUT_CLASSIFICATION,//  can't be equal otherwise wouldn't have been collected 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Reuse more of BuildActionsFactory
Gradle,WITHOUT_CLASSIFICATION,//  Configure test binary to link against tested component compiled objects 
Gradle,WITHOUT_CLASSIFICATION,//  Use writeFile because the cache can internally recover from datafile   corruption so we don't care at this level if it's corrupt 
Gradle,WITHOUT_CLASSIFICATION,//  Exit value is unreliable for determination of process failure. 
Gradle,WITHOUT_CLASSIFICATION,//  Setup the dependency on the main binary   This should all be replaced by a single dependency that points at some "testable" variants of the main binary 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: consider entryAttributes in equals hashCode and toString 
Gradle,WITHOUT_CLASSIFICATION,//  invokeMethod(this name args) 
Gradle,WITHOUT_CLASSIFICATION,//  Used by the Kotlin plugin 
Gradle,WITHOUT_CLASSIFICATION,//  Last entry complete the result 
Gradle,WITHOUT_CLASSIFICATION,//  a class consisting of a vanilla name can never be   a static inner class because at least one dot is   required for this. Example: foo.bar -> foo$bar 
Gradle,WITHOUT_CLASSIFICATION,//  Copy selection failure 
Gradle,WITHOUT_CLASSIFICATION,//  It's almost always the same attribute sets which are compared so in order to avoid a lot of memory allocation   during computation of the intersection we cache the result here. 
Gradle,WITHOUT_CLASSIFICATION,//  Pull-only always comes first 
Gradle,WITHOUT_CLASSIFICATION,//  Look for model(«») (i.e. call to model with anything other than non literal closure) 
Gradle,WITHOUT_CLASSIFICATION,//  Authoritative result - don't need to try remote 
Gradle,WITHOUT_CLASSIFICATION,//  do some checks up-front so we avoid creating the queue in most cases   Cases we want to handle:   - List<String>   - Class<?>   - List<Class<?>>   - Integer[]   - ? extends BaseType   - Class<?>[] 
Gradle,WITHOUT_CLASSIFICATION,//  create the listener adapters right when the ConsumerOperationParameters are instantiated but no earlier   this ensures that when multiple requests are issued that are built from the same builder such requests do not share any state kept in the listener adapters   e.g. if the listener adapters do per-request caching such caching must not leak between different requests built from the same builder
Gradle,WITHOUT_CLASSIFICATION,//  Snapshot the state and notify the caches 
Gradle,WITHOUT_CLASSIFICATION,//  Currently not required 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: synchronization 
Gradle,WITHOUT_CLASSIFICATION,//  We're sorting the names of the configurations and later attributes   to make sure the output is consistently the same between invocations 
Gradle,WITHOUT_CLASSIFICATION,//  don't forward 
Gradle,WITHOUT_CLASSIFICATION,//  Allow only certain things from the underlying classloader 
Gradle,WITHOUT_CLASSIFICATION,//  Don't add if our last record has a `:taskName` status and this one is `:taskName SOMETHING` 
Gradle,WITHOUT_CLASSIFICATION,//  Assume that each artifact points to a unique file and use the relative path from the project as the id 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier> <arg-list> | task <string> <arg-list>   Map to: task("<identifier>" <arg-list>) | task(<string> <arg-list>) 
Gradle,WITHOUT_CLASSIFICATION,//  Remove license files that cause collisions between a LICENSE file and a license/ directory. 
Gradle,WITHOUT_CLASSIFICATION,//  If no expiration strategies exist the daemon will not expire. 
Gradle,WITHOUT_CLASSIFICATION,//  overwrite rather than append libraries 
Gradle,WITHOUT_CLASSIFICATION,//  let's see if we can find a single variant which has exactly the requested artifacts 
Gradle,WITHOUT_CLASSIFICATION,//  Check to see if there are any compatible canceled daemons and wait to see if one becomes idle 
Gradle,WITHOUT_CLASSIFICATION,//  count every event on OSX 
Gradle,WITHOUT_CLASSIFICATION,//  Info about the owning task can be inferred and we don't provide any further info at this point.   This is largely to expose timing information about executed tasks 
Gradle,WITHOUT_CLASSIFICATION,//  Assume 8.1 
Gradle,WITHOUT_CLASSIFICATION,//  don't bother trying to handle primitive arrays specially 
Gradle,WITHOUT_CLASSIFICATION,//  Attempt to merge with the left sibling 
Gradle,WITHOUT_CLASSIFICATION,//  for command file format see http://docs.oracle.com/javase/6/docs/technotes/tools/windows/javac.html#commandlineargfile   use platform character and line encoding 
Gradle,WITHOUT_CLASSIFICATION,//  This can happen on Windows 
Gradle,WITHOUT_CLASSIFICATION,//  fully visit the class hierarchy before any interfaces in order to meet the contract   of PropertyDetails.getGetters() etc. 
Gradle,WITHOUT_CLASSIFICATION,//  caches 
Gradle,WITHOUT_CLASSIFICATION,//  If no current selection for module just use the candidate. 
Gradle,WITHOUT_CLASSIFICATION,//  Running the task requires access to the task's owning project 
Gradle,WITHOUT_CLASSIFICATION,//  all the values are equal but we store all the binaries that match that value   and incrementally build a list of binaries which are excluded because of a better match 
Gradle,WITHOUT_CLASSIFICATION,//  store thrown exception 
Gradle,WITHOUT_CLASSIFICATION,//  lock on demand 
Gradle,WITHOUT_CLASSIFICATION,//  not the same provider 
Gradle,WITHOUT_CLASSIFICATION,//  Already completed 
Gradle,WITHOUT_CLASSIFICATION,//  Encode as ascii 
Gradle,WITHOUT_CLASSIFICATION,//  Another process may have already copied the compiler interface JAR   Avoid copying over same existing file to avoid locking problems 
Gradle,WITHOUT_CLASSIFICATION,//  Lock is in use - mark as contended 
Gradle,WITHOUT_CLASSIFICATION,//  Handles both junctions and real symlinks (https://www.2brightsparks.com/resources/articles/NTFS-Hard-Links-Junctions-and-Symbolic-Links.pdf) 
Gradle,WITHOUT_CLASSIFICATION,//  Should not happen reading from a StringReader 
Gradle,WITHOUT_CLASSIFICATION,//  Attaches the owning WorkerExecutor to this factory 
Gradle,WITHOUT_CLASSIFICATION,//  Same as the length of this minus the last element minus the dot between them 
Gradle,WITHOUT_CLASSIFICATION,//  Keep the argument from this expression 
Gradle,WITHOUT_CLASSIFICATION,//  Are all file snapshots after execution accounted for as new entries?
Gradle,WITHOUT_CLASSIFICATION,//  we must use a String literal here otherwise using things like Foo.class.name will trigger unnecessary   loading of classes in the classloader of the DefaultIsolatedAntBuilder which is not what we want. 
Gradle,WITHOUT_CLASSIFICATION,//  Create the tasks for each C++ binary that is registered 
Gradle,WITHOUT_CLASSIFICATION,//  an exclude all is for modules not artifacts 
Gradle,WITHOUT_CLASSIFICATION,//  Adds a void set$PropName(Object value) method that fails 
Gradle,WITHOUT_CLASSIFICATION,//  start element marker 
Gradle,WITHOUT_CLASSIFICATION,//  This should only be used for top-level builds 
Gradle,WITHOUT_CLASSIFICATION,//  Else wait for the next update event 
Gradle,WITHOUT_CLASSIFICATION,//  Don't care collect the artifacts later (in the correct order) 
Gradle,WITHOUT_CLASSIFICATION,//  Verify that none of the listed "versions" do match another pattern 
Gradle,WITHOUT_CLASSIFICATION,//  We've already validated the inputs: should never get here. 
Gradle,WITHOUT_CLASSIFICATION,//  Use this thread to process any work - this allows work to be executed using the   worker lease acquired by this thread even if the executor thread pool is full of   workers from other threads.  In other words it ensures that all worker leases   are being utilized regardless of the bounds of the thread pool. 
Gradle,WITHOUT_CLASSIFICATION,//  Restrict the decorations to those required to decorate all views reachable from this type 
Gradle,WITHOUT_CLASSIFICATION,//  cached resolved values 
Gradle,WITHOUT_CLASSIFICATION,//  do not fail the build as feature is non-critical 
Gradle,WITHOUT_CLASSIFICATION,//  do not remove task descriptors because they might be needed to describe subsequent tasks' dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  avoid clone 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - take care of this in the selector parser 
Gradle,WITHOUT_CLASSIFICATION,//  gradleFileResource type is mapped to AntFileResource 
Gradle,WITHOUT_CLASSIFICATION,//  A javac warning ignore 
Gradle,WITHOUT_CLASSIFICATION,//  No support for command file 
Gradle,WITHOUT_CLASSIFICATION,//  Configure an implicit variant 
Gradle,WITHOUT_CLASSIFICATION,//  Path is an ancestor of this 
Gradle,WITHOUT_CLASSIFICATION,//  Copied from Method.isDefault() 
Gradle,WITHOUT_CLASSIFICATION,//  This should come from the compiler classpath only 
Gradle,WITHOUT_CLASSIFICATION,//  Consider every node that must run before the finalizer 
Gradle,WITHOUT_CLASSIFICATION,//  Do not hold lock while removing listener as the listener may still be receiving events on another thread and will need to acquire the lock to handle these events 
Gradle,WITHOUT_CLASSIFICATION,//  Create all of the pipeline eagerly as soon as this is enabled to track the state of build operations.   All of the pipelines do this so should instead have a single stage that tracks this for all pipelines and that can replay the current state to new pipelines   Then a pipeline can be added for each listener as required 
Gradle,WITHOUT_CLASSIFICATION,//  Once the node has been discovered changing the target is not allowed as it changes the promise of the node as well 
Gradle,WITHOUT_CLASSIFICATION,//  fall back to the default logic 
Gradle,WITHOUT_CLASSIFICATION,//  A set of progress operations that have been forwarded 
Gradle,WITHOUT_CLASSIFICATION,//  First child node 
Gradle,WITHOUT_CLASSIFICATION,//  this is necessary to prevent O(n^2) behavior in xcode project loading 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE super.getAsDynamicObject() 
Gradle,WITHOUT_CLASSIFICATION,//  Transform closure 
Gradle,WITHOUT_CLASSIFICATION,//  Should instead forward these to the task's validation context 
Gradle,WITHOUT_CLASSIFICATION,//  Mutable property 
Gradle,WITHOUT_CLASSIFICATION,//  DependencyResolutionListener 
Gradle,WITHOUT_CLASSIFICATION,//  end of tag marker 
Gradle,WITHOUT_CLASSIFICATION,//  Have read some data - let readers know 
Gradle,WITHOUT_CLASSIFICATION,//  Adds a void $propName(Closure<?> cl) method that throws MME to avoid attempts to convert closure to something else 
Gradle,WITHOUT_CLASSIFICATION,//  Nexus uses sha1 etags with a constant prefix   e.g {SHA1{b8ad5573a5e9eba7d48ed77a48ad098e3ec2590b}} 
Gradle,WITHOUT_CLASSIFICATION,//  part of a cycle : use the 'minimum' component as the root of the cycle 
Gradle,WITHOUT_CLASSIFICATION,//  Look for a realized object 
Gradle,WITHOUT_CLASSIFICATION,//  String[] 
Gradle,WITHOUT_CLASSIFICATION,//  Also releases any locks 
Gradle,WITHOUT_CLASSIFICATION,//  Not already known attempt to resolve the parent 
Gradle,WITHOUT_CLASSIFICATION,// The first argument is not really used but it is very useful in diagnosing i.e. running 'jps -m' 
Gradle,WITHOUT_CLASSIFICATION,// when root suite is completed we stop redirecting 
Gradle,WITHOUT_CLASSIFICATION,//  let the delegate resolver select among them 
Gradle,WITHOUT_CLASSIFICATION,//  Setting time to 0 because we need API jars to be identical independently of   the timestamps of class files 
Gradle,WITHOUT_CLASSIFICATION,//  for storing to field 
Gradle,WITHOUT_CLASSIFICATION,//  Property is readable and all getters and setters are abstract 
Gradle,WITHOUT_CLASSIFICATION,//  Wait for work to be submitted if the queue is empty and our worker count is under max workers   This attempts to keep up to max workers threads alive once they've been started. 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore the decorated service 
Gradle,WITHOUT_CLASSIFICATION,//  Add a create task 
Gradle,WITHOUT_CLASSIFICATION,//  Directory has something in it already 
Gradle,WITHOUT_CLASSIFICATION,//  Source file has not changed and no include files 
Gradle,WITHOUT_CLASSIFICATION,//  Do a shallow render of any constraint edges and do not mark the node as visited. 
Gradle,WITHOUT_CLASSIFICATION,//  assert the exit value signals success 
Gradle,WITHOUT_CLASSIFICATION,//  should be protected but use of the class generator forces it to be public 
Gradle,WITHOUT_CLASSIFICATION,//  Turn off request logging this can end up logging OAUTH   tokens which should not ever be in a build log 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore some broken samples before the given date 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE new BeanDynamicObject(this) 
Gradle,WITHOUT_CLASSIFICATION,//  Both of these values are effectively part of a cross Gradle version contract.   Do not change them. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO Use IvyArtifact here
Gradle,WITHOUT_CLASSIFICATION,//  Not part of a strongly connected component or the root of a strongly connected component 
Gradle,WITHOUT_CLASSIFICATION,//  modifies in place 
Gradle,WITHOUT_CLASSIFICATION,//  Copy the snapshots whose values are the same then snapshot remaining values 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize the incoming class and parameters (if necessary) 
Gradle,WITHOUT_CLASSIFICATION,//  null if type == UNDEFINED 
Gradle,WITHOUT_CLASSIFICATION,//  Only * characters: matches #1 above 
Gradle,WITHOUT_CLASSIFICATION,/*      * Checks whether the plugin marker artifact exists in the backing artifacts repositories.      */
Gradle,WITHOUT_CLASSIFICATION,//  this exception means that we want to try again. 
Gradle,WITHOUT_CLASSIFICATION,//  Probe for artifact with classifier 
Gradle,WITHOUT_CLASSIFICATION,//  note: BigInteger and BigDecimal are also imported by default 
Gradle,WITHOUT_CLASSIFICATION,//  SoftwareModel 
Gradle,WITHOUT_CLASSIFICATION,//  At this point we must have annotations on this private getter 
Gradle,WITHOUT_CLASSIFICATION,//  Create a SourceFile object to represent an "empty" extern 
Gradle,WITHOUT_CLASSIFICATION,//  <tr>     <td><literal><link linkend="$id">$name</link>$signature</literal></td>     <td>$description</td>   </tr> 
Gradle,WITHOUT_CLASSIFICATION,//  Any windows GCC compatible implementation (mingw cygwin) 
Gradle,WITHOUT_CLASSIFICATION,//  ml/ml64 have position sensitive arguments   e.g. /Fo must appear before /c and /c must appear before the source file. 
Gradle,WITHOUT_CLASSIFICATION,//  extract the files that were generated 
Gradle,WITHOUT_CLASSIFICATION,//  First scan for annotation and short circuit transformation if not present 
Gradle,WITHOUT_CLASSIFICATION,//  asking isResolved here allows to check if a primitive   type name like "int" was used to make t. In such a case   we have nothing left to do. 
Gradle,WITHOUT_CLASSIFICATION,//  According to absolute positioning 
Gradle,WITHOUT_CLASSIFICATION,//  Make the argument serializers available so work implementations can register their own serializers 
Gradle,WITHOUT_CLASSIFICATION,//  Not sure under what scenario (if any) this would occur   but there's no sense in collecting the descriptor if it does.
Gradle,WITHOUT_CLASSIFICATION,//  Rethrow 
Gradle,WITHOUT_CLASSIFICATION,//  We can only determine if two DaemonStopEvent point at the same daemon if we know the PIDs 
Gradle,WITHOUT_CLASSIFICATION,//  Use an IdeaModule to reference a project 
Gradle,WITHOUT_CLASSIFICATION,//  literal followed by at least one * 
Gradle,WITHOUT_CLASSIFICATION,//  Lifecycle messages 
Gradle,WITHOUT_CLASSIFICATION,//  If we've freed memory invalidate the current OS memory snapshot 
Gradle,WITHOUT_CLASSIFICATION,//  consumer didn't express any preference everything fits 
Gradle,WITHOUT_CLASSIFICATION,//  Traverse graph 
Gradle,WITHOUT_CLASSIFICATION,//  Enabled caching if task type is annotated with @CacheableTask 
Gradle,WITHOUT_CLASSIFICATION,//  Wrap build failure in 'cancelled' cross version exception 
Gradle,WITHOUT_CLASSIFICATION,//  alternatively we could return project.getLayout().files(Runnable)   would differ in the following ways: 1. live (not sure if we want live here) 2. no autowiring (probably want autowiring here) 
Gradle,WITHOUT_CLASSIFICATION,//  Run the rules and try to find something again. 
Gradle,WITHOUT_CLASSIFICATION,//  Invalid paths fall through to here 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - set ACL here if necessary
Gradle,WITHOUT_CLASSIFICATION,//  A map from progress operation id seen in event -> progress operation id that should be forwarded 
Gradle,WITHOUT_CLASSIFICATION,// just in case we have a bug related to logging  printing some exit info directly to file: 
Gradle,WITHOUT_CLASSIFICATION,//  Register the defined substitutions for included build 
Gradle,WITHOUT_CLASSIFICATION,//  only need to decorate when this callback is delayed 
Gradle,WITHOUT_CLASSIFICATION,//  The task status line may appear twice - once for the execution once for the UP-TO-DATE/SKIPPED/etc   So don't add to the task list if this is an update to a previously added task.
Gradle,WITHOUT_CLASSIFICATION,//  all tasks have the same value 
Gradle,WITHOUT_CLASSIFICATION,//  Create the domain object 
Gradle,WITHOUT_CLASSIFICATION,//  Calculate how many rows of the status area overlap with the text area 
Gradle,WITHOUT_CLASSIFICATION,//  An object-like macro 
Gradle,WITHOUT_CLASSIFICATION,//  Set up worker ClassLoader 
Gradle,WITHOUT_CLASSIFICATION,// eg. 'someTask' or 'sT'  eg. '' ':' or ':foo:bar' 
Gradle,WITHOUT_CLASSIFICATION,//  Watch for the client disconnecting before we call stop() 
Gradle,WITHOUT_CLASSIFICATION,//  separator 
Gradle,WITHOUT_CLASSIFICATION,//  ProjectStateWrapper might contain the configured eclipse project name 
Gradle,WITHOUT_CLASSIFICATION,// 1) we've seen the replacement register new conflict and return 
Gradle,WITHOUT_CLASSIFICATION,//  Add new labels to the unused queue 
Gradle,WITHOUT_CLASSIFICATION,//  This is final - use {@link TaskDependencyContainer#visitDependencies} to provide the dependencies instead. 
Gradle,WITHOUT_CLASSIFICATION,// noinspection unchecked 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Add test name to the report   @formatter:off
Gradle,WITHOUT_CLASSIFICATION,//  triggering file resolve 
Gradle,WITHOUT_CLASSIFICATION,//  only an input for other task instances 
Gradle,WITHOUT_CLASSIFICATION,//  Wrap in a <span> to work around CSS problem in IE 
Gradle,WITHOUT_CLASSIFICATION,//  Collect a map from component to its owning component. This might be better to move to the component or some publications model 
Gradle,WITHOUT_CLASSIFICATION,//  Can use arg without conversion 
Gradle,WITHOUT_CLASSIFICATION,//  super class not on the classpath - unable to scan parent class 
Gradle,WITHOUT_CLASSIFICATION,//  Get the next page in the next iteration of this loop. 
Gradle,WITHOUT_CLASSIFICATION,//  Have already visited this node - skip it 
Gradle,WITHOUT_CLASSIFICATION,//  the class property stops resolving dynamic property names too 
Gradle,WITHOUT_CLASSIFICATION,//  Missing '' 
Gradle,WITHOUT_CLASSIFICATION,//  Match recording is optimized for the general case of a single match 
Gradle,WITHOUT_CLASSIFICATION,//  this happens when JNA is not in the path.. or   this happens when the stdout is being redirected to a file. 
Gradle,WITHOUT_CLASSIFICATION,//  
Gradle,WITHOUT_CLASSIFICATION,//  Add an adapter for each newly added target 
Gradle,WITHOUT_CLASSIFICATION,/*      * Groovy manipulates the JVM to let GString extend String.     * Whenever we have a Set or Map containing Strings it might also     * contain GStrings. This breaks deserialization on the client.     * This method forces GString to String conversion.      */
Gradle,WITHOUT_CLASSIFICATION,//  only write if we have results otherwise truncate 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Synchronization 
Gradle,WITHOUT_CLASSIFICATION,// we could retrieve annotations at construction time and hold references to them but unfortunately  in IBM JDK strong references are held from annotation instance to class in which it is used so we have to reflect 
Gradle,WITHOUT_CLASSIFICATION,//  Restore the existing object being deserialized. 
Gradle,WITHOUT_CLASSIFICATION,//  handle decoding underflow multi-byte unicode character at buffer chunk boundary 
Gradle,WITHOUT_CLASSIFICATION,//  Either no cached or it's changed. See if we can find something local with the same checksum 
Gradle,WITHOUT_CLASSIFICATION,//  we need to make sure the variants we consider provide the implicit capability 
Gradle,WITHOUT_CLASSIFICATION,// FileCollection files = ProjectBuilder.builder().build().files();  assertThat(call("{ bean fc -> bean.files fc}" bean files) nullValue());  assertThat(bean.getFiles() sameInstance(files)); 
Gradle,WITHOUT_CLASSIFICATION,//  Do not reprocess 
Gradle,WITHOUT_CLASSIFICATION,//  relink produce another object file   hide _main symbol 
Gradle,WITHOUT_CLASSIFICATION,//  Intentionally not a “create” method as this should not be exposed as a service 
Gradle,WITHOUT_CLASSIFICATION,//  Track any progress operation that either can't be display due to label shortage or child progress operation is already been displayed 
Gradle,WITHOUT_CLASSIFICATION,//  Assume 80 wide. This is to minimize wrapping on console where we don't know the width (eg mintty)   It's not intended to be a correct solution simply a work around 
Gradle,WITHOUT_CLASSIFICATION,// noinspection ResultOfMethodCallIgnored 
Gradle,WITHOUT_CLASSIFICATION,//  Not looking at a match 
Gradle,WITHOUT_CLASSIFICATION,//  doesn't exist on either side nothing to compare 
Gradle,WITHOUT_CLASSIFICATION,//  https://github.com/gradle/gradle/issues/9380   Remove a srcDir from a sourceSet 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore artifact transforms 
Gradle,WITHOUT_CLASSIFICATION,//  Constraint: only consider explicit exclusions declared for this constraint 
Gradle,WITHOUT_CLASSIFICATION,//  check next level of interfaces 
Gradle,WITHOUT_CLASSIFICATION,//  This is expensive to calculate so cache the result 
Gradle,WITHOUT_CLASSIFICATION,//  ignore anonymous classes 
Gradle,WITHOUT_CLASSIFICATION,//  standalone test suite 
Gradle,WITHOUT_CLASSIFICATION,//  When build output area is not visible position the cursor at the end of the output area 
Gradle,WITHOUT_CLASSIFICATION,//  try to resolve a public static inner class' name 
Gradle,WITHOUT_CLASSIFICATION,//  fallback: take the name from the ProjectState 
Gradle,WITHOUT_CLASSIFICATION,//  Log the error but analyze the remaining interfaces. We could for example run into https://bugs.openjdk.java.net/browse/JDK-7032558 
Gradle,WITHOUT_CLASSIFICATION,//  Synthesize a start event 
Gradle,WITHOUT_CLASSIFICATION,// querying runtime for each invocation 
Gradle,WITHOUT_CLASSIFICATION,//  Eventually add blank line before section 
Gradle,WITHOUT_CLASSIFICATION,//  else assume we can write to anything that exists and is not a directory 
Gradle,WITHOUT_CLASSIFICATION,//  Called from generated code on failure to convert the supplied value for a property to the property type 
Gradle,WITHOUT_CLASSIFICATION,//  System.nanoTime() can go backwards under some circumstances.   http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6458294   This max() call ensures that we don't return negative durations. 
Gradle,WITHOUT_CLASSIFICATION,//  Some POMs depend on themselves don't add this dependency: Ivy doesn't allow this! 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:instant-execution reconsider type visibility 
Gradle,WITHOUT_CLASSIFICATION,/*     This can't be called just include because it has the same erasure as include(Iterable<String>).      */
Gradle,WITHOUT_CLASSIFICATION,//  setProperty(this name value) 
Gradle,WITHOUT_CLASSIFICATION,//  One of the Scala plugins is applied but ScalaRuntime extension is missing or the ScalaPlatform is undefined.   we can't create a Scala SDK without either one 
Gradle,WITHOUT_CLASSIFICATION,//  Re-wording to exception message to get rid of the fqcn it contains
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE getAsDynamicObject().setProperty(name value) 
Gradle,WITHOUT_CLASSIFICATION,//  attributes. 
Gradle,WITHOUT_CLASSIFICATION,// assertThat(call("{ bean -> bean.things([123]) }" bean) nullValue());  assertThat(bean.getThings().size() equalTo(3)); 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:LPTR This should be like @Finalize void generatedSourcesAreInputs(@Each PlayApplicationBinarySpecInternal binary) 
Gradle,WITHOUT_CLASSIFICATION,//  It is okay to have redundant generated 'is'-getters 
Gradle,WITHOUT_CLASSIFICATION,/*      * This inner class hides the fact that the actual de-duplication algorithm is stateful.      */
Gradle,WITHOUT_CLASSIFICATION,// we're spinning a thread to do work to avoid blocking the connection  This means that the Daemon potentially can do multiple things but we only allows a single build at a time 
Gradle,WITHOUT_CLASSIFICATION,//  look into the module node if there is a class with that name 
Gradle,WITHOUT_CLASSIFICATION,//  Type is more complicated need to check everything. 
Gradle,WITHOUT_CLASSIFICATION,//  Register at least the project buildDir as a directory to be deleted. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - use circular buffers to avoid copying   TODO - share a single initializer with MultiChannelQueue
Gradle,WITHOUT_CLASSIFICATION,//  Do nothing by default 
Gradle,WITHOUT_CLASSIFICATION,//  In Kotlin:     > Boolean accessor methods (where the name of the getter starts with is and the name of   > the setter starts with set) are represented as properties which have the same name as   > the getter method. Boolean properties are visible with a `is` prefix in Kotlin     https://kotlinlang.org/docs/reference/java-interop.html#getters-and-setters     This code assumes all configurable Boolean property getters follow the `is` prefix convention.   
Gradle,WITHOUT_CLASSIFICATION,/*      * Replaces the currently visited expression with the specified expression.      */
Gradle,WITHOUT_CLASSIFICATION,//  currently we only look in script code; could extend this to build script classes 
Gradle,WITHOUT_CLASSIFICATION,//  Ensure resource transport protocol authentication types and credentials are all compatible 
Gradle,WITHOUT_CLASSIFICATION,//     @Rule 
Gradle,WITHOUT_CLASSIFICATION,//  we replace '.' only in the className part   with '$' to find an inner class. The case that   the package is really a class is handled elsewhere 
Gradle,WITHOUT_CLASSIFICATION,//  Always abort execution for an execution failure (as opposed to a node failure) 
Gradle,WITHOUT_CLASSIFICATION,//  Box value 
Gradle,WITHOUT_CLASSIFICATION,//  Back to being a pending dependency   Clear remaining incoming edges as they must be all from constraints 
Gradle,WITHOUT_CLASSIFICATION,//  Notify upwards of currently existing descendant spec hierarchy 
Gradle,WITHOUT_CLASSIFICATION,//  For Maven we don't really know if an optional dependency is required for runtime or compile   so we use the safest: compile 
Gradle,WITHOUT_CLASSIFICATION,//  when FileVisitOption.FOLLOW_LINKS we only get here when link couldn't be followed 
Gradle,WITHOUT_CLASSIFICATION,//  modifies args in place 
Gradle,WITHOUT_CLASSIFICATION,//  construct project tasks 
Gradle,WITHOUT_CLASSIFICATION,//  Locked by the same process treat as if locked by another process 
Gradle,WITHOUT_CLASSIFICATION,//  end::jupiter-example[] 
Gradle,WITHOUT_CLASSIFICATION,//  We *absolutely* need to avoid polluting the project with ClassInfo from *our* classloader   So this class must NOT call any dynamic Groovy code. This means we must do what follows using   good old java reflection! 
Gradle,WITHOUT_CLASSIFICATION,//  Gcc on windows requires the path to be set 
Gradle,WITHOUT_CLASSIFICATION,//  jarName format: org.jacoco.agent-<version>.jar 
Gradle,WITHOUT_CLASSIFICATION,//  Continue 
Gradle,WITHOUT_CLASSIFICATION,//  Disable command line file for now because some custom assemblers   don't understand the same arguments as GCC. 
Gradle,WITHOUT_CLASSIFICATION,//  in particular this is about GStrings 
Gradle,WITHOUT_CLASSIFICATION,//  Should retain this on the metadata rather than calculate on each invocation 
Gradle,WITHOUT_CLASSIFICATION,//  Collect this early as the process' current directory can change during embedded test execution
Gradle,WITHOUT_CLASSIFICATION,// task properties:
Gradle,WITHOUT_CLASSIFICATION,// we can try sending something to the daemon and try out if he is really dead or use jps  if he's really dead we should deregister it if it is not already deregistered.  if the daemon is not dead we might continue receiving from him (and try to find the bug in messaging infrastructure) 
Gradle,WITHOUT_CLASSIFICATION,//  crash 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE getConvention() 
Gradle,WITHOUT_CLASSIFICATION,//  node and any subclass resolving will then take place elsewhere 
Gradle,WITHOUT_CLASSIFICATION,//  Set the context classloader to the bootstrap classloader to work around how JAXP locates implementation classes   This should ensure that the JAXP classes provided by the JVM are used rather than some other implementation 
Gradle,WITHOUT_CLASSIFICATION,//  Delete the coverage file before the task executes so we don't append to a leftover file from the last execution.   This makes the task cacheable even if multiple JVMs write to same destination file e.g. when executing tests in parallel.   The JaCoCo agent supports writing in parallel to the same file see https://github.com/jacoco/jacoco/pull/52. 
Gradle,WITHOUT_CLASSIFICATION,/*      * The manifest if this is a jar file and has a manifest null otherwise.      */
Gradle,WITHOUT_CLASSIFICATION,//  Either a resolvable expression or a non-empty unresolvable expression collect. Ignore includes with no value 
Gradle,WITHOUT_CLASSIFICATION,//  Deployments are considered outOfDate until initial execution with file watching 
Gradle,WITHOUT_CLASSIFICATION,//  When the component defines a precompiled header we need to check if the precompiled header is the _first_ header in the source file.   For source files that do not include the precompiled header as the first file we emit a warning   For source files that do include the precompiled header we mark them as a "source file for pch"   The native compiler then adds the appropriate compiler arguments for those source files that can use PCH 
Gradle,WITHOUT_CLASSIFICATION,//  Object propertyMissing(String name) 
Gradle,WITHOUT_CLASSIFICATION,//  Body is an expression with one or more arguments 
Gradle,WITHOUT_CLASSIFICATION,//  Always publish process info for multi-request workers 
Gradle,WITHOUT_CLASSIFICATION,//  the platform doesn't exist so we're building a lenient one 
Gradle,WITHOUT_CLASSIFICATION,//  Don't bother resolving local components asynchronously 
Gradle,WITHOUT_CLASSIFICATION,//  A report to be generated ignore 
Gradle,WITHOUT_CLASSIFICATION,//  Authoritative result means don't do remote search 
Gradle,WITHOUT_CLASSIFICATION,//  no dynamic constraints defined so dynamicId equals revId 
Gradle,WITHOUT_CLASSIFICATION,//  Write rich content to stdout and plain content to stderr 
Gradle,WITHOUT_CLASSIFICATION,//  Build may have failed before getting to projectsLoaded 
Gradle,WITHOUT_CLASSIFICATION,//  Create test lifecycle task 
Gradle,WITHOUT_CLASSIFICATION,//  Ensure binding validation has been done. This should happen elsewhere 
Gradle,WITHOUT_CLASSIFICATION,//  invoked by Groovy 
Gradle,WITHOUT_CLASSIFICATION,//  IDEA doesn't like the result of file.toURI() so use the absolute path instead 
Gradle,WITHOUT_CLASSIFICATION,//  Version isn't used except by a human looking at the output of jps. 
Gradle,WITHOUT_CLASSIFICATION,//  No tool chains can build for this platform. Assemble a description of why 
Gradle,WITHOUT_CLASSIFICATION,//  We need to use the deprecated constructor as it is compatible with certain previous versions of the Zinc compiler 
Gradle,WITHOUT_CLASSIFICATION,//  Need to compile all secondary routes ("Foo.routes") before primary ("routes") 
Gradle,WITHOUT_CLASSIFICATION,// handler.registerResolver(new UpgradeCapabilityResolver()); 
Gradle,WITHOUT_CLASSIFICATION,//  we do not do our name mangling to find an inner class   if the type is a ConstructedClassWithPackage because in this case we   are resolving the name at a different place already 
Gradle,WITHOUT_CLASSIFICATION,/*      * <p>Allows the container to be configured creating missing objects as they are referenced.</p>     *     * <p>TODO: example usage</p>     *     * @param configureClosure The closure to configure this container with     * @return This.      */
Gradle,WITHOUT_CLASSIFICATION,//  Ends up with: 1 2 3 -> 4 <- 5 6 
Gradle,WITHOUT_CLASSIFICATION,//  This agent should be loaded via the custom system ClassLoader 
Gradle,WITHOUT_CLASSIFICATION,//  Update the cache entry in the index: this resets the age of the cached entry to zero 
Gradle,WITHOUT_CLASSIFICATION,//  Should be excluded 
Gradle,WITHOUT_CLASSIFICATION,//  Still 'updated' with reason when version remains the same. 
Gradle,WITHOUT_CLASSIFICATION,//  check for duplicate entries in java and resources 
Gradle,WITHOUT_CLASSIFICATION,//  Use Throwable to record the location where a suffix was registered to allow diagnostics when a collision is found   This may have performance implications however the assumption is that class generators are global scoped objects that are created once and in very small numbers 
Gradle,WITHOUT_CLASSIFICATION,//  Strategy mutations will not require a re-resolve 
Gradle,WITHOUT_CLASSIFICATION,//  Maven local 
Gradle,WITHOUT_CLASSIFICATION,//  Adds a void $propName(Closure<?> cl) method that delegates to model state 
Gradle,WITHOUT_CLASSIFICATION,//  Print something to verify it is after task execution 
Gradle,WITHOUT_CLASSIFICATION,//  This is used only to retain strong references to the values 
Gradle,WITHOUT_CLASSIFICATION,// windows needs an additional backslash in jar urls 
Gradle,WITHOUT_CLASSIFICATION,//  Add a line before the first question that has been asked of the user   This makes the assumption that all questions happen together which is ok for now   It would be better to allow this handler to ask the output renderers to show a blank line before the prompt if not already present 
Gradle,WITHOUT_CLASSIFICATION,//  should not happen
Gradle,WITHOUT_CLASSIFICATION,//  Versions before 3.2 would throw away the cause. There was also a regression in 4.0.x 
Gradle,WITHOUT_CLASSIFICATION,//  This cannot be CopyOnWriteArrayList because we need to iterate it in reverse   which requires atomically getting an iterator and the size.   Moreover we iterate this list far more often that we mutate   making a (albeit home grown) copy-on-write strategy more appealing. 
Gradle,WITHOUT_CLASSIFICATION,//  No more unused label? Try to resize. 
Gradle,WITHOUT_CLASSIFICATION,//  Some POMs depend on themselves through their parent POM don't add this dependency   since Ivy doesn't allow this!   Example: http://repo2.maven.org/maven2/com/atomikos/atomikos-util/3.6.4/atomikos-util-3.6.4.pom 
Gradle,WITHOUT_CLASSIFICATION,// Assuming the message has correct format. Not bullet proof but seems to work ok for now. 
Gradle,WITHOUT_CLASSIFICATION,//  A nested instance 
Gradle,WITHOUT_CLASSIFICATION,//  Use the origin file when it can satisfy the basename requirements 
Gradle,WITHOUT_CLASSIFICATION,//  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-Keyword 
Gradle,WITHOUT_CLASSIFICATION,//  we must not use interrupt() because it would automatically   close the connection (sending data from an interrupted thread   automatically closes the connection) 
Gradle,WITHOUT_CLASSIFICATION,//  Eagerly calculate the file if this will be used as a dependency of some task   This is to avoid having to lock the project when a consuming task in another project runs 
Gradle,WITHOUT_CLASSIFICATION,//  legacy mode for internal APIs 
Gradle,WITHOUT_CLASSIFICATION,//  Clear previous traversal state if any 
Gradle,WITHOUT_CLASSIFICATION,//  Notify threads that may be waiting on this task to complete.   This is required because although all builds may share the same coordination service the 'something may have changed' event that is fired when a task in this build completes   happens before the state tracked here is updated and so the worker threads in the consuming build may think the task has not completed and go back to sleep waiting for some   other event to happen which may not. Signalling again here means that all worker threads in all builds will be woken up which can be expensive.   It would be much better to avoid duplicating the task state here and instead have the task executors communicate directly with each other possibly via some abstraction   that represents the task outcome
Gradle,WITHOUT_CLASSIFICATION,// we don't want to support "--flag true" syntax 
Gradle,WITHOUT_CLASSIFICATION,//  Execute the health check that should send out a DaemonExpiration event   if the daemon is unhealthy 
Gradle,WITHOUT_CLASSIFICATION,//  this is an artifact asked for a particular dependency 
Gradle,WITHOUT_CLASSIFICATION,//  origins have to be stored until the end of the build 
Gradle,WITHOUT_CLASSIFICATION,//  Parking space for the write cursor 
Gradle,WITHOUT_CLASSIFICATION,//  Caller must be holding lock 
Gradle,WITHOUT_CLASSIFICATION,//  Don't close 
Gradle,WITHOUT_CLASSIFICATION,//  skipped versions were not used in a release 
Gradle,WITHOUT_CLASSIFICATION,//  Fallback to ClassLoader's lookup 
Gradle,WITHOUT_CLASSIFICATION,// argument quoting:   - " must be encoded as \"   - % must be encoded as %%   - pathological case: \" must be encoded as \\\" but other than that \ MUST NOT be quoted   - other characters (including ') will not be quoted   - use a state machine rather than regexps 
Gradle,WITHOUT_CLASSIFICATION,//  test if vanilla name is current class name 
Gradle,WITHOUT_CLASSIFICATION,//  revisit all dependencies and possibly change the classpath order! 
Gradle,WITHOUT_CLASSIFICATION,//  Any node that the preceding task must run after is also a preceding node. 
Gradle,WITHOUT_CLASSIFICATION,//  return var 
Gradle,WITHOUT_CLASSIFICATION,//  Never up to date 
Gradle,WITHOUT_CLASSIFICATION,//  line gap between the text area and the status area. 
Gradle,WITHOUT_CLASSIFICATION,//  expand the thread pool until we hit max workers 
Gradle,WITHOUT_CLASSIFICATION,//  otherwise keep lock open 
Gradle,WITHOUT_CLASSIFICATION,//  -1 because of Z_ERROR 
Gradle,WITHOUT_CLASSIFICATION,//  Work backwards from highest version return the first candidate with qualified version and release status or candidate with unqualified version 
Gradle,WITHOUT_CLASSIFICATION,//  externals are mapped to linked resources so we just need a name of the resource without full path   non unique folder names are naively deduped by adding parent filename as a prefix till unique   since this seems like a rare edge case this simple approach should be enough 
Gradle,WITHOUT_CLASSIFICATION,//  Use the ABI as the hash 
Gradle,WITHOUT_CLASSIFICATION,//  need to defer loading of Zinc/sbt/Scala classes until we are   running in the compiler daemon and have them on the class path 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE super.<propName>(v) 
Gradle,WITHOUT_CLASSIFICATION,//  At this point we need the component metadata because it may declare attributes that are needed for matching   Component metadata may not necessarily hit the network if there is a custom component metadata supplier 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE private boolean <flag-name>; 
Gradle,WITHOUT_CLASSIFICATION,//  Expire when Daemon Registry becomes unreachable for some reason 
Gradle,WITHOUT_CLASSIFICATION,//  <tr>     <td><link linkend="$id"><literal>$name</literal></link</td>     <td>$description</td>   </tr> 
Gradle,WITHOUT_CLASSIFICATION,//  the new value is a better fit than the old one 
Gradle,WITHOUT_CLASSIFICATION,//  A single leaf node as child and total text is not too long collapse 
Gradle,WITHOUT_CLASSIFICATION,//  Define a classes variant to use for compilation 
Gradle,WITHOUT_CLASSIFICATION,//  Edge states are deduplicated this is a performance optimization 
Gradle,WITHOUT_CLASSIFICATION,//  Only remove edges that come from a different node than the source of the dependency going back to pending   The edges from the "From" will be removed first 
Gradle,WITHOUT_CLASSIFICATION,//  Coercion is an expensive process so we cache the result of coercing to other attribute types.   We can afford using a hashmap here because attributes are interned and their lifetime doesn't   exceed a build 
Gradle,WITHOUT_CLASSIFICATION,//  Detach the process from the parent terminal/console 
Gradle,WITHOUT_CLASSIFICATION,//  This is the first time we've seen the module so register with conflict resolver. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Whenever we allow _user_ services to be injected this would have to know   from which classloader we need to load the service 
Gradle,WITHOUT_CLASSIFICATION,//  Source file has not been compiled before or its include file graph has changed in some way   Calculate the include file graph for the source file and mark for recompilation 
Gradle,WITHOUT_CLASSIFICATION,//  Gradle core plus worker implementation classes 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Does a static library really have any runtime elements?
Gradle,WITHOUT_CLASSIFICATION,//  todo CC: check that it ok to do this if configurations have attributes 
Gradle,WITHOUT_CLASSIFICATION,//  Prefer direct transformation over indirect transformation 
Gradle,WITHOUT_CLASSIFICATION,//  Classes or resources requested some Jars found let's prefer these 
Gradle,WITHOUT_CLASSIFICATION,//  Check if type is Factory<? extends ElementType> 
Gradle,WITHOUT_CLASSIFICATION,//  The default name for a model is the name of the Java interface 
Gradle,WITHOUT_CLASSIFICATION,//  Compile the javascript file with the options we've created 
Gradle,WITHOUT_CLASSIFICATION,//  We should never attempt to join strings so if you see this there's a problem 
Gradle,WITHOUT_CLASSIFICATION,//  Create a new group for tasks or configure project 
Gradle,WITHOUT_CLASSIFICATION,//  If we've never resolved must resolve 
Gradle,WITHOUT_CLASSIFICATION,//  On Linux we assume swift is installed into /opt/swift 
Gradle,WITHOUT_CLASSIFICATION,//  This already throws when creating `apiElements` so be eager to have a clear error message 
Gradle,WITHOUT_CLASSIFICATION,//  2 or more lines that look like stack trace elements 
Gradle,WITHOUT_CLASSIFICATION,// for example: ':a SKIPPED' or ':foo:bar:baz UP-TO-DATE' but not ':a' 
Gradle,WITHOUT_CLASSIFICATION,//  Maintain a hierarchy of all progress operations in progress — heads up: this is a *forest* not just 1 tree 
Gradle,WITHOUT_CLASSIFICATION,//  Already have a hard dependency this optional dependency is not pending. 
Gradle,WITHOUT_CLASSIFICATION,//  If the client has not set a location for SOURCE_OUTPUT javac outputs those files to the CLASS_OUTPUT directory so clean that instead. 
Gradle,WITHOUT_CLASSIFICATION,//  Literal followed by *: matches #3 above 
Gradle,WITHOUT_CLASSIFICATION,//  This may be thrown by the caller of this method at a later time 
Gradle,WITHOUT_CLASSIFICATION,//  Exclude rules 
Gradle,WITHOUT_CLASSIFICATION,// The maximum number of times to retry a request when S3 responds with a http 5xx error 
Gradle,WITHOUT_CLASSIFICATION,//  most outer class is now element 0 
Gradle,WITHOUT_CLASSIFICATION,//  3.x - 4.6 works on Java 7 - 8 
Gradle,WITHOUT_CLASSIFICATION,//  First need to populate the default variant version mapping strategy with the default values   provided by plugins 
Gradle,WITHOUT_CLASSIFICATION,//  Any available tool chain 
Gradle,WITHOUT_CLASSIFICATION,//  Lock is held while creating ClassLoader - nothing else can happen while this is running 
Gradle,WITHOUT_CLASSIFICATION,//  Treat all models returned to the action as part of the same object graph 
Gradle,WITHOUT_CLASSIFICATION,//  We don't use Attribute.INTENSITY_BOLD_OFF as it's rarely supported like Windows 10 
Gradle,WITHOUT_CLASSIFICATION,//  The wrapper uses the .ok file to identify distributions that are safe to use.   If we delete anything from the distribution before deleting the OK file the   wrapper will attempt to use the distribution as-is and fail in strange and unrecoverable   ways. 
Gradle,WITHOUT_CLASSIFICATION,//  may be we have C[k1:v1 k2:v2] -> should become (C)([k1:v1 k2:v2]) 
Gradle,WITHOUT_CLASSIFICATION,//  A new module. Check for conflict with capabilities and module replacements. 
Gradle,WITHOUT_CLASSIFICATION,//  attributes 
Gradle,WITHOUT_CLASSIFICATION,//  return silently when directory doesn't exist 
Gradle,WITHOUT_CLASSIFICATION,//  so "leaks" into the public API of this component 
Gradle,WITHOUT_CLASSIFICATION,//  this.instantiator = AsmBackedClassGenerator.getInstantiatorForNext() 
Gradle,WITHOUT_CLASSIFICATION,//  Log configuration 
Gradle,WITHOUT_CLASSIFICATION,//  Isolate parameters in this thread prior to starting work in a separate thread 
Gradle,WITHOUT_CLASSIFICATION,//  not holding the cache lock can stop now 
Gradle,WITHOUT_CLASSIFICATION,//  These are used to discard references to tasks so they can be garbage collected 
Gradle,WITHOUT_CLASSIFICATION,//  Generate inputReferences() method 
Gradle,WITHOUT_CLASSIFICATION,//  Special handling for artifacts declared for optional dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  the following only needs to be done serially to preserve ordering of dependencies in the graph: we have visited the edges   but we still didn't add the result to the queue. Doing it from resolve threads would result in non-reproducible graphs where   edges could be added in different order. To avoid this the addition of new edges is done serially. 
Gradle,WITHOUT_CLASSIFICATION,//  Only false if no declared outputs AND no Task.upToDateWhen spec. We force to true for incremental tasks. 
Gradle,WITHOUT_CLASSIFICATION,//  a local component cannot have attributes (for now). However variants of the component   itself may. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - put this somewhere else 
Gradle,WITHOUT_CLASSIFICATION,// Making the daemon infrastructure log with DEBUG. This is only for the infrastructure! 
Gradle,WITHOUT_CLASSIFICATION,//  Tasks are ignored by providers if launchables is not null 
Gradle,WITHOUT_CLASSIFICATION,// replace wildcard '*' with '.*' 
Gradle,WITHOUT_CLASSIFICATION,//  now do our processing using the antlr preprocessor results whenever possible. 
Gradle,WITHOUT_CLASSIFICATION,//  Note: beforeEvaluate and afterEvaluate ops do not throw instead mark state as failed 
Gradle,WITHOUT_CLASSIFICATION,//  Optimizes comparisons by making sure that the 2 elements of   the pair are "sorted" by hashcode ascending 
Gradle,WITHOUT_CLASSIFICATION,//  Return null to remove the statement 
Gradle,WITHOUT_CLASSIFICATION,//  Reached the end of input worker has crashed or exited 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore this progress operation and map any reference to it to its parent (or whatever its parent is mapped to 
Gradle,WITHOUT_CLASSIFICATION,//  This code path will always be a no-op following the changes in DefaultImmutableAttributesFactory   However this code will have to remain forever while the other one should be removed at some point (Gradle 7.0?) 
Gradle,WITHOUT_CLASSIFICATION,//  Protects the following state 
Gradle,WITHOUT_CLASSIFICATION,//  Still starting up 
Gradle,WITHOUT_CLASSIFICATION,//  Show the direct cause of the last contextual cause only 
Gradle,WITHOUT_CLASSIFICATION,//  populates descriptors last descriptor in wins for a given architecture 
Gradle,WITHOUT_CLASSIFICATION,//  We have a cached version but it might be out of date so we tell the upstreams to revalidate too 
Gradle,WITHOUT_CLASSIFICATION,//  1.1 1.2 
Gradle,WITHOUT_CLASSIFICATION,//  determine the package name :( 
Gradle,WITHOUT_CLASSIFICATION,//  Force the user home services to be stopped first the dependencies between the user home services and the global services are not preserved currently 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: do not reference mutable state 
Gradle,WITHOUT_CLASSIFICATION,//  At this stage 'strictly' implies 'requires'. 
Gradle,WITHOUT_CLASSIFICATION,//  Invert the map of (file extension -> UTI) pairs to   (UTI -> [file extension 1 ...]) pairs. 
Gradle,WITHOUT_CLASSIFICATION,//  A primitive type 
Gradle,WITHOUT_CLASSIFICATION,//  We could do this in Java which would be easier. However Twirl only has a Java interface in version 1.3+   If we used Java here then Gradle's TwirlCompiler would need to support both ScalaMethod for Twirl 1.0-1.2 and Java's Method for Twirl 1.3+   Method definition: https://github.com/playframework/twirl/blob/1.3.12/compiler/src/main/scala/play/twirl/compiler/TwirlCompiler.scala#L167 
Gradle,WITHOUT_CLASSIFICATION,//  clean up comments and new lines 
Gradle,WITHOUT_CLASSIFICATION,//     private ClassLoader methodParamClassLoader; 
Gradle,WITHOUT_CLASSIFICATION,//  Managed internal views are allowed not to be implemented by the default implementation 
Gradle,WITHOUT_CLASSIFICATION,//  equality has been tested before so we know groups are different 
Gradle,WITHOUT_CLASSIFICATION,//  Checking if there is a type variable to resolve since resolving the type variable via `TypeToken` is quite expensive. 
Gradle,WITHOUT_CLASSIFICATION,//  if found only one project dependency - return it otherwise call the next resolver 
Gradle,WITHOUT_CLASSIFICATION,//  invoke the typed setter 
Gradle,WITHOUT_CLASSIFICATION,//  All requests completed write response 
Gradle,WITHOUT_CLASSIFICATION,//  Don't render empty 'requested' reason 
Gradle,WITHOUT_CLASSIFICATION,//  guessing right side part of a mapping 
Gradle,WITHOUT_CLASSIFICATION,//  Assume an infrastructure problem 
Gradle,WITHOUT_CLASSIFICATION,//  this.metaClass = <value> 
Gradle,WITHOUT_CLASSIFICATION,//  Remove Kotlin DSL and Kotlin jars 
Gradle,WITHOUT_CLASSIFICATION,//  maybe it matched through coercion 
Gradle,WITHOUT_CLASSIFICATION,//  Start the download in another thread and wait for the result 
Gradle,WITHOUT_CLASSIFICATION,//  '\\\r\n' discarded from stream 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure file order is always consistent 
Gradle,WITHOUT_CLASSIFICATION,//  If previous resolve failed no point in re-resolving 
Gradle,WITHOUT_CLASSIFICATION,//  If we are pretending that we don't have a sourcepath the compiler will   look on the classpath for sources. Since we don't want to bring in any   sources implicitly from the classpath we have to ignore source files   found on the classpath. 
Gradle,WITHOUT_CLASSIFICATION,//  Dependencies de-duplication 
Gradle,WITHOUT_CLASSIFICATION,//  we have for example a class name A are in class X   and there is a nested class A$X. we want to be able   to access that class directly so A becomes a valid   name in X. 
Gradle,WITHOUT_CLASSIFICATION,//  we're writing 2 copies of the resource: one relocated the other not in order to support `getResource/getResourceAsStream` with   both absolute and relative paths 
Gradle,WITHOUT_CLASSIFICATION,//  Cannot visit local artifacts until transform has been executed 
Gradle,WITHOUT_CLASSIFICATION,//  Note the order in which the build phase are added is important 
Gradle,WITHOUT_CLASSIFICATION,//  the "status" attribute is mandatory so if it's missing we need to add it 
Gradle,WITHOUT_CLASSIFICATION,//  Stop cancelling before sending end-of-input 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE private <type> <property-field-name>; 
Gradle,WITHOUT_CLASSIFICATION,//  Handler to detect Gradle metadata redirects 
Gradle,WITHOUT_CLASSIFICATION,//  Task is not required - skip it 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: we use non-blocking IO as there is no reliable way when using blocking IO to shutdown reads while   keeping writes active. For example Socket.shutdownInput() does not work on Windows. 
Gradle,WITHOUT_CLASSIFICATION,//  If they change continuity of the IDs will be broken. 
Gradle,WITHOUT_CLASSIFICATION,//  Zero or more * characters followed by at least one !* 
Gradle,WITHOUT_CLASSIFICATION,//  We can only have attributes if we have the factory then need to copy 
Gradle,WITHOUT_CLASSIFICATION,//  We don't care about producing nodes that haven't finished yet 
Gradle,WITHOUT_CLASSIFICATION,//  The eclipse workspace contains projects from root and included builds. Check projects from all builds   so that models built for included builds do not consider projects from parent builds as external. 
Gradle,WITHOUT_CLASSIFICATION,//  Broken version 
Gradle,WITHOUT_CLASSIFICATION,// no mode infos available - fall back to defaults 
Gradle,WITHOUT_CLASSIFICATION,//  start of tag marker 
Gradle,WITHOUT_CLASSIFICATION,//  add groovy-ant to bring in Groovydoc for Groovy 2.0+ 
Gradle,WITHOUT_CLASSIFICATION,//  No hard dependency queue up pending dependency in case we see a hard dependency later. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Assumes there's a single 'main' Swift component 
Gradle,WITHOUT_CLASSIFICATION,//  the ansi escapes. 
Gradle,WITHOUT_CLASSIFICATION,//  It is possible that multiple threads will execute this branch concurrently when the type is missing. However the contract for `get()` below will ensure that   only one thread will actually generate the implementation class
Gradle,WITHOUT_CLASSIFICATION,//  Index of the artifact set == the id of the artifact set 
Gradle,WITHOUT_CLASSIFICATION,//  Version not found at this base path 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: Windows uses Path but allows asking for PATH and PATH         is set within builder object for some things such         as CommandLineIntegrationTest try PATH first and         then revert to default of Path if null 
Gradle,WITHOUT_CLASSIFICATION,//  Use Java serialization for everything else 
Gradle,WITHOUT_CLASSIFICATION,//  Save the processed metadata for next time. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:LPTR Should be @Nested with @Console inside 
Gradle,WITHOUT_CLASSIFICATION,//  We need to add missing files as source roots since the package name for deleted files provided by IncrementalTaskInputs also need to be determined. 
Gradle,WITHOUT_CLASSIFICATION,//  ignore classes in method bodies 
Gradle,WITHOUT_CLASSIFICATION,//  There are only enough entries to make up 1 block so move the entries of the right sibling into   this block and discard this block. Might also need to merge the parent 
Gradle,WITHOUT_CLASSIFICATION,//                 resolution.setLibraryBinary(null); 
Gradle,WITHOUT_CLASSIFICATION,//  A path either "" or <> delimited 
Gradle,WITHOUT_CLASSIFICATION,//  If we get here we have no idea how much memory the worker is using 
Gradle,WITHOUT_CLASSIFICATION,//  Work around some bugs in Input.skip() 
Gradle,WITHOUT_CLASSIFICATION,//  the ansi escapes for piping it into ansi color aware commands (e.g. less -r) 
Gradle,WITHOUT_CLASSIFICATION,//  remove build listener 
Gradle,WITHOUT_CLASSIFICATION,//  core javadoc options 
Gradle,WITHOUT_CLASSIFICATION,//  Need to make sure we remove duplicates so we can't just compose iterators from source collections 
Gradle,WITHOUT_CLASSIFICATION,//  The provider is of compatible type and the element was either already realized or we are removing a provider to the element 
Gradle,WITHOUT_CLASSIFICATION,//  And now let's make sure we do not have another version of that virtual platform missing its metadata 
Gradle,WITHOUT_CLASSIFICATION,//  Current Model 
Gradle,WITHOUT_CLASSIFICATION,//  we add a package if there is none yet and the module has one. But we   do not add that if the type is a ConstructedClassWithPackage. The code in ConstructedClassWithPackage   hasPackageName() will return true if ConstructedClassWithPackage#className has no dots.   but since the prefix may have them and the code there does ignore that 
Gradle,WITHOUT_CLASSIFICATION,//  PatternFilterable overrides to broaden return type 
Gradle,WITHOUT_CLASSIFICATION,//    Generate factory class   
Gradle,WITHOUT_CLASSIFICATION,//  java.lang.Object found which is not a test class 
Gradle,WITHOUT_CLASSIFICATION,//  If there are 'pending' dependencies that share a target with any of these outgoing edges   then reset the state of the node that owns those dependencies.   This way all edges of the node will be re-processed. 
Gradle,WITHOUT_CLASSIFICATION,//  the regular typed setter 
Gradle,WITHOUT_CLASSIFICATION,//  Inject 
Gradle,WITHOUT_CLASSIFICATION,//  Axe everything after the expected exception 
Gradle,WITHOUT_CLASSIFICATION,//  Use a Class-Path manifest JAR to circumvent too long command line issues on Windows (cap 8191)   Classpath is huge here because it's the test runtime classpath 
Gradle,WITHOUT_CLASSIFICATION,//  API first 
Gradle,WITHOUT_CLASSIFICATION,//  stderr of Gradle is redirected to stdout of xcodebuild tool. To work around we consider xcodebuild stdout and stderr as   the error output only if xcodebuild failed most likely due to Gradle. 
Gradle,WITHOUT_CLASSIFICATION,//  Treat all errors as warnings for backwards compatibility 
Gradle,WITHOUT_CLASSIFICATION,//  tag::host-and-path[] 
Gradle,WITHOUT_CLASSIFICATION,//  Just the minimal stuff necessary for the worker infrastructure 
Gradle,WITHOUT_CLASSIFICATION,//  unclear what the best thing to do here would be 
Gradle,WITHOUT_CLASSIFICATION,//  TODO wolfs: Move these identifiers to the actual strategy classes when they live in :snapshots 
Gradle,WITHOUT_CLASSIFICATION,//  May (or may not) be mutable - unpack the state 
Gradle,WITHOUT_CLASSIFICATION,//  Host: x86   Target: ia64 
Gradle,WITHOUT_CLASSIFICATION,//  Previously traversed but new constraints no longer pending so partial traversing 
Gradle,WITHOUT_CLASSIFICATION,//  ...  end::sample[] 
Gradle,WITHOUT_CLASSIFICATION,//  MODULE_WORKING_DIR doesn't seem to work correctly and MODULE_DIR seems to be in `.idea/modules/<path-to-subproject>`   See https://youtrack.jetbrains.com/issue/IDEA-194910 
Gradle,WITHOUT_CLASSIFICATION,//  Note: order is crucial here. Nodes are traversed through these states in the order defined below 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore 
Gradle,WITHOUT_CLASSIFICATION,//  verbose output is written to stderr for some reason 
Gradle,WITHOUT_CLASSIFICATION,//  V 
Gradle,WITHOUT_CLASSIFICATION,//  These errors happen if the JNI lib is not available for your platform.   But since we are on ANSI friendly platform assume the user is on the console. 
Gradle,WITHOUT_CLASSIFICATION,//  in order to avoid tracking the set of enqueued nodes 
Gradle,WITHOUT_CLASSIFICATION,//  we assume generated file collections have no build dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  Always need the files as we need to run the transform in order to calculate the output artifacts. 
Gradle,WITHOUT_CLASSIFICATION,//  For each candidate node add it to the preceding nodes. 
Gradle,WITHOUT_CLASSIFICATION,//  Add tasks to build various kinds of components 
Gradle,WITHOUT_CLASSIFICATION,//  Don't need these things they're provided by the runtime 
Gradle,WITHOUT_CLASSIFICATION,//  Loop over all listed versions sorted by LATEST first 
Gradle,WITHOUT_CLASSIFICATION,//  is method that returns Boolean is not a getter according to JavaBeans but include it for compatibility with Groovy 
Gradle,WITHOUT_CLASSIFICATION,//  The following code was patched according to the following PR: https://github.com/fusesource/jansi/pull/70 
Gradle,WITHOUT_CLASSIFICATION,//  if we reach this point it means the node selection was restarted but   effectively it has the same incoming edges as before so we can return   the result we computed last time 
Gradle,WITHOUT_CLASSIFICATION,//  Create test suite test task 
Gradle,WITHOUT_CLASSIFICATION,//  Protects the following fields 
Gradle,WITHOUT_CLASSIFICATION,//  This happens when the connection between the worker and the build daemon is closed for some reason   possibly because the build daemon died unexpectedly. 
Gradle,WITHOUT_CLASSIFICATION,//  not a valid signature
Gradle,WITHOUT_CLASSIFICATION,// remember if module id was annotated 
Gradle,WITHOUT_CLASSIFICATION,//  property requires >= JAXP 1.5 / Java8 
Gradle,WITHOUT_CLASSIFICATION,//  Capture non-file input changes 
Gradle,WITHOUT_CLASSIFICATION,//  Add the items in this page of results to the list we'll return. 
Gradle,WITHOUT_CLASSIFICATION,//  This will cause problems on Windows if the path to the Gradle executable that is used has a space in it (e.g. the user's dir is c:/Users/Luke Daley/)   This is fundamentally a windows issue: You can't have arguments with spaces in them if the path to the batch script has a space   We could work around this by setting -Dgradle.user.home but GRADLE-1730 (which affects 1.0-milestone-3) means that that   is problematic as well. For now we just don't support running the int tests from a path with a space in it on Windows.   When we stop testing against M3 we should change to use the system property. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - should iterate over each candidate until we successfully copy into the cache
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Replace with native test task
Gradle,WITHOUT_CLASSIFICATION,//  Must close each input first 
Gradle,WITHOUT_CLASSIFICATION,//  64 bit   32 bit 
Gradle,WITHOUT_CLASSIFICATION,//  prevent file system change events when generated content 
Gradle,WITHOUT_CLASSIFICATION,//  there are no left candidate do not bother checking other attributes 
Gradle,WITHOUT_CLASSIFICATION,// partial match 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:lptr this should be added only if the scan plugin is applied but SnapshotTaskInputsOperationIntegrationTest     expects it to be added also when the build cache is enabled (but not the scan plugin)
Gradle,WITHOUT_CLASSIFICATION,//  Based on https://github.com/playframework/twirl/blob/1.3.13/compiler/src/main/scala/play/twirl/compiler/TwirlCompiler.scala#L156     
Gradle,WITHOUT_CLASSIFICATION,//  no-op 
Gradle,WITHOUT_CLASSIFICATION,//  path(Type) 
Gradle,WITHOUT_CLASSIFICATION,//  Find the status line for the previous record of this task 
Gradle,WITHOUT_CLASSIFICATION,//  Inherit implementation dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  Register the domain object 
Gradle,WITHOUT_CLASSIFICATION,//  Temporary Classpath implementation for new jvm component model 
Gradle,WITHOUT_CLASSIFICATION,//  Special case "build successful" when there is no result object to send 
Gradle,WITHOUT_CLASSIFICATION,/*              * NOTE! The JDK code to create SSLContexts relies on the values of the given system properties.             *             * To prevent concurrent changes to system properties from interfering with this we need to synchronize access/modifications             * to system properties.  This is best effort since we can't prevent user code from modifying system properties willy-nilly.             *             * The most critical system property is java.home. Changing this property while trying to create a SSLContext can cause many strange             * problems:             * https://github.com/gradle/gradle/issues/8830             * https://github.com/gradle/gradle/issues/8039             * https://github.com/gradle/gradle/issues/7842             * https://github.com/gradle/gradle/issues/2588              */
Gradle,WITHOUT_CLASSIFICATION,//  append full stack trace 
Gradle,WITHOUT_CLASSIFICATION,//  tag::custom-task-class[] 
Gradle,WITHOUT_CLASSIFICATION,//  Use the file from the cache when it does not 
Gradle,WITHOUT_CLASSIFICATION,//  see if the grammar if out-of-date by way of its super-grammar(s) as gleaned from parsing the grammar file 
Gradle,WITHOUT_CLASSIFICATION,//  This is a performance optimization. Most modules do not declare capabilities. So instead of systematically registering   an implicit capability for each module that we see we only consider modules which _declare_ capabilities. If they do   then we try to find a module which provides the same capability. It that module has been found then we register it.   Otherwise we have nothing to do. This avoids most of registrations.
Gradle,WITHOUT_CLASSIFICATION,//  Use a dummy security manager which hacks the application classpath into the system ClassLoader 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE this.services() 
Gradle,WITHOUT_CLASSIFICATION,//  A reference to this class 
Gradle,WITHOUT_CLASSIFICATION,//  checks if it's a derived platform 
Gradle,WITHOUT_CLASSIFICATION,//  Discard actions after execution 
Gradle,WITHOUT_CLASSIFICATION,//  Set explicit build file if required 
Gradle,WITHOUT_CLASSIFICATION,//  Gradle's log levels correspond to slf4j log levels   as implemented in OutputEventListenerBackedLogger.   These levels are mapped to java.util.logging.Levels   corresponding to the mapping implemented in the   SLF4JBridgeHandler which is installed by this logging system. 
Gradle,WITHOUT_CLASSIFICATION,//  Not the first g++ in the path needs the path variable updated 
Gradle,WITHOUT_CLASSIFICATION,//  Ivy can resolve files from multiple hosts so we need to look at all   of the possible URLs used by the Ivy resolver to identify all of the repositories 
Gradle,WITHOUT_CLASSIFICATION,//  When age == 0 verified since the start of this build assume the meta-data hasn't changed 
Gradle,WITHOUT_CLASSIFICATION,//  Keep this expression 
Gradle,WITHOUT_CLASSIFICATION,//  retrieve content from URL and write to output 
Gradle,WITHOUT_CLASSIFICATION,//  Default Eclipse JRE paths:   https://github.com/eclipse/eclipse.jdt.debug/blob/master/org.eclipse.jdt.launching/plugin.xml#L241-L303 
Gradle,WITHOUT_CLASSIFICATION,//  Callable<? extends String> 
Gradle,WITHOUT_CLASSIFICATION,//  Consider variant aware components with no buildable binaries as non-buildables 
Gradle,WITHOUT_CLASSIFICATION,// the default 
Gradle,WITHOUT_CLASSIFICATION,//  Only use this for top level project scripts 
Gradle,WITHOUT_CLASSIFICATION,//  Any available Visual Studio >= 2019 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Make plan executor respond to changes in parallelism configuration 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Change the default location for these reports to follow the convention defined in #configureReportOutputDirectory
Gradle,WITHOUT_CLASSIFICATION,//  do nothing 
Gradle,WITHOUT_CLASSIFICATION,//  An application ClassLoader: Inspect class to collect up the classpath for it 
Gradle,WITHOUT_CLASSIFICATION,//  do not include module-info files as they would represent a bundled dependency module instead of Gradle itself 
Gradle,WITHOUT_CLASSIFICATION,// We might leave that in if we decide it's a good idea for an extra safety net. 
Gradle,WITHOUT_CLASSIFICATION,//  User scope is expected to be persisted in the global cache since 4.0. 
Gradle,WITHOUT_CLASSIFICATION,// The matching is very simple at the moment but it should solve majority of cases.  It operates using String#contains and it tests either requested or selected module.
Gradle,WITHOUT_CLASSIFICATION,//  Move default values into body of closure so they can use <inputs-lvar> 
Gradle,WITHOUT_CLASSIFICATION,//  Check that given daemon still exists in registry - a daemon registry could be removed and recreated between checks 
Gradle,WITHOUT_CLASSIFICATION,//  could make resolveDependencies() cache its result for later use by GenerateIdeaModule 
Gradle,WITHOUT_CLASSIFICATION,//  need to validate that the selected configuration still matches the consumer attributes   Note that this validation only occurs when `dependencyConfiguration != null` (otherwise we would select with attribute matching)
Gradle,WITHOUT_CLASSIFICATION,//  rename project dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  Convert Swift-like macros to a Map like NativeCompileSpec expects 
Gradle,WITHOUT_CLASSIFICATION,// TODO:HH installTask.dependsOn(executable)
Gradle,WITHOUT_CLASSIFICATION,//  Will create `ivy.xml` even for Maven publishing! (as long as `Upload.uploadDescriptor == true`) 
Gradle,WITHOUT_CLASSIFICATION,//  The directory is now empty so delete it 
Gradle,WITHOUT_CLASSIFICATION,//  Take a deep copy of the compilerArgs because the following methods mutate it. 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: might make sense to respect per-compile-task log level 
Gradle,WITHOUT_CLASSIFICATION,//  Prefer 64-bit tools when building on a 64-bit OS 
Gradle,WITHOUT_CLASSIFICATION,//  No separating whitespace between the #define and the name 
Gradle,WITHOUT_CLASSIFICATION,//  we don't decorate everything in BuildListener just projectsLoaded/projectsEvaluated 
Gradle,WITHOUT_CLASSIFICATION,//  as we don't have this right now we simulate it by reaching up the tree. 
Gradle,WITHOUT_CLASSIFICATION,//  Do nothing. 
Gradle,WITHOUT_CLASSIFICATION,//  Can get duplicate start events 
Gradle,WITHOUT_CLASSIFICATION,//  Copy built-on-demand state 
Gradle,WITHOUT_CLASSIFICATION,//  Lower or equal priority but higher version keep higher scope and exclusions 
Gradle,WITHOUT_CLASSIFICATION,//  Any available Visual Studio >= 2017 
Gradle,WITHOUT_CLASSIFICATION,//  check module static imports (for static inner classes) 
Gradle,WITHOUT_CLASSIFICATION,//  because we need the attributes to be computes lazily too because of component metadata rules. 
Gradle,WITHOUT_CLASSIFICATION,//  type 1 = ? extends T 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE new ConventionAwareHelper(this getConvention()) 
Gradle,WITHOUT_CLASSIFICATION,//  Only download in parallel if there is more than 1 component to download 
Gradle,WITHOUT_CLASSIFICATION,//  Otherwise just reuse previous result 
Gradle,WITHOUT_CLASSIFICATION,//  Rethrow the first failure 
Gradle,WITHOUT_CLASSIFICATION,// this does not change 
Gradle,WITHOUT_CLASSIFICATION,//  On rare occasions exitValue == 0 when the process is expected to fail and the error output indicates failure. 
Gradle,WITHOUT_CLASSIFICATION,//  2) create an AntlrTask for this sourceSet following the gradle 
Gradle,WITHOUT_CLASSIFICATION,//  Track all unused labels to display future progress operation 
Gradle,WITHOUT_CLASSIFICATION,//  Include as binary when the target project is not included in the workspace 
Gradle,WITHOUT_CLASSIFICATION,//  Collect changes that would trigger a rebuild 
Gradle,WITHOUT_CLASSIFICATION,//  if there is a cause it's an invalid name exception 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - add linkRenderer.link(property) 
Gradle,WITHOUT_CLASSIFICATION,//  Already started 
Gradle,WITHOUT_CLASSIFICATION,//  Start task execution if necessary: this is required for building plugin artifacts   since these are built on-demand prior to the regular start signal for included builds. 
Gradle,WITHOUT_CLASSIFICATION,//  Only expand the thread pool if there is work in the queue or we know that work is about to be submitted (i.e. force == true) 
Gradle,WITHOUT_CLASSIFICATION,//  from this point down the daemon is 'busy' 
Gradle,WITHOUT_CLASSIFICATION,//  Callable<S> 
Gradle,WITHOUT_CLASSIFICATION,// 2) new module is a replacement to a module we've seen already register conflict and return 
Gradle,WITHOUT_CLASSIFICATION,// builds old model of resolved dependency graph based on the result events 
Gradle,WITHOUT_CLASSIFICATION,//  Any available Swift compiler <= 4 
Gradle,WITHOUT_CLASSIFICATION,//  Have not visited this node yet. Push its successors onto the queue in front of this node and visit   them 
Gradle,WITHOUT_CLASSIFICATION,//  This is a special case for backwards compatibility: it is possible to have   a cycle where the root component depends on a library which transitively   depends on a different version of the root module. In this case we effectively   allow 2 modules to have the same capability so we filter the nodes coming   from transitive dependencies
Gradle,WITHOUT_CLASSIFICATION,//  If any of the input values are not available for this selection ignore the rule 
Gradle,WITHOUT_CLASSIFICATION,//  throw new ReadOnlyPropertyException(name <view-type>.class) 
Gradle,WITHOUT_CLASSIFICATION,// add description only to the first module 
Gradle,WITHOUT_CLASSIFICATION,//  Order is significant 
Gradle,WITHOUT_CLASSIFICATION,/*         When writing a file into the filestore a marker file with this suffix is written alongside        then removed after the write. This is used to detect partially written files (due to a serious crash)        and to silently clean them.      */
Gradle,WITHOUT_CLASSIFICATION,//  Any available Visual Studio >= 2015 
Gradle,WITHOUT_CLASSIFICATION,//  The file names passed to -cp are canonicalised by the JVM when it creates the system classloader and so the file names are   lost if they happen to refer to links for example into the Gradle artifact cache. Try to reconstitute the file names   from the system classpath 
Gradle,WITHOUT_CLASSIFICATION,//  can be null in tests ResolveState cannot be mocked   can be null in tests ComponentState cannot be mocked 
Gradle,WITHOUT_CLASSIFICATION,//  Generate args 
Gradle,WITHOUT_CLASSIFICATION,//  Only use for system Java/Groovy classes; arbitrary use on the build classpath will result in class/jar leaks. 
Gradle,WITHOUT_CLASSIFICATION,//  Snapshot POMs use -SNAPSHOT instead of the timestamp as version so validate against the expected id 
Gradle,WITHOUT_CLASSIFICATION,//  No need to resolve type parameters if the method is from the same class. 
Gradle,WITHOUT_CLASSIFICATION,//  Any available Visual Studio >= 2012 
Gradle,WITHOUT_CLASSIFICATION,//  We throw away all state between builds 
Gradle,WITHOUT_CLASSIFICATION,//  note: this is here to override the default Groovy Collection.findAll { } method. 
Gradle,WITHOUT_CLASSIFICATION,//  Not yet implemented 
Gradle,WITHOUT_CLASSIFICATION,//  Collect only the shortest paths 
Gradle,WITHOUT_CLASSIFICATION,//  this configuration is a child of toAdd so no need to add it 
Gradle,WITHOUT_CLASSIFICATION,//  Reached the end of input worker has exited without failing 
Gradle,WITHOUT_CLASSIFICATION,//  don't evaluate children see if we know it's without validating it 
Gradle,WITHOUT_CLASSIFICATION,//  Collect any container level add actions then add the object specific action 
Gradle,WITHOUT_CLASSIFICATION,//  Should ask the annotation handler to figure this out instead
Gradle,WITHOUT_CLASSIFICATION,//  Transient fields 
Gradle,WITHOUT_CLASSIFICATION,//  Have to alter the "type" of the artifact to match what is published 
Gradle,WITHOUT_CLASSIFICATION,//  Cannot configure Slf4j logger. This will happen if:   - Tests are executed with a custom classloader (e.g using `java.system.class.loader`)   - Tests are run with `--module-path` effectively hiding Gradle classes
Gradle,WITHOUT_CLASSIFICATION,//  10%   384M 
Gradle,WITHOUT_CLASSIFICATION,//  Any available Visual Studio >= 2013 
Gradle,WITHOUT_CLASSIFICATION,// then 
Gradle,WITHOUT_CLASSIFICATION,//  Search in the standard installation locations 
Gradle,WITHOUT_CLASSIFICATION,//  We do not consider injecting constructors public API 
Gradle,WITHOUT_CLASSIFICATION,//  For now 'requires' implies 'prefers' and 'strictly' implies 'requires'   Only publish the defining constraint. 
Gradle,WITHOUT_CLASSIFICATION,//  Clear the user's environment 
Gradle,WITHOUT_CLASSIFICATION,//  Order is optimised for humans looking at the log. 
Gradle,WITHOUT_CLASSIFICATION,//  where the transform class is loaded from) 
Gradle,WITHOUT_CLASSIFICATION,//  For test suites (including suite-like custom Runners) if the test suite class   matches the filter run the entire suite instead of filtering away its contents. 
Gradle,WITHOUT_CLASSIFICATION,//  not holding the cache lock flush is done so notify flush thread and continue 
Gradle,WITHOUT_CLASSIFICATION,//  attribute name 
Gradle,WITHOUT_CLASSIFICATION,//  Include file graph for this source file has not changed skip this file 
Gradle,WITHOUT_CLASSIFICATION,//  When deriving variants for the Java ecosystem we actually have 2 components "mixed together": the library and the platform   and there's no way to figure out what was the intent when it was published. So we derive variants but we also need   to use generic JAVA_API and JAVA_RUNTIME attributes instead of more precise JAVA_API_JARS and JAVA_RUNTIME_JARS   because of the platform aspect (which aren't jars but "something"). Using JAVA_API_JARS for the library part and   JAVA_API for the platform would lead to selection of the platform when we don't want them (in other words in a single   component we cannot mix precise usages with more generic ones)
Gradle,WITHOUT_CLASSIFICATION,//  There are only enough entries to make up 1 block so move the entries of the left sibling into   this block and discard the left sibling. Might also need to merge the parent 
Gradle,WITHOUT_CLASSIFICATION,//  JGit properties work from their relocated locations and conflict if they are left in place. 
Gradle,WITHOUT_CLASSIFICATION,//  Attempt to determine whether the compiler is the correct implementation 
Gradle,WITHOUT_CLASSIFICATION,//  we don't know about this kind of archive task 
Gradle,WITHOUT_CLASSIFICATION,//  Compile all secondary routes files first 
Gradle,WITHOUT_CLASSIFICATION,//  Read configuration from stdin 
Gradle,WITHOUT_CLASSIFICATION,//  since we need access to the method and that it's weakly referenced   we always need to double check that it hasn't been collected 
Gradle,WITHOUT_CLASSIFICATION,//  found the first project dependency 
Gradle,WITHOUT_CLASSIFICATION,//  If the Java plugin is applied we want to express that the "compile" and "runtime" variants   are mapped to some attributes which can be used in the version mapping strategy.   This is only required for POM publication because the variants have _implicit_ attributes that we want explicit for matching 
Gradle,WITHOUT_CLASSIFICATION,//  fail fast this should not happen 
Gradle,WITHOUT_CLASSIFICATION,//  Only unpack one level of Providers since Provider<Provider<>> is not supported - we don't need two levels of laziness. 
Gradle,WITHOUT_CLASSIFICATION,//  Must prepare to bind inputs first 
Gradle,WITHOUT_CLASSIFICATION,//  One or more '*' followed by one or more non-wildcard: matches #2 above 
Gradle,WITHOUT_CLASSIFICATION,// already handled elsewhere 
Gradle,WITHOUT_CLASSIFICATION,// close all streams and redirect IO 
Gradle,WITHOUT_CLASSIFICATION,//  If there's more than group merge them into a group set 
Gradle,WITHOUT_CLASSIFICATION,// Keeps the class set analysis of the given JavaCompile task 
Gradle,WITHOUT_CLASSIFICATION,//  This test class should be loaded via the custom system ClassLoader 
Gradle,WITHOUT_CLASSIFICATION,//  this.getClass() 
Gradle,WITHOUT_CLASSIFICATION,//  If no implementation classpath has been provided just use the application classloader 
Gradle,WITHOUT_CLASSIFICATION,//  read entire response 
Gradle,WITHOUT_CLASSIFICATION,//  Didn't find node at path 
Gradle,WITHOUT_CLASSIFICATION,//  Already invoking a method on the mix-in 
Gradle,WITHOUT_CLASSIFICATION,//  Compare 2 static selectors semantically 
Gradle,WITHOUT_CLASSIFICATION,//  Remove compile and AST types from the Groovy loader 
Gradle,WITHOUT_CLASSIFICATION,//  now handle dirs 
Gradle,WITHOUT_CLASSIFICATION,//  Have visited all of this node's successors 
Gradle,WITHOUT_CLASSIFICATION,//  Kotlin passes these types for its own basic types 
Gradle,WITHOUT_CLASSIFICATION,//  subclass hook allowing us to fake the context for testing 
Gradle,WITHOUT_CLASSIFICATION,//  Enhance already reported failures 
Gradle,WITHOUT_CLASSIFICATION,// checks if candidate project is dependent of the origin project with given configuration 
Gradle,WITHOUT_CLASSIFICATION,//  will be removed in 6.0 
Gradle,WITHOUT_CLASSIFICATION,// replacement candidates are the only important candidates 
Gradle,WITHOUT_CLASSIFICATION,//  We only cache the result of parsing the Maven settings files but allow this value to be updated in-flight   via system properties. This allows the local maven repo to be overridden when publishing to maven   (see http://forums.gradle.org/gradle/topics/override_location_of_the_local_maven_repo). 
Gradle,WITHOUT_CLASSIFICATION,//  fact. We check here for ConstructedClassWithPackage. 
Gradle,WITHOUT_CLASSIFICATION,//  Inject missing interfaces to support the usage of plugins compiled with older Gradle versions.   A normal gradle build does this by adding the MixInLegacyTypesClassLoader to the class loader hierarchy.   In a test run which is essentially a plain Java application the classpath is flattened and injected   into the system class loader and there exists no Gradle class loader hierarchy in the running test. (See Implementation   in ApplicationClassesInSystemClassLoaderWorkerImplementationFactory BootstrapSecurityManager and GradleWorkerMain.)   Thus we inject the missing interfaces directly into the system class loader used to load all classes in the test.
Gradle,WITHOUT_CLASSIFICATION,//  Need to lock the cache in order to write to the module metadata store 
Gradle,WITHOUT_CLASSIFICATION,//  put var #1 ('foo') on the stack   push the constant Class onto the stack   push int 1 or 0 (interpreted as true or false) onto the stack 
Gradle,WITHOUT_CLASSIFICATION,//  As an optimization first check if the method name is among the candidates before we construct an equivalence wrapper 
Gradle,WITHOUT_CLASSIFICATION,//  Need to perform the actual resolve
Gradle,WITHOUT_CLASSIFICATION,//  else unchanged; check next file 
Gradle,WITHOUT_CLASSIFICATION,//  fall back to standard out 
Gradle,WITHOUT_CLASSIFICATION,//  Token concatenation is only allowed inside a #define body   Arbitrary tokens won't resolve to an include path   Treat both these cases as an unresolvable include directive 
Gradle,WITHOUT_CLASSIFICATION,//  Track currently associated label with its progress operation 
Gradle,WITHOUT_CLASSIFICATION,//  Couldn't find a registration for the given type 
Gradle,WITHOUT_CLASSIFICATION,//  creating before locking have to create the most flexible setup 
Gradle,WITHOUT_CLASSIFICATION,//  try to reconstruct the exception 
Gradle,WITHOUT_CLASSIFICATION,//  Attempt to merge with the right sibling 
Gradle,WITHOUT_CLASSIFICATION,//  We have an exclusive lock (whether we asked for it or not). 
Gradle,WITHOUT_CLASSIFICATION,//  Already at the front. If not at the front need to recreate 
Gradle,WITHOUT_CLASSIFICATION,// copy configuration from parent descriptor 
Gradle,WITHOUT_CLASSIFICATION,//  + setter methods for the above - assume we’ve defined them 
Gradle,WITHOUT_CLASSIFICATION,//  List modules based on metadata files but only if we won't check for maven-metadata (which is preferred) 
Gradle,WITHOUT_CLASSIFICATION,//  used in integration tests 
Gradle,WITHOUT_CLASSIFICATION,//  end::custom-task-class[] 
Gradle,WITHOUT_CLASSIFICATION,/*         Note: there is deliberately no internal synchronizing or caching at this level.        Class generation should be performed behind a ManagedProxyFactory.      */
Gradle,WITHOUT_CLASSIFICATION,//  Should use `InstantiatorFactory` instead to pick up some validation but this is currently somewhat expensive
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Add other build like files `build.gradle.kts` `settings.gradle(.kts)` other `.gradle` `gradle.properties`
Gradle,WITHOUT_CLASSIFICATION,//  Something else may have removed it 
Gradle,WITHOUT_CLASSIFICATION,//  _changed_ since last execution possibly by another task 
Gradle,WITHOUT_CLASSIFICATION,//  This can happen when a method fails which this method depends on 
Gradle,WITHOUT_CLASSIFICATION,//           dynamicObjectHelper = <init>        }        return dynamicObjectHelper;   } 
Gradle,WITHOUT_CLASSIFICATION,//  Transforms do not require project state 
Gradle,WITHOUT_CLASSIFICATION,//  The only reason for this unit test is to verify that no StackOverflowException is being thrown when   many patterns are passed to getPatternsMatcher. See https://github.com/gradle/gradle/issues/10329 
Gradle,WITHOUT_CLASSIFICATION,//  TODO IntSet 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public ConventionMapping getConventionMapping() { 
Gradle,WITHOUT_CLASSIFICATION,//  make sure we can store it in order or we'll have surprises on deserialization 
Gradle,WITHOUT_CLASSIFICATION,//  <inputs-lvar> = <inputs-field> 
Gradle,WITHOUT_CLASSIFICATION,//  default packages do not contain classes like these 
Gradle,WITHOUT_CLASSIFICATION,//  Include the display name anyway 
Gradle,WITHOUT_CLASSIFICATION,//  ...   end::custom-task-class[] 
Gradle,WITHOUT_CLASSIFICATION,//  It's important that we do not block waiting for the lock while holding the project mutation lock.   Doing so can lead to deadlocks. 
Gradle,WITHOUT_CLASSIFICATION,//  An @Ignored class ignore the event. We don't get testIgnored events for each method so we have   generate them on our own 
Gradle,WITHOUT_CLASSIFICATION,//  Package private accessor used by MessageDigestHasher.putHash for performance reasons 
Gradle,WITHOUT_CLASSIFICATION,//  FileCollection is-a Iterable Buildable and TaskDependencyContainer so check before checking for these things 
Gradle,WITHOUT_CLASSIFICATION,//  there is at least one candidate which does NOT provide this attribute 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier>(<options-map>) 
Gradle,WITHOUT_CLASSIFICATION,//  TODO validations on method: synthetic bridge methods varargs abstract native
Gradle,WITHOUT_CLASSIFICATION,//  non leading ':' 
Gradle,WITHOUT_CLASSIFICATION,//  Already seen this class skip it 
Gradle,WITHOUT_CLASSIFICATION,//  Iterate over unicode characters 
Gradle,WITHOUT_CLASSIFICATION,//  Get the metadata first to see if it's there 
Gradle,WITHOUT_CLASSIFICATION,//  Should use some variation of DefaultClassMap below to associate values with classes as currently we retain a strong reference to each value for one session after the ClassLoader   for the entry's key is discarded which is unnecessary because we won't attempt to locate the entry again once the ClassLoader has been discarded
Gradle,WITHOUT_CLASSIFICATION,/*      * When the artifacts declared in a component are modified for publishing (name/classifier/extension) then the     * Maven publication no longer represents the underlying java component. Instead of     * publishing incorrect metadata we fail any attempt to publish the module metadata.     *     * In the long term we will likely prevent any modification of artifacts added from a component. Instead we will     * make it easier to modify the component(s) produced by a project allowing the     * published metadata to accurately reflect the local component metadata.      */
Gradle,WITHOUT_CLASSIFICATION,/*          * SourceSet has no access to configurations where we could ask for a lenient view. This                * means we have to deal with possible dependency resolution issues here. We catch and                * log the exceptions here so that the Eclipse model can be generated even if there are         * unresolvable dependencies defined in the configuration.         *         * We can probably do better by inspecting the runtime classpath and finding out which         * Configurations are part of it and only traversing any extra file collections manually.                 */
Gradle,WITHOUT_CLASSIFICATION,//  Remove the "daemon starting" message 
Gradle,WITHOUT_CLASSIFICATION,//  need to take copy to prevent ConcurrentModificationException 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore overrides of Object and GroovyObject methods 
Gradle,WITHOUT_CLASSIFICATION,//  If this default is ever changed ensure the documentation on PathSensitive is updated as well as this guide:   https://guides.gradle.org/using-build-cache/#relocatability 
Gradle,WITHOUT_CLASSIFICATION,//  Index of the artifact set == the id of the artifact set but reversed when sort order is dependency first 
Gradle,WITHOUT_CLASSIFICATION,//  IMPORTANT: return must be closed when done with. 
Gradle,WITHOUT_CLASSIFICATION,//  check Jar exists 
Gradle,WITHOUT_CLASSIFICATION,//  Add all included builds from the command-line 
Gradle,WITHOUT_CLASSIFICATION,//  Absolute coordinate system 
Gradle,WITHOUT_CLASSIFICATION,// done writing data release any resources 
Gradle,WITHOUT_CLASSIFICATION,//  Assume all the other compilers are ok if they happen to be installed 
Gradle,WITHOUT_CLASSIFICATION,//  The public result for the configuration has been calculated.   It is an error to change anything that would change the dependencies or artifacts 
Gradle,WITHOUT_CLASSIFICATION,//  JVM args that must be used for the build JVM 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE getAsDynamicObject().invokeMethod(name (args instanceof Object[]) ? args : new Object[] { args }) 
Gradle,WITHOUT_CLASSIFICATION,//  tag name 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public MetaClass getMetaClass() { 
Gradle,WITHOUT_CLASSIFICATION,//  This should pass 50% of the time 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public Convention getConvention() { return getAsDynamicObject().getConvention(); } 
Gradle,WITHOUT_CLASSIFICATION,//  Callable<? extends T> 
Gradle,WITHOUT_CLASSIFICATION,//  Reuse parent label if possible 
Gradle,WITHOUT_CLASSIFICATION,// We need to ensure that the conflict is orderly injected to the list of conflicts  Brand new conflict goes to the end  If we find any matching conflict we have to hook up with it 
Gradle,WITHOUT_CLASSIFICATION,//  Any Swift 5.x compiler 
Gradle,WITHOUT_CLASSIFICATION,//  Do nothing since the only side effect is that we wouldn't   be able to log the plugin descriptor file name.  Shouldn't   be a reasonable scenario where this occurs since these   descriptors should be generated from real files. 
Gradle,WITHOUT_CLASSIFICATION,//  If there is no known last descriptor associate it with the root test suite 
Gradle,WITHOUT_CLASSIFICATION,/* This is an internal option it's used in com.sun.tools.javac.util.Names#createTable(Options options). The -XD backdoor switch is used to set it as described in a comment        in com.sun.tools.javac.main.RecognizedOptions#getAll(OptionHelper helper). This option was introduced in JDK 7 and controls if compiler's name tables should be reused.        Without this option being set they are stored in a static list using soft references which can lead to memory pressure and performance deterioration        when using the daemon especially when using small heap and building a large project.        Due to a bug (https://builds.gradle.org/viewLog.html?buildId=284033&tab=buildResultsDiv&buildTypeId=Gradle_Master_Performance_PerformanceExperimentsLinux) no instances of        SharedNameTable are actually ever reused. It has been fixed for JDK9 and we should consider not using this option with JDK9 as not using it  will quite probably improve the        performance of compilation.        Using this option leads to significant performance improvements when using daemon and compiling java sources with JDK7 and JDK8. */
Gradle,WITHOUT_CLASSIFICATION,//  cleanup 
Gradle,WITHOUT_CLASSIFICATION,//  there is nothing to be done. 
Gradle,WITHOUT_CLASSIFICATION,//  Note: used by generated subtypes 
Gradle,WITHOUT_CLASSIFICATION,//  Invalid lock state need to do a real resolution to gather locking failures 
Gradle,WITHOUT_CLASSIFICATION,//  Apply strategies for "all variants" 
Gradle,WITHOUT_CLASSIFICATION,//  not a single candidate 
Gradle,WITHOUT_CLASSIFICATION,//  exclude the dependencies already provided by SCALA_CONTAINER; prevents problems with Eclipse Scala plugin 
Gradle,WITHOUT_CLASSIFICATION,//  A sibling node 
Gradle,WITHOUT_CLASSIFICATION,//  When the state changes to `SHOULD_RUN` the dependencies need to be reprocessed since they also may be required now. 
Gradle,WITHOUT_CLASSIFICATION,//  Node must be at the predecessor state before calculating dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE : locateOrBuildGenerationPlan populates the generationPlans map 
Gradle,WITHOUT_CLASSIFICATION,//  Path == prefix 
Gradle,WITHOUT_CLASSIFICATION,//  since we use the main source set we need to make sure the compile classpath and runtime classpath are properly configured 
Gradle,WITHOUT_CLASSIFICATION,//  -r : Add files to static archive creating if required   -c : Don't write message to standard error when creating archive   -s : Create an object file index (equivalent to running 'ranlib') 
Gradle,WITHOUT_CLASSIFICATION,//  Trailing slash on name indicates entry is a directory 
Gradle,WITHOUT_CLASSIFICATION,//  Exclude tasks from `buildSrc` 
Gradle,WITHOUT_CLASSIFICATION,//  Initialize and collect any new outgoing edges of this node 
Gradle,WITHOUT_CLASSIFICATION,//  Don't need to do anything 
Gradle,WITHOUT_CLASSIFICATION,//  Select the first variant 
Gradle,WITHOUT_CLASSIFICATION,//  if we already hold the project lock for this project 
Gradle,WITHOUT_CLASSIFICATION,//  Initial state. Only path and some projections are known here   All projections are defined   Private data has been created initial rules discovered   Default values have been applied 
Gradle,WITHOUT_CLASSIFICATION,//  if the worker has not reported memory usage yet for some reason or does not support it 
Gradle,WITHOUT_CLASSIFICATION,// for example: ':hey' or ':a SKIPPED' or ':foo:bar:baz UP-TO-DATE' but not ':a FOO' 
Gradle,WITHOUT_CLASSIFICATION,// without it the parent hangs without receiving the message above (flushing does not help). 
Gradle,WITHOUT_CLASSIFICATION,//  save name before redirect 
Gradle,WITHOUT_CLASSIFICATION,//  Wrap the result processor chain up in a blocking actor to make the whole thing thread-safe 
Gradle,WITHOUT_CLASSIFICATION,//  HttpClient is used as a parameter of a public method 
Gradle,WITHOUT_CLASSIFICATION,//  Path is a descendant of this 
Gradle,WITHOUT_CLASSIFICATION,//  Overrides the global ClasspathFingerPrinter currently need to have the parent parameter 
Gradle,WITHOUT_CLASSIFICATION,//  Resolve the dependency graph 
Gradle,WITHOUT_CLASSIFICATION,//  We have a matching component id that was rejected. These are handled later in the resolution process   (after conflict resolution) so it is not a failure at this stage. 
Gradle,WITHOUT_CLASSIFICATION,//  Don't serialize the causes - we'll serialize them separately later 
Gradle,WITHOUT_CLASSIFICATION,//  Variants 
Gradle,WITHOUT_CLASSIFICATION,//  Nothing found - do a second pass 
Gradle,WITHOUT_CLASSIFICATION,//  No auto-applied plugins available 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore as the node in the other build's execution graph takes care of this 
Gradle,WITHOUT_CLASSIFICATION,//  only if there are no conf defined in sub elements 
Gradle,WITHOUT_CLASSIFICATION,//  A new top level node implicitly finish the previous node 
Gradle,WITHOUT_CLASSIFICATION,//  Use an EclipseProject to reference a project 
Gradle,WITHOUT_CLASSIFICATION,//  When running a test in a daemon executer the input is buffered until a   newline char is received 
Gradle,WITHOUT_CLASSIFICATION,//  We could do a better job of figuring this out 
Gradle,WITHOUT_CLASSIFICATION,//  end::options-of-dynamic-processor[] 
Gradle,WITHOUT_CLASSIFICATION,//  in theory we don't need the synchronized here but let's be safer in the beginning 
Gradle,WITHOUT_CLASSIFICATION,//  Maven repos are handled by MavenPlugin 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore inner classes 
Gradle,WITHOUT_CLASSIFICATION,//  Avoid iterating on candidates if there's no requested attribute 
Gradle,WITHOUT_CLASSIFICATION,//  Fail fast 
Gradle,WITHOUT_CLASSIFICATION,//  Run any actions to add/modify dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  Keep until the listener is created 
Gradle,WITHOUT_CLASSIFICATION,//  need to wrap all dependencies to force them 
Gradle,WITHOUT_CLASSIFICATION,/*      * Configures the project and all of its sub-projects including task discovery and binding model rules.      */
Gradle,WITHOUT_CLASSIFICATION,//  Since Java 9 version should be X instead of 1.X   However to keep backward compatibility we change from 11 
Gradle,WITHOUT_CLASSIFICATION,// so that we don't miss out default tasks 
Gradle,WITHOUT_CLASSIFICATION,//  On macOS we assume co-located Xcode is installed into /opt/xcode and default location at /Applications/Xcode.app     We need to search for Clang differently on macOS because we need to know the Xcode version for x86 support. 
Gradle,WITHOUT_CLASSIFICATION,//  Clean the interrupted status   because some test class processors do work here e.g. JUnitPlatform 
Gradle,WITHOUT_CLASSIFICATION,//  iterate from the inner most to the outer and check for classes   this check will ignore a .class property for Example Integer.class will be   a PropertyExpression with the ClassExpression of Integer as objectExpression 
Gradle,WITHOUT_CLASSIFICATION,//  There is no setter for this property 
Gradle,WITHOUT_CLASSIFICATION,//  We know that we're running single-threaded here so we can use lenient project locking 
Gradle,WITHOUT_CLASSIFICATION,//  We use static private methods because private/protected methods are disallowed   in managed types. 
Gradle,WITHOUT_CLASSIFICATION,//  Path is Iterable but we don't want to unpack it 
Gradle,WITHOUT_CLASSIFICATION,//  Source file has changed 
Gradle,WITHOUT_CLASSIFICATION,//  Skip prebuilt libraries 
Gradle,WITHOUT_CLASSIFICATION,//  ModelRegistrations.Builder methods 
Gradle,WITHOUT_CLASSIFICATION,//  Not attached to a console 
Gradle,WITHOUT_CLASSIFICATION,//  If we broke out of the comparison because there was a difference we can reuse the snapshot of the new element 
Gradle,WITHOUT_CLASSIFICATION,//  else throw it away 
Gradle,WITHOUT_CLASSIFICATION,//  any of the ansi sequences. 
Gradle,WITHOUT_CLASSIFICATION,//  ModelRegistry methods 
Gradle,WITHOUT_CLASSIFICATION,//  Add an assemble task for each binary and also wire the development binary in to the `assemble` task 
Gradle,WITHOUT_CLASSIFICATION,// configure verbosely only if arguments do not specify any log level. 
Gradle,WITHOUT_CLASSIFICATION,//  The selector failed or the module has been deselected. Do not attach. 
Gradle,WITHOUT_CLASSIFICATION,// See: NameValidator.FORBIDDEN_CHARACTERS 
Gradle,WITHOUT_CLASSIFICATION,//  Always assume a candidate from a lock will satisfy the latest version selector 
Gradle,WITHOUT_CLASSIFICATION,//  Map the arguments of the argument from this expression 
Gradle,WITHOUT_CLASSIFICATION,//  Mix in to Groovy DSL 
Gradle,WITHOUT_CLASSIFICATION,//  class in root package - should not happen 
Gradle,WITHOUT_CLASSIFICATION,//  with a lower case letter anymore 
Gradle,WITHOUT_CLASSIFICATION,//  this is a published artifact 
Gradle,WITHOUT_CLASSIFICATION,//  cancel OP_WRITE selection 
Gradle,WITHOUT_CLASSIFICATION,//  User likely doesn't care about daemons that stopped a long time ago 
Gradle,WITHOUT_CLASSIFICATION,//  Mappings between public and impl types   If the list of mappings grows we should move it to a data structure 
Gradle,WITHOUT_CLASSIFICATION,//  Remove the handler 
Gradle,WITHOUT_CLASSIFICATION,//  pre-compute the hashcode as it's going to be used anyway and this object   is used as a key in several hash maps 
Gradle,WITHOUT_CLASSIFICATION,//  Any available GCC implementation (including mingw cygwin but not clang) 
Gradle,WITHOUT_CLASSIFICATION,//  Note: this may be a temporary measure while existing infrastructure is being ported to managed model elements 
Gradle,WITHOUT_CLASSIFICATION,//  Invoke the setter method to pick up type coercion 
Gradle,WITHOUT_CLASSIFICATION,//  END 
Gradle,WITHOUT_CLASSIFICATION,//  We know it's an archive but not what kind of archive   We know it's an artifact but that's all we know for sure 
Gradle,WITHOUT_CLASSIFICATION,//  Adding an optional dependency: see if we already have a hard dependency on the same module 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public <return-type> <setter>(<type> v) { <return-type> v = super.<setter>(v); __<prop>__ = true; return v; } 
Gradle,WITHOUT_CLASSIFICATION,//  Rewrite the method call to match TransformedModelDslBacking#create(String Closure) which is what the delegate will be 
Gradle,WITHOUT_CLASSIFICATION,//  Filter imported classes which are not available yet 
Gradle,WITHOUT_CLASSIFICATION,/*          * This method returns the dependencies in buckets (projects first then modules then files)         * because that's what we used to do since 1.0. It would be better to return the dependencies         * in the same order as they come from the resolver but we'll need to change all the tests for         * that so defer that until later.          */
Gradle,WITHOUT_CLASSIFICATION,//  Must be no higher than this scope as needs cache repository services. 
Gradle,WITHOUT_CLASSIFICATION,//  guard against edge cases (e.g. JUnit 4 classes with custom runners that report the class as ignored after reporting it as started) 
Gradle,WITHOUT_CLASSIFICATION,//  Default Xcode installation 
Gradle,WITHOUT_CLASSIFICATION,//  Another thread holds the lock release the project lock and wait for the other thread to finish 
Gradle,WITHOUT_CLASSIFICATION,//  Transitive dependency 
Gradle,WITHOUT_CLASSIFICATION,//  All dependencies visited 
Gradle,WITHOUT_CLASSIFICATION,//  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere.   WARNING: This code does not expect a class that has a static            inner class in DEFAULT_IMPORTS 
Gradle,WITHOUT_CLASSIFICATION,//  started update the log level 
Gradle,WITHOUT_CLASSIFICATION,//  tag::isolating-annotation-processor[] 
Gradle,WITHOUT_CLASSIFICATION,//  if not a number i.e. 2.ABD 
Gradle,WITHOUT_CLASSIFICATION,//  Same value 
Gradle,WITHOUT_CLASSIFICATION,//  Else ignore abstract methods on non-abstract classes as some other tooling (e.g. the Groovy compiler) has decided this is ok 
Gradle,WITHOUT_CLASSIFICATION,//  Add the source of the source set to the include paths to resolve any headers that may be in source directories 
Gradle,WITHOUT_CLASSIFICATION,//  have visited all consumers so visit this node 
Gradle,WITHOUT_CLASSIFICATION,//  check custom packaging 
Gradle,WITHOUT_CLASSIFICATION,//  Library or executable 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <arg> or task(<arg>) 
Gradle,WITHOUT_CLASSIFICATION,//  End of the stream 
Gradle,WITHOUT_CLASSIFICATION,//  Thrown when jna cannot initialize the native stuff 
Gradle,WITHOUT_CLASSIFICATION,//  throws T 
Gradle,WITHOUT_CLASSIFICATION,//  Check if type extends Factory<? extends ElementType> 
Gradle,WITHOUT_CLASSIFICATION,//  We could support an unfiltered DirectoryFileTree here as a cacheable root   but because @OutputDirectory also doesn't support it we choose not to. 
Gradle,WITHOUT_CLASSIFICATION,//  These are here just so that ProjectInternal can implement FileOperations to work around https://github.com/gradle/gradle/issues/6027 
Gradle,WITHOUT_CLASSIFICATION,//  This substitution is effectively a force 
Gradle,WITHOUT_CLASSIFICATION,//  Without this HTTP Client prohibits multiple redirects to the same location within the same context 
Gradle,WITHOUT_CLASSIFICATION,//  not provided by older client versions 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Locking around this state 
Gradle,WITHOUT_CLASSIFICATION,//  Look for parameter substitutions 
Gradle,WITHOUT_CLASSIFICATION,//  getProperty(this name) 
Gradle,WITHOUT_CLASSIFICATION,//  Eventually convert manifest content to UTF-8 before handing it to java.util.jar.Manifest 
Gradle,WITHOUT_CLASSIFICATION,//  Resolve it now 
Gradle,WITHOUT_CLASSIFICATION,//  The name of the test class 
Gradle,WITHOUT_CLASSIFICATION,//  If an annotation processor is detected we need to force Java stub generation so the we can process annotations on Groovy classes   We are forcing stub generation by tricking the groovy compiler into thinking there are java files to compile.   All java files are just passed to the compile method of the JavaCompiler and aren't processed internally by the Groovy Compiler.   Since we're maintaining our own list of Java files independent of what's passed by the Groovy compiler adding a non-existent java file   to the sources won't cause any issues. 
Gradle,WITHOUT_CLASSIFICATION,//  Pass 2 compile everything except buildscript {} pluginRepositories{} and plugin requests then run 
Gradle,WITHOUT_CLASSIFICATION,//  Update timestamp so that working directory is not garbage collected 
Gradle,WITHOUT_CLASSIFICATION,//  Find first position where values are different 
Gradle,WITHOUT_CLASSIFICATION,//  keep the ordering we had in earlier gradle versions 
Gradle,WITHOUT_CLASSIFICATION,//  All local/cached options failed get directly 
Gradle,WITHOUT_CLASSIFICATION,//  Should use stronger modelling for this and make the set of tools open rather than hard-coding here 
Gradle,WITHOUT_CLASSIFICATION,//  Remove .pdb file if present 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Enable this by default when toolVersion >= 6.0.0 if it's stable enough. 
Gradle,WITHOUT_CLASSIFICATION,//  Target module can change if this is called as the result of a module replacement conflict. 
Gradle,WITHOUT_CLASSIFICATION,//  ProjectEvaluationListener 
Gradle,WITHOUT_CLASSIFICATION,//  For project dependencies de-duplication   Ignore scope on purpose   Ignore version because Maven doesn't support dependencies with different versions on different scopes   Ignore exclusions because we don't know how to choose/merge them   Consequence is that we use the highest version and the exclusions of highest priority dependency when de-duplicating   Use Maven Dependency "Management Key" as discriminator: groupId:artifactId:type:classifier
Gradle,WITHOUT_CLASSIFICATION,//  import checks that stack is not empty 
Gradle,WITHOUT_CLASSIFICATION,//  Write plain content to stdout and rich content to stderr 
Gradle,WITHOUT_CLASSIFICATION,//  Allow the publication to participate in incremental build 
Gradle,WITHOUT_CLASSIFICATION,//  Non-null when the result of visiting this file can be reused 
Gradle,WITHOUT_CLASSIFICATION,//  Determine the actual sources to clean/compile 
Gradle,WITHOUT_CLASSIFICATION,//  5) register fact that antlr should be run before compiling 
Gradle,WITHOUT_CLASSIFICATION,//  Read and verify count 
Gradle,WITHOUT_CLASSIFICATION,//  we have C[*:map] -> should become (C) map 
Gradle,WITHOUT_CLASSIFICATION,//  These versions couldn't handle milestone patches 
Gradle,WITHOUT_CLASSIFICATION,//  Only when this node has a transitive incoming edge 
Gradle,WITHOUT_CLASSIFICATION,//  TODO given that all the closures are from the same file we should do the relativising once.        that would entail adding location information to the model {} outer closure.
Gradle,WITHOUT_CLASSIFICATION,//  avoiding us to implement a costly visitor and potentially missing edge cases 
Gradle,WITHOUT_CLASSIFICATION,//  By default we assume your Unix tty can handle ANSI codes.   Just wrap it up so that when we get closed we reset the 
Gradle,WITHOUT_CLASSIFICATION,//  Else ignore 
Gradle,WITHOUT_CLASSIFICATION,//  Calculated on demand 
Gradle,WITHOUT_CLASSIFICATION,//  If the operation hasn't finished normally (because of a shortcut or an error) we close it without a cache key 
Gradle,WITHOUT_CLASSIFICATION,//  isOpen was added in gradle 5.6. for 5.5 we default to true 
Gradle,WITHOUT_CLASSIFICATION,//  used only as defaultconf not used for 
Gradle,WITHOUT_CLASSIFICATION,//  Context of the app under test. 
Gradle,WITHOUT_CLASSIFICATION,//  We don't do anything here as older consumers call this method when the project connection is closed but then later attempt to reuse the connection 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE getAsDynamicObject().hasProperty(name); 
Gradle,WITHOUT_CLASSIFICATION,//  Strategy changes in a parent configuration do not affect this configuration or any of its children in any way 
Gradle,WITHOUT_CLASSIFICATION,//  Use the Jars when nothing has been requested 
Gradle,WITHOUT_CLASSIFICATION,//  create our own metaInf which runs after mainSpec's files 
Gradle,WITHOUT_CLASSIFICATION,//  Unrecognized expression or extra stuff after the expression possibly another expression 
Gradle,WITHOUT_CLASSIFICATION,//  Check each unique edge in the include file graph 
Gradle,WITHOUT_CLASSIFICATION,//  Then use attribute specific mapping 
Gradle,WITHOUT_CLASSIFICATION,//  toAdd is a child so implies this configuration 
Gradle,WITHOUT_CLASSIFICATION,//  Elements that may or may not be interesting only for build dependency calculation 
Gradle,WITHOUT_CLASSIFICATION,//  Read-only nested property with managed type 
Gradle,WITHOUT_CLASSIFICATION,//  Currently we only track the major version. 
Gradle,WITHOUT_CLASSIFICATION,//  convert the file urls to cached jar files 
Gradle,WITHOUT_CLASSIFICATION,//  using a transforming classloader is only required for older buggy Groovy versions 
Gradle,WITHOUT_CLASSIFICATION,// calling overloaded method with extra behavior: 
Gradle,WITHOUT_CLASSIFICATION,//  there's an ambiguity but we may have several variants matching the requested capabilities.   Here we're going to check if in the candidates there's a single one _strictly_ matching the requested capabilities. 
Gradle,WITHOUT_CLASSIFICATION,//  Add these as separate specs so they are not affected by the changes to the main spec 
Gradle,WITHOUT_CLASSIFICATION,//  path within its build (i.e. including project path)   path within the build tree (i.e. including project path)   path of the owning build 
Gradle,WITHOUT_CLASSIFICATION,//  No compatible daemons available - start a new daemon 
Gradle,WITHOUT_CLASSIFICATION,//  probably facing JDK-8046686 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE objectFactory.fileProperty() 
Gradle,WITHOUT_CLASSIFICATION,//  Badly formed arguments 
Gradle,WITHOUT_CLASSIFICATION,//  new value 
Gradle,WITHOUT_CLASSIFICATION,//  Look for a provider with that name 
Gradle,WITHOUT_CLASSIFICATION,//  List modules based on metadata files (artifact version is not considered in listVersionsForAllPatterns()) 
Gradle,WITHOUT_CLASSIFICATION,//  This is a safety net it's unsure whether this can happen because it's likely (certain?)   that for a specific module resolve state all selectors are of the same type 
Gradle,WITHOUT_CLASSIFICATION,//  Do conflict resolution to choose the best out of current selection and candidate. 
Gradle,WITHOUT_CLASSIFICATION,// remove SLF4J error out like 'Class path contains multiple SLF4J bindings.'  See: https://github.com/gradle/performance/issues/375#issuecomment-315103861 
Gradle,WITHOUT_CLASSIFICATION,//  That is the state a node is in when it was selected but the selection violates a constraint (reject or strictly) 
Gradle,WITHOUT_CLASSIFICATION,// Assuming that the diagnostics were printed out to the last line. It's not bullet-proof but seems to be doing fine. 
Gradle,WITHOUT_CLASSIFICATION,//  Versions before 4.1 would log "CONFIGURE SUCCESSFUL" for model/action execution (but "BUILD FAILED" for task/test execution) 
Gradle,WITHOUT_CLASSIFICATION,//  On any line except the bottom most one a new line simply move the cursor to the next row.   Note: the next row has a lower index. 
Gradle,WITHOUT_CLASSIFICATION,//  Visit the edges after sorting the components in consumer-first order 
Gradle,WITHOUT_CLASSIFICATION,//  Do not include implicit builds in workspace 
Gradle,WITHOUT_CLASSIFICATION,//  Choose explicit variant 
Gradle,WITHOUT_CLASSIFICATION,//  Preserve logging of headers for progress operations started outside of the build operation executor as was done in Gradle 3.x 
Gradle,WITHOUT_CLASSIFICATION,//  exclusions optimizations 
Gradle,WITHOUT_CLASSIFICATION,//  Use of a LinkedList for 2 reasons: `Set` proved to have a significant negative impact on performance   And list will see a lot of removals which ArrayList isn't very well suited for. 
Gradle,WITHOUT_CLASSIFICATION,//  Only keep track of removed options that were present in the command line 
Gradle,WITHOUT_CLASSIFICATION,//  something happened but we don't know what 
Gradle,WITHOUT_CLASSIFICATION,//  We cannot clean in progress markers or in progress files here because   the file system visitor stuff can't handle the file system mutating while visiting 
Gradle,WITHOUT_CLASSIFICATION,//  tag::functional-test-junit[] 
Gradle,WITHOUT_CLASSIFICATION,//  Use a GradleProject to reference a project 
Gradle,WITHOUT_CLASSIFICATION,//  Check to see if there are any compatible idle daemons 
Gradle,WITHOUT_CLASSIFICATION,//  Maven adds inherited dependencies last 
Gradle,WITHOUT_CLASSIFICATION,//  A system class skip it 
Gradle,WITHOUT_CLASSIFICATION,//  never swallow java.lang.Error 
Gradle,WITHOUT_CLASSIFICATION,//  Remove the "Expiring Daemon" message 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure that map only contains Boolean.TRUE and Boolean.FALSE values and no other Boolean instances.   This is necessary because:   1. serialization/deserialization of the compile spec doesn't preserve Boolean.TRUE/Boolean.FALSE but creates new instances 
Gradle,WITHOUT_CLASSIFICATION,//  The contract of useCache() means we have to provide some basic synchronization. 
Gradle,WITHOUT_CLASSIFICATION,//  This means that the signature was not required and we couldn't generate the signature   (most likely project.required == false and there is no signatory)   So just noop 
Gradle,WITHOUT_CLASSIFICATION,/*  Parsing state  */
Gradle,WITHOUT_CLASSIFICATION,//  First step is to find an entry with the explicit inputs in the cache 
Gradle,WITHOUT_CLASSIFICATION,//  try to deserialize the original exception 
Gradle,WITHOUT_CLASSIFICATION,//  Special case some common combinations of names and paths 
Gradle,WITHOUT_CLASSIFICATION,//     ((PropertyInternal)<getter>()).setFromAnyValue(p);   } 
Gradle,WITHOUT_CLASSIFICATION,//  With multiple unclassified artifacts choose the one with extension matching pom packaging 
Gradle,WITHOUT_CLASSIFICATION,//  Disallow instance fields. This doesn't guarantee that the object is immutable just makes it less likely   We might tighten this constraint to also disallow any _code_ on immutable types that reaches out to static state 
Gradle,WITHOUT_CLASSIFICATION,//  restore only if there was a save operation first 
Gradle,WITHOUT_CLASSIFICATION,//  Nothing found locally - try a remote search for all resolve states that were not yet searched remotely 
Gradle,WITHOUT_CLASSIFICATION,//  Empty path might match when more elements added 
Gradle,WITHOUT_CLASSIFICATION,//  If implements MethodMixIn do not attempt to locate opaque method as this is expensive 
Gradle,WITHOUT_CLASSIFICATION,//  We get only the first element here nothing else. But Collection   forces us to use an iterator. 
Gradle,WITHOUT_CLASSIFICATION,//    Add constructor   
Gradle,WITHOUT_CLASSIFICATION,//  The changes about the interface's methods will be reported already 
Gradle,WITHOUT_CLASSIFICATION,// we don't really need to launch the daemon to acquire information needed for BuildEnvironment 
Gradle,WITHOUT_CLASSIFICATION,//  In order for the Groovy stubs to have annotation processors invoked against them they must be compiled as source.   Classes compiled as a result of being on the -sourcepath do not have the annotation processor run against them 
Gradle,WITHOUT_CLASSIFICATION,//  Provide an implicit empty argument 
Gradle,WITHOUT_CLASSIFICATION,//  Create build configuration at the project level from all target's build configuration 
Gradle,WITHOUT_CLASSIFICATION,//  When implementing PropertyMixIn do not check for opaque properties as this can be expensive 
Gradle,WITHOUT_CLASSIFICATION,//  or all of them were rejected 
Gradle,WITHOUT_CLASSIFICATION,//  Object methodMissing(String name Object args) 
Gradle,WITHOUT_CLASSIFICATION,//  not a 'Jar' not a 'test' 
Gradle,WITHOUT_CLASSIFICATION,//  Redraw every entry of this area 
Gradle,WITHOUT_CLASSIFICATION,//  This is fine just ignore it 
Gradle,WITHOUT_CLASSIFICATION,//  TODO some representation of state of the inputs 
Gradle,WITHOUT_CLASSIFICATION,//  prefer to use the actual memory usage reported by the worker 
Gradle,WITHOUT_CLASSIFICATION,//  In order to use a newer version of jna the resources must not be available in the old location 
Gradle,WITHOUT_CLASSIFICATION,//  Exit early as we are reusing the create actions from the provider 
Gradle,WITHOUT_CLASSIFICATION,//  This shouldn't be the case however start and complete events are filtered in the prior stage when the logging level is > lifecycle   Should instead move the filtering after this stage 
Gradle,WITHOUT_CLASSIFICATION,//  Allow currently executing and enforced tasks to complete but skip everything else. 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE objectFactory.setProperty(type) 
Gradle,WITHOUT_CLASSIFICATION,//  Target: x64 
Gradle,WITHOUT_CLASSIFICATION,//  Generate: Object[] unpackState() { state = new Object[<size>]; state[x] = <prop-field>; return state; } 
Gradle,WITHOUT_CLASSIFICATION,//  Callable 
Gradle,WITHOUT_CLASSIFICATION,// after redirecting we need to add the new std out/err to the renderer singleton 
Gradle,WITHOUT_CLASSIFICATION,//  Mark the connection has being handled 
Gradle,WITHOUT_CLASSIFICATION,//  Remove classes from core Gradle API 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <method-call> 
Gradle,WITHOUT_CLASSIFICATION,//  Largest free block is too small 
Gradle,WITHOUT_CLASSIFICATION,//  This is a potential nested rule.   Visit method parameters 
Gradle,WITHOUT_CLASSIFICATION,//  Generated script class name must be unique - take advantage of this to avoid delegation 
Gradle,WITHOUT_CLASSIFICATION,//  count from left of screen 0 = left most   count from bottom of screen 0 = bottom most 1 == 2nd from bottom 
Gradle,WITHOUT_CLASSIFICATION,//  We need to update pending count outside of withLocks() so that we don't have a race   condition where the pending count is 0 but a child worker lease is still held when   the parent lease is released. 
Gradle,WITHOUT_CLASSIFICATION,//  must be a @ClassRule; use the rule's class name instead 
Gradle,WITHOUT_CLASSIFICATION,//  By default we push to the local cache. 
Gradle,WITHOUT_CLASSIFICATION,//  Copied from ToolProvider.defaultJavaCompilerName 
Gradle,WITHOUT_CLASSIFICATION,//  will flush any unterminated lines out synchronously 
Gradle,WITHOUT_CLASSIFICATION,//  no default mapping found for this configuration map   configuration to itself 
Gradle,WITHOUT_CLASSIFICATION,//  Check if there are any transitive incoming edges at all. Don't traverse if not. 
Gradle,WITHOUT_CLASSIFICATION,//  <thead>     <tr>       <td>Block</td>       <td>Description</td>     </tr>   </thead> 
Gradle,WITHOUT_CLASSIFICATION,//  we're asking for a runtime variant prefer -jars first 
Gradle,WITHOUT_CLASSIFICATION,//  GradleBuild tasks operate with their own build session and tree scope.   Therefore they have their own RootBuildCacheControllerRef.   This prevents them from reusing the build cache configuration defined by the root.   There is no way to detect that a Gradle instance represents a GradleBuild invocation.   If there were that would be a better heuristic than this. 
Gradle,WITHOUT_CLASSIFICATION,//  Generate new Object[] { args } 
Gradle,WITHOUT_CLASSIFICATION,// Logging exception here is only needed because by default Gradle does not show the stack trace 
Gradle,WITHOUT_CLASSIFICATION,//  Add attributes to be applied given the extension 
Gradle,WITHOUT_CLASSIFICATION,//  we're asking for an API variant prefer -jars first for runtime 
Gradle,WITHOUT_CLASSIFICATION,//  nothing to do 
Gradle,WITHOUT_CLASSIFICATION,//  Always append a new line at EOF 
Gradle,WITHOUT_CLASSIFICATION,//  stop at super and this 
Gradle,WITHOUT_CLASSIFICATION,//  Don't generate method if it's not part of the view schema 
Gradle,WITHOUT_CLASSIFICATION,//  We have to go through URIish and back to deal with differences between how   Java File and Git implement file URIs. 
Gradle,WITHOUT_CLASSIFICATION,//  only check for the last byte of a multi-byte line separator   besides this always check for '\n' 
Gradle,WITHOUT_CLASSIFICATION,//  non-heap spaces are not garbage collected 
Gradle,WITHOUT_CLASSIFICATION,//  Capture all output lazily up until two new lines and an END_OF_TASK designation 
Gradle,WITHOUT_CLASSIFICATION,//  in order to make sure that the CacheEntry is not collected   while the cached class loader is still in use we need to keep a strong reference onto 0
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE new MixInExtensibleDynamicObject(this getClass().getSuperClass() super.getAsDynamicObject() this.services()) 
Gradle,WITHOUT_CLASSIFICATION,//  assume EJB is the most common kind of EAR deployment 
Gradle,WITHOUT_CLASSIFICATION,//  Automatically substitute all available modules 
Gradle,WITHOUT_CLASSIFICATION,//  Force back to configure so that task graph will get reevaluated 
Gradle,WITHOUT_CLASSIFICATION,//  avoids creation of empty hashset 
Gradle,WITHOUT_CLASSIFICATION,//  full match 
Gradle,WITHOUT_CLASSIFICATION,//  copy one by one until the underflow has been resolved 
Gradle,WITHOUT_CLASSIFICATION,//  Order is important! 
Gradle,WITHOUT_CLASSIFICATION,//  static alias only for inner classes and must be at end of chain 
Gradle,WITHOUT_CLASSIFICATION,//  Task has already been run. This can happen when the owning build is used both at configuration time and execution time   This should move earlier in task scheduling so that a worker thread does not even bother trying to run this task 
Gradle,WITHOUT_CLASSIFICATION,//  Disallow work-in-progress to take up more than half of the console display   If the screen size is unknown allow 4 lines 
Gradle,WITHOUT_CLASSIFICATION,//  repositories 
Gradle,WITHOUT_CLASSIFICATION,//  Badly form args list 
Gradle,WITHOUT_CLASSIFICATION,//  By default we do not push to the remote cache. 
Gradle,WITHOUT_CLASSIFICATION,//  For a dependency from _another_ build to _this_ build don't make the artifact buildable   Making these artifacts buildable leads to poor error reporting due to direct task dependency cycle (losing the intervening build dependencies) 
Gradle,WITHOUT_CLASSIFICATION,//  this mimics the behavior of the Ant javac task (and therefore AntJavaCompiler)   which silently excludes files not ending in .java 
Gradle,WITHOUT_CLASSIFICATION,//  Handle trivial cases with 0 or 1 elements in both current and previous 
Gradle,WITHOUT_CLASSIFICATION,//  Latest is only given priority if it's in a require 
Gradle,WITHOUT_CLASSIFICATION,//  Should run after edges only exist between tasks so this cast is safe 
Gradle,WITHOUT_CLASSIFICATION,//  Called from transformed DSL rules 
Gradle,WITHOUT_CLASSIFICATION,// noinspection SimplifiableIfStatement 
Gradle,WITHOUT_CLASSIFICATION,//  There was a breaking change after 0.8 
Gradle,WITHOUT_CLASSIFICATION,//  Use the loaded settings if it includes the target project (based on build file project dir or current dir) 
Gradle,WITHOUT_CLASSIFICATION,//  Prefer having javac validate the location over us by calling it first. 
Gradle,WITHOUT_CLASSIFICATION,//  this.super() 
Gradle,WITHOUT_CLASSIFICATION,//  Create a client that will match based on the daemon startup parameters. 
Gradle,WITHOUT_CLASSIFICATION,// in case one wants to synchronize this method  bear in mind that it is blocking so it cannot share the same lock as others 
Gradle,WITHOUT_CLASSIFICATION,//  Write header 
Gradle,WITHOUT_CLASSIFICATION,//  Implementation provided by decoration 
Gradle,WITHOUT_CLASSIFICATION,//  should never happen 
Gradle,WITHOUT_CLASSIFICATION,//  network authentication required 
Gradle,WITHOUT_CLASSIFICATION,//  Determine the net exclusion for this node by inspecting all transitive incoming edges 
Gradle,WITHOUT_CLASSIFICATION,//  Failure 
Gradle,WITHOUT_CLASSIFICATION,//  If we can detect that stdout is not a tty.. then setup 
Gradle,WITHOUT_CLASSIFICATION,/*             The semantics of this method are that the given action should be notified if the            Daemon is going to be terminated at the end of this build.            It is not a generic outlet for “expiry events”.            Ideally the value given would describe the problem and not be phrased in terms of why we are shutting down            but this is a practical compromise born out of piggy backing on the expiration listener mechanism to implement it.          */
Gradle,WITHOUT_CLASSIFICATION,//  Callable<String> 
Gradle,WITHOUT_CLASSIFICATION,//  Same serialized content - value has not changed 
Gradle,WITHOUT_CLASSIFICATION,//  Output events 
Gradle,WITHOUT_CLASSIFICATION,//  Generate: static Class generatedFrom() { ... } 
Gradle,WITHOUT_CLASSIFICATION,//  The hfs+ file system stores file names in decomposed form. Don't use precomposed characters on macOS as way too few things normalise text correctly 
Gradle,WITHOUT_CLASSIFICATION,//  skip the UTF-8 BOM 
Gradle,WITHOUT_CLASSIFICATION,//  scan parent class 
Gradle,WITHOUT_CLASSIFICATION,//  We temporarily want to allow skipping the publication of Gradle module metadata 
Gradle,WITHOUT_CLASSIFICATION,//  old versions don't send a type 
Gradle,WITHOUT_CLASSIFICATION,// quote ' " \ $. Probably not perfect. TODO: identify non-working cases fail-fast on them 
Gradle,WITHOUT_CLASSIFICATION,//  CopySourceSpec overrides to broaden return type 
Gradle,WITHOUT_CLASSIFICATION,//  This will be the left most property 
Gradle,WITHOUT_CLASSIFICATION,//  A local anonymous class or a private inner class - ignore the reference 
Gradle,WITHOUT_CLASSIFICATION,//  Alternate appending packages at beginning and end until we reach max length 
Gradle,WITHOUT_CLASSIFICATION,//  but all resolved ok 
Gradle,WITHOUT_CLASSIFICATION,// jdk5 does not have days hours or minutes normalizing to millis 
Gradle,WITHOUT_CLASSIFICATION,//  Failure to select the target variant/configurations from this component given the dependency attributes/metadata. 
Gradle,WITHOUT_CLASSIFICATION,//  All items are complete. Do not release project lock and simply collect failures. 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize configuration to daemon via the process' stdin 
Gradle,WITHOUT_CLASSIFICATION,//  Adding a small set with no duplicates 
Gradle,WITHOUT_CLASSIFICATION,//  We only need to hide "main" so only support short named symbols here. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Duplicated in DefaultFileLockManager 
Gradle,WITHOUT_CLASSIFICATION,//  Write body 
Gradle,WITHOUT_CLASSIFICATION,//  Stop periodic checks 
Gradle,WITHOUT_CLASSIFICATION,//  Wire the antlr configuration into all antlr tasks 
Gradle,WITHOUT_CLASSIFICATION,//  A task created by a provider that does not understand launchables 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure tree is removed if it exists already 
Gradle,WITHOUT_CLASSIFICATION,/*  how and what do we have to parse  */
Gradle,WITHOUT_CLASSIFICATION,//  The identity check is intentional here do not replace with .equals() 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE <setter>(v) 
Gradle,WITHOUT_CLASSIFICATION,//  That means if the current class is not an InnerClassNode 
Gradle,WITHOUT_CLASSIFICATION,//  A ∩ (A ∪ B) ∩ (A ∪ C) -> A 
Gradle,WITHOUT_CLASSIFICATION,//  Only use this for top level settings scripts 
Gradle,WITHOUT_CLASSIFICATION,//  protocolVersion + lockId + type 
Gradle,WITHOUT_CLASSIFICATION,//  Special case for events defined prior to InternalProgressEvent 
Gradle,WITHOUT_CLASSIFICATION,//  element name 
Gradle,WITHOUT_CLASSIFICATION,//  Else already visited 
Gradle,WITHOUT_CLASSIFICATION,//  boolean 
Gradle,WITHOUT_CLASSIFICATION,//  Use preemptive authorisation if no other authorisation has been established 
Gradle,WITHOUT_CLASSIFICATION,//  don't rename other types of dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  The 'is'-getter is ignored we can skip it in favor of the 'get'-getter 
Gradle,WITHOUT_CLASSIFICATION,//  if the return type doesn't use generics then it's faster to just rely on the type name directly 
Gradle,WITHOUT_CLASSIFICATION,//  Defer creation of failures list assume dispatch will succeed 
Gradle,WITHOUT_CLASSIFICATION,//  When Groovy coerces a Closure into an SAM type then it creates a Proxy which is backed by the Closure.   We want to track the implementation of the Closure since the class name and classloader of the proxy will not change. 
Gradle,WITHOUT_CLASSIFICATION,//  Virtual platforms require their constraints to be recomputed each time as each module addition can cause a shift in versions 
Gradle,WITHOUT_CLASSIFICATION,//  Supports building 32-bit binaries 
Gradle,WITHOUT_CLASSIFICATION,//  Remove the "Daemon will be shut down" message 
Gradle,WITHOUT_CLASSIFICATION,//  Here we try to avoid using the reg exp backed pattern step as it is expensive in terms of performance and heap usage.   There are several special cases we handle here:   1. '*'   2. '*' <literal>   3. <literal> '*'   4. <literal> '*' <literal>   5. <literal>   Everything else uses a reg exp. 
Gradle,WITHOUT_CLASSIFICATION,// failed to instantiate BlockJUnitRunner. try deprecated JUnitRunner (for JUnit < 4.5) 
Gradle,WITHOUT_CLASSIFICATION,//  we are at the first name part. This is the right most part.   If this part is in lower case then we do not need a class   check. other parts of the property expression will be tested   by a different method call to this method so foo.Bar.bar   can still be resolved to the class foo.Bar and the static   field bar. 
Gradle,WITHOUT_CLASSIFICATION,//  ordinary Groovy Gradle script   Kotlin Gradle script 
Gradle,WITHOUT_CLASSIFICATION,//  in the map store a minimally populated LaunchableGradleTaskSelector that contains just the description and the path   replace the LaunchableGradleTaskSelector stored in the map iff we come across a task with the same name whose path has a smaller ordering   this way for each task selector its description will be the one from the selected task with the 'smallest' path 
Gradle,WITHOUT_CLASSIFICATION,//  the enqueue and dequeue methods are used for performance reasons 
Gradle,WITHOUT_CLASSIFICATION,//  remaining methods are here to make sure we didn't forget anything 
Gradle,WITHOUT_CLASSIFICATION,//  An internal counter used to track the number of outgoing edges   that use this selector. Since a module resolve state tracks all selectors   for this module when considering selectors that need to be used when   choosing a version we must only consider the ones which currently have   outgoing edges pointing to them. If not then it means the module was 
Gradle,WITHOUT_CLASSIFICATION,//  Skip processing of any operations that both start and complete in the queue 
Gradle,WITHOUT_CLASSIFICATION,/*         TODO change this so that we extract all the information at compile time.        At the moment we use the transform to:        1. validate/restrict the syntax        2. transform rules into something more robust (e.g. foo.bar.baz {} into configure("foo.bar.baz" {})) - no dynamic propertyMissing() nonsense        3. hoist out input references (i.e. $()) into an annotation on rule closure classes to make available        This means we actually have to execute the code block in order to find the rule information within.        This is also problematic because it means we have to serialize this information into some form that fits into annotations.        Later we will extract all the “up-front” information we need to know during compile time.        This will mean that we only need to execute the rules themselves and not any code to actually register the rules.      */
Gradle,WITHOUT_CLASSIFICATION,//  Converts the binaries of a project library into regular binary instances 
Gradle,WITHOUT_CLASSIFICATION,//  if there are only 3 or fewer known subtypes render them   in a single column 
Gradle,WITHOUT_CLASSIFICATION,//  not sure if this is required as its the parent of   deprecatedUsageLoader already
Gradle,WITHOUT_CLASSIFICATION,//  Worker didn't crash 
Gradle,WITHOUT_CLASSIFICATION,//  Classloader scope will be handled by the cache class will be released when the classloader is. 
Gradle,WITHOUT_CLASSIFICATION,//  Deserialize the old value and use the equals() implementation. This will be removed at some point 
Gradle,WITHOUT_CLASSIFICATION,//  Time interval between the first event in the window and the last 
Gradle,WITHOUT_CLASSIFICATION,//  copy in case any actions mutate the store   linked list because the underlying store may preserve order   We make best effort not to create an intermediate collection if this container   is empty. 
Gradle,WITHOUT_CLASSIFICATION,//  Check ClassLoaders 
Gradle,WITHOUT_CLASSIFICATION,//  Flush and clean up 
Gradle,WITHOUT_CLASSIFICATION,//  Apache commons 
Gradle,WITHOUT_CLASSIFICATION,//  Needed to use inside lambda below 
Gradle,WITHOUT_CLASSIFICATION,//  Pad 
Gradle,WITHOUT_CLASSIFICATION,//  (macOS) Looks like: Test Case '-[AppTest.PassingTestSuite testCanPassTestCaseWithAssertion]' started.   (Linux) Looks like: Test Case 'PassingTestSuite.testCanPassTestCaseWithAssertion' started. 
Gradle,WITHOUT_CLASSIFICATION,//  Only initialize "name" child node if the schema has such a managed property.   This is not the case for a managed subtype of an unmanaged type that implements Named. 
Gradle,WITHOUT_CLASSIFICATION,//  for all commons attributes make sure they are compatible with each other 
Gradle,WITHOUT_CLASSIFICATION,//  Any ProgressOperation in the parent chain has a message the operation is considered renderable. 
Gradle,WITHOUT_CLASSIFICATION,/*      * Configures the project discovers tasks and binds model rules.      */
Gradle,WITHOUT_CLASSIFICATION,// html does not like <a name="..."/> 
Gradle,WITHOUT_CLASSIFICATION,//  Missing parameter name 
Gradle,WITHOUT_CLASSIFICATION,//  Visit the selectors 
Gradle,WITHOUT_CLASSIFICATION,//  fallback to old behavior of always loading the resource 
Gradle,WITHOUT_CLASSIFICATION,//  Not quite immutable see ImmutablePatternSet 
Gradle,WITHOUT_CLASSIFICATION,//  Should never get here the last strategy should be a catch all
Gradle,WITHOUT_CLASSIFICATION,//  Add JVM args that were explicitly requested 
Gradle,WITHOUT_CLASSIFICATION,//  Before there was --scan there was -Dscan or -Dscan=true or -Dscan=yes 
Gradle,WITHOUT_CLASSIFICATION,//  Already seen this ClassLoader 
Gradle,WITHOUT_CLASSIFICATION,//  some capabilities are explicitly required (in other words we're not _necessarily_ looking for the default capability   so we need to filter the configurations 
Gradle,WITHOUT_CLASSIFICATION,//  there are still more than one candidate but this time we know only a subset strictly matches the required attributes   so we perform another round of selection on the remaining candidates 
Gradle,WITHOUT_CLASSIFICATION,//  There has been a GC event 
Gradle,WITHOUT_CLASSIFICATION,//  No statements or no statements that have an effect 
Gradle,WITHOUT_CLASSIFICATION,// noinspection ForLoopReplaceableByForEach 
Gradle,WITHOUT_CLASSIFICATION,//  if no installation can be located 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <arg>{1 3} 
Gradle,WITHOUT_CLASSIFICATION,//  Defaults 
Gradle,WITHOUT_CLASSIFICATION,//  XML declarations must be located at first position of first line 
Gradle,WITHOUT_CLASSIFICATION,//  2) we don't do progress logging for "downloading" 
Gradle,WITHOUT_CLASSIFICATION,//  Filter unexisting files as FindBugs can't handle them. 
Gradle,WITHOUT_CLASSIFICATION,//  CBZip2InputStream expects the opening "BZ" to be skipped 
Gradle,WITHOUT_CLASSIFICATION,//  try simplify 
Gradle,WITHOUT_CLASSIFICATION,//  We need to lock other processes out here because garbage collection can be under way in another process 
Gradle,WITHOUT_CLASSIFICATION,// we're making an assumption that all <pre> elements contain java code  this should mostly be true :)  if it isn't true then the syntax highlighting won't spoil the view too much anyway 
Gradle,WITHOUT_CLASSIFICATION,//  validate that the targetPlatform is valid 
Gradle,WITHOUT_CLASSIFICATION,//  Universal CRT is required only for VS2015 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public boolean hasProperty(String name) { return getAsDynamicObject().hasProperty(name) } 
Gradle,WITHOUT_CLASSIFICATION,// CHECKSTYLE:ON 
Gradle,WITHOUT_CLASSIFICATION,//  We avoid using reflect since that leads to class loading exceptions 
Gradle,WITHOUT_CLASSIFICATION,//  skip over stack trace 
Gradle,WITHOUT_CLASSIFICATION,//  <thead>     <tr>       <td>Method</td>       <td>Description</td>     </tr>   </thead> 
Gradle,WITHOUT_CLASSIFICATION,//  return state.equals(((GeneratedView)arg).__view_state()); 
Gradle,WITHOUT_CLASSIFICATION,//  When age == 0 verified since the start of this build assume listing hasn't changed 
Gradle,WITHOUT_CLASSIFICATION,//  Emulate secondary inputs as a single property for now 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - push all this stuff down to the tool chain and let it create the specific platform and provider 
Gradle,WITHOUT_CLASSIFICATION,//    Add `boolean immutable() { return true }`   
Gradle,WITHOUT_CLASSIFICATION,//  Don't know about this type 
Gradle,WITHOUT_CLASSIFICATION,//  Add the block line-number as an argument to call `plugins(int lineNumber Closure pluginsBlock)` 
Gradle,WITHOUT_CLASSIFICATION,//  We check the params passed to the build factory 
Gradle,WITHOUT_CLASSIFICATION,//  Failed in another thread 
Gradle,WITHOUT_CLASSIFICATION,//  Called when some other problem occurs 
Gradle,WITHOUT_CLASSIFICATION,//  A project is involved need to be aware of it
Gradle,WITHOUT_CLASSIFICATION,//  Store this because Locale.default is mutable and we want the unchanged default   We are assuming this class will be initialized before any code has a chance to change the default 
Gradle,WITHOUT_CLASSIFICATION,//  Only fire once 
Gradle,WITHOUT_CLASSIFICATION,//  Not a leaf node. Move up an entry from a leaf node then possibly merge the leaf node 
Gradle,WITHOUT_CLASSIFICATION,//  If the configuration can still be mutated we need to create a composite 
Gradle,WITHOUT_CLASSIFICATION,//  Disabled before 2.3 release due to not wanting to validate task names (which may contain invalid chars) at least not yet   ModelPath.validateName(name); 
Gradle,WITHOUT_CLASSIFICATION,//  Last group; what ever is left take that replace all characters that are not alphanum or '_' or '-' 
Gradle,WITHOUT_CLASSIFICATION,//  Else the provider is of incompatible type maybe we have a domain object collection of Provider fallthrough 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Default branch can be different from just master 
Gradle,WITHOUT_CLASSIFICATION,//  only create an intermediate collection if there's something to copy 
Gradle,WITHOUT_CLASSIFICATION,//  Convert the UTF-8 manifest bytes to the requested content charset 
Gradle,WITHOUT_CLASSIFICATION,//  Same as above if we have wrapped a closure in a WrappedConfigureAction or a ClosureBackedAction we want to 
Gradle,WITHOUT_CLASSIFICATION,//  If there's an explicit dependency from consuming node to destroyer   then we accept that as the will of the user 
Gradle,WITHOUT_CLASSIFICATION,//  check that groovy is visible. 
Gradle,WITHOUT_CLASSIFICATION,//  but visible as the surrounding class is imported and the inner class is public/protected static 
Gradle,WITHOUT_CLASSIFICATION,//  Wire the task into the library model 
Gradle,WITHOUT_CLASSIFICATION,//  Set the context classloader the bootstrap classloader to work around the way that JAXP locates implementation classes   This should ensure that the JAXP classes provided by the JVM are used rather than some other implementation 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <expression> <operator> <expression> 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Removing `debug` from variant name to keep parity with previous Gradle version in tooling models
Gradle,WITHOUT_CLASSIFICATION,//  Use a random prefix to avoid reusing test directories 
Gradle,WITHOUT_CLASSIFICATION,//  fast path for two 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore deal with this problem later
Gradle,WITHOUT_CLASSIFICATION,//  Looks in the correct project registry for this binary 
Gradle,WITHOUT_CLASSIFICATION,//  Have visited this node's dependencies - add it to the graph 
Gradle,WITHOUT_CLASSIFICATION,//  Same size and no differences 
Gradle,WITHOUT_CLASSIFICATION,//  If textArea is on a status line but nothing was written this means a new line was just written. While   we wait for additional text we assume this row doesn't count as overlapping and use it as a status   line. In the opposite case we want to scroll the progress area one more line. This avoid having an one 
Gradle,WITHOUT_CLASSIFICATION,//  Add artifact format as an implicit attribute when all artifacts have the same format 
Gradle,WITHOUT_CLASSIFICATION,//  TODO extract common stuff from this and ModelSet and reuse 
Gradle,WITHOUT_CLASSIFICATION,/*      * Allow null as a valid input. The default is to disallow null.     *     * <p>When this is enabled all converters must be null safe.     *     * TODO - attach the null safety to each converter and infer whether null is a valid input or not.      */
Gradle,WITHOUT_CLASSIFICATION,//  (ia64 is no longer supported on later versions of Visual Studio) 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - this belongs with the 'var' data structure 
Gradle,WITHOUT_CLASSIFICATION,//  Dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  See JLS3 "Binary Compatibility" (13.1) 
Gradle,WITHOUT_CLASSIFICATION,//  This could probably be more efficient 
Gradle,WITHOUT_CLASSIFICATION,//  else ignore 
Gradle,WITHOUT_CLASSIFICATION,//  Not already known attempt to self-close the parent 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - introduce a new 'var' data structure that allows these conventions to be configured explicitly 
Gradle,WITHOUT_CLASSIFICATION,//  Calculate the actual type 
Gradle,WITHOUT_CLASSIFICATION,//  Clear environment variables that might effect cl.exe & link.exe 
Gradle,WITHOUT_CLASSIFICATION,//  Save the existing object being deserialized. 
Gradle,WITHOUT_CLASSIFICATION,//  Does nothing 
Gradle,WITHOUT_CLASSIFICATION,// it's possible that we receive an output for a suite here  in this case we will create the test result for a suite that normally would not be created  feels like this scenario should modelled more explicitly 
Gradle,WITHOUT_CLASSIFICATION,//  Check the normal metadata first 
Gradle,WITHOUT_CLASSIFICATION,//  Mark this version as rejected 
Gradle,WITHOUT_CLASSIFICATION,//  let's override this so that delegate isn't created at autowiring time (which would mean on every build) 
Gradle,WITHOUT_CLASSIFICATION,//  Was previously traversed and no change to the set of modules that are linked by outgoing edges.   Don't need to traverse again but hang on to the new filter since it may change the set of excluded artifacts. 
Gradle,WITHOUT_CLASSIFICATION,//  Jansi is required to log errors when generating Groovydoc 
Gradle,WITHOUT_CLASSIFICATION,//  For now just collect this as another dependency   TODO - collect this information and merge the metadata from the other module 
Gradle,WITHOUT_CLASSIFICATION,//  Short-circuit selector merging for single selector without 'prefer' 
Gradle,WITHOUT_CLASSIFICATION,/*         Note: the intention here is to work towards not having to create new objects        to meet the notification object interfaces.        Instead the base types like BuildOperationDescriptor should implement them natively.        However this will require restructuring this type and associated things such as        OperationStartEvent. This will happen later.      */
Gradle,WITHOUT_CLASSIFICATION,//  We might be able to use a cached/locally available version 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Combine with ProjectDependencyPublicationResolver
Gradle,WITHOUT_CLASSIFICATION,//  Read shared packages 
Gradle,WITHOUT_CLASSIFICATION,//  Do not forward events for rendering when there are no listeners to receive 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore some broken samples 
Gradle,WITHOUT_CLASSIFICATION,//  <method>.getGenericReturnType() 
Gradle,WITHOUT_CLASSIFICATION,// when test is completed we should redirect output for the parent  so that log events emitted during @AfterSuite @AfterClass are processed 
Gradle,WITHOUT_CLASSIFICATION,//  Add more data patterns to the default configuration to work around https://github.com/gradle/gradle/issues/1596 
Gradle,WITHOUT_CLASSIFICATION,//  Build a strongly typed (mergeable) exclude spec for each supplied rule 
Gradle,WITHOUT_CLASSIFICATION,//  Otherwise already have a result so reuse it 
Gradle,WITHOUT_CLASSIFICATION,//  End of path might match when more elements added 
Gradle,WITHOUT_CLASSIFICATION,//  all of the interfaces that we decorate have 100% void methods  noinspection ConstantConditions 
Gradle,WITHOUT_CLASSIFICATION,//  TOOD:LPTR Should be just a relative path
Gradle,WITHOUT_CLASSIFICATION,//  first match just record the value. We can't use "null" as the candidate value may be null 
Gradle,WITHOUT_CLASSIFICATION,//  TODO The scope information is superseded by test attributes. We can delete the corresponding code bits once we make sure that the majority of Buildship users use test sources.
Gradle,WITHOUT_CLASSIFICATION,//  If this configuration's version is in conflict do not traverse.   If none of the incoming edges are transitive remove previous state and do not traverse.   If not traversed before simply add all selected outgoing edges (either hard or pending edges)   If traversed before:        If net exclusions for this node have not changed ignore        If net exclusions for this node not changed remove previous state and traverse outgoing edges again. 
Gradle,WITHOUT_CLASSIFICATION,//  Selected for the configuration 
Gradle,WITHOUT_CLASSIFICATION,//  Forward output immediately when the focus is on this operation group 
Gradle,WITHOUT_CLASSIFICATION,//  Note that @CompileClasspath here is an approximation and must be fixed before de-incubating getAstTransformationClasspath()   See https://github.com/gradle/gradle/pull/9513 
Gradle,WITHOUT_CLASSIFICATION,//  This means the client has not reported memory usage yet 
Gradle,WITHOUT_CLASSIFICATION,//  first let antlr preprocess the grammars... 
Gradle,WITHOUT_CLASSIFICATION,/*             Note: we currently extract this information from the execution plan because it's            buried under functions in #filter. This could be detangled/simplified by introducing            excludeTasks(Iterable<Task>) as an analog to addEntryTasks(Iterable<Task>).            This is too drastic a change for the stage in the release cycle were exposing this information            was necessary therefore the minimal change solution was implemented.          */
Gradle,WITHOUT_CLASSIFICATION,//  When cancelled try to stop the download thread but don't attempt to wait for it to complete   Could possibly loop here for a while trying to force the thread to exit 
Gradle,WITHOUT_CLASSIFICATION,//  possibly an inner class 
Gradle,WITHOUT_CLASSIFICATION,//  File loop exceptions are ignored. When we encounter a loop (via symbolic links) we continue   so we include all the other files apart from the loop.   This way we include each file only once. 
Gradle,WITHOUT_CLASSIFICATION,//  When dependency resolution has failed we don't want the build operation listeners to fail as well   because:   1. the `failed` method will have been called with the user facing error   2. such an error may still lead to a valid dependency graph 
Gradle,WITHOUT_CLASSIFICATION,//  Recreate the invoker when deserialized rather than serialize all its state 
Gradle,WITHOUT_CLASSIFICATION,/*  method was only introduced in Groovy 1.8  */
Gradle,WITHOUT_CLASSIFICATION,//  Generate: <init>(Object[] state) { } 
Gradle,WITHOUT_CLASSIFICATION,//  make convention mapping work (at least for 'main'...   ...and for 'jvmArgs') 
Gradle,WITHOUT_CLASSIFICATION,//  found more than one 
Gradle,WITHOUT_CLASSIFICATION,//  Rely on the default linkage for providing the headers 
Gradle,WITHOUT_CLASSIFICATION,//  Unrecognized extension 
Gradle,WITHOUT_CLASSIFICATION,//  The CustomRunner class will fail this test if this class is initialized before its    run method is triggered.
Gradle,WITHOUT_CLASSIFICATION,//  Cannot yet publish module metadata without component 
Gradle,WITHOUT_CLASSIFICATION,//  in-process Groovy compilation throws a CompilationFailedException from another classloader hence testing class name equality   TODO:pm Prefer class over class name for equality check once using WorkerExecutor for in-process groovy compilation 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - do not hold lock while computing value 
Gradle,WITHOUT_CLASSIFICATION,//  Generate: int getFactoryId() { return <factory-id-field> } 
Gradle,WITHOUT_CLASSIFICATION,//  Using the caches for these connections leaves the Jar files open. Don't use the cache so that the Jar file is closed when the stream is closed below   There are other options for solving this that may be more performant. However a class is inspected this way once and the result reused so this approach is probably fine
Gradle,WITHOUT_CLASSIFICATION,//  for guessing right side part of a mapping 
Gradle,WITHOUT_CLASSIFICATION,//  Update any previously known files with a bogus timestamp to force a rebuild 
Gradle,WITHOUT_CLASSIFICATION,//  In case of getting a ConstructedClassWithPackage here we do not do checks for partial   matches with imported classes. The ConstructedClassWithPackage is already a constructed 
Gradle,WITHOUT_CLASSIFICATION,//  See TestDataGeneratorTest for examples 
Gradle,WITHOUT_CLASSIFICATION,//  The compilation will generate the new mapping file   Only merge old mappings into new mapping on incremental recompilation 
Gradle,WITHOUT_CLASSIFICATION,//  Should be using ConfigureUtil (with DELEGATE_FIRST strategy) however for backwards compatibility need to use OWNER_FIRST 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - calculate this list of classes dynamically 
Gradle,WITHOUT_CLASSIFICATION,//  Collect incremental input changes 
Gradle,WITHOUT_CLASSIFICATION,//  for Groovy <1.6 we need to call org.codehaus.groovy.runtime.InvokerHelper#getVersion 
Gradle,WITHOUT_CLASSIFICATION,//  Any configuring event received from nested or buildSrc builds before the root build starts configuring is ignored 
Gradle,WITHOUT_CLASSIFICATION,// optional 
Gradle,WITHOUT_CLASSIFICATION,//  First try to determine the artifacts in-memory (e.g using the metadata): don't use the cache in this case 
Gradle,WITHOUT_CLASSIFICATION,//  experimentation shows the following excluded modules are   inherited from parent POMs if either of the following is true:   the <exclusions> element is missing or the <exclusions> element 
Gradle,WITHOUT_CLASSIFICATION,//  Chuck away the implicit target. It has already been executed 
Gradle,WITHOUT_CLASSIFICATION,//  construct build invocations from task selectors and project tasks 
Gradle,WITHOUT_CLASSIFICATION,/*                 val leftResult = result.left()                val errorSeq = left.get()                // convert errorSeq -> Java types              */
Gradle,WITHOUT_CLASSIFICATION,//  Configure the binaries 
Gradle,WITHOUT_CLASSIFICATION,//  For legacy software model behaviour which is to assume that any kind of runtime can be built when any compiler is available 
Gradle,WITHOUT_CLASSIFICATION,//  Ensure that deploy jars are not also added into lib folder.   Allows the user to get transitive dependencies for a bean artifact by adding it to both earlib and deploy but only having the file once in the ear. 
Gradle,WITHOUT_CLASSIFICATION,//  Versions before 5.1 would unpack the exception and throw part of it losing some context 
Gradle,WITHOUT_CLASSIFICATION,//  Maps from interned absolute path for a file to metadata for the file. 
Gradle,WITHOUT_CLASSIFICATION,//  Don't traverse path back to root when there is nothing that can possibly match 
Gradle,WITHOUT_CLASSIFICATION,//  Find failure section 
Gradle,WITHOUT_CLASSIFICATION,//  For example when using a local access to resolve something remote 
Gradle,WITHOUT_CLASSIFICATION,//  Do we have an 'is'-getter as well as a 'get'-getter?
Gradle,WITHOUT_CLASSIFICATION,//  There are enough entries in this block and the right sibling to make up 2 blocks so redistribute   the entries evenly between them 
Gradle,WITHOUT_CLASSIFICATION,//  Capture the relative file 
Gradle,WITHOUT_CLASSIFICATION,/*  if it's already OSGi compliant don't touch it  */
Gradle,WITHOUT_CLASSIFICATION,//  Already visited this node 
Gradle,WITHOUT_CLASSIFICATION,//  Collect a map from component to coordinates. This might be better to move to the component or some publications model 
Gradle,WITHOUT_CLASSIFICATION,//  For each module participating in the conflict deselect the currently selection and remove all outgoing edges from the version. 
Gradle,WITHOUT_CLASSIFICATION,//  Nothing accessible always up to date 
Gradle,WITHOUT_CLASSIFICATION,//  This is not the root block. Must have children >= minIndexChildNodes 
Gradle,WITHOUT_CLASSIFICATION,//  Compile all main routes files last 
Gradle,WITHOUT_CLASSIFICATION,//  This is necessary so that the watcher indicates its not running if the runnable gets cancelled 
Gradle,WITHOUT_CLASSIFICATION,//  ok to use caller classloader 
Gradle,WITHOUT_CLASSIFICATION,//  here we need to check that applying the new resolution filter   we would actually exclude exactly the same dependencies as in   the previous visit. It is important that this is NOT a heuristic   (it used to be) because if the filters are _equivalent_ we would 
Gradle,WITHOUT_CLASSIFICATION,//  Iterate through each page of results and add them to our results list. 
Gradle,WITHOUT_CLASSIFICATION,//  Note that the sourceSet is the sourceSet this pre-compiled header will be used with - it's not an   input sourceSet to the compile task. 
Gradle,WITHOUT_CLASSIFICATION,//  Stop is very slow clean it up later 
Gradle,WITHOUT_CLASSIFICATION,//  Maximum pool size is fixed so we should only need to get it from the first event 
Gradle,WITHOUT_CLASSIFICATION,//  If no tasks is specified then the default tasks will be executed.   To work around this we assign a new empty task for execution. 
Gradle,WITHOUT_CLASSIFICATION,//  See the comment for {@link #createIsolatedClassLoader} above 
Gradle,WITHOUT_CLASSIFICATION,// the unlock was confirmed we are waiting 
Gradle,WITHOUT_CLASSIFICATION,//  First try to determine the artifacts locally before going remote 
Gradle,WITHOUT_CLASSIFICATION,//  In case more descendants are added to downward hierarchy make sure they'll notify us 
Gradle,WITHOUT_CLASSIFICATION,//  implementation based on Spock's StackTraceFilter class 
Gradle,WITHOUT_CLASSIFICATION,//  No C++ compiler complain about it 
Gradle,WITHOUT_CLASSIFICATION,//  Need to override as error message is hardcoded in constructor of public type ResolveException
Gradle,WITHOUT_CLASSIFICATION,//  MSVC doesn't allow a space between Fo and the file name 
Gradle,WITHOUT_CLASSIFICATION,//  At this point we know that we have a match for pname. This may   mean that name[pname.length()..<-1] is a static inner class.   For this the rest of the name does not need any dots in its name.   It is either completely a inner static class or it is not.   Since we do not want to have useless lookups we create the name   completely and use a ConstructedClassWithPackage to prevent lookups against the package. 
Gradle,WITHOUT_CLASSIFICATION,//  BuildListener 
Gradle,WITHOUT_CLASSIFICATION,//  Clean the interrupted status 
Gradle,WITHOUT_CLASSIFICATION,//  A work around for not being able to skip the task when an input _file_ does not exist 
Gradle,WITHOUT_CLASSIFICATION,//  Reserve 0 for null (to be added later) 
Gradle,WITHOUT_CLASSIFICATION,//    Add factory method   
Gradle,WITHOUT_CLASSIFICATION,//  Nothing - just return the highest version 
Gradle,WITHOUT_CLASSIFICATION,//    Add `getFactoryId()` 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Register these mappings somewhere 
Gradle,WITHOUT_CLASSIFICATION,//  AST transforms need their own class loader that shares compiler classes with the compiler itself 
Gradle,WITHOUT_CLASSIFICATION,//  Replace absent Provider with null.   This is required for allowing optional provider properties - all code which unpacks providers calls Provider.get() and would fail if an optional provider is passed.   Returning null from a Callable is ignored and PropertyValue is a callable. 
Gradle,WITHOUT_CLASSIFICATION,//  Defer creation and resolution of configuration until required. Short-circuit when script does not require classpath 
Gradle,WITHOUT_CLASSIFICATION,//  Fall back to serialization 
Gradle,WITHOUT_CLASSIFICATION,//  If stdout and stderr are attached to the console 
Gradle,WITHOUT_CLASSIFICATION,//  Equal values are compatible 
Gradle,WITHOUT_CLASSIFICATION,//  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-BooleanLiteral 
Gradle,WITHOUT_CLASSIFICATION,//  Zero or more * characters followed by literal followed by at least one * 
Gradle,WITHOUT_CLASSIFICATION,//  classpath change?
Gradle,WITHOUT_CLASSIFICATION,//  Use DirectInstantiator here to avoid setting up the instantiation infrastructure early 
Gradle,WITHOUT_CLASSIFICATION,//  Versions before 5.1 would sometimes add some additional 'build cancelled' exceptions 
Gradle,WITHOUT_CLASSIFICATION,//  References some fixed value expression return it after macro expanding 
Gradle,WITHOUT_CLASSIFICATION,//  Swift tests will always have a toolchain requirement for swiftc 
Gradle,WITHOUT_CLASSIFICATION,//  else leading ':' this is ok 
Gradle,WITHOUT_CLASSIFICATION,//  We don't have mutable access to the project so we throw a deprecation warning and then continue with   lenient locking to prevent deadlocks in user-managed threads. 
Gradle,WITHOUT_CLASSIFICATION,//  We don't really need to handle this.
Gradle,WITHOUT_CLASSIFICATION,// btw. the ibm vm+winXP also has some issues detecting closed streams by the child but we handle this problem differently. 
Gradle,WITHOUT_CLASSIFICATION,//  lists all the values a revision token listed by a given url lister 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - also close console when it is replaced 
Gradle,WITHOUT_CLASSIFICATION,//  A sequence of tokens that look like a function call argument list. Should support an arbitrary token sequence 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Decide if we want to push the gate concept into TAPI or other entry points   currently a gate is only used by continuous build and can only be controlled from within the build.
Gradle,WITHOUT_CLASSIFICATION,//  @Param({"md5.java" "md5.bc" "sha1.java" "sha1.bc" "blake2b.bc"}) 
Gradle,WITHOUT_CLASSIFICATION,//  Visit the nodes prior to visiting the edges 
Gradle,WITHOUT_CLASSIFICATION,//  Everything else treat as a generic operation 
Gradle,WITHOUT_CLASSIFICATION,//  Native Services 
Gradle,WITHOUT_CLASSIFICATION,// Skip content download 
Gradle,WITHOUT_CLASSIFICATION,//  Generate makeRule() method 
Gradle,WITHOUT_CLASSIFICATION,// noinspection SwitchStatementWithTooFewBranches 
Gradle,WITHOUT_CLASSIFICATION,//  Need to delete the previous archive otherwise stale object files will remain 
Gradle,WITHOUT_CLASSIFICATION,//  only set the TaskOperation as the parent if the Tooling API Consumer is listening to task progress events 
Gradle,WITHOUT_CLASSIFICATION,//  TargetJDK does not include 1.1 1.2 and 1.8;   Use same fallback as PMD 
Gradle,WITHOUT_CLASSIFICATION,//  buffer has been fully read start at the beginning 
Gradle,WITHOUT_CLASSIFICATION,//  Exactly Visual Studio 2019 
Gradle,WITHOUT_CLASSIFICATION,//  Note: this listener manager is scoped to the root Gradle object. 
Gradle,WITHOUT_CLASSIFICATION,//  Default for everything else 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore the tag section of the comment 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier> <arg-list> <operator> <expression>   Map to: passThrough(task('<identifier>' <arg-list>) <operator> <expression>) 
Gradle,WITHOUT_CLASSIFICATION,//  performs a fast analysis of classes referenced in bytecode (method bodies) 
Gradle,WITHOUT_CLASSIFICATION,//  If we have no caching options just get the thing directly 
Gradle,WITHOUT_CLASSIFICATION,//  Anything left over only exists in the new list 
Gradle,WITHOUT_CLASSIFICATION,//  add the configurations from this temporary parser to this module descriptor 
Gradle,WITHOUT_CLASSIFICATION,//  Old Scala Plugin does not specify a ScalaPlatform 
Gradle,WITHOUT_CLASSIFICATION,//  The fingerprint hashes for non-regular files are slightly different to the snapshot hashes we only need to compare them for regular files 
Gradle,WITHOUT_CLASSIFICATION,//  Implementation is provided by 'plugin-use' module 
Gradle,WITHOUT_CLASSIFICATION,//  Implementation is generated 
Gradle,WITHOUT_CLASSIFICATION,// just returns the original object 
Gradle,WITHOUT_CLASSIFICATION,//  Iterate over the metadata sources to see if they can provide the version list 
Gradle,WITHOUT_CLASSIFICATION,//  No identifier allow anything except '(' or '' or ')' 
Gradle,WITHOUT_CLASSIFICATION,//  Input events 
Gradle,WITHOUT_CLASSIFICATION,//  File did not exist before locking use some initial state 
Gradle,WITHOUT_CLASSIFICATION,//  Start the pipeline in reverse order:   1. mark daemon as running   2. start handling incoming commands   3. start accepting incoming connections   4. advertise presence in registry 
Gradle,WITHOUT_CLASSIFICATION,//  Corner case of Maven -SNAPSHOT compat 
Gradle,WITHOUT_CLASSIFICATION,//  if the collection is a read-only property it must be initialized first (it will never be null)   if the collection is *not* read-only then we will initialize it only if the collection is the   subject of a rule that is to say that it can be mutated. This may look strange if a read-write   collection is null to initialize it to an empty list but this is how the specs define reaw-write   collections of scalar types. 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure all entries are always written in the same order 
Gradle,WITHOUT_CLASSIFICATION,//  we need to compute a hash for a constant which is based on the name of the constant + its value   otherwise we miss the case where a class defines several constants with the same value or when   two values are switched  non-private const 
Gradle,WITHOUT_CLASSIFICATION,/*      * Tries to minimize the number of requests to the resolution engine by batching up requests     * for sources/javadoc.     *     * There is still some inefficiency because the ArtifactCollection interface does not provide     * detailed failure results so we have to fall back to the more expensive ResolutionResult API.     * We should fix this as other IDE vendors will face the same problem.      */
Gradle,WITHOUT_CLASSIFICATION,//  Not sure this can happen unless in error state 
Gradle,WITHOUT_CLASSIFICATION,//  ignore these test suites 
Gradle,WITHOUT_CLASSIFICATION,//  skip exact matches 
Gradle,WITHOUT_CLASSIFICATION,//  runtime check because method is used from Groovy where type bounds are not respected 
Gradle,WITHOUT_CLASSIFICATION,//  type payload size 
Gradle,WITHOUT_CLASSIFICATION,//  Check that ivy.xml isn't duplicated 
Gradle,WITHOUT_CLASSIFICATION,//  When age == 0 verified since the start of this build assume still missing 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - allow @InputFile and @SkipWhenEmpty to be attached to getExecutableFile() 
Gradle,WITHOUT_CLASSIFICATION,//  Save a reference to the dependency that was written before 
Gradle,WITHOUT_CLASSIFICATION,//  Maybe this type belongs in the same package as the node that is doing the   static import. In that case the package may not have been explicitly specified.   Try with the node's package too. If still not found revert to original type name. 
Gradle,WITHOUT_CLASSIFICATION,//  Not marked as @Nullable because of Groovy compiler bug: https://issues.apache.org/jira/browse/GROOVY-8505 
Gradle,WITHOUT_CLASSIFICATION,//  This happens for IBM JDK 6 for nested interfaces -- see https://issues.apache.org/jira/browse/GROOVY-7010   Let's try to return something as close as possible to the intended value 
Gradle,WITHOUT_CLASSIFICATION,//  Not public. Evaluation of these specs is a major hot spot for large builds so use an array for iteration 
Gradle,WITHOUT_CLASSIFICATION,//  Expire compatible idle not recently used Daemons after a short time 
Gradle,WITHOUT_CLASSIFICATION,// The values are based on what I have found in sbt-compiler-maven-plugin.googlecode.com and zinc documentation  Hard to say what effect they have on the incremental build 
Gradle,WITHOUT_CLASSIFICATION,//  Not a zip file 
Gradle,WITHOUT_CLASSIFICATION,//  Cannot convert 
Gradle,WITHOUT_CLASSIFICATION,//  static classes are used for the actions to avoid implicitly dragging project/tasks into the model registry 
Gradle,WITHOUT_CLASSIFICATION,//  Add outgoing configurations and publications 
Gradle,WITHOUT_CLASSIFICATION,//  eliminate the common root 
Gradle,WITHOUT_CLASSIFICATION,//  The strategy for sharing build cache configuration across included builds in a composite   requires that the cache configuration be finalized (and cache controller available)   before configuring them. This achieves that. 
Gradle,WITHOUT_CLASSIFICATION,//  Pass build JVM args through to daemon via system property on the launcher JVM 
Gradle,WITHOUT_CLASSIFICATION,//  look into the compile unit if there is a class with that name 
Gradle,WITHOUT_CLASSIFICATION,//  When used as an input add the producing tasks if known 
Gradle,WITHOUT_CLASSIFICATION,//  no changes yet   handle case where monotonic clock isn't monotonic 
Gradle,WITHOUT_CLASSIFICATION,//  type2 = ? extends S never contained 
Gradle,WITHOUT_CLASSIFICATION,//  There is a possibility that a platform version was selected before a new member   of the platform was discovered. In this case we need to restart the selection   or some members will not be upgraded 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize the worker config this is consumed by SystemApplicationClassLoaderWorker 
Gradle,WITHOUT_CLASSIFICATION,//  values from `JvmPackageNameTest` 
Gradle,WITHOUT_CLASSIFICATION,//  We allow the gradle version to be overridden for tests that are sensitive   to the version and need to test with various different version patterns.   We use an env variable because these are easy to set on daemon startup   whereas system properties are scrubbed at daemon startup.
Gradle,WITHOUT_CLASSIFICATION,//  Ignore input received after the monitor operation has been completed 
Gradle,WITHOUT_CLASSIFICATION,//  Restore the environment 
Gradle,WITHOUT_CLASSIFICATION,// noinspection ConstantConditions 
Gradle,WITHOUT_CLASSIFICATION,//  Create variants container only as required 
Gradle,WITHOUT_CLASSIFICATION,//  Currently not supported 
Gradle,WITHOUT_CLASSIFICATION,//  Different implementation - assume value has changed 
Gradle,WITHOUT_CLASSIFICATION,//  Float f = (Float) tmp   f==null?0:f.floatValue() 
Gradle,WITHOUT_CLASSIFICATION,//  if more than one conflicting project dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  acquiring the exclusive lock can fail in the rare case where another process is just doing or has just done the cache initialization 
Gradle,WITHOUT_CLASSIFICATION,// started enable 
Gradle,WITHOUT_CLASSIFICATION,//  Copied from http://hc.apache.org/httpcomponents-client-ga/ntlm.html 
Gradle,WITHOUT_CLASSIFICATION,//  return this.metaClass 
Gradle,WITHOUT_CLASSIFICATION,//  Ignored 
Gradle,WITHOUT_CLASSIFICATION,//  Reasonable default threshold bounds: between 384M and 1G 
Gradle,WITHOUT_CLASSIFICATION,//  solution   IllegalAccessException 
Gradle,WITHOUT_CLASSIFICATION,//  This can happen if this is used in a constructor or a @Before method. It also happens when using   @RunWith(SomeRunner) when the runner does not support rules. 
Gradle,WITHOUT_CLASSIFICATION,//  Mark all affected configurations as observed 
Gradle,WITHOUT_CLASSIFICATION,//  no filtering in place 
Gradle,WITHOUT_CLASSIFICATION,//  These will also be copied across to any daemon used 
Gradle,WITHOUT_CLASSIFICATION,//  Exactly Visual Studio 2013 
Gradle,WITHOUT_CLASSIFICATION,//  end::isolating-annotation-processor[] 
Gradle,WITHOUT_CLASSIFICATION,// (SF) This approach should generally work because at the moment we reset capturing output per suite  (see CaptureTestOutputTestResultProcessor) and that reset happens earlier in the chain.  So in theory when suite is completed the output redirector has been already stopped  and there shouldn't be any output events passed  See also GRADLE-2035 
Gradle,WITHOUT_CLASSIFICATION,// when no daemon process has started yet 
Gradle,WITHOUT_CLASSIFICATION,//  Dummy rule to cause the extension to be realized 
Gradle,WITHOUT_CLASSIFICATION,//  The registered nodes may contain nodes which are no longer selected.   We don't remove them from the list in the first place because it proved to be   slower than filtering as needed. 
Gradle,WITHOUT_CLASSIFICATION,//  This is necessary because for the Tooling Api compatibility runner NativeServices   can get initialized in a different classloader which then makes it broken and unusable   in the test class (because the native shared library is loaded from another classloader).   By initializing it here we ensure that it is loaded from the classloader the test class   also uses. 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public ExtensionContainer getExtensions() { return getConvention(); } 
Gradle,WITHOUT_CLASSIFICATION,//  Read server address and start connecting 
Gradle,WITHOUT_CLASSIFICATION,//  Defer dependencies gathering as we need to resolve across project's boundaries 
Gradle,WITHOUT_CLASSIFICATION,//    Add `name` field   
Gradle,WITHOUT_CLASSIFICATION,//  Empty initial operation to trigger onStartWork calls 
Gradle,WITHOUT_CLASSIFICATION,//  2.x and 3.0-milestone-1 work on Java 6 - 8 
Gradle,WITHOUT_CLASSIFICATION,//  Use the highest preferred version that refines the chosen 'require' selector 
Gradle,WITHOUT_CLASSIFICATION,//  When not running from a Gradle distro need runtime impl for launcher plus the search path to look for other modules 
Gradle,WITHOUT_CLASSIFICATION,//  to avoid silent retry 
Gradle,WITHOUT_CLASSIFICATION,//  end::aggregating-annotation-processor[] 
Gradle,WITHOUT_CLASSIFICATION,//  SkipWhenEmpty implies incremental.   If this file property is empty then we clean up the previously generated outputs.   That means that there is a very close relation between the file property and the output. 
Gradle,WITHOUT_CLASSIFICATION,//  cannot compute at task execution time because we need association with source set 
Gradle,WITHOUT_CLASSIFICATION,//  end::functional-test-junit[] 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore this will be reported later 
Gradle,WITHOUT_CLASSIFICATION,// the unlock was just requested but not yet confirmed give it some more time 
Gradle,WITHOUT_CLASSIFICATION,// triggered through tooling API of Gradle <2.3 - native-platform.dll is shared by tooling client (<2.3) and daemon (current) and it is locked by the client (<2.3 issue) 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore all but the first recorded annotation 
Gradle,WITHOUT_CLASSIFICATION,//  This factory should be injected but leaves non-daemon threads running when used from the tooling API client 
Gradle,WITHOUT_CLASSIFICATION,//  the collection will only be initialized if more than one project candidate is found 
Gradle,WITHOUT_CLASSIFICATION,//  Check if node was previously traversed with the same net exclusion when not a virtual platform 
Gradle,WITHOUT_CLASSIFICATION,//  Read path to Gradle user home 
Gradle,WITHOUT_CLASSIFICATION,//  Don't care collect the files later (in the correct order) 
Gradle,WITHOUT_CLASSIFICATION,//  Mandatory 
Gradle,WITHOUT_CLASSIFICATION,//  Ensure we have a scope 
Gradle,WITHOUT_CLASSIFICATION,//  Used by generated code 
Gradle,WITHOUT_CLASSIFICATION,//  This deals with the fact that in TestNG there are no class-level events   but we nevertheless want to see the class name. We use "." rather than   " > " as a separator to make it clear that the class is not a separate   level. This matters when configuring granularity. 
Gradle,WITHOUT_CLASSIFICATION,//  Drain the buffer before returning end-of-stream 
Gradle,WITHOUT_CLASSIFICATION,//  assume indentation uses spaces 
Gradle,WITHOUT_CLASSIFICATION,//  Otherwise we defer to the judgement of our internal backoff handler. 
Gradle,WITHOUT_CLASSIFICATION,//  slowest path full distribution   (A ∪ B) ∩ (C ∪ D) = (A ∩ C) ∪ (A ∩ D) ∪ (B ∩ C) ∪ (B ∩ D) 
Gradle,WITHOUT_CLASSIFICATION,//  value 
Gradle,WITHOUT_CLASSIFICATION,//  Reset security manager the tests seem to have installed 
Gradle,WITHOUT_CLASSIFICATION,//  No supposed to happen 
Gradle,WITHOUT_CLASSIFICATION,//  Sort of determinism 
Gradle,WITHOUT_CLASSIFICATION,//  Keep the files and discard the origin values instead?
Gradle,WITHOUT_CLASSIFICATION,//  Short lived process don't cache in memory 
Gradle,WITHOUT_CLASSIFICATION,//  Does not match element will never match when more elements added 
Gradle,WITHOUT_CLASSIFICATION,//  We know that Jvm binaries are BinarySpec instances 
Gradle,WITHOUT_CLASSIFICATION,//  Search in the standard installation locations and construct 
Gradle,WITHOUT_CLASSIFICATION,//  This is used to parse a YAML file 
Gradle,WITHOUT_CLASSIFICATION,//  Check for duplicates 
Gradle,WITHOUT_CLASSIFICATION,//  Any work execution happening in nested or buildSrc builds before the root build has started executing work is ignored 
Gradle,WITHOUT_CLASSIFICATION,//  Write a line separator after any block 
Gradle,WITHOUT_CLASSIFICATION,//  The usage pattern of this exception providing the rule identity and the cause providing the detail is the   way it is due to how we render chained exceptions on build failures.   That is because the information is usually dense splitting things up this way provides better output. 
Gradle,WITHOUT_CLASSIFICATION,//  Take ownership 
Gradle,WITHOUT_CLASSIFICATION,//  Exactly Visual Studio 2017 
Gradle,WITHOUT_CLASSIFICATION,//          mapping = new ConventionAwareHelper(this getConvention());       }       return mapping;   } 
Gradle,WITHOUT_CLASSIFICATION,//  If you update FILE_STORE you may also need to update LocallyAvailableResourceFinderFactory 
Gradle,WITHOUT_CLASSIFICATION,//  Optimize for the single entry case makes findEntry faster 
Gradle,WITHOUT_CLASSIFICATION,//  The following types can appear anywhere in the code   but say nothing about API or implementation usage 
Gradle,WITHOUT_CLASSIFICATION,//  RC has position sensitive arguments the output args need to appear before the source file 
Gradle,WITHOUT_CLASSIFICATION,//  getMetaClass(..) 
Gradle,WITHOUT_CLASSIFICATION,//  Use this instead of Description.getMethodName() it is not available in JUnit <= 4.5 
Gradle,WITHOUT_CLASSIFICATION,//  we don't currently hold the project lock 
Gradle,WITHOUT_CLASSIFICATION,//  1) Add a new 'antlr' virtual directory mapping 
Gradle,WITHOUT_CLASSIFICATION,//  Only called when node exists 
Gradle,WITHOUT_CLASSIFICATION,//  1.5 
Gradle,WITHOUT_CLASSIFICATION,//  Discard information region 
Gradle,WITHOUT_CLASSIFICATION,//  hashcode will always be used so we precompute it in order to make sure we   won't compute it multiple times during comparisons 
Gradle,WITHOUT_CLASSIFICATION,//  created since last execution possibly by another task 
Gradle,WITHOUT_CLASSIFICATION,//  Lock-in explicitly included builds 
Gradle,WITHOUT_CLASSIFICATION,//  Test Suite 'PassingTestSuite' started at 2017-10-30 10:45:47.828 
Gradle,WITHOUT_CLASSIFICATION,//  check for star imports (import static pkg.Outer.*) matching static inner classes 
Gradle,WITHOUT_CLASSIFICATION,//  Don't need to match on path 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE (args instanceof Object[]) ? args : new Object[] { args } 
Gradle,WITHOUT_CLASSIFICATION,//  Discard the calculated files collection too but need to retain the display name for it 
Gradle,WITHOUT_CLASSIFICATION,//  We consider only extra attributes which are NOT on every candidate:   Because they are EXTRA attributes we consider that a   candidate which does NOT provide this value is a better match 
Gradle,WITHOUT_CLASSIFICATION,//  nop if all ok 
Gradle,WITHOUT_CLASSIFICATION,//  if a SHA-256 hash sum has been defined in gradle-wrapper.properties verify it here 
Gradle,WITHOUT_CLASSIFICATION,//  Since a single `Artifact` is shared between configurations share the metadata type as well. 
Gradle,WITHOUT_CLASSIFICATION,//  Currently only snapshot the console output listener. Should snapshot all output listeners and cleanup in restore() 
Gradle,WITHOUT_CLASSIFICATION,//  Setup component 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - lock this down 
Gradle,WITHOUT_CLASSIFICATION,//  Exactly Visual Studio 2015 
Gradle,WITHOUT_CLASSIFICATION,//  This should turn into a set of converters at some point 
Gradle,WITHOUT_CLASSIFICATION,//  Important that this is constructed on the client so that it has the right gradleHomeDir and other state internally 
Gradle,WITHOUT_CLASSIFICATION,//  Convention 
Gradle,WITHOUT_CLASSIFICATION,//  1.4 
Gradle,WITHOUT_CLASSIFICATION,//  4) set up convention mapping for default sources (allows user to not have to specify) 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: CC make capabilities accessible to rules
Gradle,WITHOUT_CLASSIFICATION,// remove the last walked should run after edge and restore state from before walking it 
Gradle,WITHOUT_CLASSIFICATION,//  Collect nodes as implicit capability providers if different than current node selected and not having explicit capabilities 
Gradle,WITHOUT_CLASSIFICATION,//  Ensure a clean end of the line when the area scrolls 
Gradle,WITHOUT_CLASSIFICATION,//  same as default conf but is used 
Gradle,WITHOUT_CLASSIFICATION,//  Capture changes to implementation 
Gradle,WITHOUT_CLASSIFICATION,//  Broken meta-data bail 
Gradle,WITHOUT_CLASSIFICATION,//  1.3 
Gradle,WITHOUT_CLASSIFICATION,//  if we reach this point no match was found either because there are no versions matching the selector 
Gradle,WITHOUT_CLASSIFICATION,//  Flags 
Gradle,WITHOUT_CLASSIFICATION,//  Capture input files state 
Gradle,WITHOUT_CLASSIFICATION,//  we have not root source folder information for the grammar files   so we don't force relativeOutput as we can't calculate it.   This results in flat generated sources in the output directory 
Gradle,WITHOUT_CLASSIFICATION,//  Gradle stuff 
Gradle,WITHOUT_CLASSIFICATION,//  These fields are not covered by mutation lock 
Gradle,WITHOUT_CLASSIFICATION,//  Select all entry points. An entry point is a publication that does not contain a component whose parent is also published 
Gradle,WITHOUT_CLASSIFICATION,//  stack traces are filtered in call order (from bottom to top) 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - this should be an input 
Gradle,WITHOUT_CLASSIFICATION,// allow the daemon to be started concurrently 
Gradle,WITHOUT_CLASSIFICATION,//  File.createTempFile sets the location of the temp directory to a static variable on the first call.  This prevents future   changes to java.io.tmpdir from having any effect in the same process.  We set this to use a common tmp directory for all   tests running in the same process so that we don't have a situation where one process initializes with a tmp directory   that it then removes causing an IOException for any future tests that run in the same process and call File.createTempFile. 
Gradle,WITHOUT_CLASSIFICATION,//  Capture and restore this in case the build code calls Locale.setDefault() 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore the version if the string cannot be read 
Gradle,WITHOUT_CLASSIFICATION,//  See https://issues.gradle.org/browse/GRADLE-3470 
Gradle,WITHOUT_CLASSIFICATION,//  Create a proxy 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore the other values 
Gradle,WITHOUT_CLASSIFICATION,//  We can't use an immutable list here because some hashes can be null 
Gradle,WITHOUT_CLASSIFICATION,//  Look for 'our' daemon among the busy daemons - a daemon will start in busy state so that nobody else will grab it. 
Gradle,WITHOUT_CLASSIFICATION,// We cannot just delegate to the add method as we need the file content for checksum calculation here  and reexecuting the action isn't acceptable 
Gradle,WITHOUT_CLASSIFICATION,//  Read whether process info should be published 
Gradle,WITHOUT_CLASSIFICATION,//  List modules with missing metadata files 
Gradle,WITHOUT_CLASSIFICATION,//  Effectively read the manifest 
Gradle,WITHOUT_CLASSIFICATION,//  Loaded from a classes dir - assume we're running from the ide or tests 
Gradle,WITHOUT_CLASSIFICATION,//  for each source set we will: 
Gradle,WITHOUT_CLASSIFICATION,//  skip built-in properties 
Gradle,WITHOUT_CLASSIFICATION,//  this handles '\r' (MacOSX 9) '\r\n' (Windows) and '\n' (Linux/Unix/MacOSX 10) 
Gradle,WITHOUT_CLASSIFICATION,//  Make a copy of the closure attach inputs and execute 
Gradle,WITHOUT_CLASSIFICATION,//  also check interfaces in case we have interfaces with nested classes 
Gradle,WITHOUT_CLASSIFICATION,//  Use the timestamped version for all published artifacts:   The timestamped version is hidden deep in `Metadata.versioning.snapshotVersions` 
Gradle,WITHOUT_CLASSIFICATION,//  Any Swift 4.x compiler 
Gradle,WITHOUT_CLASSIFICATION,//  ignore 
Gradle,WITHOUT_CLASSIFICATION,/*  @Nullable  */
Gradle,WITHOUT_CLASSIFICATION,//  Register a builder for the custom tooling model 
Gradle,WITHOUT_CLASSIFICATION,//  We need to check if the target version exists. For this we have to try to get metadata for the aligned version.   If it's there it means we can align otherwise we must NOT add the edge or resolution would fail 
Gradle,WITHOUT_CLASSIFICATION,//  this method should have been added to the class 
Gradle,WITHOUT_CLASSIFICATION,//  @formatter:off 
Gradle,WITHOUT_CLASSIFICATION,//  Any Swift 3.x compiler 
Gradle,WITHOUT_CLASSIFICATION,//  Does not need to be redrawn 
Gradle,WITHOUT_CLASSIFICATION,//  is present but empty. 
Gradle,WITHOUT_CLASSIFICATION,//  slowest path 
Gradle,WITHOUT_CLASSIFICATION,//  Otherwise do deep compare of outputs 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - should attempt to flush the output stream prior to writing to the error stream (and vice versa)
Gradle,WITHOUT_CLASSIFICATION,//  Choose the shortest match 
Gradle,WITHOUT_CLASSIFICATION,//  Path is-a Iterable so check before checking for Iterable 
Gradle,WITHOUT_CLASSIFICATION,//  kept for backwards compatibility of plugins using internal APIs 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public Object invokeMethod(String name Object params) { return getAsDynamicObject().invokeMethod(name (Object[])params); } 
Gradle,WITHOUT_CLASSIFICATION,//  Fields used for performance optimizations: we avoid computing the derived dependencies (withConstraints withoutConstraints ...)   eagerly because it's very likely that those methods would only be called on the selected variant. Therefore it's a waste of time   to compute them eagerly when those filtering methods are called. We cannot use a dedicated lazy wrapper over configuration metadata 
Gradle,WITHOUT_CLASSIFICATION,//  This line MUST be last! 
Gradle,WITHOUT_CLASSIFICATION,//  Replace deprecated usage values 
Gradle,WITHOUT_CLASSIFICATION,//  Basically if we see an operation with a logging header and it's not grouped just log it 
Gradle,WITHOUT_CLASSIFICATION,//  use reflection to support older JVMs while supporting Java 9 
Gradle,WITHOUT_CLASSIFICATION,//  Big-endian 
Gradle,WITHOUT_CLASSIFICATION,//  Apply any artifact type mappings to the attributes of the variant 
Gradle,WITHOUT_CLASSIFICATION,//  Using DefaultTestClassDescriptor to fake JUnit test 
Gradle,WITHOUT_CLASSIFICATION,//  Called under lock 
Gradle,WITHOUT_CLASSIFICATION,//  Meta data artifacts are determined locally 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE objectFactory.listProperty(type) 
Gradle,WITHOUT_CLASSIFICATION,//  Collapse the set 
Gradle,WITHOUT_CLASSIFICATION,//  Wait for any work still running in other threads 
Gradle,WITHOUT_CLASSIFICATION,//  Since s3 transport supports only one type of credentials at a time let's use the first one found. 
Gradle,WITHOUT_CLASSIFICATION,//  @formatter:on 
Gradle,WITHOUT_CLASSIFICATION,//  Could return true if all of the read only properties point to immutable objects but at this stage there are no such types supported 
Gradle,WITHOUT_CLASSIFICATION,//  add the module configuration's files 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier> <arg>? 
Gradle,WITHOUT_CLASSIFICATION,//  Actual format: 'Apple Swift version 4.0.2 (...)' 
Gradle,WITHOUT_CLASSIFICATION,//  Overwrite the source to exclude `LinuxMain.swift` 
Gradle,WITHOUT_CLASSIFICATION,//  Unpack the provider 
Gradle,WITHOUT_CLASSIFICATION,//  remains the same as the content in the existing file 
Gradle,WITHOUT_CLASSIFICATION,//  No SDK information available in the registry 
Gradle,WITHOUT_CLASSIFICATION,//  Logging configuration 
Gradle,WITHOUT_CLASSIFICATION,//  Skip this for now 
Gradle,WITHOUT_CLASSIFICATION,//  https://github.com/gradle/gradle/issues/5763 
Gradle,WITHOUT_CLASSIFICATION,//  if we ask for "external" dependencies it's still fine to bring a fat jar if nothing else is available 
Gradle,WITHOUT_CLASSIFICATION,//  Arbitrarily select and mark all as rejected 
Gradle,WITHOUT_CLASSIFICATION,//  Notify child configurations 
Gradle,WITHOUT_CLASSIFICATION,//  IDEA adds the JDK's bootstrap classpath to the classpath it uses to run test - remove this 
Gradle,WITHOUT_CLASSIFICATION,//  Can wait on request if previous handler allows waiting 
Gradle,WITHOUT_CLASSIFICATION,//  the order is strange logically but here for performance optimization 
Gradle,WITHOUT_CLASSIFICATION,//  only interrupt poller thread if it's not current thread 
Gradle,WITHOUT_CLASSIFICATION,//  Used to maintain timer 
Gradle,WITHOUT_CLASSIFICATION,//  test default imports 
Gradle,WITHOUT_CLASSIFICATION,//  Should reuse the link parsing stuff from JavadocLinkConverter instead 
Gradle,WITHOUT_CLASSIFICATION,//  if we are allowing unknowns just pass through the whole arg 
Gradle,WITHOUT_CLASSIFICATION,//  Use the result of previous rules as the input for dependency substitution 
Gradle,WITHOUT_CLASSIFICATION,//  Not present in output check error output. 
Gradle,WITHOUT_CLASSIFICATION,//  These could be injected directly to DefaultTransformerInvoker too 
Gradle,WITHOUT_CLASSIFICATION,//  Used by HasPrefixAndSuffixPatternStep to ensure the suffix isn't matching any part of the prefix. 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore future states of the input node 
Gradle,WITHOUT_CLASSIFICATION,//  Could be precomputed but we avoid doing so if attributes are never requested 
Gradle,WITHOUT_CLASSIFICATION,//  It's often the case that all the candidate values are the same. In this case we avoid   the creation of a set and just iterate until we find a different value. Then only in   this case we lazily initialize a set and collect all the candidate values. 
Gradle,WITHOUT_CLASSIFICATION,// adding custom test listeners before Gradle's listeners.  this way custom listeners are more powerful and for example they can change test status. 
Gradle,WITHOUT_CLASSIFICATION,// some validation: 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: match with status order versions correctly 
Gradle,WITHOUT_CLASSIFICATION,//  Check other behaviour still works 
Gradle,WITHOUT_CLASSIFICATION,//  Check already resolved results for a compatible version and use it for this dependency rather than re-resolving. 
Gradle,WITHOUT_CLASSIFICATION,//  Evaluate init scripts 
Gradle,WITHOUT_CLASSIFICATION,//  It's an intersection and this method is always called on the remainder   of a reduction operation. If the remainder is empty then it means that   the intersection is empty 
Gradle,WITHOUT_CLASSIFICATION,//  Any available GCC compatible implementation (including mingw cygwin and clang) 
Gradle,WITHOUT_CLASSIFICATION,//  When annotation processing isn't required it's better to add the Groovy stubs as part of the source path.   This allows compilations to complete faster because only the Groovy stubs that are needed by the java source are compiled. 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: There isn't much we can do about collection.matching { } filters as the spec requires a realized element unless make major changes 
Gradle,WITHOUT_CLASSIFICATION,//  Presence of capabilities is bound to the definition of a capabilities extension to the project 
Gradle,WITHOUT_CLASSIFICATION,//  Do NOT change the order of members used in hash code here it's been empirically   tested to reduce the number of collisions on a large dependency graph (performance test) 
Gradle,WITHOUT_CLASSIFICATION,//  Have received all requests or have released something so downstream can wait. This isn't quite right 
Gradle,WITHOUT_CLASSIFICATION,//  Avoid creating a copy if the resulting configuration is identical 
Gradle,WITHOUT_CLASSIFICATION,//  Convert Scala Seq[RoutesCompilationError] -> Java List<RoutesCompilationError> 
Gradle,WITHOUT_CLASSIFICATION,//  registry doesn't exist yet 
Gradle,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getArtifactId()          */
Gradle,WITHOUT_CLASSIFICATION,//  Some other meta-class implementation - fall back to the public API 
Gradle,WITHOUT_CLASSIFICATION,//  A cycle treat as resolved here 
Gradle,WITHOUT_CLASSIFICATION,//  To determine the dependencies of the class load up the byte code and look for CONSTANT_Class entries in the constant pool 
Gradle,WITHOUT_CLASSIFICATION,//  There is some value to the other ways to locate MSBuild (aka matching the MSBuild installation with the VS installation) this is a last chance to try and locate a usable MSBuild installation which will just try to get the latest available MSBuild. We can refine this later. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: convert output file checks to a resource lock 
Gradle,WITHOUT_CLASSIFICATION,//  Gather the default tasks from this first group project 
Gradle,WITHOUT_CLASSIFICATION,//  Not empty: may match any case above 
Gradle,WITHOUT_CLASSIFICATION,//  Host: x64 
Gradle,WITHOUT_CLASSIFICATION,//  Remove the deprecations message: "Deprecated Gradle features..." "Use '--warning-mode all'..." "See https://docs.gradle.org..." and additional newline 
Gradle,WITHOUT_CLASSIFICATION,//  we must add the implicit capability here because it is assumed that if there's a rule   "addCapability" would effectively _add_ a capability so the implicit one must not be forgotten 
Gradle,WITHOUT_CLASSIFICATION,//  1. Stop handling disconnects. Blocks until the handler has finished.   2. Stop the connection. This means that the thread receiving from the connection will receive a null and finish up.   3. Stop receiving incoming messages. Blocks until the receive thread has finished. This will notify the stdin and receive queues to signal end of input.   4. Stop the receive queue to unblock any threads blocked in receive().   5. Stop handling stdin. Blocks until the handler has finished. Discards any queued input. 
Gradle,WITHOUT_CLASSIFICATION,//  tries to relocate literals in the form of foo.bar.Bar 
Gradle,WITHOUT_CLASSIFICATION,//  Based on https://github.com/playframework/playframework/blob/2.6.0/framework/src/build-link/src/main/java/play/TemplateImports.java 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure getters end up before the setters 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE <method>(… ConfigureUtil.configureUsing(v)); 
Gradle,WITHOUT_CLASSIFICATION,//  default Scala version 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:ADAM - ARM only if the target OS is Windows 8 or later   TODO:MPUT - ARM also if the target OS is Windows RT or Windows Phone/Mobile/CE   TODO:ADAM - IA64 only if the target OS is Windows 2008 or earlier
Gradle,WITHOUT_CLASSIFICATION,//  Exception has already been reported 
Gradle,WITHOUT_CLASSIFICATION,//  Define some additional variants 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - mix this in using decoration. Also validate closure parameter types if declared 
Gradle,WITHOUT_CLASSIFICATION,// First we replace slashes because they have special meaning in the javadoc options file  Then we replace every linebreak with slash+linebreak. Slash is needed according to javadoc options file format 
Gradle,WITHOUT_CLASSIFICATION,// we don't serialise the module dependencies at this stage so we need to keep track  of the mapping module dependency <-> resolved dependency 
Gradle,WITHOUT_CLASSIFICATION,//  We intentionally consider “execution” done before doing afterEvaluate.   The Android plugin relies on this behaviour. 
Gradle,WITHOUT_CLASSIFICATION,//  Other stuff 
Gradle,WITHOUT_CLASSIFICATION,//  The following state needs to be tracked to consistently construct `ComponentOverrideMetadata` independent of the order dependencies are visited 
Gradle,WITHOUT_CLASSIFICATION,//  create a new temporary parser to read the configurations from   the specified file. 
Gradle,WITHOUT_CLASSIFICATION,//  Only called when node exists therefore node is known 
Gradle,WITHOUT_CLASSIFICATION,// CHECKSTYLE:OFF 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - the suffix should be a deterministic function of the known and enabled annotations   For now just assign using a counter
Gradle,WITHOUT_CLASSIFICATION,//  for tests using rich console standard out and error are combined in output of execution result 
Gradle,WITHOUT_CLASSIFICATION,// there is already registered conflict with at least one matching participant hook up to this conflict 
Gradle,WITHOUT_CLASSIFICATION,//  Contract requires build events are delivered by a single thread. This is taken care of by the daemon client when not in embedded mode   Need to apply some synchronization when in embedded mode 
Gradle,WITHOUT_CLASSIFICATION,//  end::custom-task-implementation[] 
Gradle,WITHOUT_CLASSIFICATION,//  Explain that Groovy for compile also needs the resources (#9872) 
Gradle,WITHOUT_CLASSIFICATION,//  no retry 
Gradle,WITHOUT_CLASSIFICATION,//  There are 2 possibilities here:   1. the "platform" referenced is a real module in which case we directly add it to the graph   2. the "platform" is a virtual constructed thing in which case we add virtual edges to the graph 
Gradle,WITHOUT_CLASSIFICATION,// TODO reuse cached result from downstream users of our classes directory 
Gradle,WITHOUT_CLASSIFICATION,//  standard doclet options 
Gradle,WITHOUT_CLASSIFICATION,//  no luck 
Gradle,WITHOUT_CLASSIFICATION,//  verify URL by making a HTTP call 
Gradle,WITHOUT_CLASSIFICATION,//  this should really be <String Object> however properties loader signature expects a <String String>   even if in practice it was never enforced (one can pass other property types such as boolean) an   fixing the method signature would be a binary breaking change in a public API. 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore files 
Gradle,WITHOUT_CLASSIFICATION,//  If the current target is a project component it must be unmodified from the requested 
Gradle,WITHOUT_CLASSIFICATION,// this means that we receive an output before even starting any class (or too late).  we don't have a place for such output in any of the reports so skipping.  Unfortunately this happens pretty often with current level of TestNG support  because output events emitted by constructor beforeTest beforeClass   are sent before test start event is started and there is no parent class event emitted by TestNG.  In short the TestNG support could be better. See also TestNGOutputEventsIntegrationTest
Gradle,WITHOUT_CLASSIFICATION,//  After this point we only see getters 
Gradle,WITHOUT_CLASSIFICATION,// target does not exist in the map there's no cycle for sure 
Gradle,WITHOUT_CLASSIFICATION,//  fine one or more project dependencies among conflicting modules 
Gradle,WITHOUT_CLASSIFICATION,//  _state == ARTIFACT_EXCLUDE || EXCLUDE 
Gradle,WITHOUT_CLASSIFICATION,//  barrier open let it travel on 
Gradle,WITHOUT_CLASSIFICATION,//  ignore this installation for validation it will be caught later 
Gradle,WITHOUT_CLASSIFICATION,//  On macOS we assume co-located Xcode is installed into /opt/xcode and default location at /Applications/Xcode.app 
Gradle,WITHOUT_CLASSIFICATION,// this shouldn't happen if you call check availability with #available first 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <name-value-pairs> <identifier> <arg>?   Map to: task(<name-value-pairs> '<identifier>' <arg>?) 
Gradle,WITHOUT_CLASSIFICATION,//  could be caused by https://bugs.openjdk.java.net/browse/JDK-8011537 ignore problems in stopping 
Gradle,WITHOUT_CLASSIFICATION,//  Forward special cases directly to consumer 
Gradle,WITHOUT_CLASSIFICATION,//  can't delegate to compileClasspathLoader because this would result in ASTTransformation interface   (which is implemented by the transform class) being loaded by compileClasspathClassLoader (which is 
Gradle,WITHOUT_CLASSIFICATION,//  No 2.11 version of routes compiler published 
Gradle,WITHOUT_CLASSIFICATION,//  Default methods are public non-abstract instance methods declared in an interface. 
Gradle,WITHOUT_CLASSIFICATION,//  this.getMetaClass() 
Gradle,WITHOUT_CLASSIFICATION,//  The current filestore 
Gradle,WITHOUT_CLASSIFICATION,//  This uses the system classloader and will not release any loaded classes for the life of the daemon process.   Do not use this to load any classes which are part of the build; it will not release them when the build is complete. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - do not assume Maven layout 
Gradle,WITHOUT_CLASSIFICATION,//  when a selector changes from non forced to forced we must reselect 
Gradle,WITHOUT_CLASSIFICATION,//  check that the length of the reserved region is enough for storing our content 
Gradle,WITHOUT_CLASSIFICATION,//    Generate implementation class   
Gradle,WITHOUT_CLASSIFICATION,// root should be the last entry 
Gradle,WITHOUT_CLASSIFICATION,//  legacy mode 
Gradle,WITHOUT_CLASSIFICATION,//  Print the header if:     we're in verbose mode OR we're in rich mode and some output has already been rendered     AND     we haven't displayed the header yet OR we've displayed the header but the status has since changed
Gradle,WITHOUT_CLASSIFICATION,//          metaClass = GroovySystem.getMetaClassRegistry().getMetaClass(getClass());       }       return metaClass;   } 
Gradle,WITHOUT_CLASSIFICATION,//  Don't need to do parameter substitution return the value of the expression after macro expanding it 
Gradle,WITHOUT_CLASSIFICATION,//  Simplifies (A ∪ ...) ∩ A = A 
Gradle,WITHOUT_CLASSIFICATION,//  There is an inheritance hierarchy in play here so the order   of the clauses is very important.
Gradle,WITHOUT_CLASSIFICATION,//  Flush any buffered events and update the clock 
Gradle,WITHOUT_CLASSIFICATION,// Ignore. It means the client has disconnected so no point sending him any log output.  we should be checking if client still listens elsewhere anyway. 
Gradle,WITHOUT_CLASSIFICATION,//  Need to check that versions do match mismatch indicates a force was used 
Gradle,WITHOUT_CLASSIFICATION,//  else already visited previously skip 
Gradle,WITHOUT_CLASSIFICATION,//  do this after wtp is configured because wtp config is required to update classpath properly 
Gradle,WITHOUT_CLASSIFICATION,//  Implicit JVM args that should be used to fork a JVM 
Gradle,WITHOUT_CLASSIFICATION,//  Unbox value 
Gradle,WITHOUT_CLASSIFICATION,//  Add included builds defined in settings 
Gradle,WITHOUT_CLASSIFICATION,//  No target or target is an ancestor of this node so is already being handled 
Gradle,WITHOUT_CLASSIFICATION,// one binary store per id+threadId 
Gradle,WITHOUT_CLASSIFICATION,//  Remove any outgoing edges for the current selection 
Gradle,WITHOUT_CLASSIFICATION,//  Expire after normal idle timeout 
Gradle,WITHOUT_CLASSIFICATION,//  Generate sourceLocation() method 
Gradle,WITHOUT_CLASSIFICATION,//  <inputs-lvar> = <inputs-field> ?: <parent-inputs-lvar> 
Gradle,WITHOUT_CLASSIFICATION,//  Guava 
Gradle,WITHOUT_CLASSIFICATION,//  used internally to determine if a rule effectively did something 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Assumes there's a single 'main' C++ component 
Gradle,WITHOUT_CLASSIFICATION,//  Else something has changed in the include file graph for this source file so analyse again 
Gradle,WITHOUT_CLASSIFICATION,//  block until ready for write operations 
Gradle,WITHOUT_CLASSIFICATION,//  Compile the interface to a temp file and then copy it to the cache folder.   This avoids sporadic cache lock timeouts when the compiler interface JAR takes   a long time to generate while avoiding starving multiple compiler daemons. 
Gradle,WITHOUT_CLASSIFICATION,//  Any Swift compiler 
Gradle,WITHOUT_CLASSIFICATION,// 3) new module has more than 1 version register conflict and return 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public <returnType> <propName>(<type> v) { val = super.<propName>(v); __<prop>__ = true; return val; } 
Gradle,WITHOUT_CLASSIFICATION,//  No-op 
Gradle,WITHOUT_CLASSIFICATION,//  Foo can match both Foo and Foo$NestedClass 
Gradle,WITHOUT_CLASSIFICATION,//  Duplicate ignore 
Gradle,WITHOUT_CLASSIFICATION,//  Always expand with trailing . 
Gradle,WITHOUT_CLASSIFICATION,//  Trigger a replay on this node to add new constraints to graph 
Gradle,WITHOUT_CLASSIFICATION,//  not enough data points 
Gradle,WITHOUT_CLASSIFICATION,//  Unresolved - we have a selector that was deferred but the constraint has been removed in between
Gradle,WITHOUT_CLASSIFICATION,//  Called when the method throws an exception 
Gradle,WITHOUT_CLASSIFICATION,//  Collect for later do not add until the graph is known to have not changed 
Gradle,WITHOUT_CLASSIFICATION,//  A further work around for missing ability to skip task when input file is missing (see #getInputFileIfExists below)
Gradle,WITHOUT_CLASSIFICATION,//  Returns a fixed value expression 
Gradle,WITHOUT_CLASSIFICATION,//  Try to move the file out of the way in case its permanently corrupt   Don't delete so that it can be potentially used for debugging
Gradle,WITHOUT_CLASSIFICATION,// given 
Gradle,WITHOUT_CLASSIFICATION,//  note: it's not the role of this class to validate that the annotation is properly used that   is to say only on a getter returning String or a Named instance so we trust the result of   the call
Gradle,WITHOUT_CLASSIFICATION,//  Replace '.' with '/' in organisation 
Gradle,WITHOUT_CLASSIFICATION,// we don't like the assumption about the port very much 
Gradle,WITHOUT_CLASSIFICATION,//  Sort based on version 
Gradle,WITHOUT_CLASSIFICATION,//  GetMethod is used in a private method so doesn't belong to the API 
Gradle,WITHOUT_CLASSIFICATION,//  If we aren't required and don't have a signatory then we just don't run 
Gradle,WITHOUT_CLASSIFICATION,//  What actually shows up on the console 
Gradle,WITHOUT_CLASSIFICATION,//  protects the following state 
Gradle,WITHOUT_CLASSIFICATION,//  Expose the task to build logic (for now) 
Gradle,WITHOUT_CLASSIFICATION,//  If no current test can be associated to the output the last known descriptor is used.   See https://bugs.swift.org/browse/SR-1127 for more information. 
Gradle,WITHOUT_CLASSIFICATION,//  A cached ClassLoader 
Gradle,WITHOUT_CLASSIFICATION,//  super test class file not in test class directories 
Gradle,WITHOUT_CLASSIFICATION,//  Deprecations (these should just be rendered on the client instead of being sent to the daemon to send them back again) 
Gradle,WITHOUT_CLASSIFICATION,//  Capture the current state of things that we will change during execution 
Gradle,WITHOUT_CLASSIFICATION,//  The iteration order of zip.getEntries() is based on the hash of the zip entry. This isn't much use   to us. So collect the entries in a map and iterate over them in alphabetical order.
Gradle,WITHOUT_CLASSIFICATION,//  Parent is a reference need to resolve the target 
Gradle,WITHOUT_CLASSIFICATION,//  ensure type is registered 
Gradle,WITHOUT_CLASSIFICATION,//  We can compare here by length because pname is always   a substring of name so same length means they are equal. 
Gradle,WITHOUT_CLASSIFICATION,//  We found the desired settings file now build the associated buildSrc before loading settings.  This allows   the settings script to reference classes in the buildSrc. 
Gradle,WITHOUT_CLASSIFICATION,//  in the binary inputs. 
Gradle,WITHOUT_CLASSIFICATION,//  Exclude frameworks for CLang - they need to be handled differently 
Gradle,WITHOUT_CLASSIFICATION,//  Should be final and set in constructor 
Gradle,WITHOUT_CLASSIFICATION,//  The directory is passed as an argument since File.createTempFile sets the location   of the temp directory to a static variable on the first call unless a directory is passed to the call.   Some tests change java.io.tmpdir and this is to ensure that the current value of java.io.tmpdir gets used here. 
Gradle,WITHOUT_CLASSIFICATION,//  Avoid initializing the list if there are no components requiring download (a common case) 
Gradle,WITHOUT_CLASSIFICATION,//  Mix the implicit launcher JVM args in with the requested JVM args 
Gradle,WITHOUT_CLASSIFICATION,//  An identifier with no separator so this is not an #include or #import directive it is some other directive 
Gradle,WITHOUT_CLASSIFICATION,//  Make some assumptions about the console output 
Gradle,WITHOUT_CLASSIFICATION,//  Order from most recent to least recent 
Gradle,WITHOUT_CLASSIFICATION,//  Descriptor file has been deleted - ignore the entry 
Gradle,WITHOUT_CLASSIFICATION,//  This can happen when for example a @BeforeClass or @AfterClass method fails 
Gradle,WITHOUT_CLASSIFICATION,//  Use the resolved component id if available: this ensures that Maven Snapshot ids are correctly reported 
Gradle,WITHOUT_CLASSIFICATION,//  and  (A ∩ ...) ∪ A = A 
Gradle,WITHOUT_CLASSIFICATION,//  The `eclipse` task in the root project should generate Eclipse projects for all Gradle projects 
Gradle,WITHOUT_CLASSIFICATION,//  This URL is not recognized by the Mac console (too few leading slashes). We solve   this be creating an URI with an empty authority. 
Gradle,WITHOUT_CLASSIFICATION,//  Add in tools.jar to the systemClassloader parent 
Gradle,WITHOUT_CLASSIFICATION,//  Java and Kotlin Lambdas are coerced to SAM types at compile time so no unpacking is necessary there. 
Gradle,WITHOUT_CLASSIFICATION,//  These methods return strings rather than types because it may be more complicated than what is able to be expressed via a ModelType.   Also we don't want to encourage compatibility checking occurring by looping through such types as we have more options for optimising the compatibility check internally.   Also also these methods are only called for reporting so values should typically not be precomputed. 
Gradle,WITHOUT_CLASSIFICATION,//  This is only required to avoid adding a new public constructor to the public `PatternSet` type. 
Gradle,WITHOUT_CLASSIFICATION,//  Based on https://github.com/playframework/playframework/blob/2.4.0/framework/src/build-link/src/main/java/play/TemplateImports.java 
Gradle,WITHOUT_CLASSIFICATION,//  Supported but unavailable. Nothing to do. 
Gradle,WITHOUT_CLASSIFICATION,//  Could probably apply some caching and some immutable types 
Gradle,WITHOUT_CLASSIFICATION,//  Confirms there is enough space in candidate to fit both suffix and prefix. 
Gradle,WITHOUT_CLASSIFICATION,//  nothing to do we don't store this 
Gradle,WITHOUT_CLASSIFICATION,//  Target: x86 
Gradle,WITHOUT_CLASSIFICATION,// model properties: 
Gradle,WITHOUT_CLASSIFICATION,//  No Visual Studio information available in the registry 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore: All selectors failed and will have failures recorded 
Gradle,WITHOUT_CLASSIFICATION,// cut the pre and postfix of this url 
Gradle,WITHOUT_CLASSIFICATION,//  Assume everything is loaded into the current classloader 
Gradle,WITHOUT_CLASSIFICATION,//  Note: this is currently not visible on {@link org.gradle.api.internal.TaskInternal} to avoid it leaking onto AbstractTask and so on to the public API. 
Gradle,WITHOUT_CLASSIFICATION,//  default value for older Gradle clients 
Gradle,WITHOUT_CLASSIFICATION,//  Callable<? extends Callable<?>> 
Gradle,WITHOUT_CLASSIFICATION,// override the params with the explicit settings provided by the tooling api 
Gradle,WITHOUT_CLASSIFICATION,//  Check dynamic object behaviour still works 
Gradle,WITHOUT_CLASSIFICATION,//  Cast to return type 
Gradle,WITHOUT_CLASSIFICATION,//  Should be constructed with the default system ClassLoader as root 
Gradle,WITHOUT_CLASSIFICATION,//  Ideally we'd delegate directly to the AntBuilder but its Closure class is different to our caller's   Closure class so the AntBuilder's methodMissing() doesn't work. It just converts our Closures to String   because they are not an instanceof its Closure class. 
Gradle,WITHOUT_CLASSIFICATION,//  Cached state is not copied since dependency inputs are different. 
Gradle,WITHOUT_CLASSIFICATION,//  Set the implicit system properties regardless of whether default JVM args are required or not this should not interfere with tests' intentions 
Gradle,WITHOUT_CLASSIFICATION,//  Setting the length improves upload performance 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore and fall back to growl notify 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:Cedric find out why if we use the same ID directly it fails resolution by trying to get the artifacts   from the resolving metadata instead of the resolved metadata 
Gradle,WITHOUT_CLASSIFICATION,//  according to JVM documentation 
Gradle,WITHOUT_CLASSIFICATION,//  Ensure target project is configured 
Gradle,WITHOUT_CLASSIFICATION,//  Lock protects the following state using an intentionally simple locking strategy 
Gradle,WITHOUT_CLASSIFICATION,//  The target may already be modified from the original requested 
Gradle,WITHOUT_CLASSIFICATION,//  Skip properties with non-abstract getter or setter implementations 
Gradle,WITHOUT_CLASSIFICATION,//  release 
Gradle,WITHOUT_CLASSIFICATION,//  Taking the first selector here to determine the 'changing' status and 'client module' is our best bet to get the selector that will most likely be chosen in the end.   As selectors are sorted accordingly (see ModuleSelectors.SELECTOR_COMPARATOR). 
Gradle,WITHOUT_CLASSIFICATION,//  This is only used for testing purposes so we can test handling of fluid dependencies without adding dependency substitution rule 
Gradle,WITHOUT_CLASSIFICATION,//  Already seen this source file before. See if we can reuse the analysis from last time 
Gradle,WITHOUT_CLASSIFICATION,//  literal followed by * followed by literal: matches #4 above 
Gradle,WITHOUT_CLASSIFICATION,//  Now try each address 
Gradle,WITHOUT_CLASSIFICATION,//  We need to wrap the visitor so that the file seen by the visitor has already   been extracted from the archive and we do not try to extract it again.   It's unsafe to keep the FileVisitDetails provided by TarFileTree directly   because we do not expect to visit the same paths again (after extracting everything). 
Gradle,WITHOUT_CLASSIFICATION,//  note: this method is on TaskInternal 
Gradle,WITHOUT_CLASSIFICATION,//  When an artifact is being published it is first checked whether it is available.   If a transport returns `null` then it is assumed that artifact does not exist.   If we throw an attempt to publish will fail altogether even if we use ResourceExceptions#getMissing(uri). 
Gradle,WITHOUT_CLASSIFICATION,//  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere. 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize the worker this is consumed by SystemApplicationClassLoaderWorker 
Gradle,WITHOUT_CLASSIFICATION,//  Always use x86 as default on windows 
Gradle,WITHOUT_CLASSIFICATION,//  Take a root worker lease it won't ever be released as ProjectBuilder has no lifecycle 
Gradle,WITHOUT_CLASSIFICATION,//  Otherwise expand 
Gradle,WITHOUT_CLASSIFICATION,//  List<? extends String>[] 
Gradle,WITHOUT_CLASSIFICATION,//  we have C[] if the list is empty -> should be an array then! 
Gradle,WITHOUT_CLASSIFICATION,// TODO:HH wire binary libs via executable 
Gradle,WITHOUT_CLASSIFICATION,//  Do not cache Test task if Jacoco doesn't produce its output as files 
Gradle,WITHOUT_CLASSIFICATION,//  do same decoration as in addListener to remove correctly 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE getAsDynamicObject().getProperty(name); 
Gradle,WITHOUT_CLASSIFICATION,//  everything excluded **only** applies to modules not artifacts! 
Gradle,WITHOUT_CLASSIFICATION,//  Assume changed if reading old file fails 
Gradle,WITHOUT_CLASSIFICATION,//  Output reports per execution not mixed.   Cross-project ModelRegistry operations do not happen concurrently. 
Gradle,WITHOUT_CLASSIFICATION,//  asking for a fat jar. If everything available is a shadow jar that's fine 
Gradle,WITHOUT_CLASSIFICATION,//  Everything is an unmanaged struct that hasn't been handled before
Gradle,WITHOUT_CLASSIFICATION,//  Construct a new Compiler class 
Gradle,WITHOUT_CLASSIFICATION,//  It was no primitive type so next we see if the name   which is a vanilla name starts with a lower case letter.   In that case we change it to a LowerCaseClass to let the   compiler skip the resolving at several places in this class. 
Gradle,WITHOUT_CLASSIFICATION,//  Parse parallelism flags 
Gradle,WITHOUT_CLASSIFICATION,//  Write the output 
Gradle,WITHOUT_CLASSIFICATION,//  Use Jansi's detection mechanism 
Gradle,WITHOUT_CLASSIFICATION,//    Add `Object unpackState() { return name }`   
Gradle,WITHOUT_CLASSIFICATION,//  Created only on demand 
Gradle,WITHOUT_CLASSIFICATION,//  Callable<?> 
Gradle,WITHOUT_CLASSIFICATION,//  Use the debug variant as the development binary   Prefer the host architecture if present else use the first architecture specified 
Gradle,WITHOUT_CLASSIFICATION,//  Toolchains should be using default configuration 
Gradle,WITHOUT_CLASSIFICATION,//  This instance ends up in build/gradle scoped services for nesteds   We don't want to invoke close at that time.   Instead close it at the root. 
Gradle,WITHOUT_CLASSIFICATION,//  No matches - fall back to regexp 
Gradle,WITHOUT_CLASSIFICATION,//  Capture output files state 
Gradle,WITHOUT_CLASSIFICATION,//  If there is no previous state then we do have output changes 
Gradle,WITHOUT_CLASSIFICATION,//  Should reuse `GlobalScopeServices` here however this requires a bunch of stuff in order to discover the plugin service registries   For now re-implement the discovery here 
Gradle,WITHOUT_CLASSIFICATION,//  This should apply some locking but most access to the build state does not happen via this method yet 
Gradle,WITHOUT_CLASSIFICATION,//  Do not cache the task if we are not writing execution data to a file 
Gradle,WITHOUT_CLASSIFICATION,//  Not resolvable. Discard the body when the expression is not resolvable
Gradle,WITHOUT_CLASSIFICATION,//  Adding an action that is not a duplicate 
Gradle,WITHOUT_CLASSIFICATION,//  release the artifact to production 
Gradle,WITHOUT_CLASSIFICATION,//  Some interesting type references 
Gradle,WITHOUT_CLASSIFICATION,//  return this.name 
Gradle,WITHOUT_CLASSIFICATION,// ignore 
Gradle,WITHOUT_CLASSIFICATION,//  Lookup.defineClass can only define a class into same classloader as the lookup object   we have to use the fallback defineClass() if they're not same which is the case of ManagedProxyClassGenerator 
Gradle,WITHOUT_CLASSIFICATION,//  Note: `null` for `settingsFile` means explicitly no settings         A non null value can be a non existent file which is semantically equivalent to an empty file
Gradle,WITHOUT_CLASSIFICATION,//  Need another identifier 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE objectFactory.property(type) 
Gradle,WITHOUT_CLASSIFICATION,//  Download to temporary location 
Gradle,WITHOUT_CLASSIFICATION,//  Convert properties for logging  object 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure it's always > 0 but without affecting the lower 32 bits 
Gradle,WITHOUT_CLASSIFICATION,//  For tests 
Gradle,WITHOUT_CLASSIFICATION,//  attempt resolution on all types so don't short-circuit and stop if we've previously failed 
Gradle,WITHOUT_CLASSIFICATION,//  Left over data from previous append is only possible when a multi-chars new line is   been processed and split across multiple append calls. 
Gradle,WITHOUT_CLASSIFICATION,//  var = this.<field> 
Gradle,WITHOUT_CLASSIFICATION,//  Add dependencies for this goal 
Gradle,WITHOUT_CLASSIFICATION,//  the lock for this project is the only lock we hold 
Gradle,WITHOUT_CLASSIFICATION,//  FIXME: Always build type name to keep parity with previous Gradle version in tooling API
Gradle,WITHOUT_CLASSIFICATION,//  If there's more than one node selected for the same component we need to add   the implicit capability to the list in order to make sure we can discover conflicts   between variants of the same module. Note that the fact the implicit capability is   in general not included is not a bug but a performance optimization
Gradle,WITHOUT_CLASSIFICATION,//  Without this the URLConnection will keep the backing Jar file open indefinitely   This will have a performance impact for Jar-backed `UriTextResource` instances
Gradle,WITHOUT_CLASSIFICATION,//  Wrap to prevent exposing Stoppable as we don't want to stop at this scope 
Gradle,WITHOUT_CLASSIFICATION,//  Other home dir in use close these. Otherwise keep the services for next time 
Gradle,WITHOUT_CLASSIFICATION,//  Already realized just run the action now 
Gradle,WITHOUT_CLASSIFICATION,//  Every selector was empty: simply 'resolve' one of them 
Gradle,WITHOUT_CLASSIFICATION,//  Cannot be private due to reflective instantiation 
Gradle,WITHOUT_CLASSIFICATION,//  Required for MavenLocal to verify the presence of the artifact 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure more specific annotation doesn't get overwritten with less specific one 
Gradle,WITHOUT_CLASSIFICATION,//  Versions before 5.1 would discard context on forced cancel 
Gradle,WITHOUT_CLASSIFICATION,//  Register each child of each component 
Gradle,WITHOUT_CLASSIFICATION,//  IDEA Module for project in current build: don't include any module that has been excluded from project 
Gradle,WITHOUT_CLASSIFICATION,//  inverse process of resolveClasspath to make sure IncrementalResultStoringCompiler stores correct result 
Gradle,WITHOUT_CLASSIFICATION,//  Summary of deprecations is considered a part of the build summary 
Gradle,WITHOUT_CLASSIFICATION,//  A file that we can safely reuse the result for 
Gradle,WITHOUT_CLASSIFICATION,//  Not using setOptional(optional) in order to avoid <optional>false</optional> in the common case 
Gradle,WITHOUT_CLASSIFICATION,//  Caches the list of dependency states for dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  It won't for arbitrary scripts though. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - prevent multiple threads from performing the same VCS populate operation at the same time 
Gradle,WITHOUT_CLASSIFICATION,//  Task graph is not calculated yet. Plugins can add tasks to it. 
Gradle,WITHOUT_CLASSIFICATION,//  since we might generate the deployment descriptor record each top-level module 
Gradle,WITHOUT_CLASSIFICATION,//  Log events 
Gradle,WITHOUT_CLASSIFICATION,//  This import must be here due to a clash in Java 8 between this and java.util.Optional.   Be careful running “Optimize Imports” as it will wipe this out.   If there's no import below this comment this has happened. 
Gradle,WITHOUT_CLASSIFICATION,//  These two are here to work around https://github.com/gradle/gradle/issues/6027 
Gradle,WITHOUT_CLASSIFICATION,//  remove leading '$' remove last child segment use '/' as separator 
Gradle,WITHOUT_CLASSIFICATION,//  Returns a parameter 
Gradle,WITHOUT_CLASSIFICATION,//  Generate: Class immutable() { return <properties.empty> && <read-only-properties.empty> } 
Gradle,WITHOUT_CLASSIFICATION,//  Discard event 
Gradle,WITHOUT_CLASSIFICATION,//  Lock on demand 
Gradle,WITHOUT_CLASSIFICATION,//  Use the jar when nothing has been requested 
Gradle,WITHOUT_CLASSIFICATION,// InputStream originalIn = System.in; 
Gradle,WITHOUT_CLASSIFICATION,//  Decoration takes care of the implementation 
Gradle,WITHOUT_CLASSIFICATION,//  TODO hook this in to the (daemon) build lifecycle
Gradle,WITHOUT_CLASSIFICATION,//  If there's more than one module id merge them into a module id set 
Gradle,WITHOUT_CLASSIFICATION,//  In opposite to outgoing edges virtual edges are for now pretty rare so they are created lazily 
Gradle,WITHOUT_CLASSIFICATION,//  this.services = AsmBackedClassGenerator.getServicesForNext() 
Gradle,WITHOUT_CLASSIFICATION,//  make sure we don't interpret any tag while in description tag 
Gradle,WITHOUT_CLASSIFICATION,//  Force graph resolution as this is required to calculate build dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  This generates a synthetic enforced platform variant with the same dependencies similar to what the Maven variant derivation strategy does 
Gradle,WITHOUT_CLASSIFICATION,//  Climb up the hierarchy looking for the highest parent 
Gradle,WITHOUT_CLASSIFICATION,//  Netscape expires pattern 
Gradle,WITHOUT_CLASSIFICATION,//  The path to the project's task container in the model registry 
Gradle,WITHOUT_CLASSIFICATION,//  only one file 
Gradle,WITHOUT_CLASSIFICATION,//  Maps from interned absolute path for a file to snapshot for the file. 
Gradle,WITHOUT_CLASSIFICATION,//  Used by the JavaScript plugins 
Gradle,WITHOUT_CLASSIFICATION,//  for non-java projects there are no source sets configured 
Gradle,WITHOUT_CLASSIFICATION,//  If not set for >= JAXP 1.5 / Java8 won't allow referencing DTDs e.g.   using http URLs because Groovy's XmlParser requests FEATURE_SECURE_PROCESSING 
Gradle,WITHOUT_CLASSIFICATION,//  for performance ignore flushes 
Gradle,WITHOUT_CLASSIFICATION,//     naming conventions via call to sourceSet.getTaskName() 
Gradle,WITHOUT_CLASSIFICATION,//  no common root 
Gradle,WITHOUT_CLASSIFICATION,//  tag::aggregating-annotation-processor[] 
Gradle,WITHOUT_CLASSIFICATION,//  If we're reaching this point we're very likely going to iterate on the dependencies   several times. It appears that iterating using `dependencies` is expensive because of   the creation of an iterator and checking bounds. Iterating an array is faster. 
Gradle,WITHOUT_CLASSIFICATION,//  Create test suite executable 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - reuse metaData if it was already fetched to select the component from the version list 
Gradle,WITHOUT_CLASSIFICATION,/*      * Indicates whether the tests should be run in deterministic order. Preserving the order guarantees that the complete test     * (including @BeforeXXX and @AfterXXX) is run in a test thread before the next test is run.     *     * Not required.     *     * If not present the order will not be preserved.      */
Gradle,WITHOUT_CLASSIFICATION,//  ...   end::task-arg-method[] 
Gradle,WITHOUT_CLASSIFICATION,//  check module node import packages 
Gradle,WITHOUT_CLASSIFICATION,//  this allows us to generate the deployment descriptor after recording all modules it contains 
Gradle,WITHOUT_CLASSIFICATION,//  Use the runtime when nothing has been requested 
Gradle,WITHOUT_CLASSIFICATION,//  Unfortunate cast! see LibraryBinaryLocator 
Gradle,WITHOUT_CLASSIFICATION,//  path(Type) { ... } 
Gradle,WITHOUT_CLASSIFICATION,//  This means the client does not support reporting jvm memory info 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: synchronization with other methods 
Gradle,WITHOUT_CLASSIFICATION,//  Discard this operation and all children 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: We do not want/need a decorated version of JavaForkOptions or JavaDebugOptions because   these immutable instances are held across builds and will retain classloaders/services in the decorated object 
Gradle,WITHOUT_CLASSIFICATION,//  Don't go up the parent chain.   Don't want to risk classes crossing “scope” boundaries and being non collectible. 
Gradle,WITHOUT_CLASSIFICATION,// see GRADLE-3027 
Gradle,WITHOUT_CLASSIFICATION,//  The name of the test method 
Gradle,WITHOUT_CLASSIFICATION,// we should consider to change the return type to DirectDependency which requires adjustment in Kotlin DSL 
Gradle,WITHOUT_CLASSIFICATION,//  File resources are handled slightly differently at present.   file:// repos are treated differently   1) we don't cache their files
Gradle,WITHOUT_CLASSIFICATION,//  tag::sample[] 
Gradle,WITHOUT_CLASSIFICATION,//  Discard listeners 
Gradle,WITHOUT_CLASSIFICATION,//  This doesn't take into account build dependencies of the SourceDirectorySet.   Should just ditch SourceDirectorySet from here since it's not really a great model and drags in too much baggage.
Gradle,WITHOUT_CLASSIFICATION,//  we don't know if the underlying collection can return a size in constant time 
Gradle,WITHOUT_CLASSIFICATION,//  We always ignore line order for matching out of parallel builds 
Gradle,WITHOUT_CLASSIFICATION,//  project.getDependencies().create(String) seems to be the only feasible way to create a Dependency with a classifier 
Gradle,WITHOUT_CLASSIFICATION,//  Upgrade required 
Gradle,WITHOUT_CLASSIFICATION,//  There is currently a requirement in the JDK9 javac implementation   that when javac is invoked with an explicitly empty sourcepath   (i.e. {@code --sourcepath ""}) it won't allow you to compile a java 9   module. However we really want to explicitly set an empty sourcepath   so that we don't implicitly pull in unrequested sourcefiles which   haven't been snapshotted because we will consider the task up-to-date   if the implicit files change.     This implementation of hasLocation() pretends that the JavaFileManager   has no concept of a source path. 
Gradle,WITHOUT_CLASSIFICATION,// @Input 
Gradle,WITHOUT_CLASSIFICATION,//  Restarting this configuration after conflict resolution.   If this configuration belongs to the select version queue ourselves up for traversal.   If not then remove our incoming edges which triggers them to be moved across to the selected configuration 
Gradle,WITHOUT_CLASSIFICATION,//  No compilers available complain about the missing C compiler 
Gradle,WITHOUT_CLASSIFICATION,//  Task dependencies may be calculated more than once.   This guard is purely an optimisation. 
Gradle,WITHOUT_CLASSIFICATION,//  Fields guarded by lock 
Gradle,WITHOUT_CLASSIFICATION,//  Need to remember if a further element was matched by an earlier one no need to consider it then 
Gradle,WITHOUT_CLASSIFICATION,//  Once the root build starts executing work we are in Executing phase 
Gradle,WITHOUT_CLASSIFICATION,//  Use an OS selected port 
Gradle,WITHOUT_CLASSIFICATION,//  Can wait if this handler has completed or if the previous handler allows waiting 
Gradle,WITHOUT_CLASSIFICATION,//  Sort based on from component 
Gradle,WITHOUT_CLASSIFICATION,// LOG_LEVEL_MAPPING.put(LogLevel.INFO Level.CONFIG);  LOG_LEVEL_MAPPING.put(LogLevel.LIFECYCLE Level.WARNING);  LOG_LEVEL_MAPPING.put(LogLevel.WARN Level.WARNING);  LOG_LEVEL_MAPPING.put(LogLevel.QUIET Level.SEVERE);  LOG_LEVEL_MAPPING.put(LogLevel.ERROR Level.SEVERE); 
Gradle,WITHOUT_CLASSIFICATION,//  Ends up with: 1 2 -> 3 <- 4 5 6 
Gradle,WITHOUT_CLASSIFICATION,//  Supports building both 32-bit and 64-bit binaries 
Gradle,WITHOUT_CLASSIFICATION,//  load the static type descriptor from class constants 
Gradle,WITHOUT_CLASSIFICATION,//  We'd have created an EmptyCurrentFileCollectionFingerprint if there were no file fingerprints 
Gradle,WITHOUT_CLASSIFICATION,//  we decided if we have a vanilla name starting with a lower case   letter that we will not try to resolve this name against .*   imports. Instead a full import is needed for these.   resolveAliasFromModule will do this check for us. This method   does also check the module contains a class in the same package   of this name. This check is not done for vanilla names starting 
Gradle,WITHOUT_CLASSIFICATION,//  Need to do this here so that the transfer is 'restarted' when HttpClient reopens the resource (DIGEST AUTH only) 
Gradle,WITHOUT_CLASSIFICATION,//  Not an OpenJDK-compatible compiler or signature changed 
Gradle,WITHOUT_CLASSIFICATION,//  TODO:ADAM - Deprecate 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore tasks created after not closed 
Gradle,WITHOUT_CLASSIFICATION,//  Already reached this goal 
Gradle,WITHOUT_CLASSIFICATION,//  We always want to include className even if longer than max length 
Gradle,WITHOUT_CLASSIFICATION,//  A kotlinc warning ignore 
Gradle,WITHOUT_CLASSIFICATION,//  Node must project item as S 
Gradle,WITHOUT_CLASSIFICATION,//  flatten because we need to serialize 
Gradle,WITHOUT_CLASSIFICATION,//  Add a JAVA_HOME if none provided 
Gradle,WITHOUT_CLASSIFICATION,// for testing 
Gradle,WITHOUT_CLASSIFICATION,//  when -Xmx1024m Runtime.maxMemory() returns about 910   assume that Gradle itself uses about 150MB heap 
Gradle,WITHOUT_CLASSIFICATION,/*        The GroovyObject interface defines dynamic property and dynamic method methods. Implementers       are free to implement their own logic in these methods which makes it invisible to the metaclass.       The most notable case of this is Closure.       So in this case we use these methods directly on the GroovyObject in case it does implement logic at this level.      */
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Stop all daemon services 
Gradle,WITHOUT_CLASSIFICATION,//  for each level in the file path add the path 
Gradle,WITHOUT_CLASSIFICATION,// below could be better.  Throwing InvalidUserDataException here means that useful context information (including candidate formats etc.) is not presented to the user 
Gradle,WITHOUT_CLASSIFICATION,//  If nobody said anything about this variant's target platform use whatever the convention says 
Gradle,WITHOUT_CLASSIFICATION,//  Reference class via `ModelType` to avoid strong reference 
Gradle,WITHOUT_CLASSIFICATION,//  Used for testing the plugins DSL 
Gradle,WITHOUT_CLASSIFICATION,//  Create key manager 
Gradle,WITHOUT_CLASSIFICATION,//  if the version string cannot be parsed 
Gradle,WITHOUT_CLASSIFICATION,//  if exclusions == nothing then the intersection will be "nothing" 
Gradle,WITHOUT_CLASSIFICATION,//  Separate Java class because IBM JDK 6 -- See https://issues.apache.org/jira/browse/GROOVY-7010 
Gradle,WITHOUT_CLASSIFICATION,//  Update the state region 
Gradle,WITHOUT_CLASSIFICATION,//  Using an array here because we're going to iterate pretty often and it avoids the creation of an iterator   that checks for concurrent modification 
Gradle,WITHOUT_CLASSIFICATION,//  The download thread may still be running. Ignore any further status events from it 
Gradle,WITHOUT_CLASSIFICATION,//  Fall back to propertyMissing if available 
Gradle,WITHOUT_CLASSIFICATION,//  known value only write index 
Gradle,WITHOUT_CLASSIFICATION,//  Not supported on Java 6 
Gradle,WITHOUT_CLASSIFICATION,//  avoid excess creation of Suggestion objects 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - set header dir for applications 
Gradle,WITHOUT_CLASSIFICATION,//  Just an identifier this is a token 
Gradle,WITHOUT_CLASSIFICATION,//  Not the first top level node 
Gradle,WITHOUT_CLASSIFICATION,//  tries to relocate literals in the form of foo/bar/Bar 
Gradle,WITHOUT_CLASSIFICATION,//  both are strings we compare them taking into account special meaning 
Gradle,WITHOUT_CLASSIFICATION,//  This could very well be a zip (or something else we understand) but we can't know for sure.   The client may try to infer from the file extension. 
Gradle,WITHOUT_CLASSIFICATION,//  Build `buildSrc` load settings.gradle and construct composite (if appropriate) 
Gradle,WITHOUT_CLASSIFICATION,//  Check to see if we should adjust the level based on a set lifecycle log level 
Gradle,WITHOUT_CLASSIFICATION,//  Check environment 
Gradle,WITHOUT_CLASSIFICATION,//  Restart each configuration. For the evicted configuration this means moving incoming dependencies across to the   matching selected configuration. For the select configuration this mean traversing its dependencies. 
Gradle,WITHOUT_CLASSIFICATION,//  A function-like macro 
Gradle,WITHOUT_CLASSIFICATION,//  Object propertyMissing(String name Object value) 
Gradle,WITHOUT_CLASSIFICATION,//  The provider does not know how to produce the value so use the value instead 
Gradle,WITHOUT_CLASSIFICATION,//  Register capabilities for this node 
Gradle,WITHOUT_CLASSIFICATION,//  Set this.name = param1 
Gradle,WITHOUT_CLASSIFICATION,//  Milestone 4 was broken on the IBM jvm 
Gradle,WITHOUT_CLASSIFICATION,//  Replace if higher priority or version with highest priority and version
Gradle,WITHOUT_CLASSIFICATION,//  Serialize the shared packages this is consumed by GradleWorkerMain 
Gradle,WITHOUT_CLASSIFICATION,//  Send some messages 
Gradle,WITHOUT_CLASSIFICATION,//  Could throw UncheckedIOException 
Gradle,WITHOUT_CLASSIFICATION,//  handle consumer < 2.7 
Gradle,WITHOUT_CLASSIFICATION,//      throw new IllegalStateException("Accessor already registered: " + type + " " + accessor);   } 
Gradle,WITHOUT_CLASSIFICATION,// no operation if there is no script code provided 
Gradle,WITHOUT_CLASSIFICATION,//  this dependency is internal only 
Gradle,WITHOUT_CLASSIFICATION,//  Will be overwritten by setIdle if not idle. 
Gradle,WITHOUT_CLASSIFICATION,//  There is no script class when there are no statements or methods declared in the script 
Gradle,WITHOUT_CLASSIFICATION,//  TODO(daniel): Swift compiler should extends from an abstraction of NativeCompiler (most of is applies to SwiftCompiler) 
Gradle,WITHOUT_CLASSIFICATION,//  No services to be mixed in 
Gradle,WITHOUT_CLASSIFICATION,//  Any available Visual Studio implementation 
Gradle,WITHOUT_CLASSIFICATION,//  Here we know that the user requested a specific classifier. There may be multiple   candidate variants left but maybe only one of them provides the classified artifact   we're looking for. 
Gradle,WITHOUT_CLASSIFICATION,//  Expected 
Gradle,WITHOUT_CLASSIFICATION,//  non-serializable field 
Gradle,WITHOUT_CLASSIFICATION,//  Can only set once: should really be part of the constructor 
Gradle,WITHOUT_CLASSIFICATION,//  this.super(p0 .. pn) 
Gradle,WITHOUT_CLASSIFICATION,//  We don't care about nodes whose output is not consumed by anyone anymore 
Gradle,WITHOUT_CLASSIFICATION,//  throw new MissingMethodException(name <view-type>.class args) 
Gradle,WITHOUT_CLASSIFICATION,//  Because these properties can be convention mapped we need special handling in here.   If you add another one of these “modelled” properties you need to update:   - maybeAppendModelledInstruction()   - maybePrependModelledInstruction()   - maybeSetModelledInstruction()   - getModelledInstructions()   - instructionValue() 
Gradle,WITHOUT_CLASSIFICATION,//  Milestone 3 
Gradle,WITHOUT_CLASSIFICATION,//  Override this so that the working directory is not canonicalised. Some int tests require that   the working directory is not canonicalised 
Gradle,WITHOUT_CLASSIFICATION,//  Generate an authentication token which must be provided by the client in any requests it makes 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - creating a bundle should be done by some general purpose plugin 
Gradle,WITHOUT_CLASSIFICATION,//  Wire build dependent components tasks dependencies 
Gradle,WITHOUT_CLASSIFICATION,// ibm vm 1.6 + windows XP gotchas:  we need to print something else to the stream after we print the daemon greeting. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Turn this into an `@implSpec` annotation on the comment above:   https://github.com/gradle/gradle/issues/7486 
Gradle,WITHOUT_CLASSIFICATION,//  see IdeaScalaConfigurer which requires the ipr to be generated first 
Gradle,WITHOUT_CLASSIFICATION,//  Map the arguments of this expression 
Gradle,WITHOUT_CLASSIFICATION,// noinspection SuspiciousMethodCalls 
Gradle,WITHOUT_CLASSIFICATION,//  Don't retain the value to allow ClassLoader to be collected 
Gradle,WITHOUT_CLASSIFICATION,//  Disallow custom services of type ServiceRegistry as these are automatically provided 
Gradle,WITHOUT_CLASSIFICATION,//  Add a link task 
Gradle,WITHOUT_CLASSIFICATION,//  Assume this is a class and so has implemented all properties and methods somewhere in the superclass hierarchy 
Gradle,WITHOUT_CLASSIFICATION,//  This is so that VisualCpp has the object file of the generated source file available at link time 
Gradle,WITHOUT_CLASSIFICATION,//  If no result from 'require' just use the highest preferred version (no range merging) 
Gradle,WITHOUT_CLASSIFICATION,//  We are going to throw a CommandLineArgumentException below but want the message   to reflect that we didn't recognise the first char (i.e. the option specifier) 
Gradle,WITHOUT_CLASSIFICATION,//  Take a copy because adding to an idMappings value may result in new mappings being added (i.e. ConcurrentModificationException) 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE super.<setter>(v) 
Gradle,WITHOUT_CLASSIFICATION,//  At this point:   If in daemon mode the process has started successfully and all streams to the process have been closed   If in fork mode the process has completed and all cleanup has been done   In both cases all asynchronous work for the process has completed and we're done 
Gradle,WITHOUT_CLASSIFICATION,//  cache result because it is pretty expensive to compute 
Gradle,WITHOUT_CLASSIFICATION,//  trailing / or \ assumes ** 
Gradle,WITHOUT_CLASSIFICATION,//  https://github.com/gradle/gradle-private/issues/1368 
Gradle,WITHOUT_CLASSIFICATION,//  Milestone 8 and 9 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: meminfoMatcher is _not_ thread safe and access needs to be limited to a single thread. 
Gradle,WITHOUT_CLASSIFICATION,// otherwise the stream.size() returns max integer and the offset is no longer correct 
Gradle,WITHOUT_CLASSIFICATION,//  Broken in another thread 
Gradle,WITHOUT_CLASSIFICATION,//  Not supported for now 
Gradle,WITHOUT_CLASSIFICATION,//  end::host-and-path[] 
Gradle,WITHOUT_CLASSIFICATION,//  Include file changed 
Gradle,WITHOUT_CLASSIFICATION,//  Otherwise try remotely 
Gradle,WITHOUT_CLASSIFICATION,//  This is a little coincidental: if view attributes have not been accessed don't allow no matching variants 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - we've already calculated the common prefix and calling plus() will calculate it again 
Gradle,WITHOUT_CLASSIFICATION,//  Add the unit test and extension 
Gradle,WITHOUT_CLASSIFICATION,//  Call this.super() 
Gradle,WITHOUT_CLASSIFICATION,//  A macro function call 
Gradle,WITHOUT_CLASSIFICATION,//  This ensures that subprojects are realized and register their project and project configuration IDE artifacts 
Gradle,WITHOUT_CLASSIFICATION,//  1. org.codehaus.groovy.classgen.asm.WriterController makes identity comparisons 
Gradle,WITHOUT_CLASSIFICATION,//  Milestone 6 
Gradle,WITHOUT_CLASSIFICATION,//  By removing the leading "/" this is no longer a "path" as defined by Eclipse 
Gradle,WITHOUT_CLASSIFICATION,//  Creates a control regexp pattern where extra revision tokens _must_ have the same value as the original one 
Gradle,WITHOUT_CLASSIFICATION,//  Notify any waiting flush threads that the worker is done possibly with a failure 
Gradle,WITHOUT_CLASSIFICATION,//  Also use the generated class for itself 
Gradle,WITHOUT_CLASSIFICATION,//  Task execution services at all levels needs this 
Gradle,WITHOUT_CLASSIFICATION,//  no compatible variant found 
Gradle,WITHOUT_CLASSIFICATION,//  Ant is optional dependency of groovy(-all) module but mandatory dependency of Groovy compiler;   that's why we add it here. The following assumes that any Groovy compiler version supported by Gradle   is compatible with Gradle's current Ant version. 
Gradle,WITHOUT_CLASSIFICATION,//  usePluginsInInitScripts asserts using https://repo.gradle.org/gradle/repo 
Gradle,WITHOUT_CLASSIFICATION,//  used for log and date only 
Gradle,WITHOUT_CLASSIFICATION,//  Milestone 7 
Gradle,WITHOUT_CLASSIFICATION,//  Intentionally asymmetrical to getExecuted()   This prevents recursion on `project.afterEvaluate { project.evaluate() }` 
Gradle,WITHOUT_CLASSIFICATION,// adding the properties from the super class onto the inheriting class 
Gradle,WITHOUT_CLASSIFICATION,//  but should be 
Gradle,WITHOUT_CLASSIFICATION,//  A member of the class breaks binary compatibility.   That will be handled when the member is passed to `maybeViolation`. 
Gradle,WITHOUT_CLASSIFICATION,//  this.<services_method>() 
Gradle,WITHOUT_CLASSIFICATION,//  Empty or only whitespace 
Gradle,WITHOUT_CLASSIFICATION,//  re-use not possible across modules currently 
Gradle,WITHOUT_CLASSIFICATION,//  for backwards compatibility we use the last added description 
Gradle,WITHOUT_CLASSIFICATION,//  On Linux users cannot touch files they don't own but have write access to   because the JDK uses futimes() instead of futimens() [note the 'n'!]   see https://github.com/gradle/gradle/issues/7873 
Gradle,WITHOUT_CLASSIFICATION,//  <thead>     <tr>       <td>Property</td>       <td>Description</td>     </tr>   </thead> 
Gradle,WITHOUT_CLASSIFICATION,//  Read *.properties files 
Gradle,WITHOUT_CLASSIFICATION,//  implicitly don't clean up if this throws 
Gradle,WITHOUT_CLASSIFICATION,/*                              * For someone looking for the difference between this and the duplicate code above                             * this one uses the `testTaskProvider` and the `reportTask`. The other just                             * uses the `reportTask`.                             * https://github.com/gradle/gradle/issues/6343                              */
Gradle,WITHOUT_CLASSIFICATION,//  disable jar file caching to prevent file locking 
Gradle,WITHOUT_CLASSIFICATION,//  Add plugin implementation here 
Gradle,WITHOUT_CLASSIFICATION,/*  * A performance test that compares Gradle's current performance against * some baseline and fails if it is slower.  */
Gradle,WITHOUT_CLASSIFICATION,//  else already visited or currently visiting (which means a cycle) skip 
Gradle,WITHOUT_CLASSIFICATION,//  Fix the source file name displayed in the error messages 
Gradle,WITHOUT_CLASSIFICATION,//  we can tell for sure 
Gradle,WITHOUT_CLASSIFICATION,//  When there is a class name match return true for excluding it so that we can keep   searching in individual test methods for an exact match. If we return false here   instead then we'll give up searching individual test methods and just ignore the   entire test class which may not be what we want. 
Gradle,WITHOUT_CLASSIFICATION,/*          * Linux 4.x: MemAvailable         * Linux 3.x: MemFree + Buffers + Cached + SReclaimable - Mapped          */
Gradle,WITHOUT_CLASSIFICATION,//  These should come from the compiler classloader 
Gradle,WITHOUT_CLASSIFICATION,//  Acquire an exclusive lock on the information region and write our details there 
Gradle,WITHOUT_CLASSIFICATION,//  1.x works on Java 5 - 8 
Gradle,WITHOUT_CLASSIFICATION,//  trailing EOL 
Gradle,WITHOUT_CLASSIFICATION,//  Pom packaging doesn't matter when we have a single unclassified artifact 
Gradle,WITHOUT_CLASSIFICATION,//  Try each address in turn. Not all of them are necessarily reachable (eg when socket option IPV6_V6ONLY   is on - the default for debian and others) so we will try each of them until we can connect 
Gradle,WITHOUT_CLASSIFICATION,//  Use the display name anyway 
Gradle,WITHOUT_CLASSIFICATION,//  Use java 7 APIs if available 
Gradle,WITHOUT_CLASSIFICATION,//  handle origin metadata 
Gradle,WITHOUT_CLASSIFICATION,//  Determine which output to produce at development time. 
Gradle,WITHOUT_CLASSIFICATION,//  BuildOperationListener dispatch is not serialized 
Gradle,WITHOUT_CLASSIFICATION,//  When running from a Gradle distro only need launcher jar. The daemon can find everything from there. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - reuse graph discard state once not required 
Gradle,WITHOUT_CLASSIFICATION,//  Collect the components to sort in consumer-first order 
Gradle,WITHOUT_CLASSIFICATION,//  replicate a little bit of AnnotationVisitor here   because we can't wait until later to do this 
Gradle,WITHOUT_CLASSIFICATION,//  This is the highest parent in the hierarchy 
Gradle,WITHOUT_CLASSIFICATION,//  No further mutation is allowed and there's no parent: the artifact set corresponds to this configuration own artifacts 
Gradle,WITHOUT_CLASSIFICATION,//  Do nothing for now 
Gradle,WITHOUT_CLASSIFICATION,//  Remove duplicates 
Gradle,WITHOUT_CLASSIFICATION,//  From compile configuration or when the target's runtime configuration does not extend from compile include the compile dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  When creating the OSGi manifest we must have a single view of all of the classes included in the jar. 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - visit dependencies of this collection instead 
Gradle,WITHOUT_CLASSIFICATION,//  Don't write to the right-most column as on some consoles the cursor will wrap to the next line and currently wrapping causes   layout weirdness 
Gradle,WITHOUT_CLASSIFICATION,//  We do not store the history if there was a failure and the outputs did not change since then the next execution can be incremental.   For example the current execution fails because of a compile failure and for the next execution the source file is fixed so only the one changed source file needs to be compiled. 
Gradle,WITHOUT_CLASSIFICATION,//  Check already-resolved dependencies and use this version if it's compatible 
Gradle,WITHOUT_CLASSIFICATION,//  Perform conflict resolution 
Gradle,WITHOUT_CLASSIFICATION,//  Caches the list of dependency states which are NOT excluded 
Gradle,WITHOUT_CLASSIFICATION,//  Relative coordinate system 
Gradle,WITHOUT_CLASSIFICATION,//  if the first call to getConfiguration is done before getDerivedVariants() is called   then it means we're using the legacy matching without attributes and that the metadata   we construct should _not_ include the constraints. We keep the constraints in the descriptors   because if we actually use attribute matching we can select the platform variant which   does use constraints. 
Gradle,WITHOUT_CLASSIFICATION,/*      * Synchronizes on the system properties because IvySettings iterates     * over them without taking a defensive copy. This can fail if another     * process sets a system property at that moment.      */
Gradle,WITHOUT_CLASSIFICATION,//  ANTLR 2 always returning 0 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - do this inside some 'testng' suite so that failures and logging are attached to 'testng' rather than some 'test worker' 
Gradle,WITHOUT_CLASSIFICATION,//  Progress events have no expensive logic of their own so we don't do anything   with them. We only test the overhead of sending/receiving them 
Gradle,WITHOUT_CLASSIFICATION,//  Have not seen this node before - add its dependencies to the head of the queue and leave this   node in the queue   Make sure it has been configured 
Gradle,WITHOUT_CLASSIFICATION,//  Need tools.jar for compile tasks 
Gradle,WITHOUT_CLASSIFICATION,//  we handle the property part as if it were not part of the property 
Gradle,WITHOUT_CLASSIFICATION,//  We do not need to check instances of LowerCaseClass   to be a Class because unless there was an import for   for this we do not lookup these cases. This was a decision   made on the mailing list. To ensure we will not visit this   method again we set a NO_CLASS for this name 
Gradle,WITHOUT_CLASSIFICATION,//  Trigger download of file if required 
Gradle,WITHOUT_CLASSIFICATION,//  Do not substitute plugins from same build or builds that were not explicitly included 
Gradle,WITHOUT_CLASSIFICATION,// noinspection ThrowFromFinallyBlock 
Gradle,WITHOUT_CLASSIFICATION,//  this is an approximation: all "compiled" sources will use the same task dependency 
Gradle,WITHOUT_CLASSIFICATION,//  Shorten args and write out an options.txt file   This must be called only once per execute() 
Gradle,WITHOUT_CLASSIFICATION,//  At this point the work-in-progress area may or may not have been resized due to maximum size constraint. 
Gradle,WITHOUT_CLASSIFICATION,//  Using a string instead of a plain ID here might look strange but this turned out to be   the fastest of several experiments including:        using ModuleIdentifier (initial implementation)      using ModuleIdentifier through ImmutableModuleIdentifierFactory (for interning)      using a 2-level map (by group then by name)      using an interned string for the cachedId (interning turned out to cost as much as what we gain from faster checks in maps)     And none of them reached the performance of just using a good old string 
Gradle,WITHOUT_CLASSIFICATION,//  Copy the raw form 
Gradle,WITHOUT_CLASSIFICATION,//  Do not use a timestamp that is the same as the end of the last build or the start of this build 
Gradle,WITHOUT_CLASSIFICATION,//  When using IncrementalTaskInputs keep the old behaviour of all file inputs being incremental 
Gradle,WITHOUT_CLASSIFICATION,//  unknown scope defaulting to 'compile' 
Gradle,WITHOUT_CLASSIFICATION,//  Encode the character using hex notation 
Gradle,WITHOUT_CLASSIFICATION,//  Use an empty settings for a target build file located in the same directory as the settings file. 
Gradle,WITHOUT_CLASSIFICATION,//  at this point we know the component exists 
Gradle,WITHOUT_CLASSIFICATION,//  Any available Clang 
Gradle,WITHOUT_CLASSIFICATION,//  we cannot use md5 instead of sha1 here because cache will get corrupted due to its expectation of sha1 hashes 
Gradle,WITHOUT_CLASSIFICATION,//  discard static initializers 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE ((MixInExtensibleDynamicObject)getAsDynamicObject()).getConvention() 
Gradle,WITHOUT_CLASSIFICATION,//  If this Scala compile is published into a jar generate a analysis mapping file 
Gradle,WITHOUT_CLASSIFICATION,//  Consume content for non-successful responses. This avoids the connection being left open. 
Gradle,WITHOUT_CLASSIFICATION,//  Macro expand parameter 
Gradle,WITHOUT_CLASSIFICATION,//  Already in something to uncompress it 
Gradle,WITHOUT_CLASSIFICATION,//  Reset console mode 
Gradle,WITHOUT_CLASSIFICATION,//  Do not macro expand parameter 
Gradle,WITHOUT_CLASSIFICATION,//  gate hasn't been opened yet 
Gradle,WITHOUT_CLASSIFICATION,//  `getMaxWorkerCount() - 1` because main thread executes work as well. See https://github.com/gradle/gradle/issues/3273   TODO This could be more efficient so that we only start a worker when there are none idle _and_ there is a worker lease available 
Gradle,WITHOUT_CLASSIFICATION,// don't synchronize value creation 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Locate this tool from a tool provider 
Gradle,WITHOUT_CLASSIFICATION,//  We have to keep this for a while: https://github.com/gradle/gradle/issues/4856 
Gradle,WITHOUT_CLASSIFICATION,//  Wire build dependent binaries tasks dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  These files have an unreliable timestamp - discard any cached state for them and rehash next time they are seen 
Gradle,WITHOUT_CLASSIFICATION,//  If the previous result is still not rejected do not need to re-resolve. The previous result is still good. 
Gradle,WITHOUT_CLASSIFICATION,// put the whole arguments string in single quotes unless defaultJvmOpts was empty 
Gradle,WITHOUT_CLASSIFICATION,//  A CONSTANT_Class entry read the class descriptor 
Gradle,WITHOUT_CLASSIFICATION,//  we see a different value or the set already exists in which case we initialize   the set if it wasn't done already and collect all values. 
Gradle,WITHOUT_CLASSIFICATION,//  Assuming format: 'Swift version 4.0.2 (...)' 
Gradle,WITHOUT_CLASSIFICATION,//  The “remote” may have already given us the checksum 
Gradle,WITHOUT_CLASSIFICATION,//  We need to resolve the classes into a set of files so @SkipWhenEmpty will work   Otherwise a collection of empty directories is not seen as "empty" 
Gradle,WITHOUT_CLASSIFICATION,//  Let's make sure we never need to reallocate 
Gradle,WITHOUT_CLASSIFICATION,//  throws Exception 
Gradle,WITHOUT_CLASSIFICATION,//  This set represents the order in which elements are inserted to the store either actual   or provided.  We construct a correct iteration order from this set. 
Gradle,WITHOUT_CLASSIFICATION,//  Yeah setting the background intensity is not underlining.. but it's best we can do   using the Windows console API 
Gradle,WITHOUT_CLASSIFICATION,//  This could be more efficient; assume that removal happens much less often than addition 
Gradle,WITHOUT_CLASSIFICATION,//  (<type>)<service> 
Gradle,WITHOUT_CLASSIFICATION,//  Generate: Class publicType() { ... } 
Gradle,WITHOUT_CLASSIFICATION,//  protects the following state   Contains only application owned ClassLoaders 
Gradle,WITHOUT_CLASSIFICATION,//  These objects are going across the wire.   1. Convert any subclasses back to File in case the subclass isn't available in Gradle.   2. Make them absolute here to deal with a different root at the server 
Gradle,WITHOUT_CLASSIFICATION,//  Serialize anything else 
Gradle,WITHOUT_CLASSIFICATION,/*      * Does a defensive copy to avoid leaking class references through the MutablePropertyDetails     * contained in the maps values. The keyset would keep a strong reference back to the map     * and all its entries.      */
Gradle,WITHOUT_CLASSIFICATION,//  Also available via play.japi.twirl.compiler.TwirlCompiler.DEFAULT_IMPORTS but we would have to grab it via reflection 
Gradle,WITHOUT_CLASSIFICATION,//  extract exceptions 
Gradle,WITHOUT_CLASSIFICATION,//  summary 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - mix Groovy DSL support in 
Gradle,WITHOUT_CLASSIFICATION,//  Order is important here because they will be searched in that order 
Gradle,WITHOUT_CLASSIFICATION,/*      * Adds an action which is executed before this collection is mutated with the addition or removal of elements.     * Any exception thrown by the action will veto the mutation.     *     * TODO: Combine this with the MutationGuard or rework CompositeDomainObject to behave with MutationGuard/MutationValidator.     * The mutation validators used in DefaultConfiguration only expect to be used with add/remove methods and fail when we     * correctly try to also prevent all/withType/etc mutation methods.     *     * assertMutableCollectionContents is only used by add/remove methods but we should remove this special handling and fix     * DefaultConfiguration and CompositeDomainObjects.      */
Gradle,WITHOUT_CLASSIFICATION,//  Null is ok if the ConstructorSelector says it's ok 
Gradle,WITHOUT_CLASSIFICATION,// create log file 
Gradle,WITHOUT_CLASSIFICATION,//  show all operation output when debug is enabled 
Gradle,WITHOUT_CLASSIFICATION,//  Transition any other nodes that depend on the predecessor state 
Gradle,WITHOUT_CLASSIFICATION,//  element names can only contain 0 or 1 colon   See http://www.w3.org/TR/2004/REC-xml-names11-20040204/#Conformance   If the name has a prefix evaluate both prefix and name 
Gradle,WITHOUT_CLASSIFICATION,//  Coerce the value to the property type if known 
Gradle,WITHOUT_CLASSIFICATION,/*          * MetaClass.getMetaProperty(name) is very expensive when the property is not known.         * Instead we reach into the meta class to call a much more efficient lookup method.         * Since we do this in a hot code path we also reuse the argument array used for the         * reflective call to save memory.          */
Gradle,WITHOUT_CLASSIFICATION,//  Don't collect build dependencies if not required 
Gradle,WITHOUT_CLASSIFICATION,//  please keep the formatting below as it helps enabling or disabling stages   optimizes for nulls 2-params ... mandatory   caches the result of TL operations   performs algebra   caches the result of optimization operations   the end of the chain mandatory   shares the same caches as the top level one as after reducing we can find already cached merge operations 
Gradle,WITHOUT_CLASSIFICATION,//  Not part of the public API 
Gradle,WITHOUT_CLASSIFICATION,//  Clean-up old HTML report directories 
Gradle,WITHOUT_CLASSIFICATION,//  fix problems in updating jar files by disabling default caching of URL connections.   URLConnection default caching should be disabled since it causes jar file locking issues and JVM crashes in updating jar files.   Changes to jar files won't be noticed in all cases when caching is enabled.   sun.net.www.protocol.jar.JarURLConnection leaves the JarFile instance open if URLConnection caching is enabled. 
Gradle,WITHOUT_CLASSIFICATION,//  Here it means that we have validated that the entry is still up-to-date and that means a couple of things:   1. the cache policy said that the entry is still valid (for example `--refresh-dependencies` wasn't called)   2. if the rule is cacheable we have validated that its discovered inputs are still the same 
Gradle,WITHOUT_CLASSIFICATION,// 2 gigs 
Gradle,WITHOUT_CLASSIFICATION,//  From every configuration other than compile include both the runtime and compile dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  Read serialized worker 
Gradle,WITHOUT_CLASSIFICATION,//  Only add confs if they are specified. if they aren't endElement will handle this only if there are no conf defined in sub elements 
Gradle,WITHOUT_CLASSIFICATION,//  This is an empty root block discard it 
Gradle,WITHOUT_CLASSIFICATION,//  buffer was full just call Thread.yield 
Gradle,WITHOUT_CLASSIFICATION,//  These constants are defined here and not with the rest of their kind in HelpTasksPlugin because they are referenced   in the ‘core’ modules which don't depend on ‘plugins’ where HelpTasksPlugin is defined. 
Gradle,WITHOUT_CLASSIFICATION,//  overwrite rather than append dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  resolve constant-looking expressions statically (do here as gets transformed away later) 
Gradle,WITHOUT_CLASSIFICATION,//  Currently need to resolve the file so that the artifact can be used in both a script classpath and the main build. Instead this should be resolved as required 
Gradle,WITHOUT_CLASSIFICATION,//  Create unbuildable build configuration so the indexer can keep functioning 
Gradle,WITHOUT_CLASSIFICATION,//  Turn the requested watch points into actual enclosing directories that exist 
Gradle,WITHOUT_CLASSIFICATION,//  Need Transformer (part of AntBuilder API) from base services 
Gradle,WITHOUT_CLASSIFICATION,//  Create trust manager 
Gradle,WITHOUT_CLASSIFICATION,//  If we don't know what the max heap is approximate it based on OS total memory 
Gradle,WITHOUT_CLASSIFICATION,//  Check for presence as the domain object may have been replaced 
Gradle,WITHOUT_CLASSIFICATION,//  Make convention mapping work 
Gradle,WITHOUT_CLASSIFICATION,//  Convert a second time with only the published configurations: this ensures that the correct artifacts are included 
Gradle,WITHOUT_CLASSIFICATION,//  nothing to do if no EclipseRuntime is supplied. 
Gradle,WITHOUT_CLASSIFICATION,//  Add separators before and after anything with a comment or that is a block or group of statements 
Gradle,WITHOUT_CLASSIFICATION,//  try to get the name from EclipseProject.name 
Gradle,WITHOUT_CLASSIFICATION,//  Shutdown the adapter Groovy system 
Gradle,WITHOUT_CLASSIFICATION,// Discard the compile loader 
Gradle,WITHOUT_CLASSIFICATION,//  Only report subject binding if target state is after node creation 
Gradle,WITHOUT_CLASSIFICATION,/*          * Remembers the unresolved dependency for later logging and also adds a fake         * file dependency with the file path pointing to the attempted component selector.         * This shows up in the IDE as a red flag in the dependencies view. That's not the best         * usability and it also muddies the API contract because we disguise an unresolved         * dependency as a file dependency even though that file really doesn't exist.         *         * Instead when generating files on the command line the logged warning is enough.         * When using the Tooling API a dedicated "unresolved dependency" object would be better         * and could be shown in a notification. The command line warning should probably be omitted in that case.          */
Gradle,WITHOUT_CLASSIFICATION,//  Set the visible included builds 
Gradle,WITHOUT_CLASSIFICATION,//  Nested closure 
Gradle,WITHOUT_CLASSIFICATION,//  Only cache non-overloaded methods by name 
Gradle,WITHOUT_CLASSIFICATION,//  Artifacts are not known until the file collection is queried 
Gradle,WITHOUT_CLASSIFICATION,//  Toolchains should be linking against stuff in the standard locations 
Gradle,WITHOUT_CLASSIFICATION,//  Have to pass build JVM args directly to launcher JVM 
Gradle,WITHOUT_CLASSIFICATION,//  Can't acquire lock get details of owner to include in the error message 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore things we know are empty 
Gradle,WITHOUT_CLASSIFICATION,//  Ping the owner via all available local addresses 
Gradle,WITHOUT_CLASSIFICATION,//  check our classpath 
Gradle,WITHOUT_CLASSIFICATION,//  @Inject is allowed on fields only 
Gradle,WITHOUT_CLASSIFICATION,// class file versions: 1.1 == 45 1.2 == 46... 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: When we support multiple components or configurable dependencies we'll need to merge the confs of multiple dependencies with same id. 
Gradle,WITHOUT_CLASSIFICATION,//  ignore exception in shutdown 
Gradle,WITHOUT_CLASSIFICATION,//  If the target is a project component it has not been modified from the requested 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE null 
Gradle,WITHOUT_CLASSIFICATION,//  return 
Gradle,WITHOUT_CLASSIFICATION,//  Detect anonymous static classes of enum constants with class body   See https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#d5e12300   And https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.1   "The optional class body of an enum constant implicitly defines an anonymous class declaration    that extends the immediately enclosing enum type." 
Gradle,WITHOUT_CLASSIFICATION,//  Hackery to make closure execution faster by short-circuiting the expensive property and method lookup on Closure
Gradle,WITHOUT_CLASSIFICATION,//  Only managed implementation and value types are allowed as a managed property type unless marked with @Unmanaged 
Gradle,WITHOUT_CLASSIFICATION,/*  isInitialPass  */
Gradle,WITHOUT_CLASSIFICATION,//  Read-only property with managed type 
Gradle,WITHOUT_CLASSIFICATION,//  Do not traverse if seen already 
Gradle,WITHOUT_CLASSIFICATION,//  Inject the launcher JVM args via one of the environment variables 
Gradle,WITHOUT_CLASSIFICATION,//  If the classloader structure is flat there's no need to send the classpath 
Gradle,WITHOUT_CLASSIFICATION,// we could potentially avoid creating value that is already being created by a different thread. 
Gradle,WITHOUT_CLASSIFICATION,//  Wait for the process' stdout to indicate that the process has been started successfully 
Gradle,WITHOUT_CLASSIFICATION,//  currently single list of optionals 
Gradle,WITHOUT_CLASSIFICATION,//  Expire under high JVM memory or GC pressure 
Gradle,WITHOUT_CLASSIFICATION,//  scenarioList contains duplicate scenarios because of rerun 
Gradle,WITHOUT_CLASSIFICATION,//  If the jansi.strip property is set then we just strip the 
Gradle,WITHOUT_CLASSIFICATION,//  i >= 1 makes sure that commonElements < stackTrace.size() 
Gradle,WITHOUT_CLASSIFICATION,//  Use this instead of Description.getClassName() it is not available in JUnit <= 4.5
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE __<prop>__ = true 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore any other outcome 
Gradle,WITHOUT_CLASSIFICATION,//  public methods belongs to your API 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Allow this to be added lazily 
Gradle,WITHOUT_CLASSIFICATION,// then we want to validate strictly 
Gradle,WITHOUT_CLASSIFICATION,//  Selection deferred as we know another selector will be added soon 
Gradle,WITHOUT_CLASSIFICATION,//  when a selector changes from non lock to lock we must reselect 
Gradle,WITHOUT_CLASSIFICATION,//  Important that the launchables are unpacked on the client side to avoid sending back any additional internal state that   the launchable may hold onto. For example GradleTask implementations hold onto every task for every project in the build 
Gradle,WITHOUT_CLASSIFICATION,//  retry after getting "Bad file descriptor" exception 
Gradle,WITHOUT_CLASSIFICATION,//  Lambdas contain a name that's based on an index + timestamp at runtime and changes build-to-build.   This makes comparing two builds very difficult when a lambda is in the stack   changes SkipUpToDateStep$$Lambda$33.1050994387.apply -> SkipUpToDateStep$$Lambda$apply 
Gradle,WITHOUT_CLASSIFICATION,//  MutableModelNode methods 
Gradle,WITHOUT_CLASSIFICATION,// quote everything else 
Gradle,WITHOUT_CLASSIFICATION,//  This severs the connection between from this debugOptions to the other debugOptions 
Gradle,WITHOUT_CLASSIFICATION,//  just for reporting 
Gradle,WITHOUT_CLASSIFICATION,//  If we have a single common resolution no conflicts to resolve 
Gradle,WITHOUT_CLASSIFICATION,//  must be an included build 
Gradle,WITHOUT_CLASSIFICATION,//  This is a slight different condition than that used for a dependency declared in a Gradle project   which is (targetHasVariants || consumerHasAttributes) relying on the fallback to 'default' for consumer attributes without any variants. 
Gradle,WITHOUT_CLASSIFICATION,/*  * TODO - merge this and the component container  */
Gradle,WITHOUT_CLASSIFICATION,//  lookup class in all classloaders 
Gradle,WITHOUT_CLASSIFICATION,// Would typically use GetObjectMetadataRequest but it does not work with v4 signatures
Gradle,WITHOUT_CLASSIFICATION,//  Either a macro function a macro or token concatenation 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE instantiator.newInstance(type) 
Gradle,WITHOUT_CLASSIFICATION,//  1.8 
Gradle,WITHOUT_CLASSIFICATION,//  if not null is not empty 
Gradle,WITHOUT_CLASSIFICATION,//  Read -D command line flags 
Gradle,WITHOUT_CLASSIFICATION,//  Should not happen 
Gradle,WITHOUT_CLASSIFICATION,//  0.9.1 couldn't handle anything with a timestamp whose timezone was behind GMT 
Gradle,WITHOUT_CLASSIFICATION,//  Caching involves 2 distinct caches so that 2 scripts with the same (hash classpath) do not get compiled twice   1. First we look for a cache script which (path hash) matches. This cache is invalidated when the compile classpath of the script changes   2. Then we look into the 2d cache for a "generic script" with the same hash that will be remapped to the script class name   Both caches can be closed directly after use because:   For 1 if the script changes or its compile classpath changes a different directory will be used   For 2 if the script changes a different cache is used. If the classpath changes the cache is invalidated but classes are remapped to 1. anyway so never directly used 
Gradle,WITHOUT_CLASSIFICATION,//  Create a SourceFile object to represent the javascript file to compile 
Gradle,WITHOUT_CLASSIFICATION,//  Remove all the methods from the main class 
Gradle,WITHOUT_CLASSIFICATION,//  We don't support shrinking at the moment 
Gradle,WITHOUT_CLASSIFICATION,//  Create a synthetic id for the build if the id is already used   Should instead use a structured id implementation of some kind instead 
Gradle,WITHOUT_CLASSIFICATION,//  exists == has content 
Gradle,WITHOUT_CLASSIFICATION,//  Do not process Object's or GroovyObject's methods 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - this should be applied to all methods including delegating methods 
Gradle,WITHOUT_CLASSIFICATION,//  Could potentially coordinate with a thread that is snapshotting an overlapping directory tree 
Gradle,WITHOUT_CLASSIFICATION,//  Supported nothing to do. 
Gradle,WITHOUT_CLASSIFICATION,//  If the module matches add the root component into the mix 
Gradle,WITHOUT_CLASSIFICATION,//  Too many requests (not available through HttpStatus.XXX) 
Gradle,WITHOUT_CLASSIFICATION,//  Unpacks the request to serialize across to the daemon and creates instance of   TestExecutionRequestAction 
Gradle,WITHOUT_CLASSIFICATION,//  cleanup() will abort the process as desired 
Gradle,WITHOUT_CLASSIFICATION,//  Include file not found (but previously was found) 
Gradle,WITHOUT_CLASSIFICATION,//  An empty capability list means that it's an implicit capability only 
Gradle,WITHOUT_CLASSIFICATION,//  read-write-execute for user only   read-write for user only 
Gradle,WITHOUT_CLASSIFICATION,/*          *  GROOVY-4009: when a normal variable is simply being used there is no need to try to         *  resolve its type. Variable type resolve should proceed only if the variable is being declared.          */
Gradle,WITHOUT_CLASSIFICATION,//  Only handle the command line for now 
Gradle,WITHOUT_CLASSIFICATION,//  Turn off request logging unless debug mode is enabled 
Gradle,WITHOUT_CLASSIFICATION,//  Unknown type - just inspect ourselves. Should instead share this with all registries 
Gradle,WITHOUT_CLASSIFICATION,// fall back to default runner 
Gradle,WITHOUT_CLASSIFICATION,//  Resolvable configurations 
Gradle,WITHOUT_CLASSIFICATION,//  Based on the benchmark found in org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessorBenchmark   and the results in the PR https://github.com/gradle/gradle/pull/1183   we're using "native platform" for Mac OS and a  mix of File and NIO API for Linux and Windows   Once JDK 9 is out we need to revisit the choice because testing for file.exists() should become much   cheaper using the pure NIO implementation. 
Gradle,WITHOUT_CLASSIFICATION,/*                 val rightResult = result.right()                val generatedFiles = right.get()                val empty = generatedFiles.isEmpty()                empty.booleanValue()              */
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task args? <identifier> args? or task(args? <identifier> args?)   Map to: task(args? '<identifier>' args?) 
Gradle,WITHOUT_CLASSIFICATION,//  Report fields with annotations that have not been seen while processing properties 
Gradle,WITHOUT_CLASSIFICATION,//  Snarl is not running 
Gradle,WITHOUT_CLASSIFICATION,//  If credential decides it can handle it the return code or message indicated   something specific to authentication and no backoff is desired. 
Gradle,WITHOUT_CLASSIFICATION,//  Body is a simple expression including a macro function call with no arguments 
Gradle,WITHOUT_CLASSIFICATION,//  Enable the use of Gradle metadata. This is a temporary opt-in switch until available by default 
Gradle,WITHOUT_CLASSIFICATION,//  this is cached because used very often in sorting selectors 
Gradle,WITHOUT_CLASSIFICATION,//  ProviderInternal is-a TaskDependencyContainer so check first 
Gradle,WITHOUT_CLASSIFICATION,//  Implementations should not wrap exceptions this is done in DefaultObjectConfigurationAction
Gradle,WITHOUT_CLASSIFICATION,//  found an attribute with the same name but they do not necessarily have the same type 
Gradle,WITHOUT_CLASSIFICATION,//  Consumable configurations 
Gradle,WITHOUT_CLASSIFICATION,//  Handle just empty string single identifier or '(' params? ')' should handle more by parsing the tokens into an expression 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Add handling for Test-only dependencies once https://github.com/gradle/gradle/pull/9484 is merged 
Gradle,WITHOUT_CLASSIFICATION,//  No macro name 
Gradle,WITHOUT_CLASSIFICATION,//  Does not take effect until after execution has completed 
Gradle,WITHOUT_CLASSIFICATION,//  Only apply default locations when none explicitly configured 
Gradle,WITHOUT_CLASSIFICATION,//  empty text nodes hinder subsequent formatting 
Gradle,WITHOUT_CLASSIFICATION,//  Resolve it later 
Gradle,WITHOUT_CLASSIFICATION,//  First look for a property known to the meta-class 
Gradle,WITHOUT_CLASSIFICATION,//  component under test 
Gradle,WITHOUT_CLASSIFICATION,//  Just move back 2 seconds 
Gradle,WITHOUT_CLASSIFICATION,//  A first pass to do local resolves only 
Gradle,WITHOUT_CLASSIFICATION,//  TODO Deprecate and eventually prevent these mutations in parent when already resolved
Gradle,WITHOUT_CLASSIFICATION,//  Artifacts   Keep track of transformed artifacts as a given artifact may appear in multiple variants 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore exclusions for dependencies with `<optional>true</optional>` but not for <dependencyManagement>. 
Gradle,WITHOUT_CLASSIFICATION,//  JVM args that must be used to fork a JVM 
Gradle,WITHOUT_CLASSIFICATION,//  custom type 
Gradle,WITHOUT_CLASSIFICATION,// discovered java location 
Gradle,WITHOUT_CLASSIFICATION,//  Include all 'optional' dependencies in "optional" configuration 
Gradle,WITHOUT_CLASSIFICATION,//  ignored 
Gradle,WITHOUT_CLASSIFICATION,//  Assume VS 2015 
Gradle,WITHOUT_CLASSIFICATION,//  Create the and initialize the SSLContext 
Gradle,WITHOUT_CLASSIFICATION,//  We use an identity hashmap for performance because we know that our attributes   are generated by a factory which guarantees same instances 
Gradle,WITHOUT_CLASSIFICATION,//  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-NullLiteral 
Gradle,WITHOUT_CLASSIFICATION,//  Casts to Class below are to workaround Eclipse compiler bug   See: https://github.com/gradle/gradle/pull/200 
Gradle,WITHOUT_CLASSIFICATION,//  Clean up old stop events 
Gradle,WITHOUT_CLASSIFICATION,//  Exit code 0 = success   Exit code 1 = failed test(s)   anything else is considered an execution failure 
Gradle,WITHOUT_CLASSIFICATION,//  On macOS we assume co-located Xcode is installed into /opt/xcode 
Gradle,WITHOUT_CLASSIFICATION,//  previous character is not a separator 
Gradle,WITHOUT_CLASSIFICATION,//  Defer attaching the model until all components have been (most likely) configured   TODO - make this relationship explicit to make this more reliable and offer better diagnostics 
Gradle,WITHOUT_CLASSIFICATION,/*                  * An extracted distribution usually looks like:                 * checksumDir/                 *      | gradle-5.5.1-bin.zip.ok                 *      | gradle-5.5.1-bin.zip.lck                 *      | gradle-5.5.1-bin.zip                 *      | gradle-5.5.1                  */
Gradle,WITHOUT_CLASSIFICATION,//  check package this class is defined in. The usage of ConstructedClassWithPackage here   means that the module package will not be involved when the   compiler tries to find an inner class. 
Gradle,WITHOUT_CLASSIFICATION,//  4.x   2.x - 3.x   1.x 
Gradle,WITHOUT_CLASSIFICATION,//  On windows we know the console does not interpret ANSI codes.. 
Gradle,WITHOUT_CLASSIFICATION,//  following patterns are built upon constants above and should not be modified 
Gradle,WITHOUT_CLASSIFICATION,//  ordered by how much they filter 
Gradle,WITHOUT_CLASSIFICATION,//  By default the local cache is a directory cache 
Gradle,WITHOUT_CLASSIFICATION,//  we just need to get the lock for this project 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: When removing provider we don't need to fireObjectRemoved as they were never added in the first place. 
Gradle,WITHOUT_CLASSIFICATION,//  In the same situation with NATIVE_HEADER_OUTPUT javac just NPEs.  Don't bother. 
Gradle,WITHOUT_CLASSIFICATION,//  If the jansi.passthrough property is set then don't interpret 
Gradle,WITHOUT_CLASSIFICATION,/*  * Benchmark                     Mode  Cnt          Score         Error  Units * OptionalBenchmark.nullCheck  thrpt   20  107887111.061 ±  882182.482  ops/s * OptionalBenchmark.optional   thrpt   20   86746312.090 ± 1150860.296  ops/s * */
Gradle,WITHOUT_CLASSIFICATION,//  we are currently adding a configuration to either an include exclude or artifact   element   of a dependency. This means that we have to add this element to the corresponding   conf   of the current dependency descriptor 
Gradle,WITHOUT_CLASSIFICATION,//  path { ... } 
Gradle,WITHOUT_CLASSIFICATION,//  If the previous result was rejected do not need to re-resolve (new rejects will be a superset of previous rejects) 
Gradle,WITHOUT_CLASSIFICATION,//  MinGW requires the path to be set 
Gradle,WITHOUT_CLASSIFICATION,//  superName can be null if what we are analyzing is `java.lang.Object`   which can happen when a custom Java SDK is on classpath (typically android.jar) 
Gradle,WITHOUT_CLASSIFICATION,//  See if all entry points have the same identifier 
Gradle,WITHOUT_CLASSIFICATION,//  Unfortunately we can't determine this at constructor time because CacheBuilder   calls our constructor and it's not easy to pass arguments to it. 
Gradle,WITHOUT_CLASSIFICATION,//  virtual components have no source 
Gradle,WITHOUT_CLASSIFICATION,//  Collect any container level add actions added since the last call to configure() 
Gradle,WITHOUT_CLASSIFICATION,//  DO NOT change the signature of this method: it is a convention used in   our internal performance testing infrastructure 
Gradle,WITHOUT_CLASSIFICATION,//  Add the application and extension 
Gradle,WITHOUT_CLASSIFICATION,//  Try to configure element 
Gradle,WITHOUT_CLASSIFICATION,//  Pass 1 extract plugin requests and plugin repositories and execute buildscript {} ignoring (i.e. not even compiling) anything else 
Gradle,WITHOUT_CLASSIFICATION,//  another case we want to check here is if we are in a   nested class A$B$C and want to access B without   qualifying it by A.B. A alone will work since that   is the qualified (minus package) name of that class   anyway. 
Gradle,WITHOUT_CLASSIFICATION,//  First things first retro compatibility 
Gradle,WITHOUT_CLASSIFICATION,//  to strip the ANSI sequences.. 
Gradle,WITHOUT_CLASSIFICATION,//  1.0-milestone-5 was broken where jna was not available  noinspection SimplifiableIfStatement 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: This is where the password information would go
Gradle,WITHOUT_CLASSIFICATION,//  If unknown try a remote search 
Gradle,WITHOUT_CLASSIFICATION,//  For custom ivy pattern matchers don't inspect the rule any more deeply: this prevents us from doing smart merging later 
Gradle,WITHOUT_CLASSIFICATION,// No conflict with matching participants found create new 
Gradle,WITHOUT_CLASSIFICATION,//  tag::options-of-dynamic-processor[] 
Gradle,WITHOUT_CLASSIFICATION,//  if the included ivy file is not found on file system tries to resolve using 
Gradle,WITHOUT_CLASSIFICATION,//  TODO - display name 
Gradle,WITHOUT_CLASSIFICATION,//  Prevent further tests (ignored) from triggering start actions 
Gradle,WITHOUT_CLASSIFICATION,//  Known but not buildable 
Gradle,WITHOUT_CLASSIFICATION,//  Stop the pipeline:   1. mark daemon as stopped so that any incoming requests will be rejected with 'daemon unavailable'   2. remove presence from registry   3. stop accepting new connections   4. wait for commands in progress to finish (except for abandoned long running commands like running a build) 
Gradle,WITHOUT_CLASSIFICATION,//  Example: http://repo2.maven.org/maven2/net/jini/jsk-platform/2.1/jsk-platform-2.1.pom 
Gradle,WITHOUT_CLASSIFICATION,//  ExecuteBuild should be the last action but in case we want to decorate the result in the future 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public <type> <getter>() { return (<type>)getConventionMapping().getConventionValue(super.<getter>() '<prop>' __<prop>__); } 
Gradle,WITHOUT_CLASSIFICATION,//  new entry 
Gradle,WITHOUT_CLASSIFICATION,//  Else has been removed by something else - ignore 
Gradle,WITHOUT_CLASSIFICATION,//  Need to use a 'foreign' build id to make BuildIdentifier.isCurrentBuild and BuildIdentifier.name work in dependency results 
Gradle,WITHOUT_CLASSIFICATION,//  We use a set here because for excludes order of edges is irrelevant   so we hit the cache more by using a set 
Gradle,WITHOUT_CLASSIFICATION,//  NOTE: the space in the directory name is intentional
Gradle,WITHOUT_CLASSIFICATION,// browsers dont understand <a name="..."/> 
Gradle,WITHOUT_CLASSIFICATION,//  Is the cached version still current?
Gradle,WITHOUT_CLASSIFICATION,//  Convert properties to ParallelismConfiguration object 
Gradle,WITHOUT_CLASSIFICATION,//  Delegate class is not visible to managed view type -> view type is more general than delegate type so use the delegate classloader instead 
Gradle,WITHOUT_CLASSIFICATION,// module was already visited there is a cycle 
Gradle,WITHOUT_CLASSIFICATION,//  hot path; create as little as possible… 
Gradle,WITHOUT_CLASSIFICATION,//  These are implemented as a system property but don't really function like one   So we include it in this “no system property” set. 
Gradle,WITHOUT_CLASSIFICATION,//  We need scala.util.parsing.input.Positional 
Gradle,WITHOUT_CLASSIFICATION,//  There's no authentication involved requests can be done concurrently 
Gradle,WITHOUT_CLASSIFICATION,//  Start preparing the result 
Gradle,WITHOUT_CLASSIFICATION,//  Deserialize the worker action 
Gradle,WITHOUT_CLASSIFICATION,//  Add tasks created through rules to the actual task container 
Gradle,WITHOUT_CLASSIFICATION,//  Can probably skip this 
Gradle,WITHOUT_CLASSIFICATION,//  Split out up the output into main content and post build content 
Gradle,WITHOUT_CLASSIFICATION,//  ... 
Gradle,WITHOUT_CLASSIFICATION,//  Use a defensive copy of the build definition as it may be mutated during build execution 
Gradle,WITHOUT_CLASSIFICATION,//  https://docs.oracle.com/javase/specs/jls/se12/html/jls-3.html#jls-Identifier 
Gradle,WITHOUT_CLASSIFICATION,//  Can get duplicate finish events 
Gradle,WITHOUT_CLASSIFICATION,//  This method is effectively part of a cross Gradle version contract. 
Gradle,WITHOUT_CLASSIFICATION,//  Read worker implementation classpath 
Gradle,WITHOUT_CLASSIFICATION,//  Any logging prior to this point will not end up in the daemon log file. 
Gradle,WITHOUT_CLASSIFICATION,//  with normalized line endings 
Gradle,WITHOUT_CLASSIFICATION,//  The following values are relatively expensive to create so defer creation until required 
Gradle,WITHOUT_CLASSIFICATION,//  Use java 7 APIs if available otherwise fallback to no-op 
Gradle,WITHOUT_CLASSIFICATION,//  Move into cache 
Gradle,WITHOUT_CLASSIFICATION,// iterate and stop all daemons 
Gradle,WITHOUT_CLASSIFICATION,//  Read header 
Gradle,WITHOUT_CLASSIFICATION,//  2 lines: 1 for BuildStatus and 1 for Cursor parking space 
Gradle,WITHOUT_CLASSIFICATION,//  construct task selectors 
Gradle,WITHOUT_CLASSIFICATION,//  Get the CompilationLevel.SIMPLE_OPTIMIZATIONS class and set it on the CompilerOptions class 
Gradle,WITHOUT_CLASSIFICATION,//  The task dependencies for the configuration have been calculated using Configuration.getBuildDependencies(). 
Gradle,WITHOUT_CLASSIFICATION,//  Consumer version is provided by client 1.2 and later 
Gradle,WITHOUT_CLASSIFICATION,//  Write rich content to both stdout and stderr 
Gradle,WITHOUT_CLASSIFICATION,//  Replace 'Returns the ...'/'Sets the ...' with 'The ...'
Gradle,WITHOUT_CLASSIFICATION,//  it's rare that a component would declare more than 1 capability
Gradle,WITHOUT_CLASSIFICATION,//  we don't want to add core classloader explicitly here. 
Gradle,WITHOUT_CLASSIFICATION,//  The 'get'-getter was ignored we can override it with the 'is'`-getter 
Gradle,WITHOUT_CLASSIFICATION,// this rule is just here to ensure backwards compatibility for builds that create publications with model rules 
Gradle,WITHOUT_CLASSIFICATION,//  Lock the state region with the requested mode 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore private getters without annotations 
Gradle,WITHOUT_CLASSIFICATION,//  Discard the node so it can be garbage collected. Some Ant tasks cache a potentially large amount of state   in fields. 
Gradle,WITHOUT_CLASSIFICATION,//  for each remaining level in the relativeTo path add a .. 
Gradle,WITHOUT_CLASSIFICATION,//  Ends up with: 1 2 -> 3 <- 4 5 
Gradle,WITHOUT_CLASSIFICATION,//  Not part of a normal visitor see ClosureCreationInterceptingVerifier 
Gradle,WITHOUT_CLASSIFICATION,//  Don't need to unpack the serialized failure. It will already have been reported and is not used by anything downstream of this action. 
Gradle,WITHOUT_CLASSIFICATION,//  Flushing data coming only from current appending 
Gradle,WITHOUT_CLASSIFICATION,// in theory this should not happen
Gradle,WITHOUT_CLASSIFICATION,//  What is actually exposed 
Gradle,WITHOUT_CLASSIFICATION,//  visible tasks are specified as those that have a non-empty group 
Gradle,WITHOUT_CLASSIFICATION,//  Don't track publications to repositories configured without a base URL 
Gradle,WITHOUT_CLASSIFICATION,//  GROOVY-3110: It may be an inner enum defined by this class itself in which case it does not need to be   explicitly qualified by the currentClass name 
Gradle,WITHOUT_CLASSIFICATION,//  Append to failures for locking and fail on version conflict 
Gradle,WITHOUT_CLASSIFICATION,//  sort for determinism 
Gradle,WITHOUT_CLASSIFICATION,//  Perform the work per repository 
Gradle,WITHOUT_CLASSIFICATION,//  3) Set up the Antlr output directory (adding to javac inputs!) 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public <return type> <method>(Closure v) { return <method>(… ConfigureUtil.configureUsing(v)); } 
Gradle,WITHOUT_CLASSIFICATION,//  Now visit the result in order 
Gradle,WITHOUT_CLASSIFICATION,//  TODO merge in IoActions
Gradle,WITHOUT_CLASSIFICATION,// we need to filter at the level child runners because the suite is not doing the right thing here 
Gradle,WITHOUT_CLASSIFICATION,//  So we just ignore the exception if the dir doesn't exist anymore 
Gradle,WITHOUT_CLASSIFICATION,//  block until the listener has finished notifying. 
Gradle,WITHOUT_CLASSIFICATION,//  should never happen here
Gradle,WITHOUT_CLASSIFICATION,//  Deduplicates the include file states as these are often shared between source files 
Gradle,WITHOUT_CLASSIFICATION,//  Currently the converter is stateless doesn't need any external context so for performance we return a singleton 
Gradle,WITHOUT_CLASSIFICATION,//  0.9-rc-1 was broken for Java 5 
Gradle,WITHOUT_CLASSIFICATION,//  Order dynamic selectors after static selectors 
Gradle,WITHOUT_CLASSIFICATION,//  Callable<? super String> 
Gradle,WITHOUT_CLASSIFICATION,//  Read logging config and setup logging 
Gradle,WITHOUT_CLASSIFICATION,//  This has the downside of adding play-java-forms for all kind of play projects   including Scala based projects. Still users can exclude the dependency if they   want/need. Maybe in the future we can enable users to have some flag to specify   if the project is Java or Scala based. 
Gradle,WITHOUT_CLASSIFICATION,//  Self close parent in order to discover its children or its target in the case of a reference 
Gradle,WITHOUT_CLASSIFICATION,//  Do nothing 
Gradle,WITHOUT_CLASSIFICATION,//  System types come from the system classloader and their classloader is null. 
Gradle,WITHOUT_CLASSIFICATION,//  If there are different output properties compared to the previous execution then we do have output changes 
Gradle,WITHOUT_CLASSIFICATION,//  alternatively we could return project.getLayout().files(Runnable)   would differ in at least the following ways: 1. live 2. no autowiring 
Gradle,WITHOUT_CLASSIFICATION,//  if the target was invalid 
Gradle,WITHOUT_CLASSIFICATION,//  Coerce the value to the type accepted by the property setter and invoke the setter directly 
Gradle,WITHOUT_CLASSIFICATION,//  release any other project locks we might happen to hold 
Gradle,WITHOUT_CLASSIFICATION,//  add groovy-templates for Groovy 2.5+ 
Gradle,WITHOUT_CLASSIFICATION,//  the main "Java" component 
Gradle,WITHOUT_CLASSIFICATION,//  We are handling the root of the tree here 
Gradle,WITHOUT_CLASSIFICATION,//  Try to use a new label 
Gradle,WITHOUT_CLASSIFICATION,//  No wildcards: matches #5 above 
Gradle,WITHOUT_CLASSIFICATION,//  Have not seen this node before - add its dependencies to the head of the queue and leave this   node in the queue 
Gradle,WITHOUT_CLASSIFICATION,//  push back remaining bytes of multi-byte unicode character 
Gradle,WITHOUT_CLASSIFICATION,//  BCPGOutputStream seems to do some internal buffering it's unclear whether it's strictly required here though 
Gradle,WITHOUT_CLASSIFICATION,//  Logging 
Gradle,WITHOUT_CLASSIFICATION,// if we don't know the parent we will use the top suite  this way we always have and id to attach logging events for 
Gradle,WITHOUT_CLASSIFICATION,//  the old value is a better fit than the new one let's ignore the new one altogether 
Gradle,WITHOUT_CLASSIFICATION,//  Important not to add until after it has been applied as there can be   plugins.withType() callbacks waiting to build on what the plugin did 
Gradle,WITHOUT_CLASSIFICATION,//  Choose the 'main' artifact based on its type. 
Gradle,WITHOUT_CLASSIFICATION,//  type1 = ? super T 
Gradle,WITHOUT_CLASSIFICATION,//  whatever the exclude filter there are no dependencies 
Gradle,WITHOUT_CLASSIFICATION,//  5.x only supports up to Java 12 5.6 was the last release 
Gradle,WITHOUT_CLASSIFICATION,//  Use highest version on highest scope keep highest scope exclusions only 
Gradle,WITHOUT_CLASSIFICATION,//             new Inspector().inspectModel(result); 
Gradle,WITHOUT_CLASSIFICATION,//  unboxing and boxing does the trick 
Gradle,WITHOUT_CLASSIFICATION,//  Tasks graph is already calculated and tasks executed. Action or model builders can access tasks results. 
Gradle,WITHOUT_CLASSIFICATION,//  From fork options 
Gradle,WITHOUT_CLASSIFICATION,//  Tasks 
Gradle,WITHOUT_CLASSIFICATION,//  only set a non-null task list on the operationParamsBuilder if at least one task has been given to this method   this is needed since any non-null list even if empty is treated as 'execute these tasks before building the model'   this would cause an error when fetching the BuildEnvironment model 
Gradle,WITHOUT_CLASSIFICATION,//  Overwrite property 
Gradle,WITHOUT_CLASSIFICATION,//  the cached class loader as long as the action is executed 
Gradle,WITHOUT_CLASSIFICATION,//  Defines all projections for the node   Initializes the node   Allows a mutation to setup default values for an element   Mutation action provided when an element is defined   Customisations   Post customisation default values   Post mutation validations 
Gradle,WITHOUT_CLASSIFICATION,//  If these are not null we are pessimistic (loaders asked for before locking) 
Gradle,WITHOUT_CLASSIFICATION,//  Not known yet 
Gradle,WITHOUT_CLASSIFICATION,//  TODO wolfs: We use `_Decorated` here since IDEA import currently relies on this   See https://github.com/gradle/gradle/issues/8244
Gradle,WITHOUT_CLASSIFICATION,//  Use the ANSIOutputStream to strip out the ANSI escape sequences. 
Gradle,WITHOUT_CLASSIFICATION,//  A decorating factory 
Gradle,WITHOUT_CLASSIFICATION,//  Host: x86 
Gradle,WITHOUT_CLASSIFICATION,//  Exclude framework directories for GCC - they are added as system search paths but they are actually not 
Gradle,WITHOUT_CLASSIFICATION,//  TODO: make build type configurable for components
Gradle,WITHOUT_CLASSIFICATION,//  currently we leave it to ZincScalaCompiler to also compile the Java code 
Gradle,WITHOUT_CLASSIFICATION,//  Don't log 
Gradle,WITHOUT_CLASSIFICATION,//  evicted but it can still be reintegrated later in a different path.
Gradle,WITHOUT_CLASSIFICATION,//  state cachedResolvedConfiguration and extendsFrom intentionally not copied - must re-resolve copy   copying extendsFrom could mess up dependencies when copy was re-resolved 
Gradle,WITHOUT_CLASSIFICATION,//  tag::task-arg-method[] 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE public Object getProperty(String name) { return getAsDynamicObject().getProperty(name); } 
Gradle,WITHOUT_CLASSIFICATION,//  This method tries to minimize the number of volatile read/writes.   Do NOT try to inline the variables there. 
Gradle,WITHOUT_CLASSIFICATION,//  shouldn't happen
Gradle,WITHOUT_CLASSIFICATION,//  TODO: Configure 'eclipse' projects too
Gradle,WITHOUT_CLASSIFICATION,//  do not delete parent dirs 
Gradle,WITHOUT_CLASSIFICATION,//  unspecified 
Gradle,WITHOUT_CLASSIFICATION,//  Synthesise a test for the broken configuration method 
Gradle,WITHOUT_CLASSIFICATION,//  See https://blogs.msdn.microsoft.com/vcblog/2016/10/07/compiler-tools-layout-in-visual-studio-15/ 
Gradle,WITHOUT_CLASSIFICATION,//  Should provide a Gradle version as parameter so this check can be more precise 
Gradle,WITHOUT_CLASSIFICATION,//  We need to work with the 'String' version of the usage attribute since this is expected for all providers by the `PreferJavaRuntimeVariant` schema 
Gradle,WITHOUT_CLASSIFICATION,//  Queue this up for checking again later   This is done because we're checking what we have locally in cache and there may be nothing   so we're queuing it back so that the next time we check in remote access. 
Gradle,WITHOUT_CLASSIFICATION,//  JAR is compatible with classes or resources 
Gradle,WITHOUT_CLASSIFICATION,//  Transform ProgressCompleteEvent into their corresponding progress OperationIdentifier. 
Gradle,WITHOUT_CLASSIFICATION,// we expect that all options must be applicable for each task 
Gradle,WITHOUT_CLASSIFICATION,//  no special validation 
Gradle,WITHOUT_CLASSIFICATION,//  '\\\n' discarded from stream 
Gradle,WITHOUT_CLASSIFICATION,//  The other is disambiguated by current never consider other again 
Gradle,WITHOUT_CLASSIFICATION,//  add the file name 
Gradle,WITHOUT_CLASSIFICATION,//  Safety check: dispatching a message should not cause the thread to dispatch another message (eg should not do any logging) 
Gradle,WITHOUT_CLASSIFICATION,//  This logger has been replaced (for example using `Gradle.useLogger()`) so don't log anything 
Gradle,WITHOUT_CLASSIFICATION,// below does not help on windows environments. I was unable to get plain javadoc utility to work successfully with multiline options _in_ the options file.  at least it will work out of the box on linux or mac environments.  on windows the options file will have correct contents according to the javadoc spec but it may not work (the failure will be exactly the same as if we didn't replace line breaks) 
Gradle,WITHOUT_CLASSIFICATION,// so that logging gets its way to the daemon log: 
Gradle,WITHOUT_CLASSIFICATION,//  Only <function-call>+ <args-list> supported 
Gradle,WITHOUT_CLASSIFICATION,//  Explicit flush System.err is an auto-flushing PrintWriter unless it is replaced. 
Gradle,WITHOUT_CLASSIFICATION,//  Don't need to generate a subclass
Gradle,WITHOUT_CLASSIFICATION,//  Note: We can't conclude anything if the label scrolled so we leave the erasing to the parent widget. 
Gradle,WITHOUT_CLASSIFICATION,//  Already reported 
Gradle,WITHOUT_CLASSIFICATION,//  GENERATE objectFactory.fileCollection() 
Gradle,WITHOUT_CLASSIFICATION,// Is there any other parent properties?
Gradle,WITHOUT_CLASSIFICATION,//  buffer is full wait until it has been read 
Gradle,WITHOUT_CLASSIFICATION,//  The same gatekeeper that opened it must close it 
Gradle,WITHOUT_CLASSIFICATION,//  Write count 
Gradle,WITHOUT_CLASSIFICATION,//  track the closure itself not the action class. 
Gradle,WITHOUT_CLASSIFICATION,//  This is a performance optimization dependency states are deduplicated 
Gradle,WITHOUT_CLASSIFICATION,//  Rewrite the method call to match TransformedModelDslBacking#configure(String Closure) which is what the delegate will be 
Gradle,WITHOUT_CLASSIFICATION,//  Don't attach to any labels 
Gradle,WITHOUT_CLASSIFICATION,//  Have visited this node's dependencies - add it to the end of the plan 
Gradle,WITHOUT_CLASSIFICATION,//  Need gradle core to pick up ant logging adapter AntBuilder and such 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore missing files 
Gradle,WITHOUT_CLASSIFICATION,//  Don't care 
Gradle,WITHOUT_CLASSIFICATION,//  tag::custom-task-implementation[] 
Gradle,WITHOUT_CLASSIFICATION,// Find an existing matching conflict 
Gradle,WITHOUT_CLASSIFICATION,//  Not present assume no failure details 
Gradle,WITHOUT_CLASSIFICATION,//  Suppress - checkstyle gets confused with type params on the outer type 
Gradle,WITHOUT_CLASSIFICATION,//  Commit all changes in the working tree 
Gradle,WITHOUT_CLASSIFICATION,//  Not yet supported for implicit included builds 
Gradle,WITHOUT_CLASSIFICATION,//  Default behavior is to always be buildable.  Binary implementations should define what   criteria make them buildable or not. 
Gradle,WITHOUT_CLASSIFICATION,//  Only merge if about the same capability otherwise last wins 
Gradle,WITHOUT_CLASSIFICATION,//  Goal has previously been achieved or is no longer required 
Gradle,WITHOUT_CLASSIFICATION,//  Compare 2 dynamic selectors lexicographically 
Gradle,WITHOUT_CLASSIFICATION,//  handle tree 
Gradle,WITHOUT_CLASSIFICATION,//  get(<type> <annotation>) 
Gradle,WITHOUT_CLASSIFICATION,//  Once the root build starts configuring we are in Configuring phase 
Gradle,WITHOUT_CLASSIFICATION,//  Discard state that is no longer required 
Gradle,WITHOUT_CLASSIFICATION,//  does not override equals() but hashCode() in order to cache the latter's   pre-computed value to improve performance when used in HashMaps 
Gradle,WITHOUT_CLASSIFICATION,//  When this function has no parameters we don't need to substitute parameters so return the expression after macro expanding it   Also handle calling a zero args function as we also don't need to substitute parameters 
Gradle,WITHOUT_CLASSIFICATION,//  Use an options file to pass across application classpath 
Gradle,WITHOUT_CLASSIFICATION,//  if the plugin has already been added 
Gradle,WITHOUT_CLASSIFICATION,//  Empty RHS 
Gradle,WITHOUT_CLASSIFICATION,//  If the event has no logging header it doesn't manifest as console output. 
Gradle,WITHOUT_CLASSIFICATION,//  same classes may be found in different classpath trees/jars   and we keep only the first one 
Gradle,WITHOUT_CLASSIFICATION,//  We have to add these after the system properties so they can override any system properties   (identical properties later in the command line override earlier ones) 
Gradle,WITHOUT_CLASSIFICATION,// we don't merge anything in the iws yet.  I kept the logic for the sake of consistency   and compatibility with pre M4 ways of configuring IDEA information. 
Gradle,WITHOUT_CLASSIFICATION,//  The last comment line is the timestamp 
Gradle,WITHOUT_CLASSIFICATION,//  Don't need to lock anything until we use the caches 
Gradle,WITHOUT_CLASSIFICATION,//  Handle failure 
Gradle,WITHOUT_CLASSIFICATION,//  If we detect a transformation in the classpath we need to recompile because we could typically be facing the case where   2 entries are reversed in the order of classpath elements and one class that was shadowing the other is now visible 
Gradle,WITHOUT_CLASSIFICATION,//  Deserialize the class and parameters in the workerClassLoader (the context classloader) 
Gradle,WITHOUT_CLASSIFICATION,// end of workaround. 
Gradle,WITHOUT_CLASSIFICATION,//  If abortAll is set also stop enforced tasks. 
Gradle,WITHOUT_CLASSIFICATION,//  Don't map 
Gradle,WITHOUT_CLASSIFICATION,//  Ignore for now 
Gradle,WITHOUT_CLASSIFICATION,//  delivery was interrupted return silently 
Gradle,WITHOUT_CLASSIFICATION,//  Nothing special to check for UCRT 
Gradle,WITHOUT_CLASSIFICATION,//  We have a conflict
Gradle,WITHOUT_CLASSIFICATION,//  Have not visited the successor node so add to the queue for visiting 
Gradle,WITHOUT_CLASSIFICATION,//  Build events 
Gradle,WITHOUT_CLASSIFICATION,//  would normally log at a level higher than (or equal to) lifecycle but the Ant message priority is   actually lower than the set lifecycle log level 
Gradle,WITHOUT_CLASSIFICATION,// Need to do parameter substitution return the value of the expression after parameter substitutions and macro expanding the result 
Gradle,WITHOUT_CLASSIFICATION,//  Prefer a selector that strictly matches the selected version
Gradle,WITHOUT_CLASSIFICATION,//  Cached resolved executables 
Gradle,WITHOUT_CLASSIFICATION,//  buffer was still full after non-blocking retries now block 
Gradle,WITHOUT_CLASSIFICATION,//  Capture or log all failures 
Gradle,WITHOUT_CLASSIFICATION,//  If no authState has been established and this is a PUT or POST request add preemptive authorisation 
Gradle,WITHOUT_CLASSIFICATION,//  consumer didn't express any preferences everything fits 
Gradle,WITHOUT_CLASSIFICATION,//  Catch any unchecked io exceptions and add the file path for troubleshooting 
Gradle,WITHOUT_CLASSIFICATION,//  Historic note: this class still uses the Groovy JsonBuilder as it was originally developed as a Groovy class. 
Gradle,WITHOUT_CLASSIFICATION,//  Create a client that will not match any existing daemons so it will always startup a new one 
Gradle,WITHOUT_CLASSIFICATION,//  try the owner 
Gradle,WITHOUT_CLASSIFICATION,//  Includes trailing '/' 
Gradle,WITHOUT_CLASSIFICATION,//  Only share an ArtifactSet if the artifacts are not filtered by the dependency 
Gradle,WITHOUT_CLASSIFICATION,//  Make sure hash codes are serializable with a single byte length 
Gradle,WITHOUT_CLASSIFICATION,//  The first directory is the one created by JvmComponentPlugin.configureJvmBinaries()   to be used as the default output directory for processed resources 
Gradle,WITHOUT_CLASSIFICATION,//  For tests in default method of interface   we might not be able to get the implementation class directly.   In this case we need to retrieve test plan to get the real implementation class. 
Gradle,WITHOUT_CLASSIFICATION,//  Just read the state region 
Gradle,WITHOUT_CLASSIFICATION,//  The value is true if it is an output file false if it is a parent of an output file 
Gradle,WITHOUT_CLASSIFICATION,//  Matches: task <identifier> or task(<identifier>) 
Gradle,WITHOUT_CLASSIFICATION,//  Hackery

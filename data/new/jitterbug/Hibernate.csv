projectname,classification,commenttext
Hibernate,DESIGN,// use COUNT as the default.  This mimics the old behavior although // NONE might be a better option moving forward in the case of callable
Hibernate,DESIGN,//perhaps not really necessary...
Hibernate,DESIGN,// todo : what else to do here?
Hibernate,DESIGN,//TODO: disable batch loading if lockMode > READ?
Hibernate,DESIGN,//TODO: to handle concurrent writes correctly the client should pass in a Lock
Hibernate,DESIGN,// turn hibernate.c3p0.* into c3p0.* so c3p0 // gets a chance to see all hibernate.c3p0.*
Hibernate,DESIGN,//note there is a wierd implementation in the client side
Hibernate,DESIGN,// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.
Hibernate,DESIGN,// Do we need to drop constraints before dropping tables in this dialect?
Hibernate,DESIGN,"/**     * FIXME Per the RegionFactory class Javadoc this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
Hibernate,DESIGN,// Does this dialect support check constraints?
Hibernate,DESIGN,// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start
Hibernate,DESIGN,// Does this dialect support the UNIQUE column syntax?
Hibernate,DESIGN,// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:
Hibernate,DESIGN,// Does this dialect support the FOR UPDATE syntax?
Hibernate,DESIGN,// todo : what is the implication of this?
Hibernate,DESIGN,// todo : YUCK!!!
Hibernate,DESIGN,// todo : again how *should* this work for non-pojo entities?
Hibernate,DESIGN,// Does this dialect support FOR UPDATE OF allowing particular rows to be locked?
Hibernate,DESIGN,//TODO: really bad evil hack to fix!!!
Hibernate,DESIGN,//aliasRefNode.resolve( false false aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?
Hibernate,DESIGN,//TODO: better to degrade to lazy="false" if uninstrumented
Hibernate,DESIGN,// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?
Hibernate,DESIGN,//Icky workaround for MySQL bug:
Hibernate,DESIGN,// we have to set up the table later!! yuck
Hibernate,DESIGN,//TODO: Somehow add the newly created foreign keys to the internal collection
Hibernate,DESIGN,// This inner class implements a case statement....perhaps im being a bit over-clever here
Hibernate,DESIGN,//TODO: merge into one method!
Hibernate,DESIGN,// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()
Hibernate,DESIGN,// TODO: what type?
Hibernate,DESIGN,//TODO: inefficient
Hibernate,DESIGN,//FIXME: get the PersistentClass
Hibernate,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
Hibernate,DESIGN,//TODO: this is too conservative; if all preceding joins were  //      also inner joins we could use an inner join here
Hibernate,DESIGN,//TODO: redesign how PropertyAccessors are acquired...
Hibernate,DESIGN,// TODO : not so sure this is needed...
Hibernate,DESIGN,//create an index on the key columns??
Hibernate,DESIGN,"/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a			 * slightly higer level in the stack (to get all the information we need)			 * Right now HbmBinder does not support the			 */"
Hibernate,DESIGN,//TODO: improve this hack!
Hibernate,DESIGN,//TODO: bad implementation cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).
Hibernate,DESIGN,//use of trim() here is ugly?
Hibernate,DESIGN,//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e. the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e. property-name or dom4j-node-name) // The easiest way with the introduction of the new runtime-metamodel classes would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()
Hibernate,DESIGN,// can happen because of the multiple ways Cache.remove() // can be invoked :(
Hibernate,DESIGN,//ick!
Hibernate,DESIGN,// TODO: this is very suboptimal for some subclasses (namely components) // since it does not take advantage of two-phase-load
Hibernate,DESIGN,//TODO: should this be Session.instantiate(Persister ...)?
Hibernate,DESIGN,//TODO: suck this into initLaziness!
Hibernate,DESIGN,// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).
Hibernate,DESIGN,//TODO: is this right??
Hibernate,DESIGN,//ie. the subquery! yuck!
Hibernate,DESIGN,//use of a stringbuffer to workaround a JDK bug
Hibernate,DESIGN,//TODO: copy/paste from recreate()
Hibernate,DESIGN,//workaround for backward compatibility of sets with no //not-null columns assume all columns are used in the //row locator SQL
Hibernate,DESIGN,// todo : this eventually needs to be removed
Hibernate,DESIGN,// todo : remove
Hibernate,DESIGN,//just to help out during the load (ugly i know)
Hibernate,DESIGN,// hack/workaround as sqlquery impl depend on having a key.
Hibernate,DESIGN,//TODO: handle the case of a foreign key to something other than the pk
Hibernate,DESIGN,//TODO: assumes all collections disassemble to an array!
Hibernate,DESIGN,// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...
Hibernate,DESIGN,// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).
Hibernate,DESIGN,//TODO: deprecated remove eventually
Hibernate,DESIGN,//TODO possibly relax that
Hibernate,DESIGN,// TODO : this is a bit dodgy come up with a better way to check this (plus see above comment)
Hibernate,DESIGN,//use a degenerated strategy for backward compatibility
Hibernate,DESIGN,//TODO: this is temporary in that the end result will probably not take a Property reference per-se.
Hibernate,DESIGN,// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.
Hibernate,DESIGN,// get the right object from the list ... would it be easier to just call getEntity() ??
Hibernate,DESIGN,// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)
Hibernate,DESIGN,//TODO: this dependency is kinda Bad
Hibernate,DESIGN,//TODO: get SQL rendering out of this package!
Hibernate,DESIGN,// why does this matter?
Hibernate,DESIGN,// important to account for newly saved entities in query // todo : some kind of check for new status...
Hibernate,DESIGN,//TODO: can we *always* use the "null property" approach for everything?
Hibernate,DESIGN,// does this need holdlock also? : return tableName + " with (updlock rowlock holdlock)";
Hibernate,DESIGN,//for sets we should end the collection load after resolving //the entities since we might call hashCode() on the elements //TODO: or we could do this polymorphically and have two //      different operations implemented differently for arrays
Hibernate,DESIGN,// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...
Hibernate,DESIGN,// sql-server at least needed this dropped after use; strange!
Hibernate,DESIGN,// is it necessary to register %exact since it can only appear in a where clause?
Hibernate,DESIGN,//for arrays we should end the collection load before resolving //the entities since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically and have two //      different operations implemented differently for arrays
Hibernate,DESIGN,// Does this dialect support the ALTER TABLE syntax?
Hibernate,DESIGN,// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy
Hibernate,DESIGN,//TODO: reenable if we also fix the above todo
Hibernate,DESIGN,// orphans should not be deleted during copy??
Hibernate,DESIGN,// orphans should not be deleted during merge??
Hibernate,DESIGN,//TODO: suck this logic into the collection!
Hibernate,DESIGN,// todo : we can actually just determine this from the incoming EntityEntry-s
Hibernate,DESIGN,//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously* //      instead of asynchronously as other actions it isn't
Hibernate,DESIGN,// this class has no proxies (so do a shortcut)
Hibernate,DESIGN,//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)
Hibernate,DESIGN,// todo : need map? the prob is a proper key right?
Hibernate,DESIGN,//TODO: better to pass the id in as an argument?
Hibernate,DESIGN,//do we even really need this? the update will fail anyway....
Hibernate,DESIGN,//TODO: would it be better to do a refresh from db?
Hibernate,DESIGN,"/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference but without cacheMode readOnly and comment.	 *	 * FIXME: annotations do not use it so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e. proc)	 */"
Hibernate,DESIGN,//TODO: ugly here:
Hibernate,DESIGN,//TODO: not quite sure about the full implications of this!
Hibernate,DESIGN,// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!
Hibernate,DESIGN,// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersisterLoadingCollectionEntry)...
Hibernate,DESIGN,// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.
Hibernate,DESIGN,// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!
Hibernate,DESIGN,//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...
Hibernate,DESIGN,// todo : should we check the current isolation mode explicitly?
Hibernate,DESIGN,// brand new collection //TODO: or an array!! we can't lock objects with arrays now??
Hibernate,DESIGN,// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now just retry once; throw TransientObjectException if there are still any transient entities
Hibernate,DESIGN,// null or brand new collection // this will also (inefficiently) handle arrays which have // no snapshot so we can't do any better
Hibernate,DESIGN,// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?
Hibernate,DESIGN,"/** * Provides query splitting methods which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */"
Hibernate,DESIGN,// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it
Hibernate,DESIGN,// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence
Hibernate,DESIGN,// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters //      we should get rid of derived select clause completely!
Hibernate,DESIGN,// TODO : better way?!?
Hibernate,DESIGN,/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially look-ahead to the next FromElement that actually // writes something to the SQL
Hibernate,DESIGN,// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(
Hibernate,DESIGN,// this function has a template -> restore output apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.
Hibernate,DESIGN,// at some point the generate phase needs to be moved out of here // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...
Hibernate,DESIGN,//TODO:this is only needed during compilation .. can we eliminate the instvar?
Hibernate,DESIGN,// TODO : absolutely no usages of this constructor form; can it go away?
Hibernate,DESIGN,//TODO: is this a bit ugly?
Hibernate,DESIGN,// even here if only properties mapped to the "base table" are referenced // in the set and where clauses this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check or to simply use the MultiTableUpdateDelegate
Hibernate,DESIGN,// TODO : remove these last two as batcher is no longer managing connections
Hibernate,DESIGN,// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.
Hibernate,DESIGN,// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code) but just doesn't feel right as then an insert would contain // 2 from-clauses
Hibernate,DESIGN,// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e. a class representation //          defining all the needed attributes) then we could then get an array of those
Hibernate,DESIGN,//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!
Hibernate,DESIGN,// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...
Hibernate,DESIGN,// implicit joins are always(?) ok to reuse
Hibernate,DESIGN,//TODO: used to be exprNoParens! was this needed?
Hibernate,DESIGN,// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.
Hibernate,DESIGN,// we do not know either type //BLIND GUESS!
Hibernate,DESIGN,// TODO: get SQL rendering out of here create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.
Hibernate,DESIGN,// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and or not) ExpressionParser (translates // from OO terms like foo foo.Bar foo.Bar.Baz to SQL terms like // FOOS.ID FOOS.BAR_ID etc) and PathExpressionParser (which does much // the same thing it does now)
Hibernate,DESIGN,// short-circuit for performance...
Hibernate,DESIGN,// not absolutely necessary but does help with aggressive release
Hibernate,DESIGN,// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName
Hibernate,DESIGN,//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....
Hibernate,DESIGN,//TODO: implement functionality //  this might be painful to do here as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop
Hibernate,DESIGN,//yuck!
Hibernate,DESIGN,// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least the // safest is to simply not apply any dereference toggling...
Hibernate,DESIGN,//TODO: make this a bit nicer
Hibernate,DESIGN,// yuck!
Hibernate,DESIGN,// todo : potentially look at optimizing these two arrays
Hibernate,DESIGN,//note that i parameter is now unused (delete it?)
Hibernate,DESIGN,// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many add it as a child of the origin.
Hibernate,DESIGN,// TODO : this constructor form is *only* used from constructor directly below us; can it go away?
Hibernate,DESIGN,// We should reengineer this class so that rather than the current ad - // hoc linear approach to processing a stream of tokens we instead // build up a tree of expressions.
Hibernate,DESIGN,// todo : should this get moved to PersistentContext? // logically is PersistentContext the "thing" to which an interceptor gets attached?
Hibernate,DESIGN,// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.
Hibernate,DESIGN,//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur
Hibernate,DESIGN,//TODO: optimize this better!
Hibernate,DESIGN,//TODO: should we allow suffixes on these ?
Hibernate,DESIGN,//TODO: is this really necessary????
Hibernate,DESIGN,// TODO : not sure the best way to handle this. // The non-performant way :
Hibernate,DESIGN,//TODO: is there a better way?
Hibernate,DESIGN,//The class is now way to complex!
Hibernate,DESIGN,// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...
Hibernate,DESIGN,//name from a super query (a bit inelegant that it shows up here)
Hibernate,DESIGN,//real hacky... // used to count the nesting of parentheses
Hibernate,DESIGN,//put() has nowait semantics is this really appropriate? //note that it needs to be async replication never local or sync
Hibernate,DESIGN,// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)
Hibernate,DESIGN,// FIXME Hacky workaround to JBCACHE-1202
Hibernate,DESIGN,//TODO: COPY/PASTE FROM SessionImpl pull up!
Hibernate,DESIGN,// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor factory actionQueue and persistentContext is not manageable...
Hibernate,DESIGN,//Must be done here because of side-effect! yuck...
Hibernate,DESIGN,//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.
Hibernate,DESIGN,// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.
Hibernate,DESIGN,// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value
Hibernate,DESIGN,// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?
Hibernate,DESIGN,//work around a bug in all known connection pools....
Hibernate,DESIGN,//TODO: reuse the PreLoadEvent
Hibernate,DESIGN,// Need a better way to define the suffixes here...
Hibernate,DESIGN,//workaround for WebLogic
Hibernate,DESIGN,//TODO: temporary
Hibernate,DESIGN,// TODO : YUCK!!!  fix after HHH-1907 is complete
Hibernate,DESIGN,// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop
Hibernate,DESIGN,//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)
Hibernate,DESIGN,// some messy complex stuff here since createCriteria() can take an // aliased path or a path rooted at the creating criteria instance
Hibernate,DESIGN,//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...
Hibernate,DESIGN,// polymorphism not really handled completely correctly // perhaps...well actually its ok assuming that the // entity name used in the lookup is the same as the // the one used here which it will be
Hibernate,DESIGN,//This is not very nice (and quite slow):
Hibernate,DESIGN,//TODO: get SQL rendering out of here
Hibernate,DESIGN,// meant to handle dynamic instantiation queries...(Copy from QueryLoader)
Hibernate,DESIGN,// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?
Hibernate,DESIGN,// worrying about proxies is perhaps a little bit of overkill here...
Hibernate,DESIGN,// todo : throw exception?  maybe warn if not the same?
Hibernate,DESIGN,//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface if possible
Hibernate,DESIGN,// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]
Hibernate,DESIGN,//for backward compatibility allow a set with no not-null  //element columns using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?
Hibernate,DESIGN,// TODO: copy/paste from ManyToOneType
Hibernate,DESIGN,//TODO: code duplication with SingleTableEntityPersister
Hibernate,DESIGN,// todo : throw exception?
Hibernate,DESIGN,//should this interface extend PropertyMapping?
Hibernate,DESIGN,// TODO: here is why we need to make bytecode provider global :( // TODO : again fix this after HHH-1907 is complete
Hibernate,DESIGN,//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!
Hibernate,DESIGN,//TODO: Yuck! This is not quite good enough it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:
Hibernate,DESIGN,//TODO: implement caching?! proxies?!
Hibernate,DESIGN,// is this really necessary?
Hibernate,DESIGN,//TODO: this is a little inefficient don't need to do a whole //      deep replaceElements() call
Hibernate,DESIGN,//TODO: this is a bit arbitrary expose a switch to the user?
Hibernate,DESIGN,"/**	 * @return collection removal	 * FIXME: even if isInverse=""true""?	 */"
Hibernate,DESIGN,// TODO: Fix this so it will work for non-POJO entity mode
Hibernate,DESIGN,//TODO: move these to a new JoinableType abstract class //extended by EntityType and PersistentCollectionType:
Hibernate,DESIGN,//TODO: would be nice to handle proxy classes elegantly!
Hibernate,DESIGN,//SPACES //TODO: i'm not sure but perhaps we should exclude //      abstract denormalized tables?
Hibernate,DESIGN,//TODO: is there a more elegant way than downcasting?
Hibernate,DESIGN,//TODO: remove use of instanceof!
Hibernate,DESIGN,//TODO: perhaps this should be some other RuntimeException...
Hibernate,DESIGN,//Yuck:
Hibernate,DESIGN,//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors
Hibernate,DESIGN,//TODO: design new lifecycle for ProxyFactory
Hibernate,DESIGN,// todo: we should really just collect these from the various SelectExpressions rather than regenerating here
Hibernate,DESIGN,// TODO: Should this really return null?  If not figure out something better to do here.
Hibernate,DESIGN,// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...
Hibernate,DESIGN,// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?
Hibernate,DESIGN,// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type
Hibernate,DESIGN,// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point perhaps this thing is a "SessionContext" and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...
Hibernate,DESIGN,// create an index on the key columns??
Hibernate,DESIGN,//is this ok?
Hibernate,DESIGN,//init the table here instead of earlier so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name instead of //      splitting it up into schema/catalog/table names
Hibernate,DESIGN,// perhaps this should be an exception since it is only ever used // in the above method?
Hibernate,DESIGN,// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..
Hibernate,DESIGN,// Put a placeholder in entries so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise should it be done before onUpdate()?
Hibernate,DESIGN,//before cascade! //TODO: should this be Session.instantiate(Persister ...)?
Hibernate,DESIGN,//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance rather than just assuming //throw new StaleObjectStateException(entityName id);
Hibernate,DESIGN,// TODO: The order in which entities are saved may matter (e.g. a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now just run through the transient entities and retry the merge
Hibernate,DESIGN,//TODO: if object was an uninitialized proxy this is inefficient //      resulting in two SQL selects
Hibernate,DESIGN,//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)
Hibernate,DESIGN,//this is kinda the best we can do...
Hibernate,DESIGN,/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
Hibernate,DESIGN,//TODO: this needn't exclude subclasses...
Hibernate,DESIGN,//TODO: we use two visitors here inefficient!
Hibernate,DESIGN,//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?
Hibernate,DESIGN,// otherwise a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source
Hibernate,DESIGN,//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)
Hibernate,DESIGN,// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()
Hibernate,DESIGN,//I suppose?
Hibernate,DESIGN,"// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY     ""binary($1)"");"
Hibernate,DESIGN,//shortcut
Hibernate,DESIGN,//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective
Hibernate,DESIGN,// TODO : probably better to calculate these and pass them in as it'll be more performant
Hibernate,DESIGN,// todo : should we additionally check the current isolation mode explicitly?
Hibernate,DESIGN,//TODO: simply remove this override //      if we fix the above todos
Hibernate,DESIGN,// todo : is there really any reason to kkeep trying if this fails once?
Hibernate,DESIGN,// TODO : not sure this is correct could not find docs on how to do this.
Hibernate,DESIGN,//HSQL has no Blob/Clob support .... but just put these here for now!
Hibernate,DESIGN,"// merges don't cascade to uninitialized collections //			//TODO: perhaps this does need to cascade after all...."
Hibernate,DESIGN,// yick!  need this for proper serialization/deserialization handling...
Hibernate,DESIGN,//TODO: should orphans really be deleted during lock???
Hibernate,DESIGN,// todo : move to StringHelper?
Hibernate,DESIGN,// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);
Hibernate,DESIGN,// TODO: It would be really really nice to use this to also model components!
Hibernate,DESIGN,//TODO: move to .sql package!!
Hibernate,DESIGN,//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)
Hibernate,DESIGN,// TODO : add this info to the translator and aggregate it here...
Hibernate,DESIGN,// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases
Hibernate,DESIGN,//TODO: code duplication with JoinedSubclassEntityPersister
Hibernate,DESIGN,//TODO: refactor to .sql package
Hibernate,DESIGN,//TODO: *two* hashmap lookups here is one too many...
Hibernate,DESIGN,//note that this method could easily be moved up to BasicEntityPersister //if we ever needed to reuse it from other subclasses
Hibernate,DESIGN,// from the collection of associations locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?
Hibernate,DESIGN,//TODO: this class depends directly upon CriteriaImpl  //      in the impl package ... add a CriteriaImplementor  //      interface
Hibernate,DESIGN,// Do we need to qualify index names with the schema name?
Hibernate,DESIGN,//TODO: We probably should have a StatisticsNotPublishedException to make it clean
Hibernate,DESIGN,//yukky! Don't you have subclasses for that! //TODO race conditions can happen here
Hibernate,DESIGN,// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode
Hibernate,DESIGN,//TODO: need to make the majority of this functionality into a top-level support class for custom impl support
Hibernate,DESIGN,// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer
Hibernate,DESIGN,//TODO: inefficient if that cache is just going to ignore the updated state!
Hibernate,DESIGN,// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()
Hibernate,DESIGN,//TODO:refactor + make this method private
Hibernate,DESIGN,// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...
Hibernate,DESIGN,// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...
Hibernate,DESIGN,// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop
Hibernate,DESIGN,//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults
Hibernate,DESIGN,// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict this is caused // by FromElementFactory.createCollectionJoin()
Hibernate,DESIGN,//kinda ugly but needed for collections with a "." node mapping
Hibernate,DESIGN,// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id' then we should have a non-id field named id
Hibernate,DESIGN,// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception
Hibernate,DESIGN,//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...
Hibernate,DESIGN,//TODO: move to .sql package and refactor with similar things!
Hibernate,DESIGN,//TODO: I am not so sure about the exception handling in this bit!
Hibernate,DESIGN,//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties
Hibernate,DESIGN,// append the SQL to return the generated identifier //TODO: suck into Insert
Hibernate,DESIGN,//This is really ugly but necessary:
Hibernate,DESIGN,// todo : modify the class definition if not already transformed...
Hibernate,DESIGN,//TODO: should we use SELECT .. FOR UPDATE?
Hibernate,DESIGN,"/** Create an action that will evict collection and entity regions based on queryspaces (table names).	 *  TODO: cache the autodetected information and pass it in instead.	 **/"
Hibernate,DESIGN,//TODO: is this 100% correct?
Hibernate,DESIGN,/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////
Hibernate,DESIGN,// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..
Hibernate,DESIGN,//TODO: move into collection type so we can use polymorphism!
Hibernate,DESIGN,// TODO should we just collect these like with the collections above?
Hibernate,DESIGN,// todo : should really move this log statement to CollectionType where this is used from...
Hibernate,DESIGN,//hum ... should we cascade anyway? throw an exception? fine like it is?
Hibernate,DESIGN,// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.
Hibernate,DESIGN,//TODO: copy/paste from insertRows()
Hibernate,DESIGN,//TODO: suck into event class
Hibernate,DESIGN,//TODO: never reached since getTypeName() actually throws an exception!
Hibernate,DESIGN,// This is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider
Hibernate,DESIGN,// xmlforest requires a new kind of function constructor
Hibernate,DESIGN,// TODO Is this a valid operation on a timestamps cache?
Hibernate,DESIGN,// TODO: I considered validating the presence of the TS cache here // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used
Hibernate,DESIGN,// TODO Why not use the timestamp in a DataVersion?
Hibernate,DESIGN,// todo : eventually merge this with TreeCache and just add optional opt-lock support there.
Hibernate,DESIGN,// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...
Hibernate,DESIGN,// TODO: I considered validating TS cache config here // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used
Hibernate,DESIGN,//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)
Hibernate,DESIGN,// unhappy about this being public ... is there a better way?
Hibernate,DESIGN,// TODO : safe to interpret "map.remove(key) == null" as non-dirty?
Hibernate,DESIGN,// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node
Hibernate,DESIGN,// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...
Hibernate,DESIGN,// TODO: Replace this with a more elegant solution.
Hibernate,DESIGN,// short cut check...
Hibernate,DESIGN,//TODO: to handle concurrent writes correctly this should return a Lock to the client
Hibernate,DESIGN,// this is ugly here but needed because its a subquery
Hibernate,DESIGN,// TODO : will need reference to session factory to fully complete HHH-1907
Hibernate,DESIGN,// inheritance cycle detection (paranoid check)
Hibernate,DESIGN,// TODO: encapsulate the protected instance variables!
Hibernate,DESIGN,//polymorphism comment above
Hibernate,IMPLEMENTATION,// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.
Hibernate,IMPLEMENTATION,// TODO: handle TypeDefs
Hibernate,IMPLEMENTATION,//TODO: get all properties not just the fetched ones!
Hibernate,IMPLEMENTATION,//TODO: native ids
Hibernate,IMPLEMENTATION,// TODO: bindpropertyresults(alias returnElem)
Hibernate,IMPLEMENTATION,//TODO: handle property-ref
Hibernate,IMPLEMENTATION,//TODO: validate existing of property with the chosen name. (secondpass )
Hibernate,IMPLEMENTATION,//TODO: check that entry.getIdentifier().equals(requestedId)
Hibernate,IMPLEMENTATION,// TODO: RESTRICT VIOLATION
Hibernate,IMPLEMENTATION,//TODO: assertion only could be optimized away
Hibernate,IMPLEMENTATION,// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?
Hibernate,IMPLEMENTATION,//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"
Hibernate,IMPLEMENTATION,// TODO: toLowerCase was not done before. Only used in Template.
Hibernate,IMPLEMENTATION,//TODO: arithmetic expressions multiple new Foo(...)
Hibernate,IMPLEMENTATION,// TODO: not visible to the user!
Hibernate,IMPLEMENTATION,//TODO: proxies!
Hibernate,IMPLEMENTATION,//TODO: can we limit stored procedures ?!
Hibernate,IMPLEMENTATION,//TODO: formulas ?
Hibernate,IMPLEMENTATION,// TODO: better error message since we actually support composites if names are explicitly listed.
Hibernate,IMPLEMENTATION,//TODO: use these in methods above
Hibernate,IMPLEMENTATION,//TODO: cache the persister this shows up in yourkit
Hibernate,IMPLEMENTATION,//TODO: add referencedClass to disambiguate to FKs on the same //      columns pointing to different tables
Hibernate,IMPLEMENTATION,//TODO: create uk loaders for component properties
Hibernate,IMPLEMENTATION,// TODO : still need to make CollectionPersisters EntityMode-aware
Hibernate,IMPLEMENTATION,//TODO: terrible implementation!
Hibernate,IMPLEMENTATION,//TODO: eventually put this back in once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn columnAlias);
Hibernate,IMPLEMENTATION,// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()
Hibernate,IMPLEMENTATION,// TODO: check if key contains the owner ID
Hibernate,IMPLEMENTATION,//TODO: cache this in an instvar
Hibernate,IMPLEMENTATION,// TODO : temporary initial step towards HHH-1907
Hibernate,IMPLEMENTATION,// todo : remove this once ComponentMetamodel is complete and merged
Hibernate,IMPLEMENTATION,//TODO: add owner argument!!
Hibernate,IMPLEMENTATION,//TODO handle supportsNotNullUnique=false but such a case does not exist in the wild so far
Hibernate,IMPLEMENTATION,//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings
Hibernate,IMPLEMENTATION,//TODO: unnecessary for databases with ANSI-style joins
Hibernate,IMPLEMENTATION,//TODO: maybe call it getRowSelection() ?
Hibernate,IMPLEMENTATION,//TODO: make this handle multiple collection roles!
Hibernate,IMPLEMENTATION,//TODO: include the rowids!!!!
Hibernate,IMPLEMENTATION,// if we are still not resolved we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here
Hibernate,IMPLEMENTATION,// TODO : or should we return 'containsTableAlias'??
Hibernate,IMPLEMENTATION,/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...
Hibernate,IMPLEMENTATION,//TODO: avoid this for non-new instances where mightBeDirty==false
Hibernate,IMPLEMENTATION,//TODO: theoretically non-threadsafe...
Hibernate,IMPLEMENTATION,// todo : look at optimizing these...
Hibernate,IMPLEMENTATION,// todo : cache this sql...
Hibernate,IMPLEMENTATION,"/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */"
Hibernate,IMPLEMENTATION,//TODO: if we are using identity columns fetch the identifier
Hibernate,IMPLEMENTATION,//TODO check there is no actual definition elemnents when a ref is defined
Hibernate,IMPLEMENTATION,// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null
Hibernate,IMPLEMENTATION,// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null
Hibernate,IMPLEMENTATION,// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )
Hibernate,IMPLEMENTATION,//TODO: return new Lock(ts);
Hibernate,IMPLEMENTATION,// TODO : why aren't these the same?
Hibernate,IMPLEMENTATION,//TODO: if we support multiple fetch groups we would need //      to clone the set of lazy properties!
Hibernate,IMPLEMENTATION,//TODO mappings.getLogicalTableName(ownerTable)
Hibernate,IMPLEMENTATION,//TODO: if lock.getTimestamp().equals(ts)
Hibernate,IMPLEMENTATION,//TODO: always true for now but not if we later decide to support elements() in the from clause
Hibernate,IMPLEMENTATION,// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:
Hibernate,WITHOUT_CLASSIFICATION,// See if the user configured a multiplexer stack
Hibernate,WITHOUT_CLASSIFICATION,//root entity comes *last*
Hibernate,WITHOUT_CLASSIFICATION,//==elementType ??
Hibernate,WITHOUT_CLASSIFICATION,//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface returning multiple //query strings (make sure we don't pick up a class in the select clause!)
Hibernate,WITHOUT_CLASSIFICATION,//identifier collections not supported for 1-to-many
Hibernate,WITHOUT_CLASSIFICATION,// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
Hibernate,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// if the current depth is 0 the root thing being loaded is the // many-to-many collection itself.  Here it is alright to use // an inner join...
Hibernate,WITHOUT_CLASSIFICATION,// update removed rows fks to null
Hibernate,WITHOUT_CLASSIFICATION,//registerFunction( "trim" new StandardSQLFunction( "trim" Hibernate.STRING ) );
Hibernate,WITHOUT_CLASSIFICATION,"//			buf.append( selectFragment( lhsAlias """" ) )//ignore suffix for collection columns!"
Hibernate,WITHOUT_CLASSIFICATION,// initialize the Set of queried identifier spaces (ie. tables)
Hibernate,WITHOUT_CLASSIFICATION,//use suffix for the entity columns
Hibernate,WITHOUT_CLASSIFICATION,// we got here because we assumed that an instance // with an assigned id was detached when it was // really persistent
Hibernate,WITHOUT_CLASSIFICATION,// the class hierarchy structure
Hibernate,WITHOUT_CLASSIFICATION,// remove the current element from insertions. It will be added back later.
Hibernate,WITHOUT_CLASSIFICATION,//private final String rootTableName;
Hibernate,WITHOUT_CLASSIFICATION,// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures etc are not critical here; // this is the fail-silently option bit...
Hibernate,WITHOUT_CLASSIFICATION,//INITIALIZATION:
Hibernate,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//not null ... (start with 1) is implicit
Hibernate,WITHOUT_CLASSIFICATION,// continue loop
Hibernate,WITHOUT_CLASSIFICATION,// return existing object or initialized proxy (unless deleted)
Hibernate,WITHOUT_CLASSIFICATION,// the list of entity names that indicate the batch number
Hibernate,WITHOUT_CLASSIFICATION,//disassembled state gets put in a new array (we write to cache by value!)
Hibernate,WITHOUT_CLASSIFICATION,// Add these directly to the executions queue
Hibernate,WITHOUT_CLASSIFICATION,// Execute the SQL:
Hibernate,WITHOUT_CLASSIFICATION,//sort the updates by fk
Hibernate,WITHOUT_CLASSIFICATION,// This could also just be true all the time...
Hibernate,WITHOUT_CLASSIFICATION,// the mapping of entity names to their latest batch numbers.
Hibernate,WITHOUT_CLASSIFICATION,//chop the last union (all)
Hibernate,WITHOUT_CLASSIFICATION,// note that for sequential scrolling we make the assumption that // the first persister element is the "root entity"
Hibernate,WITHOUT_CLASSIFICATION,//TODO: check this....
Hibernate,WITHOUT_CLASSIFICATION,// for deprecated saveOrUpdateCopy()
Hibernate,WITHOUT_CLASSIFICATION,// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}
Hibernate,WITHOUT_CLASSIFICATION,// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class
Hibernate,WITHOUT_CLASSIFICATION,//expressionTerminators.add(""); // deliberately excluded
Hibernate,WITHOUT_CLASSIFICATION,// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE
Hibernate,WITHOUT_CLASSIFICATION,//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression
Hibernate,WITHOUT_CLASSIFICATION,// Multi-param numeric dialect functions...
Hibernate,WITHOUT_CLASSIFICATION,// Use theta style (for regression) // Move the node up after the origin node.
Hibernate,WITHOUT_CLASSIFICATION,// Multi-param date dialect functions...
Hibernate,WITHOUT_CLASSIFICATION,// add the main query
Hibernate,WITHOUT_CLASSIFICATION,// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//add the restriction to the outer select
Hibernate,WITHOUT_CLASSIFICATION,// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22
Hibernate,WITHOUT_CLASSIFICATION,// This assumes you will want to ignore any update counts
Hibernate,WITHOUT_CLASSIFICATION,//skip the FROM keyword in params
Hibernate,WITHOUT_CLASSIFICATION,// Custom sql
Hibernate,WITHOUT_CLASSIFICATION,// return a newly loaded object
Hibernate,WITHOUT_CLASSIFICATION,// make it circular-reference safe
Hibernate,WITHOUT_CLASSIFICATION,//Cope with special cases of AND NOT ()
Hibernate,WITHOUT_CLASSIFICATION,// subclass closure properties
Hibernate,WITHOUT_CLASSIFICATION,// for dialects which are known to not support ANSI-SQL row-value-constructor syntax // we should mutate the tree.
Hibernate,WITHOUT_CLASSIFICATION,// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!
Hibernate,WITHOUT_CLASSIFICATION,// SUBCLASSES
Hibernate,WITHOUT_CLASSIFICATION,//need to hydrate it.
Hibernate,WITHOUT_CLASSIFICATION,//starts with 1 implicitly
Hibernate,WITHOUT_CLASSIFICATION,// instantiate a new instance
Hibernate,WITHOUT_CLASSIFICATION,// simple nullability constraint
Hibernate,WITHOUT_CLASSIFICATION,//we need to upgrade the lock mode to the mode requested
Hibernate,WITHOUT_CLASSIFICATION,"//	register the type of the out param - an Oracle specific type"
Hibernate,WITHOUT_CLASSIFICATION,// look for a proxy
Hibernate,WITHOUT_CLASSIFICATION,// features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// evicts don't cascade to uninitialized collections
Hibernate,WITHOUT_CLASSIFICATION,// features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note it potentially could be a proxy so perform the location the safe way...
Hibernate,WITHOUT_CLASSIFICATION,//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
Hibernate,WITHOUT_CLASSIFICATION,// might happen with a managed connection
Hibernate,WITHOUT_CLASSIFICATION,// don't need subclass tables because they can't appear in conditions
Hibernate,WITHOUT_CLASSIFICATION,// not final-static to avoid possible classcast exceptions if using different oracle drivers.
Hibernate,WITHOUT_CLASSIFICATION,//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
Hibernate,WITHOUT_CLASSIFICATION,//private List aliases = new ArrayList();
Hibernate,WITHOUT_CLASSIFICATION,// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
Hibernate,WITHOUT_CLASSIFICATION,// register resolvers set via Environment property
Hibernate,WITHOUT_CLASSIFICATION,// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized hibernate has no way of // knowing if the collection is actually empty without querying the db)
Hibernate,WITHOUT_CLASSIFICATION,//update all the modified entries
Hibernate,WITHOUT_CLASSIFICATION,// special case where we need to force incloude all subclass joins
Hibernate,WITHOUT_CLASSIFICATION,// we did not find a collection element in the result set so we // ensure that a collection is created with the owner's identifier // since what we have is an empty collection
Hibernate,WITHOUT_CLASSIFICATION,// binary %Stream // character %Stream
Hibernate,WITHOUT_CLASSIFICATION,//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE NO_BATCH);
Hibernate,WITHOUT_CLASSIFICATION,// assumes that types are all of span 1
Hibernate,WITHOUT_CLASSIFICATION,// hibernate impelemnts cast in Dialect.java
Hibernate,WITHOUT_CLASSIFICATION,// this is the root (versioned) table and we are using version-based // optimistic locking;  if we are not updating the version also don't // check it (unless this is a "generated" version column)!
Hibernate,WITHOUT_CLASSIFICATION,// aggregate functions shouldn't be registered right? //registerFunction( "list" new StandardSQLFunction("list"Hibernate.STRING) ); // stopped on $list
Hibernate,WITHOUT_CLASSIFICATION,//its the given optional object
Hibernate,WITHOUT_CLASSIFICATION,//decide which ResultSet to get the property value from:
Hibernate,WITHOUT_CLASSIFICATION,// properties of this class including inherited properties
Hibernate,WITHOUT_CLASSIFICATION,// otherwise assume the parent is the the criteria that created us
Hibernate,WITHOUT_CLASSIFICATION,// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
Hibernate,WITHOUT_CLASSIFICATION,// we can go straight to the first required row
Hibernate,WITHOUT_CLASSIFICATION,// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)
Hibernate,WITHOUT_CLASSIFICATION,//before adding to collection!
Hibernate,WITHOUT_CLASSIFICATION,// discriminator column
Hibernate,WITHOUT_CLASSIFICATION,// Code to handle subclasses of topClass
Hibernate,WITHOUT_CLASSIFICATION,//NONE because its the requested lock mode not the actual!
Hibernate,WITHOUT_CLASSIFICATION,//private final Map propertyTableNumbersByName = new HashMap();
Hibernate,WITHOUT_CLASSIFICATION,// conceivable that the dialect ctor could throw HibernateExceptions so don't re-wrap
Hibernate,WITHOUT_CLASSIFICATION,// CLASS + TABLE
Hibernate,WITHOUT_CLASSIFICATION,// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.
Hibernate,WITHOUT_CLASSIFICATION,// required to exception table // iconst_0 // i
Hibernate,WITHOUT_CLASSIFICATION,// for now just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)
Hibernate,WITHOUT_CLASSIFICATION,// checkcast // cast the bean into a raw bean
Hibernate,WITHOUT_CLASSIFICATION,// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered // its a noop) // (actually we do need it for downgrading locks)
Hibernate,WITHOUT_CLASSIFICATION,// checkcast (case of primitive type) // invokevirtual (case of primitive type)
Hibernate,WITHOUT_CLASSIFICATION,// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies // it just happens that driving and root are the same).
Hibernate,WITHOUT_CLASSIFICATION,/* | this | bean | args | i | raw bean | exception | */
Hibernate,WITHOUT_CLASSIFICATION,// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).
Hibernate,WITHOUT_CLASSIFICATION,// new // BulkAccessorException
Hibernate,WITHOUT_CLASSIFICATION,//"as" is not in KEYWORDS
Hibernate,WITHOUT_CLASSIFICATION,// getfield // get field "$JAVASSIST_CALLBACK" defined already
Hibernate,WITHOUT_CLASSIFICATION,// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// dup
Hibernate,WITHOUT_CLASSIFICATION,// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
Hibernate,WITHOUT_CLASSIFICATION,// putfield // put field "$JAVASSIST_CALLBACK" defined already
Hibernate,WITHOUT_CLASSIFICATION,// Configure the cache to use our TM
Hibernate,WITHOUT_CLASSIFICATION,/* local variables | this | callback | */
Hibernate,WITHOUT_CLASSIFICATION,// find the batch number associated with the current association if any.
Hibernate,WITHOUT_CLASSIFICATION,// invokeinterface
Hibernate,WITHOUT_CLASSIFICATION,// we *always* assume an instance with a null // identifier or no identifier property is unsaved!
Hibernate,WITHOUT_CLASSIFICATION,// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,"// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}"
Hibernate,WITHOUT_CLASSIFICATION,// below is for Cache' that don't have str in 2007.1 there is str and we register str directly
Hibernate,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// byte
Hibernate,WITHOUT_CLASSIFICATION,// the column doesnt exist at all.
Hibernate,WITHOUT_CLASSIFICATION,// note that %string is deprecated
Hibernate,WITHOUT_CLASSIFICATION,//If the object is already loaded return the loaded one
Hibernate,WITHOUT_CLASSIFICATION,// create new lock that times out immediately
Hibernate,WITHOUT_CLASSIFICATION,// convenience methods relating to operations across arrays of types...
Hibernate,WITHOUT_CLASSIFICATION,// we really could refresh the item if it // is not a lock but it might be slower //return freshTimestamp < txTimestamp
Hibernate,WITHOUT_CLASSIFICATION,// Due to the complexity in initializing the SelectClause do not generate one here. // If it is not found; simply return null... // // Also do not cache since it gets generated well after we are created.
Hibernate,WITHOUT_CLASSIFICATION,// DISCRIMINATOR
Hibernate,WITHOUT_CLASSIFICATION,// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server which //      are completely db-generated values...
Hibernate,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Use the lower case function name. // Remember whether we're in a SELECT clause or not.
Hibernate,WITHOUT_CLASSIFICATION,// %upper is deprecated
Hibernate,WITHOUT_CLASSIFICATION,// let this take precedence if defined since it works for // assigned identifiers
Hibernate,WITHOUT_CLASSIFICATION,//throw new UnsupportedOperationException("Can't write to a readonly object");
Hibernate,WITHOUT_CLASSIFICATION,// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.
Hibernate,WITHOUT_CLASSIFICATION,// according to both the ANSI-SQL and EJB3 specs trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted BOTH is assumed; // if <trim character> is omitted space is assumed
Hibernate,WITHOUT_CLASSIFICATION,// The syntax used to add a foreign key constraint to a table.
Hibernate,WITHOUT_CLASSIFICATION,"//note: it is conceptually possible that a UserType could map null to //	  a non-null value so the following is arguable:"
Hibernate,WITHOUT_CLASSIFICATION,// note: interfaces is assumed to already contain HibernateProxy.class
Hibernate,WITHOUT_CLASSIFICATION,// identifier-commalist
Hibernate,WITHOUT_CLASSIFICATION,//assembled state gets put in a new array (we read from cache by value!)
Hibernate,WITHOUT_CLASSIFICATION,// we do not have to worry about queued additions to uninitialized // collections since they can only occur for inverse collections!
Hibernate,WITHOUT_CLASSIFICATION,// disassemble named parameters
Hibernate,WITHOUT_CLASSIFICATION,// if not wrappered yet its dirty (this can't occur because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj type );
Hibernate,WITHOUT_CLASSIFICATION,// again CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
Hibernate,WITHOUT_CLASSIFICATION,// Oracle driver reports to support getGeneratedKeys() but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
Hibernate,WITHOUT_CLASSIFICATION,// again CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches we will also do a clear at the end of the transaction
Hibernate,WITHOUT_CLASSIFICATION,// remove all collections for the entity from the session-level cache
Hibernate,WITHOUT_CLASSIFICATION,// invokeinterface // callback.write*(..)
Hibernate,WITHOUT_CLASSIFICATION,// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// JOINS
Hibernate,WITHOUT_CLASSIFICATION,// If this is an entity and the property is the identifier property then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference where the component class property name is the same as the //      entity id property name; if the two are not equal this is the case and //      we'd need to "fall through" to using the property mapping.
Hibernate,WITHOUT_CLASSIFICATION,// classes mentioned in extends not available - so put it in queue
Hibernate,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//propertyTableNumbersByName.put( prop.getName() join );
Hibernate,WITHOUT_CLASSIFICATION,// Needed to bump this up to DotNode because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this or // recurse over the DotNodes constructing the property path just like DotNode does // internally
Hibernate,WITHOUT_CLASSIFICATION,//Access cached SQL
Hibernate,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//figure out which tables need to be fetched
Hibernate,WITHOUT_CLASSIFICATION,"//	private final List persisters = new ArrayList();"
Hibernate,WITHOUT_CLASSIFICATION,//figure out which columns are needed
Hibernate,WITHOUT_CLASSIFICATION,// it is possible for this method to be called during flush processing // so make certain that we do not accidently initialize an uninitialized proxy
Hibernate,WITHOUT_CLASSIFICATION,//figure out which formulas are needed
Hibernate,WITHOUT_CLASSIFICATION,//get em on the second pass!
Hibernate,WITHOUT_CLASSIFICATION,//render the SQL
Hibernate,WITHOUT_CLASSIFICATION,// local cache so we use synchronization
Hibernate,WITHOUT_CLASSIFICATION,// SQL strings
Hibernate,WITHOUT_CLASSIFICATION,"/*public static Object[] clone(Class elementClass Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass array.length );		System.arraycopy(array 0 result 0 array.length);		return result;	}*/"
Hibernate,WITHOUT_CLASSIFICATION,// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//if there is no resulting row return null
Hibernate,WITHOUT_CLASSIFICATION,// *load_1 // each type
Hibernate,WITHOUT_CLASSIFICATION,// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...
Hibernate,WITHOUT_CLASSIFICATION,// select topic syntax from information_schema.help // where section like 'Function%' order by section topic // // see also ->  http://www.h2database.com/html/functions.html
Hibernate,WITHOUT_CLASSIFICATION,// The optional SQL string defined in the where attribute
Hibernate,WITHOUT_CLASSIFICATION,//pass this as an argument only to avoid double looking
Hibernate,WITHOUT_CLASSIFICATION,// for version properties marked as being generated make sure they are "always" // generated; aka "insert" is invalid; this is dis-allowed by the DTD // but just to make sure...
Hibernate,WITHOUT_CLASSIFICATION,// added this caching as I noticed that getType() is being called multiple times...
Hibernate,WITHOUT_CLASSIFICATION,//information about lazy properties of this class
Hibernate,WITHOUT_CLASSIFICATION,// If there are any scalars (non-entities) selected render the select column aliases.
Hibernate,WITHOUT_CLASSIFICATION,//information about all columns/formulas in class hierarchy
Hibernate,WITHOUT_CLASSIFICATION,// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// ( (Column) discrim.getColumnIterator().next() ).setType(type);
Hibernate,WITHOUT_CLASSIFICATION,// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// dynamic filters attached to the class-level
Hibernate,WITHOUT_CLASSIFICATION,// the loaded owner will be set to null after the collection is removed // so capture its value as the affected owner so it is accessible to // both pre- and post- events
Hibernate,WITHOUT_CLASSIFICATION,// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// assume we are in an auto-commit state
Hibernate,WITHOUT_CLASSIFICATION,// CUSTOM SQL
Hibernate,WITHOUT_CLASSIFICATION,// cascade first so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event persister entity copyCache Cascades.CASCADE_BEFORE_MERGE);
Hibernate,WITHOUT_CLASSIFICATION,// model.getKey().setType( new Type( model.getIdentifier() ) );
Hibernate,WITHOUT_CLASSIFICATION,// The syntax used to add a column to a table
Hibernate,WITHOUT_CLASSIFICATION,// simple because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:
Hibernate,WITHOUT_CLASSIFICATION,// Completely optional cascading drop clause.
Hibernate,WITHOUT_CLASSIFICATION,// during deserialization we need to reconnect all proxies and // collections to this session as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.
Hibernate,WITHOUT_CLASSIFICATION,// PROPERTIES
Hibernate,WITHOUT_CLASSIFICATION,//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
Hibernate,WITHOUT_CLASSIFICATION,// IDENTIFIER
Hibernate,WITHOUT_CLASSIFICATION,// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods
Hibernate,WITHOUT_CLASSIFICATION,// VERSION
Hibernate,WITHOUT_CLASSIFICATION,//operations which cascade as far as the collection also cascade to collection elements
Hibernate,WITHOUT_CLASSIFICATION,//WHERE STRING
Hibernate,WITHOUT_CLASSIFICATION,// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
Hibernate,WITHOUT_CLASSIFICATION,// SUBCLASS PROPERTY CLOSURE
Hibernate,WITHOUT_CLASSIFICATION,// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead) we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.
Hibernate,WITHOUT_CLASSIFICATION,//before add :-)
Hibernate,WITHOUT_CLASSIFICATION,// the configured transaction-factory says it only supports // local callback mode so no sense attempting to register a // JTA Synchronization
Hibernate,WITHOUT_CLASSIFICATION,// Handle any filters applied to the class level
Hibernate,WITHOUT_CLASSIFICATION,// sybase driver (jConnect) throwing NPE here in certain // cases but we'll just handle the general "unexpected" case
Hibernate,WITHOUT_CLASSIFICATION,// only one-to-one is lazy fetched
Hibernate,WITHOUT_CLASSIFICATION,// replicate does cascade to uninitialized collections
Hibernate,WITHOUT_CLASSIFICATION,//note early exit here:
Hibernate,WITHOUT_CLASSIFICATION,"/**	 * Translates an AST join type (i.e. the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */"
Hibernate,WITHOUT_CLASSIFICATION,// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
Hibernate,WITHOUT_CLASSIFICATION,//deliberately ignore return value!
Hibernate,WITHOUT_CLASSIFICATION,//strip leading " "
Hibernate,WITHOUT_CLASSIFICATION,// if the metadata allowed proxy creation and caller did not request forceful eager loading // generate a proxy
Hibernate,WITHOUT_CLASSIFICATION,// If this from element is a collection and the path is a collection property (maxIndex etc.) then // generate a sub-query.
Hibernate,WITHOUT_CLASSIFICATION,//otherwise return the "hydrated" state (ie. associations are not resolved)
Hibernate,WITHOUT_CLASSIFICATION,// The name of the SQL function that transforms a string to lowercase
Hibernate,WITHOUT_CLASSIFICATION,//null owner ok??
Hibernate,WITHOUT_CLASSIFICATION,// essentially if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect //   but we capture that there simply to perform the unbind...
Hibernate,WITHOUT_CLASSIFICATION,// automatically makes a column with the default name if none is specifed by XML
Hibernate,WITHOUT_CLASSIFICATION,// just ignore
Hibernate,WITHOUT_CLASSIFICATION,// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor
Hibernate,WITHOUT_CLASSIFICATION,// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it thus this is a hook for HEM to affect this behavior
Hibernate,WITHOUT_CLASSIFICATION,// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...
Hibernate,WITHOUT_CLASSIFICATION,// if the property mapping consists of all formulas  // make it non-updateable
Hibernate,WITHOUT_CLASSIFICATION,// the user specifically supplied insert="true" // which constitutes an illegal combo
Hibernate,WITHOUT_CLASSIFICATION,// if the property mapping consists of all formulas  // make it insertable
Hibernate,WITHOUT_CLASSIFICATION,//it might be an unwrapped collection reference! //try to find a wrapper (slowish)
Hibernate,WITHOUT_CLASSIFICATION,//Custom SQL
Hibernate,WITHOUT_CLASSIFICATION,//tableName = mappings.getNamingStrategy().propertyToTableName( className path );
Hibernate,WITHOUT_CLASSIFICATION,// return
Hibernate,WITHOUT_CLASSIFICATION,// the entry will be removed after the flush and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);
Hibernate,WITHOUT_CLASSIFICATION,//bad cast
Hibernate,WITHOUT_CLASSIFICATION,"/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/"
Hibernate,WITHOUT_CLASSIFICATION,//property-refs for associations defined on a //component are not supported so no need to slice
Hibernate,WITHOUT_CLASSIFICATION,// we have an embedded composite identifier
Hibernate,WITHOUT_CLASSIFICATION,//if there is no property-ref assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)
Hibernate,WITHOUT_CLASSIFICATION,//stops flush being called multiple times if this method is recursively called
Hibernate,WITHOUT_CLASSIFICATION,// Create a new FROM node for the referenced class.
Hibernate,WITHOUT_CLASSIFICATION,// performance op to avoid the array search
Hibernate,WITHOUT_CLASSIFICATION,// now get an existing proxy for each row element (if there is one)
Hibernate,WITHOUT_CLASSIFICATION,// ORPHAN DELETE (used for programmer error detection)
Hibernate,WITHOUT_CLASSIFICATION,// empty means no scoping
Hibernate,WITHOUT_CLASSIFICATION,//Enable for HHH-440 which we don't like:
Hibernate,WITHOUT_CLASSIFICATION,/*(LockMode) anything*/
Hibernate,WITHOUT_CLASSIFICATION,//this.forceCacheRefresh = forceCacheRefresh;
Hibernate,WITHOUT_CLASSIFICATION,// this is a collection initializer so we must create a collection // for each of the passed-in keys to account for the possibility // that the collection is empty and has no rows in the result set
Hibernate,WITHOUT_CLASSIFICATION,// an "embedded" component (composite ids and unique) // note that this does not handle nested components
Hibernate,WITHOUT_CLASSIFICATION,// and perform the load
Hibernate,WITHOUT_CLASSIFICATION,// ALIASES
Hibernate,WITHOUT_CLASSIFICATION,// cache these since they are stateless // this one could even be static...
Hibernate,WITHOUT_CLASSIFICATION,// a nested composite element
Hibernate,WITHOUT_CLASSIFICATION,//Must occur after resolving identifiers!
Hibernate,WITHOUT_CLASSIFICATION,// Get the persister for the _subclass_
Hibernate,WITHOUT_CLASSIFICATION,// aliases for composite-id's
Hibernate,WITHOUT_CLASSIFICATION,"//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery //				processor.getAlias2Persister() //				processor.getAlias2Return() //				aliases //				collAliases //				collPersisters //				suffixes //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();"
Hibernate,WITHOUT_CLASSIFICATION,// Fetch embedded identifiers propertynames from the "virtual" identifier component
Hibernate,WITHOUT_CLASSIFICATION,// we need to grab the version value from the entity otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
Hibernate,WITHOUT_CLASSIFICATION,// embedded composite ids ( alias.idname1 alias.idname2 )
Hibernate,WITHOUT_CLASSIFICATION,// NOTE: we need to do the wrap here even if its not "dirty" // because collections need wrapping but changes to _them_ // don't dirty the container. Also for versioned data we // need to wrap before calling searchForDirtyCollections
Hibernate,WITHOUT_CLASSIFICATION,// TODO: skip formulas?
Hibernate,WITHOUT_CLASSIFICATION,// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// invokeinterface // invoke Enabled.getInterceptFieldCallback()
Hibernate,WITHOUT_CLASSIFICATION,// hibernate seems to ignore this type...
Hibernate,WITHOUT_CLASSIFICATION,//don't need filters for the static loaders
Hibernate,WITHOUT_CLASSIFICATION,// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock
Hibernate,WITHOUT_CLASSIFICATION,//do two passes for collection property-ref!
Hibernate,WITHOUT_CLASSIFICATION,"/*public boolean dropTemporaryTableAfterUse() {		//we have to because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/"
Hibernate,WITHOUT_CLASSIFICATION,// select the correct row by either pk or rowid
Hibernate,WITHOUT_CLASSIFICATION,"//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass getterNames setterNames propTypes //			);"
Hibernate,WITHOUT_CLASSIFICATION,//TODO: eventually rowIdName[j]
Hibernate,WITHOUT_CLASSIFICATION,//include the discriminator and class-level where but not filters
Hibernate,WITHOUT_CLASSIFICATION,//lazy = !join;
Hibernate,WITHOUT_CLASSIFICATION,//not absolutely necessary but helps for some //equals()/hashCode() implementations
Hibernate,WITHOUT_CLASSIFICATION,// this is a property of the table which we are updating
Hibernate,WITHOUT_CLASSIFICATION,//if the hibernate-mapping did not specify a schema/catalog use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping or as params they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)
Hibernate,WITHOUT_CLASSIFICATION,// This should only be possible if the caches are constructor injected
Hibernate,WITHOUT_CLASSIFICATION,// transactions marked for rollback-only cause some TM impls to throw exceptions
Hibernate,WITHOUT_CLASSIFICATION,// special shortcut for id properties skip the join! // this must only occur at the _end_ of a path expression
Hibernate,WITHOUT_CLASSIFICATION,"// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance) we really cannot pro0perly define equality for // 		this transformer"
Hibernate,WITHOUT_CLASSIFICATION,// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
Hibernate,WITHOUT_CLASSIFICATION,// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property
Hibernate,WITHOUT_CLASSIFICATION,// contained elements:
Hibernate,WITHOUT_CLASSIFICATION,// for non-inverse one-to-many with a not-null fk add a backref!
Hibernate,WITHOUT_CLASSIFICATION,//to stop the class from being unloaded
Hibernate,WITHOUT_CLASSIFICATION,// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).
Hibernate,WITHOUT_CLASSIFICATION,// for objects that came in via update()
Hibernate,WITHOUT_CLASSIFICATION,//use dialect default properties
Hibernate,WITHOUT_CLASSIFICATION,// increment the version number (if necessary)
Hibernate,WITHOUT_CLASSIFICATION,// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default
Hibernate,WITHOUT_CLASSIFICATION,//information about all properties in class hierarchy
Hibernate,WITHOUT_CLASSIFICATION,"//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( ""Bytecode provider name : "" + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );"
Hibernate,WITHOUT_CLASSIFICATION,// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// we are using "all" or "dirty" property-based optimistic locking
Hibernate,WITHOUT_CLASSIFICATION,// orphans should be deleted during save/update
Hibernate,WITHOUT_CLASSIFICATION,// maybe a concrete SQLpropertyresult type but Map is exactly what is required at the moment
Hibernate,WITHOUT_CLASSIFICATION,// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string
Hibernate,WITHOUT_CLASSIFICATION,// do a check
Hibernate,WITHOUT_CLASSIFICATION,"//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();"
Hibernate,WITHOUT_CLASSIFICATION,"//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}"
Hibernate,WITHOUT_CLASSIFICATION,//materialize associations (and initialize the object) later
Hibernate,WITHOUT_CLASSIFICATION,"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907"
Hibernate,WITHOUT_CLASSIFICATION,//fetch="join" overrides default laziness //fetch="join" overrides default laziness
Hibernate,WITHOUT_CLASSIFICATION,// drop them in reverse order in case db needs it done that way...
Hibernate,WITHOUT_CLASSIFICATION,// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario the previous logical row // really is the last logical row. // // In all other cases we should process back two // logical records (the current logic row plus the // previous logical row).
Hibernate,WITHOUT_CLASSIFICATION,// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case try to look up its identifier from // the persistence context
Hibernate,WITHOUT_CLASSIFICATION,// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)
Hibernate,WITHOUT_CLASSIFICATION,"//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}"
Hibernate,WITHOUT_CLASSIFICATION,// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...
Hibernate,WITHOUT_CLASSIFICATION,// it is or was referenced _somewhere_
Hibernate,WITHOUT_CLASSIFICATION,// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides it makes the code // much easier to read than the old TransactionHelper stuff...
Hibernate,WITHOUT_CLASSIFICATION,// nothing to do; even if the operand is a parameter no way we could // infer an appropriate expected type here
Hibernate,WITHOUT_CLASSIFICATION,// the root of the incoming property path matched one // of the embedded composite identifier properties
Hibernate,WITHOUT_CLASSIFICATION,// add normal properties
Hibernate,WITHOUT_CLASSIFICATION,// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// add the discriminator
Hibernate,WITHOUT_CLASSIFICATION,// handles arrays and newly instantiated collections
Hibernate,WITHOUT_CLASSIFICATION,// if either its role changed
Hibernate,WITHOUT_CLASSIFICATION,//noncritical swallow and let the other propagate!
Hibernate,WITHOUT_CLASSIFICATION,// we will need to create new entries
Hibernate,WITHOUT_CLASSIFICATION,// this piece is needed for usage in select clause
Hibernate,WITHOUT_CLASSIFICATION,// no-op. We don't own the cache so we shouldn't stop it.
Hibernate,WITHOUT_CLASSIFICATION,// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself
Hibernate,WITHOUT_CLASSIFICATION,// Get the names of the columns used to link between the collection // owner and the collection elements.
Hibernate,WITHOUT_CLASSIFICATION,//let's assume that there is only one lazy fetch group for now!
Hibernate,WITHOUT_CLASSIFICATION,// more specifically : "? [op] datetime" //      1) if the operator is MINUS the param needs to be of //          some datetime type //      2) if the operator is PLUS the param needs to be of //          some numeric type
Hibernate,WITHOUT_CLASSIFICATION,// don't even bother trying to read any further
Hibernate,WITHOUT_CLASSIFICATION,// prepend value and type list with null for any positions before the wanted position.
Hibernate,WITHOUT_CLASSIFICATION,//+ "_" + referencedColumnName not used for backward compatibility
Hibernate,WITHOUT_CLASSIFICATION,// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// this property belongs on the table and is to be inserted
Hibernate,WITHOUT_CLASSIFICATION,// need to extract the component values and check for subtype replacements...
Hibernate,WITHOUT_CLASSIFICATION,// add the primary key
Hibernate,WITHOUT_CLASSIFICATION,// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return
Hibernate,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.BLOB 16777215 ""mediumblob"" ); //		registerColumnType( Types.BLOB 65535 ""blob"" );"
Hibernate,WITHOUT_CLASSIFICATION,// delegate already handles PK columns
Hibernate,WITHOUT_CLASSIFICATION,//ie. e.status==DELETED
Hibernate,WITHOUT_CLASSIFICATION,// kept for backward compatibility until after the 3.1beta5 release of HA
Hibernate,WITHOUT_CLASSIFICATION,// legacy behavior apply the bridge...
Hibernate,WITHOUT_CLASSIFICATION,//if an exception occurs during flush user must call rollback()
Hibernate,WITHOUT_CLASSIFICATION,// Turn off includeSubclasses on all FromElements.
Hibernate,WITHOUT_CLASSIFICATION,// can't just return null here since that would // cause an owning component to become null
Hibernate,WITHOUT_CLASSIFICATION,// the object is transient or detached
Hibernate,WITHOUT_CLASSIFICATION,// Now update only the tables with dirty properties (and the table with the version number)
Hibernate,WITHOUT_CLASSIFICATION,// Render the SQL query
Hibernate,WITHOUT_CLASSIFICATION,// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
Hibernate,WITHOUT_CLASSIFICATION,// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state
Hibernate,WITHOUT_CLASSIFICATION,// registerColumnType(Types.VARBINARY "CHARACTER($l)"); // registerColumnType(Types.BLOB "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB "CHARACTER($l)" );
Hibernate,WITHOUT_CLASSIFICATION,// TODO : shouldnt inserts be Expectations.NONE?
Hibernate,WITHOUT_CLASSIFICATION,//a proxy cannot be transient and it breaks ForeignKeys.isTransient
Hibernate,WITHOUT_CLASSIFICATION,//don't bother trying to update we know there is no row there yet
Hibernate,WITHOUT_CLASSIFICATION,// This is the root level node. // Generate an explicit from clause at the root.
Hibernate,WITHOUT_CLASSIFICATION,// CHECK
Hibernate,WITHOUT_CLASSIFICATION,// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).
Hibernate,WITHOUT_CLASSIFICATION,//if all fields are null we might need to delete existing row
Hibernate,WITHOUT_CLASSIFICATION,//note: updates to joined tables can't be batched...
Hibernate,WITHOUT_CLASSIFICATION,// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// starting index
Hibernate,WITHOUT_CLASSIFICATION,// object have been loaded with setReadOnly(true); HHH-2236
Hibernate,WITHOUT_CLASSIFICATION,"/**	 * Build a ResultSetMappingDefinition given a containing element for the ""return-XXX"" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */"
Hibernate,WITHOUT_CLASSIFICATION,"//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();"
Hibernate,WITHOUT_CLASSIFICATION,// Write any appropriate versioning conditional parameters
Hibernate,WITHOUT_CLASSIFICATION,//check if the detached object being merged is the parent
Hibernate,WITHOUT_CLASSIFICATION,//Render the SQL query
Hibernate,WITHOUT_CLASSIFICATION,// determine if the collection elements are entities...
Hibernate,WITHOUT_CLASSIFICATION,// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued
Hibernate,WITHOUT_CLASSIFICATION,// Let return-propertys override whatever the persister has for aliases.
Hibernate,WITHOUT_CLASSIFICATION,// We should use the _current_ object state (ie. after any updates that occurred during flush)
Hibernate,WITHOUT_CLASSIFICATION,// might need to run a different filter entirely after the flush // because the collection role may have changed
Hibernate,WITHOUT_CLASSIFICATION,// amazingly these two will work because AbstractCollection // uses iterator() to fill the array
Hibernate,WITHOUT_CLASSIFICATION,// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode
Hibernate,WITHOUT_CLASSIFICATION,"//note: dirtyFields==null means we had no snapshot and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)"
Hibernate,WITHOUT_CLASSIFICATION,// loop through all the associations of the current entity and make sure that they are processed // before the current batch number
Hibernate,WITHOUT_CLASSIFICATION,// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead
Hibernate,WITHOUT_CLASSIFICATION,/* COLUMN and TABLE should be renamed but it would break the public API */
Hibernate,WITHOUT_CLASSIFICATION,// For many-to-many joins use the tablename from the queryable collection for the default text.
Hibernate,WITHOUT_CLASSIFICATION,//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;
Hibernate,WITHOUT_CLASSIFICATION,// For the case of dynamic-update="true" we need to generate the UPDATE SQL
Hibernate,WITHOUT_CLASSIFICATION,// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Default to collections sharing entity cache if there is one
Hibernate,WITHOUT_CLASSIFICATION,// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias String[] columns String condition);
Hibernate,WITHOUT_CLASSIFICATION,// don't need to check laziness (dirty checking algorithm handles that)
Hibernate,WITHOUT_CLASSIFICATION,"/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect() 				factory.getDefaultCatalog() 				factory.getDefaultSchema() 		);*/"
Hibernate,WITHOUT_CLASSIFICATION,// For the case of dynamic-update="false" or no snapshot we use the static SQL
Hibernate,WITHOUT_CLASSIFICATION,//abort the save (the object is already saved by a circular cascade)
Hibernate,WITHOUT_CLASSIFICATION,// if not "get" then try "is"
Hibernate,WITHOUT_CLASSIFICATION,// remove initial " and "
Hibernate,WITHOUT_CLASSIFICATION,// Default to sharing the entity cache if there is one
Hibernate,WITHOUT_CLASSIFICATION,// we have the form: trim(trimSource) //      so we trim leading and trailing spaces
Hibernate,WITHOUT_CLASSIFICATION,// For the case of dynamic-insert="true" we need to generate the INSERT SQL
Hibernate,WITHOUT_CLASSIFICATION,// if it was a reference to self don't need to nullify // unless we are using native id generation in which // case we definitely need to nullify
Hibernate,WITHOUT_CLASSIFICATION,//the user visible aliases which are unknown to the superclass //these are not the actual "physical" SQL aliases
Hibernate,WITHOUT_CLASSIFICATION,// For the case of dynamic-insert="false" use the static SQL
Hibernate,WITHOUT_CLASSIFICATION,// if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins
Hibernate,WITHOUT_CLASSIFICATION,//a shortcut if its location didn't change!
Hibernate,WITHOUT_CLASSIFICATION,//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations
Hibernate,WITHOUT_CLASSIFICATION,// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
Hibernate,WITHOUT_CLASSIFICATION,// if we instantiate a collection during the flush() process // we must ignore it for the rest of the flush()
Hibernate,WITHOUT_CLASSIFICATION,// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// new collections that get found + wrapped // during flush shouldn't be ignored
Hibernate,WITHOUT_CLASSIFICATION,// meant to handle dynamic instantiation queries...
Hibernate,WITHOUT_CLASSIFICATION,//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
Hibernate,WITHOUT_CLASSIFICATION,// Always add the collection's query spaces.
Hibernate,WITHOUT_CLASSIFICATION,//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte M - megabyte G - gigabyte. //refer to the PBdevelopers guide for more info.
Hibernate,WITHOUT_CLASSIFICATION,// detached collections that get found + reattached // during flush shouldn't be ignored
Hibernate,WITHOUT_CLASSIFICATION,// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.
Hibernate,WITHOUT_CLASSIFICATION,// we need to utilize dynamic delete statements
Hibernate,WITHOUT_CLASSIFICATION,// otherwise utilize the static delete statements
Hibernate,WITHOUT_CLASSIFICATION,// intentionally empty
Hibernate,WITHOUT_CLASSIFICATION,"/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/"
Hibernate,WITHOUT_CLASSIFICATION,//final boolean forceCacheRefresh
Hibernate,WITHOUT_CLASSIFICATION,//just a performance opt!
Hibernate,WITHOUT_CLASSIFICATION,// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located use //      that transaction manager to determine the status. // 3) Finally as the last resort try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.
Hibernate,WITHOUT_CLASSIFICATION,// used to set the type of the parent dot node
Hibernate,WITHOUT_CLASSIFICATION,//all joins join to the pk of the driving table
Hibernate,WITHOUT_CLASSIFICATION,// more specifically : "datetime [op] ?" //      1) if the operator is MINUS we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS the param needs to be of //          some numeric type
Hibernate,WITHOUT_CLASSIFICATION,//notice that we skip the first table; it is the driving table!
Hibernate,WITHOUT_CLASSIFICATION,// aliases named identifier ( alias.idname )
Hibernate,WITHOUT_CLASSIFICATION,//skip the driving table
Hibernate,WITHOUT_CLASSIFICATION,// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//get 'em in the right order (not that it really matters)
Hibernate,WITHOUT_CLASSIFICATION,//NOTE EARLY EXIT!
Hibernate,WITHOUT_CLASSIFICATION,// trying via forName() first to be as close to DriverManager's semantics
Hibernate,WITHOUT_CLASSIFICATION,//this bit is only *really* absolutely necessary for handling //requestedId but is also good if we merge multiple object //graphs since it helps ensure uniqueness
Hibernate,WITHOUT_CLASSIFICATION,"//	private boolean showSql; //	private boolean formatSql;"
Hibernate,WITHOUT_CLASSIFICATION,// in case we were deserialized in a different JVM look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
Hibernate,WITHOUT_CLASSIFICATION,// try to make sure we don't wrap and already wrapped session
Hibernate,WITHOUT_CLASSIFICATION,// If this is an implied join in a FROM clause then use ANSI-style joining and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.
Hibernate,WITHOUT_CLASSIFICATION,//render the where and from parts
Hibernate,WITHOUT_CLASSIFICATION,// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.
Hibernate,WITHOUT_CLASSIFICATION,// allow these to go through the the real session no matter what
Hibernate,WITHOUT_CLASSIFICATION,// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
Hibernate,WITHOUT_CLASSIFICATION,//we *could* regerate this inside each called method!
Hibernate,WITHOUT_CLASSIFICATION,// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//now render the joins
Hibernate,WITHOUT_CLASSIFICATION,// If you're closing down the ConnectionProvider chances are an // is not a real big deal just warn
Hibernate,WITHOUT_CLASSIFICATION,// create a new batch for this type. The batch number is the number of current batches.
Hibernate,WITHOUT_CLASSIFICATION,// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// This will add the new from element to the origin.
Hibernate,WITHOUT_CLASSIFICATION,//now render the select clause
Hibernate,WITHOUT_CLASSIFICATION,// The keyword used to insert a row without specifying // any column values
Hibernate,WITHOUT_CLASSIFICATION,//now tie it all together
Hibernate,WITHOUT_CLASSIFICATION,// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?
Hibernate,WITHOUT_CLASSIFICATION,//insert/update/delete SQL
Hibernate,WITHOUT_CLASSIFICATION,// The keyword used to specify a nullable column.
Hibernate,WITHOUT_CLASSIFICATION,//select SQL
Hibernate,WITHOUT_CLASSIFICATION,//overriden to avoid System.exit
Hibernate,WITHOUT_CLASSIFICATION,//no need to check laziness dirty checking handles that
Hibernate,WITHOUT_CLASSIFICATION,// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Fully resolve the map reference create implicit joins.
Hibernate,WITHOUT_CLASSIFICATION,// break the outer loop !!!
Hibernate,WITHOUT_CLASSIFICATION,// since this entity will now be processed in the latest possible batch // we can be assured that it will come after all other associations // there's not need to continue checking.
Hibernate,WITHOUT_CLASSIFICATION,// remove any snapshot not really for memory management purposes but // rather because it might now be stale and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);
Hibernate,WITHOUT_CLASSIFICATION,// The basic implementation is to simply use the node's text
Hibernate,WITHOUT_CLASSIFICATION,// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using
Hibernate,WITHOUT_CLASSIFICATION,//cascade to current collection elements
Hibernate,WITHOUT_CLASSIFICATION,// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//not really necessary but good for consistency...
Hibernate,WITHOUT_CLASSIFICATION,// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
Hibernate,WITHOUT_CLASSIFICATION,// we can't cascade to non-embedded elements
Hibernate,WITHOUT_CLASSIFICATION,//postDelete: // After actually deleting a row record the fact that the instance no longer  // exists on the database (needed for identity-column key generation) and // remove it from the session cache
Hibernate,WITHOUT_CLASSIFICATION,//a newly instantiated collection can't have orphans
Hibernate,WITHOUT_CLASSIFICATION,// Don't hold the JBC node lock throughout the tx as that // prevents reads and other updates
Hibernate,WITHOUT_CLASSIFICATION,// check the version unsaved-value if appropriate
Hibernate,WITHOUT_CLASSIFICATION,// Create the SessionFactory from hibernate.cfg.xml
Hibernate,WITHOUT_CLASSIFICATION,// handle orphaned entities!!
Hibernate,WITHOUT_CLASSIFICATION,// check the id unsaved-value
Hibernate,WITHOUT_CLASSIFICATION,"// if we get here it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'"
Hibernate,WITHOUT_CLASSIFICATION,// check to see if it is in the second-level cache
Hibernate,WITHOUT_CLASSIFICATION,//Custom SQL (would be better if these were private)
Hibernate,WITHOUT_CLASSIFICATION,// our column span is the number of columns in the PK
Hibernate,WITHOUT_CLASSIFICATION,// For property references generate <tablealias>.<columnname> as <projectionalias>
Hibernate,WITHOUT_CLASSIFICATION,// KEY
Hibernate,WITHOUT_CLASSIFICATION,//force immediate execution of the insert
Hibernate,WITHOUT_CLASSIFICATION,// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Loaded entity instances by EntityUniqueKey
Hibernate,WITHOUT_CLASSIFICATION,//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter
Hibernate,WITHOUT_CLASSIFICATION,// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Identity map of EntityEntry instances by the entity instance
Hibernate,WITHOUT_CLASSIFICATION,// Write HTML footer
Hibernate,WITHOUT_CLASSIFICATION,// Entity proxies by EntityKey
Hibernate,WITHOUT_CLASSIFICATION,// delete does cascade to uninitialized collections
Hibernate,WITHOUT_CLASSIFICATION,// Snapshots of current database state for entities // that have *not* been loaded
Hibernate,WITHOUT_CLASSIFICATION,// NativeSQL: collect key column and auto-aliases
Hibernate,WITHOUT_CLASSIFICATION,// Identity map of array holder ArrayHolder instances by the array instance
Hibernate,WITHOUT_CLASSIFICATION,//cannot occur
Hibernate,WITHOUT_CLASSIFICATION,// Don't need to lock the cache here since if someone // else inserted the same pk first the insert would fail
Hibernate,WITHOUT_CLASSIFICATION,// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...
Hibernate,WITHOUT_CLASSIFICATION,// try "get"
Hibernate,WITHOUT_CLASSIFICATION,// pass control along to the rest of the processing chain
Hibernate,WITHOUT_CLASSIFICATION,// Set of EntityKeys of deleted objects
Hibernate,WITHOUT_CLASSIFICATION,// all this only really needs to consider properties // of this class not its subclasses but since we // are reusing code used for sequential selects we // use the subclass closure
Hibernate,WITHOUT_CLASSIFICATION,// A list of collection wrappers that were instantiating during result set // processing that we will need to initialize at the end of the query
Hibernate,WITHOUT_CLASSIFICATION,"/*protected void initPropertyPaths(			final String path			final Type type			final String[] columns			final String[] formulaTemplates			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path type formulaTemplates);		initPropertyPaths(path type columns formulaTemplates factory);	}*/"
Hibernate,WITHOUT_CLASSIFICATION,// Downgrade locks
Hibernate,WITHOUT_CLASSIFICATION,//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
Hibernate,WITHOUT_CLASSIFICATION,// do nothing...
Hibernate,WITHOUT_CLASSIFICATION,// Deserialize //-----------------------------------------------------------------------
Hibernate,WITHOUT_CLASSIFICATION,// Actually the semantics of the next three are really "Bag" // Note that unlike objects collection insertions updates // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.
Hibernate,WITHOUT_CLASSIFICATION,"//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}"
Hibernate,WITHOUT_CLASSIFICATION,//with two-deep subqueries the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()) so //that is now used as a fallback if the main criteria alias isn't set
Hibernate,WITHOUT_CLASSIFICATION,/*(array==null) ? tempList.size() :*/
Hibernate,WITHOUT_CLASSIFICATION,//sort the updates by pk
Hibernate,WITHOUT_CLASSIFICATION,// should be safe to only ever expect EntityPersister references here
Hibernate,WITHOUT_CLASSIFICATION,//optimize the hash size to eliminate a rehash.
Hibernate,WITHOUT_CLASSIFICATION,//unwrap the object
Hibernate,WITHOUT_CLASSIFICATION,// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
Hibernate,WITHOUT_CLASSIFICATION,// the entity associated with the current action.
Hibernate,WITHOUT_CLASSIFICATION,// this page intentionally left blank :)
Hibernate,WITHOUT_CLASSIFICATION,// unfortunately this stuff can't be cached because // it is per-invocation not constant for the // QueryTranslator instance
Hibernate,WITHOUT_CLASSIFICATION,//initialize + unwrap the object
Hibernate,WITHOUT_CLASSIFICATION,// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// do not do anything
Hibernate,WITHOUT_CLASSIFICATION,// we can't batch joined inserts *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param
Hibernate,WITHOUT_CLASSIFICATION,//return the proxied object
Hibernate,WITHOUT_CLASSIFICATION,// else no collection element but also no owner
Hibernate,WITHOUT_CLASSIFICATION,// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!
Hibernate,WITHOUT_CLASSIFICATION,//overwrite old proxy
Hibernate,WITHOUT_CLASSIFICATION,// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer it indicates that LRU entries are removed the // actual kept entries are the MRU entries
Hibernate,WITHOUT_CLASSIFICATION,// early exit...
Hibernate,WITHOUT_CLASSIFICATION,// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a b c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)
Hibernate,WITHOUT_CLASSIFICATION,// or should it actually throw an exception?
Hibernate,WITHOUT_CLASSIFICATION,// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially this is an issue with // the overloading of the term "lazy" here...
Hibernate,WITHOUT_CLASSIFICATION,// The property is a component...
Hibernate,WITHOUT_CLASSIFICATION,// the ids are fully resolved so compare them with isDirty() not isModified()
Hibernate,WITHOUT_CLASSIFICATION,//cant instantiate
Hibernate,WITHOUT_CLASSIFICATION,//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
Hibernate,WITHOUT_CLASSIFICATION,//if it is a property of an embedded component invoke on the "identifier"
Hibernate,WITHOUT_CLASSIFICATION,// otherwise:
Hibernate,WITHOUT_CLASSIFICATION,// starts with the name of a mapped class (new style)
Hibernate,WITHOUT_CLASSIFICATION,//treat it just like a new collection
Hibernate,WITHOUT_CLASSIFICATION,// skip finalize methods
Hibernate,WITHOUT_CLASSIFICATION,// return the (fully resolved) identifier value but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!
Hibernate,WITHOUT_CLASSIFICATION,//do this work only at the very highest level of the load //don't let this method be called recursively
Hibernate,WITHOUT_CLASSIFICATION,"//	public static JDBCException newJDBCException(String string SQLException root String sql) { //		string = string + "" ["" + sql + ']'; //		log.error(string root); //		logExceptions(root); //		return new JDBCException(string root sql); //	} // //	public static JDBCException newJDBCException(String string SQLException root) { //		log.error(string root); //		logExceptions(root); //		return new JDBCException(string root); //	}"
Hibernate,WITHOUT_CLASSIFICATION,//note that each iteration of the loop may add new elements
Hibernate,WITHOUT_CLASSIFICATION,// if we know there is exactly 1 row we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>
Hibernate,WITHOUT_CLASSIFICATION,"/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/"
Hibernate,WITHOUT_CLASSIFICATION,// we need to obtain the lock before any actions are // executed since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)
Hibernate,WITHOUT_CLASSIFICATION,// HHH-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.
Hibernate,WITHOUT_CLASSIFICATION,//no point doing this if NONE was requested
Hibernate,WITHOUT_CLASSIFICATION,// while constructor is running
Hibernate,WITHOUT_CLASSIFICATION,//there is probably a row there so try to update //if no rows were updated we will find out
Hibernate,WITHOUT_CLASSIFICATION,// note: interface is assumed to already contain HibernateProxy.class
Hibernate,WITHOUT_CLASSIFICATION,//do nothing to avoid a lazy property initialization
Hibernate,WITHOUT_CLASSIFICATION,// interfaces // arguments
Hibernate,WITHOUT_CLASSIFICATION,//Not called at runtime so doesn't matter if its slow :)
Hibernate,WITHOUT_CLASSIFICATION,//TODO!
Hibernate,WITHOUT_CLASSIFICATION,// Chop off the rest of the tree.
Hibernate,WITHOUT_CLASSIFICATION,// Get the caller
Hibernate,WITHOUT_CLASSIFICATION,// prefer re-generation of identity!
Hibernate,WITHOUT_CLASSIFICATION,// Get the caller principals
Hibernate,WITHOUT_CLASSIFICATION,// refresh doesn't cascade to uninitialized collections
Hibernate,WITHOUT_CLASSIFICATION,//private static final Alias DEFAULT_ALIAS = new Alias(10 null);
Hibernate,WITHOUT_CLASSIFICATION,"/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/"
Hibernate,WITHOUT_CLASSIFICATION,// generate id select fragment and then property select fragment for // each expression just like generateSelectFragments().
Hibernate,WITHOUT_CLASSIFICATION,"/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/"
Hibernate,WITHOUT_CLASSIFICATION,//special case ... this is the leaf of the containment graph even though not immutable
Hibernate,WITHOUT_CLASSIFICATION,// iterate all the entities currently associated with the persistence context.
Hibernate,WITHOUT_CLASSIFICATION,// According to both the ANSI-SQL and JPA specs trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted BOTH is assumed. // If <trim character> is omitted space is assumed
Hibernate,WITHOUT_CLASSIFICATION,// does this entity entry pertain to the entity persister in which we are interested (owner)?
Hibernate,WITHOUT_CLASSIFICATION,/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy
Hibernate,WITHOUT_CLASSIFICATION,//check if the managed object is the parent
Hibernate,WITHOUT_CLASSIFICATION,// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.
Hibernate,WITHOUT_CLASSIFICATION,// otherwise the proxy was pruned during the serialization process
Hibernate,WITHOUT_CLASSIFICATION,// does not handle arrays (thats ok cos they can't be lazy) // or newly instantiated collections so we can do the cast
Hibernate,WITHOUT_CLASSIFICATION,// adds remove as a sort-of alias for delete...
Hibernate,WITHOUT_CLASSIFICATION,//return lhsPersister.getSubclassPropertyColumnNames(property);
Hibernate,WITHOUT_CLASSIFICATION,// saves / updates don't cascade to uninitialized collections
Hibernate,WITHOUT_CLASSIFICATION,//EARLY EXIT
Hibernate,WITHOUT_CLASSIFICATION,// create our own copy of the user-supplied tuplizer impl map
Hibernate,WITHOUT_CLASSIFICATION,//if the identifier is quoted remove the quotes
Hibernate,WITHOUT_CLASSIFICATION,// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)
Hibernate,WITHOUT_CLASSIFICATION,//truncate the identifier to the max alias length less the suffix length
Hibernate,WITHOUT_CLASSIFICATION,//full joins are not supported.. yet!
Hibernate,WITHOUT_CLASSIFICATION,"//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed"
Hibernate,WITHOUT_CLASSIFICATION,// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1
Hibernate,WITHOUT_CLASSIFICATION,// properly handle property-ref-based associations
Hibernate,WITHOUT_CLASSIFICATION,// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters
Hibernate,WITHOUT_CLASSIFICATION,// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy
Hibernate,WITHOUT_CLASSIFICATION,// add another (inner) nested select // add the main query // close off the inner nested select
Hibernate,WITHOUT_CLASSIFICATION,"//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)"
Hibernate,WITHOUT_CLASSIFICATION,// then handle any user-defined entity modes...
Hibernate,WITHOUT_CLASSIFICATION,// strip off any leading 'and' token
Hibernate,WITHOUT_CLASSIFICATION,// then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available
Hibernate,WITHOUT_CLASSIFICATION,// if the condition is not already there...
Hibernate,WITHOUT_CLASSIFICATION,// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se // the end result without handling it specifically is infinite // looping.  So here we simply break the loop
Hibernate,WITHOUT_CLASSIFICATION,//dontSpace.add("'");
Hibernate,WITHOUT_CLASSIFICATION,"//	public ComponentMetamodel(Component component SessionFactoryImplementor sessionFactory) {"
Hibernate,WITHOUT_CLASSIFICATION,//for MySQL
Hibernate,WITHOUT_CLASSIFICATION,// Detect discriminator values...
Hibernate,WITHOUT_CLASSIFICATION,"/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */"
Hibernate,WITHOUT_CLASSIFICATION,// Handle any filters applied to this collection
Hibernate,WITHOUT_CLASSIFICATION,//handle a property-ref
Hibernate,WITHOUT_CLASSIFICATION,//if we could not register a synchronization //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do so it doesn't keep trying to register //synchronizations)
Hibernate,WITHOUT_CLASSIFICATION,//HashMap columnsUnique = new HashMap();
Hibernate,WITHOUT_CLASSIFICATION,//null caused some problems
Hibernate,WITHOUT_CLASSIFICATION,// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join
Hibernate,WITHOUT_CLASSIFICATION,// cascade the refresh prior to refreshing this entity
Hibernate,WITHOUT_CLASSIFICATION,//not sure if this would ever be null but wanted to be careful
Hibernate,WITHOUT_CLASSIFICATION,//even on inverse="true"
Hibernate,WITHOUT_CLASSIFICATION,// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database) since in this case a null // entity reference can lose information
Hibernate,WITHOUT_CLASSIFICATION,// register hibernate types for default use in scalar sqlquery type auto detection
Hibernate,WITHOUT_CLASSIFICATION,// If true then execute db updates otherwise just generate and display updates
Hibernate,WITHOUT_CLASSIFICATION,// SQLFunction implementation
Hibernate,WITHOUT_CLASSIFICATION,// we only release the connection
Hibernate,WITHOUT_CLASSIFICATION,//we only check the version when _upgrading_ lock modes
Hibernate,WITHOUT_CLASSIFICATION,// deprecated option...
Hibernate,WITHOUT_CLASSIFICATION,// only carry on if the method has no parameters
Hibernate,WITHOUT_CLASSIFICATION,//woops we got an instance of another class hierarchy branch
Hibernate,WITHOUT_CLASSIFICATION,// COMPOSITE-ID
Hibernate,WITHOUT_CLASSIFICATION,// Create an OuterJoinGenerator for this dialect.
Hibernate,WITHOUT_CLASSIFICATION,//actually this last test is probably unnecessary since  //beforeCompletion() doesn't get called during rollback
Hibernate,WITHOUT_CLASSIFICATION,// we need to step through the rows one row at a time (slow)
Hibernate,WITHOUT_CLASSIFICATION,// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Create an DotNode AST for the path and resolve it.
Hibernate,WITHOUT_CLASSIFICATION,//its already loaded so don't need to hydrate it
Hibernate,WITHOUT_CLASSIFICATION,// orphans should be deleted during delete
Hibernate,WITHOUT_CLASSIFICATION,// swallow it and continue to roll back JTA transaction
Hibernate,WITHOUT_CLASSIFICATION,"// here we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name"
Hibernate,WITHOUT_CLASSIFICATION,// so the transaction is already rolled back by JTA spec
Hibernate,WITHOUT_CLASSIFICATION,// we found a collection element in the result set
Hibernate,WITHOUT_CLASSIFICATION,// this method is a noop if there is a Synchronization!
Hibernate,WITHOUT_CLASSIFICATION,// register the standard dialect resolver
Hibernate,WITHOUT_CLASSIFICATION,// why is all others non final ?
Hibernate,WITHOUT_CLASSIFICATION,// even though we might find a pre-existing element by join path we may not be able to reuse it...
Hibernate,WITHOUT_CLASSIFICATION,// HELLA IMPORTANT OPTIMIZATION!!!
Hibernate,WITHOUT_CLASSIFICATION,"/*return that.type.equals(type) && 			EqualsHelper.equals(that.value value);*/"
Hibernate,WITHOUT_CLASSIFICATION,//null child could occur for no from clause in a filter
Hibernate,WITHOUT_CLASSIFICATION,// The 'from element' that the property is in.
Hibernate,WITHOUT_CLASSIFICATION,// Since the result set cursor is always left at the first // physical row after the "last processed" we need to jump // back one position to get the key value we are interested // in skipping
Hibernate,WITHOUT_CLASSIFICATION,// WebSphere however is not a sane JEE/JTA container...
Hibernate,WITHOUT_CLASSIFICATION,// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.
Hibernate,WITHOUT_CLASSIFICATION,// for sane JEE/JTA containers the transaction itself functions as its identifier...
Hibernate,WITHOUT_CLASSIFICATION,// First try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...
Hibernate,WITHOUT_CLASSIFICATION,//swallow the transaction was finished
Hibernate,WITHOUT_CLASSIFICATION,//will be ignored using the existing Entry instead
Hibernate,WITHOUT_CLASSIFICATION,// 60 seconds
Hibernate,WITHOUT_CLASSIFICATION,// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
Hibernate,WITHOUT_CLASSIFICATION,// Don't hold a transactional lock for this
Hibernate,WITHOUT_CLASSIFICATION,// some collections are not lazy:
Hibernate,WITHOUT_CLASSIFICATION,// Fix up the resident flag
Hibernate,WITHOUT_CLASSIFICATION,// Does the LIMIT clause come at the start of the SELECT statement rather than at the end?
Hibernate,WITHOUT_CLASSIFICATION,// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//the following two lines were added to ensure that this.params is not null which //can happen with two-deep nested subqueries
Hibernate,WITHOUT_CLASSIFICATION,// Set the attributes of the property reference expression.
Hibernate,WITHOUT_CLASSIFICATION,// the current batch number is the latest batch for this entity type.
Hibernate,WITHOUT_CLASSIFICATION,//take a snapshot
Hibernate,WITHOUT_CLASSIFICATION,//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables
Hibernate,WITHOUT_CLASSIFICATION,// Never evict this node
Hibernate,WITHOUT_CLASSIFICATION,// Does the collection referenced by this FromElement // specify an order-by attribute?  If so attach it to // the query's order-by
Hibernate,WITHOUT_CLASSIFICATION,// Create the join element under the from element.
Hibernate,WITHOUT_CLASSIFICATION,// for merging of versioned entities we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved
Hibernate,WITHOUT_CLASSIFICATION,// Moved here from SelectClause [jsd]
Hibernate,WITHOUT_CLASSIFICATION,// pre-determine and cache the hashcode
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
Hibernate,WITHOUT_CLASSIFICATION,// Make sure the root node for the region exists and  // has a DataVersion that never complains
Hibernate,WITHOUT_CLASSIFICATION,"//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!"
Hibernate,WITHOUT_CLASSIFICATION,// map of EntityMode -> Tuplizer
Hibernate,WITHOUT_CLASSIFICATION,//Now write the values of fields onto the prepared statement
Hibernate,WITHOUT_CLASSIFICATION,// this is a virtual id property...
Hibernate,WITHOUT_CLASSIFICATION,// The current_timestamp is more accurate but only known to be supported // in SQL Server 7.0 and later (i.e. Sybase not known to support it at all)
Hibernate,WITHOUT_CLASSIFICATION,//this one needed only for guessEntityMode()
Hibernate,WITHOUT_CLASSIFICATION,"/* will check current level if some of them are not null		 * or sublevels if they exist		 */"
Hibernate,WITHOUT_CLASSIFICATION,// Build the dynamic-map tuplizer...
Hibernate,WITHOUT_CLASSIFICATION,// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
Hibernate,WITHOUT_CLASSIFICATION,// then dom4j tuplizer if dom4j representation is available
Hibernate,WITHOUT_CLASSIFICATION,// See if the entity is already bound to this session if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is we rely on foreign keys to keep // database integrity)
Hibernate,WITHOUT_CLASSIFICATION,// do the work
Hibernate,WITHOUT_CLASSIFICATION,// if its an uninitialized proxy it can't be transient
Hibernate,WITHOUT_CLASSIFICATION,// We've been here before
Hibernate,WITHOUT_CLASSIFICATION,//return the id so we can use it to reset the proxy id //return result;
Hibernate,WITHOUT_CLASSIFICATION,// return false here as most databases do not properly support this construct...
Hibernate,WITHOUT_CLASSIFICATION,// put the "standard" tuplizers into the tuplizer map first
Hibernate,WITHOUT_CLASSIFICATION,// hit the database after checking the session cache for a snapshot
Hibernate,WITHOUT_CLASSIFICATION,// found a ctor but it was not publicly accessible so try to request accessibility
Hibernate,WITHOUT_CLASSIFICATION,// our parent is another dot node meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).
Hibernate,WITHOUT_CLASSIFICATION,"//	private final SessionFactoryImplementor sessionFactory;"
Hibernate,WITHOUT_CLASSIFICATION,// Search for collections by reachability updating their role. // We don't want to touch collections reachable from a deleted object
Hibernate,WITHOUT_CLASSIFICATION,// cached for efficiency...
Hibernate,WITHOUT_CLASSIFICATION,// sql server just returns automatically
Hibernate,WITHOUT_CLASSIFICATION,"//		this.sessionFactory = sessionFactory;"
Hibernate,WITHOUT_CLASSIFICATION,// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//it was not embedded so the argument is just an id
Hibernate,WITHOUT_CLASSIFICATION,// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically we // have an incoming entity instance which has a corresponding // entry in the current persistence context but registered // under a different entity instance
Hibernate,WITHOUT_CLASSIFICATION,//where fragment must be empty!
Hibernate,WITHOUT_CLASSIFICATION,// or its key changed
Hibernate,WITHOUT_CLASSIFICATION,"//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart allParams.size() ).iterator();"
Hibernate,WITHOUT_CLASSIFICATION,// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// we will need to remove ye olde entries
Hibernate,WITHOUT_CLASSIFICATION,// add the current fragment to the THETA_JOINS node
Hibernate,WITHOUT_CLASSIFICATION,// force initialize!
Hibernate,WITHOUT_CLASSIFICATION,// lock doesn't cascade to uninitialized collections
Hibernate,WITHOUT_CLASSIFICATION,//return currentId;
Hibernate,WITHOUT_CLASSIFICATION,//unquotedIdentifierColumnName = null;
Hibernate,WITHOUT_CLASSIFICATION,//reset the id
Hibernate,WITHOUT_CLASSIFICATION,//addInitializedCollection(collection persister id);
Hibernate,WITHOUT_CLASSIFICATION,// CollectionPropertyMapping processes everything except 'index'.
Hibernate,WITHOUT_CLASSIFICATION,//if it is an uninitialized proxy pointing //with this session then when it is accessed //the underlying instance will be "contained"
Hibernate,WITHOUT_CLASSIFICATION,//reset the version
Hibernate,WITHOUT_CLASSIFICATION,// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.
Hibernate,WITHOUT_CLASSIFICATION,// the default is to simply not lazy fetch properties for now...
Hibernate,WITHOUT_CLASSIFICATION,// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
Hibernate,WITHOUT_CLASSIFICATION,// else if it's elements changed
Hibernate,WITHOUT_CLASSIFICATION,"//		 This assumes you will want to ignore any update counts "
Hibernate,WITHOUT_CLASSIFICATION,//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
Hibernate,WITHOUT_CLASSIFICATION,// now rebuild the insertions list. There is a batch for each entry in the name list.
Hibernate,WITHOUT_CLASSIFICATION,// if the original is a PersistentCollection and that original // was not flagged as dirty then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...
Hibernate,WITHOUT_CLASSIFICATION,// session-start/post-flush persistent state
Hibernate,WITHOUT_CLASSIFICATION,// allow the CollectionSnapshot to be serialized
Hibernate,WITHOUT_CLASSIFICATION,// first break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners
Hibernate,WITHOUT_CLASSIFICATION,// Add the second join the one that ends in the destination table.
Hibernate,WITHOUT_CLASSIFICATION,// Generate an 2d array of column names the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.
Hibernate,WITHOUT_CLASSIFICATION,// ATTRIBUTES USED ONLY DURING FLUSH CYCLE
Hibernate,WITHOUT_CLASSIFICATION,// Create SQL_TOKEN nodes for the columns.
Hibernate,WITHOUT_CLASSIFICATION,// "current" means the reference that was found during flush()
Hibernate,WITHOUT_CLASSIFICATION,// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...
Hibernate,WITHOUT_CLASSIFICATION,// ignore this row of results! Note the early exit
Hibernate,WITHOUT_CLASSIFICATION,// Add the new node to the map so that we don't create it twice.
Hibernate,WITHOUT_CLASSIFICATION,"//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();"
Hibernate,WITHOUT_CLASSIFICATION,//not final because proxy factory creation can fail
Hibernate,WITHOUT_CLASSIFICATION,// Register the FromElement with the FROM clause now that we have the names and aliases.
Hibernate,WITHOUT_CLASSIFICATION,// superclass entity-name
Hibernate,WITHOUT_CLASSIFICATION,// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
Hibernate,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// cascade-save to collections AFTER the collection owner was saved
Hibernate,WITHOUT_CLASSIFICATION,// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...
Hibernate,WITHOUT_CLASSIFICATION,// "loaded" means the reference that is consistent  // with the current database state
Hibernate,WITHOUT_CLASSIFICATION,// cache the actual id of the object not the value of the // property-ref which might not be initialized
Hibernate,WITHOUT_CLASSIFICATION,//init the aliases after initing the constructornode
Hibernate,WITHOUT_CLASSIFICATION,// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed
Hibernate,WITHOUT_CLASSIFICATION,// Multi-param string dialect functions...
Hibernate,WITHOUT_CLASSIFICATION,// during flush we navigate the object graph to // collections and decide what to do with them
Hibernate,WITHOUT_CLASSIFICATION,// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// The 'from element' that represents the elements of the collection.
Hibernate,WITHOUT_CLASSIFICATION,// legacy behavior (with no abstract attribute specified)
Hibernate,WITHOUT_CLASSIFICATION,// Constructors are always considered scalar results.
Hibernate,WITHOUT_CLASSIFICATION,// Get ready to start adding nodes.
Hibernate,WITHOUT_CLASSIFICATION,//use the id column alias
Hibernate,WITHOUT_CLASSIFICATION,// Collection Types:
Hibernate,WITHOUT_CLASSIFICATION,// #3 - note that this is also true of "datetime - :param"...
Hibernate,WITHOUT_CLASSIFICATION,// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)
Hibernate,WITHOUT_CLASSIFICATION,//note: this affects the return value!
Hibernate,WITHOUT_CLASSIFICATION,// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction // or really any Transaction impl where the callback is local // to the Transaction instance itself since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...
Hibernate,WITHOUT_CLASSIFICATION,// NOTE : evict() operates locally only (i.e. does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated
Hibernate,WITHOUT_CLASSIFICATION,// Generate the inner join -- The elements need to be joined to the collection they are in.
Hibernate,WITHOUT_CLASSIFICATION,// otherwise perform a "deep equivalence" check...
Hibernate,WITHOUT_CLASSIFICATION,// Need to account for allowable '_' within the variant
Hibernate,WITHOUT_CLASSIFICATION,// for expected parameter type injection we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.
Hibernate,WITHOUT_CLASSIFICATION,// If there is no WHERE node make one.
Hibernate,WITHOUT_CLASSIFICATION,// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch
Hibernate,WITHOUT_CLASSIFICATION,// Add the type to the list of returned sqlResultTypes.
Hibernate,WITHOUT_CLASSIFICATION,// create one
Hibernate,WITHOUT_CLASSIFICATION,// persists don't cascade to uninitialized collections
Hibernate,WITHOUT_CLASSIFICATION,//lobs cannot be compared
Hibernate,WITHOUT_CLASSIFICATION,//Blobs are ignored by merge()
Hibernate,WITHOUT_CLASSIFICATION,// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything but it works.
Hibernate,WITHOUT_CLASSIFICATION,//value is the entity name
Hibernate,WITHOUT_CLASSIFICATION,// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
Hibernate,WITHOUT_CLASSIFICATION,//optimization
Hibernate,WITHOUT_CLASSIFICATION,// the map of batch numbers to EntityInsertAction lists
Hibernate,WITHOUT_CLASSIFICATION,//optimization //optimization
Hibernate,WITHOUT_CLASSIFICATION,// we don't need to worry about any condition in the ON clause // here (toFromFragmentString) since anything in the ON condition // is already applied to the whole query
Hibernate,WITHOUT_CLASSIFICATION,//re-snapshot
Hibernate,WITHOUT_CLASSIFICATION,// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...
Hibernate,WITHOUT_CLASSIFICATION,// for convenience to save some lookups
Hibernate,WITHOUT_CLASSIFICATION,// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed) so suspend any ongoing tx
Hibernate,WITHOUT_CLASSIFICATION,//NOTE: this is not updated when properties are fetched lazily!
Hibernate,WITHOUT_CLASSIFICATION,// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option if that //      changes is to call resolve from here; but it is //      currently un-needed overhead.
Hibernate,WITHOUT_CLASSIFICATION,//EARLY EXIT!
Hibernate,WITHOUT_CLASSIFICATION,"//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}"
Hibernate,WITHOUT_CLASSIFICATION,//This solution would allow us to eliminate the owner arg to disassemble() but //what if the collection was null and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();
Hibernate,WITHOUT_CLASSIFICATION,//xml is the entity name
Hibernate,WITHOUT_CLASSIFICATION,//named query parameter
Hibernate,WITHOUT_CLASSIFICATION,//tolerates nulls
Hibernate,WITHOUT_CLASSIFICATION,// check to see if our "propPath" actually // represents a property on the persister
Hibernate,WITHOUT_CLASSIFICATION,// Add the token to the AST.
Hibernate,WITHOUT_CLASSIFICATION,// Use the table fromElement and the property name to get the array of column names.
Hibernate,WITHOUT_CLASSIFICATION,// Set up the cache factory
Hibernate,WITHOUT_CLASSIFICATION,// we need to strip off the embedded parens so that sql-gen does not double these up
Hibernate,WITHOUT_CLASSIFICATION,//memory optimization
Hibernate,WITHOUT_CLASSIFICATION,/*sqlResultTypeList*/
Hibernate,WITHOUT_CLASSIFICATION,// If this is an implied join in a from element then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).
Hibernate,WITHOUT_CLASSIFICATION,// metaType is assumed to be single-column type
Hibernate,WITHOUT_CLASSIFICATION,// End unit of work
Hibernate,WITHOUT_CLASSIFICATION,// ROW ID
Hibernate,WITHOUT_CLASSIFICATION,//MULTITABLES
Hibernate,WITHOUT_CLASSIFICATION,"//			final List extendsQueue"
Hibernate,WITHOUT_CLASSIFICATION,// Make sure JBC doesn't look one up
Hibernate,WITHOUT_CLASSIFICATION,// Get all the select expressions (that we just generated) and render the select.
Hibernate,WITHOUT_CLASSIFICATION,// visit width-first then depth
Hibernate,WITHOUT_CLASSIFICATION,// If the uresolved property path isn't set yet just use the property name.
Hibernate,WITHOUT_CLASSIFICATION,// Look through the FromElement's children to find any collections of values that should be fetched...
Hibernate,WITHOUT_CLASSIFICATION,//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...
Hibernate,WITHOUT_CLASSIFICATION,// collections of values
Hibernate,WITHOUT_CLASSIFICATION,// copied from Session:
Hibernate,WITHOUT_CLASSIFICATION,// For an explicit many-to-many relationship add a second join from the intermediate  // (many-to-many) table to the destination table.  Also make sure that the from element's  // idea of the destination is the destination table.
Hibernate,WITHOUT_CLASSIFICATION,// this should not happen since the DTD prevents it
Hibernate,WITHOUT_CLASSIFICATION,// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing
Hibernate,WITHOUT_CLASSIFICATION,// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many
Hibernate,WITHOUT_CLASSIFICATION,// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT
Hibernate,WITHOUT_CLASSIFICATION,//check basic level one nullablilty
Hibernate,WITHOUT_CLASSIFICATION,// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx so they should not hold the // lock for long.  Not caching the query result is OK since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.
Hibernate,WITHOUT_CLASSIFICATION,//values is not null and is checkable we'll look deeper
Hibernate,WITHOUT_CLASSIFICATION,// Possibly handle :something parameters for the query ?
Hibernate,WITHOUT_CLASSIFICATION,//for non null args check for components and elements containing components
Hibernate,WITHOUT_CLASSIFICATION,// If we want to handle it bidirectional and detached we also need to load this // collection with an eager outer-join fetch this time with Criteria and not HQL:
Hibernate,WITHOUT_CLASSIFICATION,//cache the hashcode
Hibernate,WITHOUT_CLASSIFICATION,"/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/"
Hibernate,WITHOUT_CLASSIFICATION,//persistent collections may have components
Hibernate,WITHOUT_CLASSIFICATION,// We have the JBCWriteMutex so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again but since we are reading the // values to write to JBC right now we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us and we'll then // overwrite that later data in JBC.  But all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).
Hibernate,WITHOUT_CLASSIFICATION,//test out the optimizer:
Hibernate,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.VARCHAR 16777215 ""mediumtext"" );"
Hibernate,WITHOUT_CLASSIFICATION,// IDENT might be the name of a class.
Hibernate,WITHOUT_CLASSIFICATION,// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead plus we // spread issue #1 above around the cluster
Hibernate,WITHOUT_CLASSIFICATION,//TODO!!!
Hibernate,WITHOUT_CLASSIFICATION,// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory then simply injects them as it // encounters them.
Hibernate,WITHOUT_CLASSIFICATION,//st.setTimestamp( index  new Timestamp( cal.getTimeInMillis() ) cal ); //JDK 1.5 only
Hibernate,WITHOUT_CLASSIFICATION,//arbitrary on clause ignored!!
Hibernate,WITHOUT_CLASSIFICATION,//st.setDate( index  new Date( cal.getTimeInMillis() ) cal ); //JDK 1.5 only
Hibernate,WITHOUT_CLASSIFICATION,// from javax.naming.Referenceable
Hibernate,WITHOUT_CLASSIFICATION,// both are Timestamps
Hibernate,WITHOUT_CLASSIFICATION,// First collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!
Hibernate,WITHOUT_CLASSIFICATION,// at least one is a plain old Date
Hibernate,WITHOUT_CLASSIFICATION,//swallow it (the transaction _was_ successful or successfully rolled back)
Hibernate,WITHOUT_CLASSIFICATION,//check for all components values in the collection
Hibernate,WITHOUT_CLASSIFICATION,// after *all* persisters and named queries are registered
Hibernate,WITHOUT_CLASSIFICATION,//do the test
Hibernate,WITHOUT_CLASSIFICATION,// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// If close() is called guarantee unbind()
Hibernate,WITHOUT_CLASSIFICATION,// or BYTE // or TEXT? // or MONEY
Hibernate,WITHOUT_CLASSIFICATION,//noop
Hibernate,WITHOUT_CLASSIFICATION,"//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {"
Hibernate,WITHOUT_CLASSIFICATION,// if the corresponding SQL value is NULL the reader we got is NULL as well
Hibernate,WITHOUT_CLASSIFICATION,// If there is no data type for this node and we're at the end of the path (top most dot node) then // this might be a Java constant.
Hibernate,WITHOUT_CLASSIFICATION,// Fetch Reader content up to the end - and put characters in a StringBuffer
Hibernate,WITHOUT_CLASSIFICATION,// Return StringBuffer content as a large String
Hibernate,WITHOUT_CLASSIFICATION,// The where clause was added to eliminate this statement from Brute Force Searches.
Hibernate,WITHOUT_CLASSIFICATION,//or Types.LONGVARCHAR?
Hibernate,WITHOUT_CLASSIFICATION,//TODO
Hibernate,WITHOUT_CLASSIFICATION,// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
Hibernate,WITHOUT_CLASSIFICATION,// Forcefully remove leading ands from where fragments; the grammar will // handle adding them
Hibernate,WITHOUT_CLASSIFICATION,// for non-arrays we don't need to know the element class //elementType.returnedClass();
Hibernate,WITHOUT_CLASSIFICATION,// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested
Hibernate,WITHOUT_CLASSIFICATION,//different nullability rules for pk/fk
Hibernate,WITHOUT_CLASSIFICATION,// if the types report logical equivalence return true...
Hibernate,WITHOUT_CLASSIFICATION,//cache this
Hibernate,WITHOUT_CLASSIFICATION,// for a subquery the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated) use the given alias
Hibernate,WITHOUT_CLASSIFICATION,//only really need new array during semiresolve!
Hibernate,WITHOUT_CLASSIFICATION,// classic translator does not support collection of ordinal // param metadata
Hibernate,WITHOUT_CLASSIFICATION,//unwrap it
Hibernate,WITHOUT_CLASSIFICATION,// an unfetched association can only point to // an entity that already exists in the db
Hibernate,WITHOUT_CLASSIFICATION,// here we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases
Hibernate,WITHOUT_CLASSIFICATION,// let the interceptor inspect the instance to decide
Hibernate,WITHOUT_CLASSIFICATION,"/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */"
Hibernate,WITHOUT_CLASSIFICATION,// let the persister inspect the instance to decide
Hibernate,WITHOUT_CLASSIFICATION,// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//TODO!!!!!!!
Hibernate,WITHOUT_CLASSIFICATION,// Create a new FILTERS node as a parent of all filters
Hibernate,WITHOUT_CLASSIFICATION,// if there is no TM configured we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.
Hibernate,WITHOUT_CLASSIFICATION,// Establish the region root node with a non-locking data version
Hibernate,WITHOUT_CLASSIFICATION,//public Object instantiate(Object parent SessionImplementor session) throws HibernateException;
Hibernate,WITHOUT_CLASSIFICATION,//nothing to do
Hibernate,WITHOUT_CLASSIFICATION,// we use the assumed value if there is one to avoid hitting // the database
Hibernate,WITHOUT_CLASSIFICATION,// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...
Hibernate,WITHOUT_CLASSIFICATION,//int count = 0;
Hibernate,WITHOUT_CLASSIFICATION,// putfield // new value of the field
Hibernate,WITHOUT_CLASSIFICATION,//not really necessary I guess...
Hibernate,WITHOUT_CLASSIFICATION,//Clobs are ignored by merge() operation
Hibernate,WITHOUT_CLASSIFICATION,//the first key found after the given key
Hibernate,WITHOUT_CLASSIFICATION,// collections cannot be compared
Hibernate,WITHOUT_CLASSIFICATION,//remember the uk value
Hibernate,WITHOUT_CLASSIFICATION,//processCollectionProperty(token q.getCollectionPersister(collectionRole) collectionName);
Hibernate,WITHOUT_CLASSIFICATION,//we must use the "remembered" uk value since it is  //not available from the EntityEntry during assembly
Hibernate,WITHOUT_CLASSIFICATION,// collections don't dirty an unversioned parent entity
Hibernate,WITHOUT_CLASSIFICATION,// return false;
Hibernate,WITHOUT_CLASSIFICATION,// This just handles a particular case of component // projection perhaps get rid of it and throw an exception
Hibernate,WITHOUT_CLASSIFICATION,//NOTE: we avoid joining to the next table if the named property is just the foreign key value
Hibernate,WITHOUT_CLASSIFICATION,// the key is the owning entity itself so get the ID from the key
Hibernate,WITHOUT_CLASSIFICATION,//checkForEnd = false;
Hibernate,WITHOUT_CLASSIFICATION,//ignore subselect keywords
Hibernate,WITHOUT_CLASSIFICATION,// copy elements into newly empty target collection
Hibernate,WITHOUT_CLASSIFICATION,//end of array start filling again from start
Hibernate,WITHOUT_CLASSIFICATION,// for a null target or a target which is the same as the original we // need to put the merged elements in a new collection
Hibernate,WITHOUT_CLASSIFICATION,//we ran out of keys to try
Hibernate,WITHOUT_CLASSIFICATION,// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...
Hibernate,WITHOUT_CLASSIFICATION,//the first id found after the given id
Hibernate,WITHOUT_CLASSIFICATION,//we ran out of ids to try
Hibernate,WITHOUT_CLASSIFICATION,// get the elements back into the target making sure to handle dirty flag
Hibernate,WITHOUT_CLASSIFICATION,// check if collection is currently being loaded
Hibernate,WITHOUT_CLASSIFICATION,// check if it is already completely loaded but unowned
Hibernate,WITHOUT_CLASSIFICATION,// initialize this collection
Hibernate,WITHOUT_CLASSIFICATION,// create a new collection wrapper to be initialized later
Hibernate,WITHOUT_CLASSIFICATION,// Some JDBC drivers erroneously return an empty array here for a null DB value :/
Hibernate,WITHOUT_CLASSIFICATION,//cannot batch fetch by unique key (property-ref associations)
Hibernate,WITHOUT_CLASSIFICATION,// we already know current is not null...
Hibernate,WITHOUT_CLASSIFICATION,//the owner of the association is not the owner of the id
Hibernate,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------- Constructors
Hibernate,WITHOUT_CLASSIFICATION,// ----------------------------------------------------- Instance Variables
Hibernate,WITHOUT_CLASSIFICATION,// --------------------------------------------------------- Public Methods
Hibernate,WITHOUT_CLASSIFICATION,// Compare the two maps for equality
Hibernate,WITHOUT_CLASSIFICATION,// Simple tests that require no synchronization
Hibernate,WITHOUT_CLASSIFICATION,//Sybase fail if we don't do that sigh...
Hibernate,WITHOUT_CLASSIFICATION,// stream closed in the finally
Hibernate,WITHOUT_CLASSIFICATION,// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
Hibernate,WITHOUT_CLASSIFICATION,// try to "pretty print" it
Hibernate,WITHOUT_CLASSIFICATION,// otherwise just dump it
Hibernate,WITHOUT_CLASSIFICATION,//its an interface so we can't really tell anything...
Hibernate,WITHOUT_CLASSIFICATION,// use default behavior
Hibernate,WITHOUT_CLASSIFICATION,//NOTE: early return
Hibernate,WITHOUT_CLASSIFICATION,// we want to be able to just use the defaults // if JNDI environment properties are not supplied // so don't put null in anywhere
Hibernate,WITHOUT_CLASSIFICATION,// Clone //-----------------------------------------------------------------------
Hibernate,WITHOUT_CLASSIFICATION,// Serialize //-----------------------------------------------------------------------
Hibernate,WITHOUT_CLASSIFICATION,// warning: can cause a recursive calls! (proxy initialization)
Hibernate,WITHOUT_CLASSIFICATION,/* static methods only - hide constructor */
Hibernate,WITHOUT_CLASSIFICATION,/*&& !('_'==character)*/
Hibernate,WITHOUT_CLASSIFICATION,// returnign null!
Hibernate,WITHOUT_CLASSIFICATION,// includes last '.'
Hibernate,WITHOUT_CLASSIFICATION,// +1 to include the following '.'
Hibernate,WITHOUT_CLASSIFICATION,// first time we find match!
Hibernate,WITHOUT_CLASSIFICATION,// entityNames may now include slashes for the representations //classname may be an inner class
Hibernate,WITHOUT_CLASSIFICATION,// wrapped iterators
Hibernate,WITHOUT_CLASSIFICATION,// index of current iterator in the wrapped iterators array
Hibernate,WITHOUT_CLASSIFICATION,// the current iterator
Hibernate,WITHOUT_CLASSIFICATION,// the last used iterator
Hibernate,WITHOUT_CLASSIFICATION,//it was a boolean expression
Hibernate,WITHOUT_CLASSIFICATION,// call this before any Iterator method to make sure that the current Iterator // is not exhausted
Hibernate,WITHOUT_CLASSIFICATION,//doable if needed
Hibernate,WITHOUT_CLASSIFICATION,// set last used iterator here in case the user calls remove // before calling hasNext() or next() (although they shouldn't)
Hibernate,WITHOUT_CLASSIFICATION,// peek ahead
Hibernate,WITHOUT_CLASSIFICATION,// if we reach the end of the string w/o finding the // matching end that is an exception
Hibernate,WITHOUT_CLASSIFICATION,// there were no queued additions // and the role has a cache
Hibernate,WITHOUT_CLASSIFICATION,// Print page
Hibernate,WITHOUT_CLASSIFICATION,// and this is not a forced initialization during flush
Hibernate,WITHOUT_CLASSIFICATION,// we have a placeholder spin forward till we find the end
Hibernate,WITHOUT_CLASSIFICATION,// make sure spinning forward did not put us past the end of the buffer...
Hibernate,WITHOUT_CLASSIFICATION,// First try to locate this resource through the current // context classloader.
Hibernate,WITHOUT_CLASSIFICATION,// Next try to locate this resource through this class's classloader
Hibernate,WITHOUT_CLASSIFICATION,// Next try to locate this resource through the system classloader
Hibernate,WITHOUT_CLASSIFICATION,// Anywhere else we should look?
Hibernate,WITHOUT_CLASSIFICATION,// would need an IdentitySet for this!
Hibernate,WITHOUT_CLASSIFICATION,//Arrays.asList doesn't do primitive arrays
Hibernate,WITHOUT_CLASSIFICATION,// aload_0
Hibernate,WITHOUT_CLASSIFICATION,//faster?
Hibernate,WITHOUT_CLASSIFICATION,//pass the entity-name if not a collection-id
Hibernate,WITHOUT_CLASSIFICATION,// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement
Hibernate,WITHOUT_CLASSIFICATION,// the name of a class
Hibernate,WITHOUT_CLASSIFICATION,// Its the listener class name
Hibernate,WITHOUT_CLASSIFICATION,//allow 987654321
Hibernate,WITHOUT_CLASSIFICATION,// default to element set if no elements() specified
Hibernate,WITHOUT_CLASSIFICATION,// look for the instance by uuid
Hibernate,WITHOUT_CLASSIFICATION,// first lets determine whether to apply cglib or javassist based instrumentation...
Hibernate,WITHOUT_CLASSIFICATION,// Make sure we don't override previous set values
Hibernate,WITHOUT_CLASSIFICATION,//entirely optional!!
Hibernate,WITHOUT_CLASSIFICATION,// Its the listener instance (or better be)
Hibernate,WITHOUT_CLASSIFICATION,//readResolveObject
Hibernate,WITHOUT_CLASSIFICATION,//cfg.setProperty("hibernate.show_sql" "true");
Hibernate,WITHOUT_CLASSIFICATION,// Defensive convenience methods
Hibernate,WITHOUT_CLASSIFICATION,// Make sure you log the exception as it might be swallowed
Hibernate,WITHOUT_CLASSIFICATION,// Begin unit of work
Hibernate,WITHOUT_CLASSIFICATION,// Write HTML header
Hibernate,WITHOUT_CLASSIFICATION,// Handle actions
Hibernate,WITHOUT_CLASSIFICATION,// Start the session to be used for this request
Hibernate,WITHOUT_CLASSIFICATION,// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// make the session available to the session factory's "current context"
Hibernate,WITHOUT_CLASSIFICATION,// remove session from "current context"
Hibernate,WITHOUT_CLASSIFICATION,// Eager fetch the collection so we can use it detached
Hibernate,WITHOUT_CLASSIFICATION,"/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode(""participants"" FetchMode.JOIN)                .add( Expression.eq(""id"" eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */"
Hibernate,WITHOUT_CLASSIFICATION,// End of first unit of work
Hibernate,WITHOUT_CLASSIFICATION,// or bidirectional safety method setting both sides: aPerson.addToEvent(anEvent);
Hibernate,WITHOUT_CLASSIFICATION,// Begin second unit of work
Hibernate,WITHOUT_CLASSIFICATION,// Reattachment of aPerson
Hibernate,WITHOUT_CLASSIFICATION,// The getEmailAddresses() might trigger a lazy load of the collection
Hibernate,WITHOUT_CLASSIFICATION,// We need our tm so get it now and avoid doing other work // if there is a problem
Hibernate,WITHOUT_CLASSIFICATION,// JBC put a version in the node when it created as part of // some internal operation. We are always newer but if // the JBC version is > 1 something odd has happened
Hibernate,WITHOUT_CLASSIFICATION,// Not null if the Isolation level has been specified in the configuration file. // Otherwise it is left to the Driver's default value.
Hibernate,WITHOUT_CLASSIFICATION,// Configured outside of Hibernate (i.e. Servlet container or Java Bean Container // already has Proxool pools running and this provider is to just borrow one of these
Hibernate,WITHOUT_CLASSIFICATION,// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// the cache of the actual plans...
Hibernate,WITHOUT_CLASSIFICATION,// (AS is always optional for consistency with SQL/OQL)
Hibernate,WITHOUT_CLASSIFICATION,// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction
Hibernate,WITHOUT_CLASSIFICATION,// is a primitive type // invokespecial
Hibernate,WITHOUT_CLASSIFICATION,// Start performing the updates
Hibernate,WITHOUT_CLASSIFICATION,// array of primitive type // do nothing
Hibernate,WITHOUT_CLASSIFICATION,// jdbc params are 1-based
Hibernate,WITHOUT_CLASSIFICATION,// don't care...
Hibernate,WITHOUT_CLASSIFICATION,// on the inverse it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.
Hibernate,WITHOUT_CLASSIFICATION,// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// handle a path expression or class name that // appears at the start in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style
Hibernate,WITHOUT_CLASSIFICATION,//important: reuse the same event instances for performance!
Hibernate,WITHOUT_CLASSIFICATION,// don't care about other param types here just those explicitly user-defined...
Hibernate,WITHOUT_CLASSIFICATION,//handle <= >= != is not not between not in
Hibernate,WITHOUT_CLASSIFICATION,// named parameter
Hibernate,WITHOUT_CLASSIFICATION,// could be either an ordinal or JPA-positional parameter
Hibernate,WITHOUT_CLASSIFICATION,// strip the " where "
Hibernate,WITHOUT_CLASSIFICATION,// a peek ahead showed this as an JPA-positional parameter
Hibernate,WITHOUT_CLASSIFICATION,// make sure this "name" is an integral
Hibernate,WITHOUT_CLASSIFICATION,// at the very least cleanup the data :)
Hibernate,WITHOUT_CLASSIFICATION,//60 seconds
Hibernate,WITHOUT_CLASSIFICATION,//cannot be instantiated
Hibernate,WITHOUT_CLASSIFICATION,// transfer an explicitly defined entity name // handle the lazy attribute
Hibernate,WITHOUT_CLASSIFICATION,//keep the behavior consistent even for boundary usages
Hibernate,WITHOUT_CLASSIFICATION,// perform the actual work
Hibernate,WITHOUT_CLASSIFICATION,//do the failfast put outside the scope of the JTA txn
Hibernate,WITHOUT_CLASSIFICATION,// get meta's from // <joined-subclass>
Hibernate,WITHOUT_CLASSIFICATION,//ignore!
Hibernate,WITHOUT_CLASSIFICATION,// parameters on the property mapping should // override parameters in the typedef
Hibernate,WITHOUT_CLASSIFICATION,//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many
Hibernate,WITHOUT_CLASSIFICATION,// create the node initially with the param name so that it shows // appropriately in the "original text" attribute
Hibernate,WITHOUT_CLASSIFICATION,// DYNAMIC INSERT
Hibernate,WITHOUT_CLASSIFICATION,// so we "clock over" on the first invocation
Hibernate,WITHOUT_CLASSIFICATION,// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// finally handle the exception
Hibernate,WITHOUT_CLASSIFICATION,// a "detached" collection that belonged to a different entity
Hibernate,WITHOUT_CLASSIFICATION,"//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}"
Hibernate,WITHOUT_CLASSIFICATION,//element //index -> id
Hibernate,WITHOUT_CLASSIFICATION,// note that it might be better to iterate the snapshot but this is safe // assuming the user implements equals() properly as required by the Set // contract!
Hibernate,WITHOUT_CLASSIFICATION,// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization
Hibernate,WITHOUT_CLASSIFICATION,//saveOrUpdateCopy() is deprecated!
Hibernate,WITHOUT_CLASSIFICATION,// Set it!
Hibernate,WITHOUT_CLASSIFICATION,// collectionPersister should not be null but we don't want to throw // an exception if it is null
Hibernate,WITHOUT_CLASSIFICATION,// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise this is just an ident.
Hibernate,WITHOUT_CLASSIFICATION,// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.
Hibernate,WITHOUT_CLASSIFICATION,//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
Hibernate,WITHOUT_CLASSIFICATION,// otherwise a null or brand new collection // this will also (inefficiently) handle arrays which // have no snapshot so we can't do any better //processArrayOrNewCollection(collection type);
Hibernate,WITHOUT_CLASSIFICATION,// a "detached" collection that originally belonged to the same entity
Hibernate,WITHOUT_CLASSIFICATION,// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list
Hibernate,WITHOUT_CLASSIFICATION,"//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed "
Hibernate,WITHOUT_CLASSIFICATION,"// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY        ""binary($1)""); // changed 08-11-2005 jsl"
Hibernate,WITHOUT_CLASSIFICATION,// See if the second lookahed token can be an identifier.
Hibernate,WITHOUT_CLASSIFICATION,// Case 2: The current token is after FROM and before '.'.
Hibernate,WITHOUT_CLASSIFICATION,// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim" new SQLFunctionTemplate(Hibernate.STRING "trim(?1 ?2 from ?3)") );
Hibernate,WITHOUT_CLASSIFICATION,// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type
Hibernate,WITHOUT_CLASSIFICATION,// (EQ NULL b) => (IS_NULL b)
Hibernate,WITHOUT_CLASSIFICATION,// Create nodes that track line and column number.
Hibernate,WITHOUT_CLASSIFICATION,// Add NOT if it's negated.
Hibernate,WITHOUT_CLASSIFICATION,// (EQ a NULL) => (IS_NULL a)
Hibernate,WITHOUT_CLASSIFICATION,// The path AST should be a DotNode and it should have been evaluated already.
Hibernate,WITHOUT_CLASSIFICATION,//Force a substitution!
Hibernate,WITHOUT_CLASSIFICATION,// if // if // Otherwise handle the error normally.
Hibernate,WITHOUT_CLASSIFICATION,// the database now holds a lock + the object is flushed from the cache // so release the soft lock
Hibernate,WITHOUT_CLASSIFICATION,// now update the object .. has to be outside the main if block above (because of collections)
Hibernate,WITHOUT_CLASSIFICATION,//Named Queries:
Hibernate,WITHOUT_CLASSIFICATION,// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed
Hibernate,WITHOUT_CLASSIFICATION,//grab its state saved at deletion
Hibernate,WITHOUT_CLASSIFICATION,// grab its current state
Hibernate,WITHOUT_CLASSIFICATION,// this will throw an error if there's something wrong.
Hibernate,WITHOUT_CLASSIFICATION,// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.
Hibernate,WITHOUT_CLASSIFICATION,// if the natural-id is marked as non-mutable it is not retrieved during a // normal database-snapshot operation...
Hibernate,WITHOUT_CLASSIFICATION,// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)
Hibernate,WITHOUT_CLASSIFICATION,//slice to get the columns for this component //property
Hibernate,WITHOUT_CLASSIFICATION,// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!
Hibernate,WITHOUT_CLASSIFICATION,// substitutes into values by side-effect
Hibernate,WITHOUT_CLASSIFICATION,// give the Interceptor a chance to process property values if the properties // were modified by the Interceptor we need to set them back to the object
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (EQ a b) ) => (NE a b)
Hibernate,WITHOUT_CLASSIFICATION,// compare to cached state (ignoring collections unless versioned)
Hibernate,WITHOUT_CLASSIFICATION,// if it was dirtied by a collection only
Hibernate,WITHOUT_CLASSIFICATION,// check nullability but do not perform command execute // we'll use scheduled updates for that.
Hibernate,WITHOUT_CLASSIFICATION,// This 'dot' expression now refers to the resulting from element.
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (LIKE a b) ) => (NOT_LIKE a b)
Hibernate,WITHOUT_CLASSIFICATION,// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.
Hibernate,WITHOUT_CLASSIFICATION,// detached collection wrappers that get found + reattached // during flush shouldn't be ignored
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
Hibernate,WITHOUT_CLASSIFICATION,// The unique property value represented here may or may not be // serializable so we do an explicit check here in order to generate // a better error message
Hibernate,WITHOUT_CLASSIFICATION,// if the version of a newly instantiated object is not the same // as the version seed value use that as the unsaved-value
Hibernate,WITHOUT_CLASSIFICATION,// ie. we never have to null out a reference to // an uninitialized proxy
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (NOT_LIKE a b) ) => (LIKE a b)
Hibernate,WITHOUT_CLASSIFICATION,//give the Interceptor a chance to modify property values
Hibernate,WITHOUT_CLASSIFICATION,//now we might need to recalculate the dirtyProperties array
Hibernate,WITHOUT_CLASSIFICATION,//use the current version
Hibernate,WITHOUT_CLASSIFICATION,// object loaded by update()
Hibernate,WITHOUT_CLASSIFICATION,// ignore this row the collection is in process of // being loaded somewhere further "up" the stack
Hibernate,WITHOUT_CLASSIFICATION,"// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently not yet used..."
Hibernate,WITHOUT_CLASSIFICATION,// dirty check against the usual snapshot of the entity
Hibernate,WITHOUT_CLASSIFICATION,// this implementation is supposed to tolerate incorrect unsaved-value // mappings for the purpose of backward-compatibility
Hibernate,WITHOUT_CLASSIFICATION,// wrap up any new collections directly referenced by the object // or its components
Hibernate,WITHOUT_CLASSIFICATION,// skip this check for composite-ids relating to dom4j entity-mode; // alternatively we could add a check to make sure the incoming id value is // an instance of Element...
Hibernate,WITHOUT_CLASSIFICATION,// upgrade the lock if necessary: //lock(result lockMode);
Hibernate,WITHOUT_CLASSIFICATION,// now any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (NE a b) ) => (EQ a b)
Hibernate,WITHOUT_CLASSIFICATION,//we must clone embedded composite identifiers or  //we will get back the same instance that we pass in
Hibernate,WITHOUT_CLASSIFICATION,// Sub-insertions should occur before containing insertion so // Try to do the callback now
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (LE a b) ) => (GT a b)
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (GE a b) ) => (LT a b)
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (LT a b) ) => (GE a b)
Hibernate,WITHOUT_CLASSIFICATION,//the entity is not associated with the session so //try interceptor and unsaved-value
Hibernate,WITHOUT_CLASSIFICATION,// ... and the expected token type was an identifier then:
Hibernate,WITHOUT_CLASSIFICATION,// igndore it...
Hibernate,WITHOUT_CLASSIFICATION,// [jsd] The fix for HHH-558...
Hibernate,WITHOUT_CLASSIFICATION,// If the token can tell us if it could be an identifier...
Hibernate,WITHOUT_CLASSIFICATION,// we are now at a new tree level
Hibernate,WITHOUT_CLASSIFICATION,// dirty check against the database snapshot if possible/necessary
Hibernate,WITHOUT_CLASSIFICATION,// the Interceptor handled the dirty checking
Hibernate,WITHOUT_CLASSIFICATION,// Use the delegate.
Hibernate,WITHOUT_CLASSIFICATION,// get meta's from <subclass>
Hibernate,WITHOUT_CLASSIFICATION,// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// get the id from the object
Hibernate,WITHOUT_CLASSIFICATION,// do the put outside the scope of the JTA txn
Hibernate,WITHOUT_CLASSIFICATION,//what is the version on the database?
Hibernate,WITHOUT_CLASSIFICATION,/// HHH-2378
Hibernate,WITHOUT_CLASSIFICATION,//will result in a SQL UPDATE:
Hibernate,WITHOUT_CLASSIFICATION,//else do nothing (don't even reassociate object!)
Hibernate,WITHOUT_CLASSIFICATION,// no existing row - do an insert
Hibernate,WITHOUT_CLASSIFICATION,// --- Inner classes (moved here from sql-gen.g) ---
Hibernate,WITHOUT_CLASSIFICATION,// reference type
Hibernate,WITHOUT_CLASSIFICATION,// should be the first but just to be safe...
Hibernate,WITHOUT_CLASSIFICATION,//return a proxy if appropriate
Hibernate,WITHOUT_CLASSIFICATION,// some filters affecting the collection are enabled on the session so do not do the put into the cache.
Hibernate,WITHOUT_CLASSIFICATION,// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.
Hibernate,WITHOUT_CLASSIFICATION,// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed
Hibernate,WITHOUT_CLASSIFICATION,// ... and the token could be an identifer and the error is // a mismatched token error ...
Hibernate,WITHOUT_CLASSIFICATION,// If a where clause was specified in the update/delete query use it to limit the // returned ids here...
Hibernate,WITHOUT_CLASSIFICATION,// Default implementation: // If this node has a data type and that data type is not an association then this is scalar.
Hibernate,WITHOUT_CLASSIFICATION,// Resolve the LHS fully generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.
Hibernate,WITHOUT_CLASSIFICATION,// If the propertyType is null and there isn't a parent just // stop now... there was a problem resolving the node anyway.
Hibernate,WITHOUT_CLASSIFICATION,//We do not look for an existing join on the same path because //it makes sense to join twice on the same collection role
Hibernate,WITHOUT_CLASSIFICATION,// return new uninitialized proxy
Hibernate,WITHOUT_CLASSIFICATION,// this object was already loaded
Hibernate,WITHOUT_CLASSIFICATION,// Entity was found in second-level cache...
Hibernate,WITHOUT_CLASSIFICATION,// intializes result by side-effect
Hibernate,WITHOUT_CLASSIFICATION,// NOTE : ( max - 1 ) because first is zero-based while max is not...
Hibernate,WITHOUT_CLASSIFICATION,// A shallow query is ok (although technically there should be no fetching here...)
Hibernate,WITHOUT_CLASSIFICATION,// Delegate to the QueryLoader...
Hibernate,WITHOUT_CLASSIFICATION,// Remember the parameters for the compilation.
Hibernate,WITHOUT_CLASSIFICATION,// -- Package local methods for the QueryLoader delegate --
Hibernate,WITHOUT_CLASSIFICATION,// double
Hibernate,WITHOUT_CLASSIFICATION,//now done in EntityIdentityInsertAction //persister.setIdentifier( entity id source.getEntityMode() );
Hibernate,WITHOUT_CLASSIFICATION,// Use the token as an identifier.
Hibernate,WITHOUT_CLASSIFICATION,//some statistics
Hibernate,WITHOUT_CLASSIFICATION,//safe from concurrent modification because of how entryList() is implemented on IdentityMap
Hibernate,WITHOUT_CLASSIFICATION,// Transform the tree.
Hibernate,WITHOUT_CLASSIFICATION,// Parse the query string into an HQL AST.
Hibernate,WITHOUT_CLASSIFICATION,// we do not actually propogate ANTLRExceptions as a cause so // log it here for diagnostic purposes
Hibernate,WITHOUT_CLASSIFICATION,// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()
Hibernate,WITHOUT_CLASSIFICATION,//only needed during compilation phase...
Hibernate,WITHOUT_CLASSIFICATION,// Update the status of the object and if necessary schedule an update
Hibernate,WITHOUT_CLASSIFICATION,// Schedule updates to collections:
Hibernate,WITHOUT_CLASSIFICATION,// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations
Hibernate,WITHOUT_CLASSIFICATION,//the database has changed now so the subselect results need to be invalidated
Hibernate,WITHOUT_CLASSIFICATION,//if the collection is dereferenced remove from the session cache //iter.remove(); //does not work since the entrySet is not backed by the set
Hibernate,WITHOUT_CLASSIFICATION,// PHASE 1 : Parse the HQL into an AST.
Hibernate,WITHOUT_CLASSIFICATION,// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity
Hibernate,WITHOUT_CLASSIFICATION,//get a snapshot
Hibernate,WITHOUT_CLASSIFICATION,"/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/"
Hibernate,WITHOUT_CLASSIFICATION,// right represents a joins originating from left...
Hibernate,WITHOUT_CLASSIFICATION,// If the query is already compiled skip the compilation.
Hibernate,WITHOUT_CLASSIFICATION,// remember that ordinal parameters numbers are 1-based!!!
Hibernate,WITHOUT_CLASSIFICATION,// all clear
Hibernate,WITHOUT_CLASSIFICATION,// Ignore the token class name parameter and use a specific token class.
Hibernate,WITHOUT_CLASSIFICATION,//this is a query and we are loading multiple instances of the same collection role
Hibernate,WITHOUT_CLASSIFICATION,// EARLY EXIT!!!
Hibernate,WITHOUT_CLASSIFICATION,// before any callbacks etc so subdeletions see that this deletion happened first
Hibernate,WITHOUT_CLASSIFICATION,// Ensures that containing deletions happen before sub-deletions
Hibernate,WITHOUT_CLASSIFICATION,// cascade-delete to collections BEFORE the collection owner is deleted
Hibernate,WITHOUT_CLASSIFICATION,// cascade-delete to many-to-one AFTER the parent was deleted
Hibernate,WITHOUT_CLASSIFICATION,// if it is an initialized proxy let cascade // handle it later on
Hibernate,WITHOUT_CLASSIFICATION,//assign the requested id to the proxy *before* //reassociating the proxy
Hibernate,WITHOUT_CLASSIFICATION,// an uninitialized proxy noop don't even need to // return an id since it is never a save()
Hibernate,WITHOUT_CLASSIFICATION,//initialize properties of the event:
Hibernate,WITHOUT_CLASSIFICATION,//return the id in the event object
Hibernate,WITHOUT_CLASSIFICATION,//TRANSIENT or DELETED
Hibernate,WITHOUT_CLASSIFICATION,// assume this is a newly instantiated transient object // which should be saved rather than updated
Hibernate,WITHOUT_CLASSIFICATION,// this is a transient object with existing persistent state not loaded by the session
Hibernate,WITHOUT_CLASSIFICATION,// check two "adjecent" nodes at the top of the from-clause tree
Hibernate,WITHOUT_CLASSIFICATION,//cachedState
Hibernate,WITHOUT_CLASSIFICATION,//a "detached" collection!
Hibernate,WITHOUT_CLASSIFICATION,// if the collection belonged to a different entity // clean up the existing state of the collection
Hibernate,WITHOUT_CLASSIFICATION,//log.debug( "calling onLoad()" );
Hibernate,WITHOUT_CLASSIFICATION,// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session
Hibernate,WITHOUT_CLASSIFICATION,//ie. the entity came in from update()
Hibernate,WITHOUT_CLASSIFICATION,//we need to check even if it was not initialized because of delayed adds!
Hibernate,WITHOUT_CLASSIFICATION,//NOTE: EARLY EXIT!
Hibernate,WITHOUT_CLASSIFICATION,// if template is null we just write the function out as it appears in the hql statement
Hibernate,WITHOUT_CLASSIFICATION,// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// find any entities that are still transient after retry
Hibernate,WITHOUT_CLASSIFICATION,// Initialize SQL nodes here.
Hibernate,WITHOUT_CLASSIFICATION,// Check the persistence context for an entry relating to this // entity to be merged...
Hibernate,WITHOUT_CLASSIFICATION,//DELETED
Hibernate,WITHOUT_CLASSIFICATION,// Set the unresolved path in this node and the parent. // Set the text for the parent.
Hibernate,WITHOUT_CLASSIFICATION,// 60 second lock timeout
Hibernate,WITHOUT_CLASSIFICATION,"/*				 * Property prop = new Property(); prop.setName(""id"");				 * prop.setPropertyAccessorName(""embedded""); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */"
Hibernate,WITHOUT_CLASSIFICATION,//before cascade!
Hibernate,WITHOUT_CLASSIFICATION,// continue...; we'll find out if it ends up not getting saved later
Hibernate,WITHOUT_CLASSIFICATION,// cascade first so that all unsaved objects get their // copy created before we actually copy
Hibernate,WITHOUT_CLASSIFICATION,// check that entity id = requestedId
Hibernate,WITHOUT_CLASSIFICATION,// Not a collection? // Return the entity property mapping.
Hibernate,WITHOUT_CLASSIFICATION,// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...
Hibernate,WITHOUT_CLASSIFICATION,// Otherwise the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.
Hibernate,WITHOUT_CLASSIFICATION,// If the first identifier in the path referrs to the class alias (not the class name) then this // is a correlated subselect.  If it's a correlated sub-select use the existing table alias.  Otherwise // generate a new one.
Hibernate,WITHOUT_CLASSIFICATION,// This uses a PathExpressionParser but notice that compound paths are not valid // only bare names and simple paths:
Hibernate,WITHOUT_CLASSIFICATION,"//		origin.addDestination(destination); // Add the query spaces."
Hibernate,WITHOUT_CLASSIFICATION,// Reset the node type because the rest of the system is expecting FROM_FRAGMENT all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.
Hibernate,WITHOUT_CLASSIFICATION,"//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();"
Hibernate,WITHOUT_CLASSIFICATION,//sqlResultTypeList.add( type ); // Generate the select expression.
Hibernate,WITHOUT_CLASSIFICATION,// If the expression list has exactly one expression and the type of the expression is a collection // then this might be a collection function such as index(c) or size(c).
Hibernate,WITHOUT_CLASSIFICATION,// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...
Hibernate,WITHOUT_CLASSIFICATION,// cascade first so that all unsaved objects get their  // copy created before we actually copy
Hibernate,WITHOUT_CLASSIFICATION,//copyValues works by reflection so explicitly mark the entity instance dirty
Hibernate,WITHOUT_CLASSIFICATION,// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.
Hibernate,WITHOUT_CLASSIFICATION,// no need to even collect this information if the persister is considered multi-table
Hibernate,WITHOUT_CLASSIFICATION,// as soon as we encounter our first letter return the substring // from that position
Hibernate,WITHOUT_CLASSIFICATION,// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object
Hibernate,WITHOUT_CLASSIFICATION,//for arrays replaceElements() may return a different reference since //the array length might not match
Hibernate,WITHOUT_CLASSIFICATION,// should not be able to reach last without maxPosition being set // unless there are no results
Hibernate,WITHOUT_CLASSIFICATION,//do not use proxiesByKey since not all //proxies that point to this session's //instances are in that collection!
Hibernate,WITHOUT_CLASSIFICATION,//this should be a call to resolve() not resolveIdentifier()  //'cos it might be a property-ref and we did not cache the //referenced value
Hibernate,WITHOUT_CLASSIFICATION,// If we have <tt>not-found="ignore"</tt> association mapped to a // formula we always need to dirty check it so we can update the // second-level cache
Hibernate,WITHOUT_CLASSIFICATION,// We now have the value of the property-ref we reference.  However // we need to dig a little deeper as that property might also be // an entity type in which case we need to resolve its identitifier
Hibernate,WITHOUT_CLASSIFICATION,//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch
Hibernate,WITHOUT_CLASSIFICATION,// PERSISTER
Hibernate,WITHOUT_CLASSIFICATION,// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start
Hibernate,WITHOUT_CLASSIFICATION,// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication
Hibernate,WITHOUT_CLASSIFICATION,// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so only increment // if the new current value is an increase
Hibernate,WITHOUT_CLASSIFICATION,// If the workspace node has null as well OK; if not we've // been modified in a non-comparable manner which we have to // treat as us being newer
Hibernate,WITHOUT_CLASSIFICATION,//maintain correct duplication if loaded in a cartesian product
Hibernate,WITHOUT_CLASSIFICATION,"/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl props.getProperty(Environment.USER) props.getProperty(Environment.PASS)			);*/"
Hibernate,WITHOUT_CLASSIFICATION,// short-circuit(s) // no new elements the old list contains only Orphans // no old elements so no Orphans neither
Hibernate,WITHOUT_CLASSIFICATION,// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place since by this time no-one else (should have) // has a reference  to the array
Hibernate,WITHOUT_CLASSIFICATION,// long
Hibernate,WITHOUT_CLASSIFICATION,// Set the existing pool flag to true
Hibernate,WITHOUT_CLASSIFICATION,// Validate that an alias name was provided to determine which pool to use
Hibernate,WITHOUT_CLASSIFICATION,// We have created the pool ourselves so shut it down
Hibernate,WITHOUT_CLASSIFICATION,//the load() which takes an entity does not pass an entityName
Hibernate,WITHOUT_CLASSIFICATION,// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma
Hibernate,WITHOUT_CLASSIFICATION,// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...
Hibernate,WITHOUT_CLASSIFICATION,//it does not refer to an alias of a projection //look for a property
Hibernate,WITHOUT_CLASSIFICATION,// do nothing for persistent instances
Hibernate,WITHOUT_CLASSIFICATION,// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//assume true since we don't really know and it doesn't matter
Hibernate,WITHOUT_CLASSIFICATION,// Show the modified AST.
Hibernate,WITHOUT_CLASSIFICATION,// NOTE : firstRow is zero-based
Hibernate,WITHOUT_CLASSIFICATION,// Initialize dirty flags for arrays + collections with composite elements // and reset reached doupdate etc.
Hibernate,WITHOUT_CLASSIFICATION,// Tell the dot node about the join type.
Hibernate,WITHOUT_CLASSIFICATION,// Among other things updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.
Hibernate,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//otherwise recreate the mapping between the collection and its key
Hibernate,WITHOUT_CLASSIFICATION,// Create a parameter specification for the collection filter...
Hibernate,WITHOUT_CLASSIFICATION,// Attach any mapping-defined "ORDER BY" fragments
Hibernate,WITHOUT_CLASSIFICATION,// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result
Hibernate,WITHOUT_CLASSIFICATION,// Make sure that the persister is versioned
Hibernate,WITHOUT_CLASSIFICATION,// for native-sql queries the param metadata is determined outside // any relation to a query plan because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set which might not be the case up-front when // param metadata would be most useful
Hibernate,WITHOUT_CLASSIFICATION,// this function has a template -> redirect output and catch the arguments
Hibernate,WITHOUT_CLASSIFICATION,// use the id assigned to the instance
Hibernate,WITHOUT_CLASSIFICATION,// if no array holder we found an unwrappered array (this can't occur // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah type);
Hibernate,WITHOUT_CLASSIFICATION,// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
Hibernate,WITHOUT_CLASSIFICATION,// If the data type is not an association type it could not have been in the FROM clause.
Hibernate,WITHOUT_CLASSIFICATION,// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically only in-db generators
Hibernate,WITHOUT_CLASSIFICATION,//first look for a reference to a projection alias
Hibernate,WITHOUT_CLASSIFICATION,// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// If there are no collection fetches then no further checks are needed
Hibernate,WITHOUT_CLASSIFICATION,// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
Hibernate,WITHOUT_CLASSIFICATION,// if a ThreadLocalSessionContext-bound session happens to get // serialized to be completely correct we need to make sure // that unbinding of that session occurs.
Hibernate,WITHOUT_CLASSIFICATION,// Make #@%$^#^&# sure no alias is applied to the table name
Hibernate,WITHOUT_CLASSIFICATION,// switch
Hibernate,WITHOUT_CLASSIFICATION,// Use the explicitly declared select expression; determine the // return types indicated by each select token
Hibernate,WITHOUT_CLASSIFICATION,// select clauses for insert statements should alwasy be treated as shallow
Hibernate,WITHOUT_CLASSIFICATION,// After that process the JOINs. // Invoke a delegate to do the work as this is farily complex.
Hibernate,WITHOUT_CLASSIFICATION,// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// simple cache of param metadata based on query string.  Ideally the // original "user-supplied query" string should be used to retreive this // metadata (i.e. not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries see // getSQLParameterMetadata() for a discussion as to why...
Hibernate,WITHOUT_CLASSIFICATION,// Alias references and identifiers use the same node class.
Hibernate,WITHOUT_CLASSIFICATION,// make a new one
Hibernate,WITHOUT_CLASSIFICATION,// these are just two unrelated table references
Hibernate,WITHOUT_CLASSIFICATION,// again both should be FromElements
Hibernate,WITHOUT_CLASSIFICATION,// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them
Hibernate,WITHOUT_CLASSIFICATION,// PHASE 2 : Analyze the HQL AST and produce an SQL AST.
Hibernate,WITHOUT_CLASSIFICATION,// PHASE 3 : Generate the SQL.
Hibernate,WITHOUT_CLASSIFICATION,// Otherwise we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)
Hibernate,WITHOUT_CLASSIFICATION,"//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );"
Hibernate,WITHOUT_CLASSIFICATION,// we are already processing a dot-structure
Hibernate,WITHOUT_CLASSIFICATION,// Should mean that no such property was found
Hibernate,WITHOUT_CLASSIFICATION,// Initialize the error handling delegate.
Hibernate,WITHOUT_CLASSIFICATION,// Was there an explicit select expression?
Hibernate,WITHOUT_CLASSIFICATION,// Resolve everything up to this dot but don't resolve the placeholders yet.
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
Hibernate,WITHOUT_CLASSIFICATION,// Just add a 'not' parent.
Hibernate,WITHOUT_CLASSIFICATION,// First save off the pertinent ids as the return value
Hibernate,WITHOUT_CLASSIFICATION,// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context so MUST // be autocommit mode)
Hibernate,WITHOUT_CLASSIFICATION,// First save off the pertinent ids saving the number of pertinent ids for return
Hibernate,WITHOUT_CLASSIFICATION,// Start performing the deletes
Hibernate,WITHOUT_CLASSIFICATION,// Don't forget to resolve the argument! // Resolve the collection function now.
Hibernate,WITHOUT_CLASSIFICATION,// otherwise everything ok.
Hibernate,WITHOUT_CLASSIFICATION,// Re-arrange the tree so that the collection function is the root and the lhs is the path.
Hibernate,WITHOUT_CLASSIFICATION,//    protected RegionRootListener listener;
Hibernate,WITHOUT_CLASSIFICATION,// inject the WHERE after the parent
Hibernate,WITHOUT_CLASSIFICATION,// Never include subclasses for implied from elements.
Hibernate,WITHOUT_CLASSIFICATION,// For pessimistic locking we just want to toss out our ref // to any old invalid root node and get the latest (may be null)
Hibernate,WITHOUT_CLASSIFICATION,// The rest only matters for optimistic locking where we // need to establish the proper data version on the region root
Hibernate,WITHOUT_CLASSIFICATION,// Prepare the left hand side and get the data type.
Hibernate,WITHOUT_CLASSIFICATION,// If this dot has already been resolved stop now.
Hibernate,WITHOUT_CLASSIFICATION,// The property is another class..
Hibernate,WITHOUT_CLASSIFICATION,// Otherwise this is a primitive type.
Hibernate,WITHOUT_CLASSIFICATION,//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
Hibernate,WITHOUT_CLASSIFICATION,// For Timestamps we default to a separate config
Hibernate,WITHOUT_CLASSIFICATION,//optimistic-lock="all" include all updatable properties //optimistic-lock="dirty" include all properties we are updating this time
Hibernate,WITHOUT_CLASSIFICATION,// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
Hibernate,WITHOUT_CLASSIFICATION,//information about properties of this class //including inherited properties //(only really needed for updatable/insertable properties)
Hibernate,WITHOUT_CLASSIFICATION,// Here we render the select column list based on the properties defined as being generated. // For partial component generation we currently just re-select the whole component // rather than trying to handle the individual generated portions.
Hibernate,WITHOUT_CLASSIFICATION,// NOTE : addDuplicateAlias() already performs nullness checks on the alias.
Hibernate,WITHOUT_CLASSIFICATION,// if the from-clauses are the same we can be a little more aggressive in terms of what we reuse
Hibernate,WITHOUT_CLASSIFICATION,// again null != null here
Hibernate,WITHOUT_CLASSIFICATION,// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
Hibernate,WITHOUT_CLASSIFICATION,// we know only the lhs-hand type so use that
Hibernate,WITHOUT_CLASSIFICATION,// the referenced node text is the special 'id'
Hibernate,WITHOUT_CLASSIFICATION,// only the identifier property field name can be a reference to the associated entity's PK...
Hibernate,WITHOUT_CLASSIFICATION,// Append the new property name onto the unresolved path.
Hibernate,WITHOUT_CLASSIFICATION,// Tell the destination fromElement to 'includeSubclasses'.
Hibernate,WITHOUT_CLASSIFICATION,// If the lhs is a collection use CollectionPropertyMapping
Hibernate,WITHOUT_CLASSIFICATION,// Don't resolve the node again.
Hibernate,WITHOUT_CLASSIFICATION,//lists arrays //sets maps bags
Hibernate,WITHOUT_CLASSIFICATION,// we have something like : "? [op] rhs"
Hibernate,WITHOUT_CLASSIFICATION,// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching
Hibernate,WITHOUT_CLASSIFICATION,//use a combination of foreign key columns and pk columns since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another
Hibernate,WITHOUT_CLASSIFICATION,// Make sure we don't re-release the same cache
Hibernate,WITHOUT_CLASSIFICATION,// We use a different delegate than the non-optimistic superclass default
Hibernate,WITHOUT_CLASSIFICATION,// we have something like : "lhs [op] ?"
Hibernate,WITHOUT_CLASSIFICATION,// don't create a unique key 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );
Hibernate,WITHOUT_CLASSIFICATION,//isSet = collection.isSet(); //isSorted = collection.isSorted();
Hibernate,WITHOUT_CLASSIFICATION,// we know only the rhs-hand type so use that
Hibernate,WITHOUT_CLASSIFICATION,// If JBC is using INVALIDATION we don't want to propagate changes. // We use the Timestamps cache to manage invalidation
Hibernate,WITHOUT_CLASSIFICATION,// Don't hold the JBC node lock throughout the tx as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit
Hibernate,WITHOUT_CLASSIFICATION,// Double check the distributed cache
Hibernate,WITHOUT_CLASSIFICATION,// Get an exclusive right to update JBC for this key from this node.
Hibernate,WITHOUT_CLASSIFICATION,// one or the other needs to be a datetime for us to get into this method in the first place...
Hibernate,WITHOUT_CLASSIFICATION,// Add the condition to the join sequence that qualifies the indexed element.
Hibernate,WITHOUT_CLASSIFICATION,// Sometimes use the element table alias sometimes use the... umm... collection table alias (many to many)
Hibernate,WITHOUT_CLASSIFICATION,// Now set the text for this node.  It should be the element columns.
Hibernate,WITHOUT_CLASSIFICATION,// Get the function return value type based on the type of the first argument.
Hibernate,WITHOUT_CLASSIFICATION,// This will call initialize(tok)!
Hibernate,WITHOUT_CLASSIFICATION,// mutation depends on the types of nodes invloved...
Hibernate,WITHOUT_CLASSIFICATION,// logic operators by definition resolve to booleans
Hibernate,WITHOUT_CLASSIFICATION,// Generated select expressions are already resolved nothing to do.
Hibernate,WITHOUT_CLASSIFICATION,// The path may be a reference to an alias defined in the parent query.
Hibernate,WITHOUT_CLASSIFICATION,// The HQL class alias refers to the class name.
Hibernate,WITHOUT_CLASSIFICATION,// Associate the table alias with the element.
Hibernate,WITHOUT_CLASSIFICATION,// try the parent FromClause...
Hibernate,WITHOUT_CLASSIFICATION,// Make sure that all from elements registered with this FROM clause are actually in the AST.
Hibernate,WITHOUT_CLASSIFICATION,// Invoke setScalarColumnText on each constructor argument.
Hibernate,WITHOUT_CLASSIFICATION,// Collect the select expressions skip the first child because it is the class name.
Hibernate,WITHOUT_CLASSIFICATION,// return an empty Type array
Hibernate,WITHOUT_CLASSIFICATION,// We ensure ASYNC semantics (JBCACHE-1175)
Hibernate,WITHOUT_CLASSIFICATION,// if there is no order by make one
Hibernate,WITHOUT_CLASSIFICATION,// Initial load from JBC
Hibernate,WITHOUT_CLASSIFICATION,// Find the WHERE; if there is no WHERE find the FROM...
Hibernate,WITHOUT_CLASSIFICATION,// Now inject the newly built ORDER BY into the tree
Hibernate,WITHOUT_CLASSIFICATION,// logic operators by definition resolve to boolean.
Hibernate,WITHOUT_CLASSIFICATION,// Render the identifier select fragment using the table alias.
Hibernate,WITHOUT_CLASSIFICATION,// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
Hibernate,WITHOUT_CLASSIFICATION,// will still be issued when it used to be null
Hibernate,WITHOUT_CLASSIFICATION,// Otherwise use the property mapping.
Hibernate,WITHOUT_CLASSIFICATION,// The standard comparator types are not Serializable but are singletons
Hibernate,WITHOUT_CLASSIFICATION,// ignore!
Hibernate,WITHOUT_CLASSIFICATION,// Generate implicit joins only if necessary.
Hibernate,WITHOUT_CLASSIFICATION,// If the property is a special collection property name return a CollectionPropertyMapping.
Hibernate,WITHOUT_CLASSIFICATION,// Collection of components.
Hibernate,WITHOUT_CLASSIFICATION,// construct the cache
Hibernate,WITHOUT_CLASSIFICATION,//ie. 60 seconds
Hibernate,WITHOUT_CLASSIFICATION,// We need to seed the version value as part of this bulk insert
Hibernate,WITHOUT_CLASSIFICATION,// make sure the lhs is "assignable"...
Hibernate,WITHOUT_CLASSIFICATION,// false indicates to not generate parens around the assignment
Hibernate,WITHOUT_CLASSIFICATION,// currently allowed...
Hibernate,WITHOUT_CLASSIFICATION,// in non-select queries the only time we should need to join is if we are in a subquery from clause
Hibernate,WITHOUT_CLASSIFICATION,//return classAlias == null ? className : classAlias;
Hibernate,WITHOUT_CLASSIFICATION,// This is an explicit FROM element.
Hibernate,WITHOUT_CLASSIFICATION,//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize which //                     hibernate sensibly lets default to minPoolSize but we'll let users //                     override it with the c3p0-style property if they want.
Hibernate,WITHOUT_CLASSIFICATION,// Fetch can't be used with scroll() or iterate().
Hibernate,WITHOUT_CLASSIFICATION,// If it's not implied or it is implied and it's a many to many join where the target wasn't found.
Hibernate,WITHOUT_CLASSIFICATION,// we need to wrtap the param in a cast()
Hibernate,WITHOUT_CLASSIFICATION,// Since this is an explicit FROM element it can't be implied in the FROM clause.
Hibernate,WITHOUT_CLASSIFICATION,// Do nothing eplicit from elements are *always* in the projection list.
Hibernate,WITHOUT_CLASSIFICATION,// propertyName refers to something like collection.size...
Hibernate,WITHOUT_CLASSIFICATION,// property name is a sub-path of a component...
Hibernate,WITHOUT_CLASSIFICATION,// Notify the FROM element that it is being referenced by the select.
Hibernate,WITHOUT_CLASSIFICATION,// DotNode uses null here...
Hibernate,WITHOUT_CLASSIFICATION,// We represent a from-clause alias
Hibernate,WITHOUT_CLASSIFICATION,// we are the RHS of the DOT representing a naked comp-prop-ref
Hibernate,WITHOUT_CLASSIFICATION,// we represent a naked (simple) prop-ref
Hibernate,WITHOUT_CLASSIFICATION,// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...
Hibernate,WITHOUT_CLASSIFICATION,// assume this ident's text does *not* refer to a property on the given persister
Hibernate,WITHOUT_CLASSIFICATION,// just ignore it for now it'll get resolved later...
Hibernate,WITHOUT_CLASSIFICATION,// This is not actually a constant but a reference to FROM element.
Hibernate,WITHOUT_CLASSIFICATION,// these pieces are needed for usage in select clause
Hibernate,WITHOUT_CLASSIFICATION,// assume we do *not* refer to a property on the given persister
Hibernate,WITHOUT_CLASSIFICATION,// TRUE if the pool is borrowed from the outside FALSE if we used to create it
Hibernate,WITHOUT_CLASSIFICATION,// get a connection from the pool (thru DriverManager cfr. Proxool doc)
Hibernate,WITHOUT_CLASSIFICATION,// set the Transaction Isolation if defined
Hibernate,WITHOUT_CLASSIFICATION,// naked property-refs cannot be used with an aliased from element
Hibernate,WITHOUT_CLASSIFICATION,// do *not* over-write the column text as that has already been // "rendered" during resolve
Hibernate,WITHOUT_CLASSIFICATION,// Look up class name using the first identifier in the path.
Hibernate,WITHOUT_CLASSIFICATION,// toggle autoCommit to false if set
Hibernate,WITHOUT_CLASSIFICATION,// Add to the query spaces.
Hibernate,WITHOUT_CLASSIFICATION,// return the connection
Hibernate,WITHOUT_CLASSIFICATION,// If the from element isn't in the same clause create a new from element.
Hibernate,WITHOUT_CLASSIFICATION,// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join
Hibernate,WITHOUT_CLASSIFICATION,// Get the configurator files (if available)
Hibernate,WITHOUT_CLASSIFICATION,// A collection of entities...
Hibernate,WITHOUT_CLASSIFICATION,// A collection of components...
Hibernate,WITHOUT_CLASSIFICATION,// Default the Proxool alias setting
Hibernate,WITHOUT_CLASSIFICATION,// A collection of scalar elements...
Hibernate,WITHOUT_CLASSIFICATION,// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted
Hibernate,WITHOUT_CLASSIFICATION,// Don't include sub-classes for implied collection joins or subquery joins.
Hibernate,WITHOUT_CLASSIFICATION,// Treat explict from elements in sub-queries properly.
Hibernate,WITHOUT_CLASSIFICATION,// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Append the stem to the proxool pool alias
Hibernate,WITHOUT_CLASSIFICATION,// Configured using the JAXP Configurator
Hibernate,WITHOUT_CLASSIFICATION,// Configured using the Properties File Configurator
Hibernate,WITHOUT_CLASSIFICATION,// Remember Isolation level
Hibernate,WITHOUT_CLASSIFICATION,// If the provider was leeching off an existing pool don't close it
Hibernate,WITHOUT_CLASSIFICATION,// NOTE: Because we're using ASTUtil.createParent() the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )
Hibernate,WITHOUT_CLASSIFICATION,// the "root from-element" in correlated subqueries do need this piece
Hibernate,WITHOUT_CLASSIFICATION,// Create the FROM element for the target (the elements of the collection).
Hibernate,WITHOUT_CLASSIFICATION,// If the join is implied then don't include sub-classes on the element.
Hibernate,WITHOUT_CLASSIFICATION,// not really a many-to-one association *necessarily*
Hibernate,WITHOUT_CLASSIFICATION,// The associated entity is implied but it must be included in the FROM. // The collection alias is the role.
Hibernate,WITHOUT_CLASSIFICATION,//always overwrite nonversioned data
Hibernate,WITHOUT_CLASSIFICATION,// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.
Hibernate,WITHOUT_CLASSIFICATION,//public Currency getCurrency(int col) throws HibernateException;
Hibernate,WITHOUT_CLASSIFICATION,// Get the class name of the associated entity.
Hibernate,WITHOUT_CLASSIFICATION,// default is POJO
Hibernate,WITHOUT_CLASSIFICATION,// use setParameter for null values
Hibernate,WITHOUT_CLASSIFICATION,//  origin path implied columns classAlias
Hibernate,WITHOUT_CLASSIFICATION,/*implied*/
Hibernate,WITHOUT_CLASSIFICATION,// For implied many-to-many just add the end join.
Hibernate,WITHOUT_CLASSIFICATION,// Interceptor returned null so do the dirtycheck ourself if possible
Hibernate,WITHOUT_CLASSIFICATION,// Note this!!
Hibernate,WITHOUT_CLASSIFICATION,// Error message constants.
Hibernate,WITHOUT_CLASSIFICATION,// the standard SQL function name is current_timestamp...
Hibernate,WITHOUT_CLASSIFICATION,//scan for next non-whitespace token
Hibernate,WITHOUT_CLASSIFICATION,// This causes the factory to instantiate the desired class.
Hibernate,WITHOUT_CLASSIFICATION,//private Type[] sqlResultTypes;
Hibernate,WITHOUT_CLASSIFICATION,//private CacheEntry cacheEntry;
Hibernate,WITHOUT_CLASSIFICATION,"//		TypeFactory.deepCopy( currentState propTypes persister.getPropertyUpdateability() deletedState session );"
Hibernate,WITHOUT_CLASSIFICATION,// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
Hibernate,WITHOUT_CLASSIFICATION,"/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/"
Hibernate,WITHOUT_CLASSIFICATION,//sqlResultTypeList.add( type );
Hibernate,WITHOUT_CLASSIFICATION,// Always add the type to the return type list.
Hibernate,WITHOUT_CLASSIFICATION,// have the entity entry perform post-update processing passing it the // update state and the new version (if one).
Hibernate,WITHOUT_CLASSIFICATION,// this entity defines proeprty generation so process those generated // values...
Hibernate,WITHOUT_CLASSIFICATION,// add the fetched entities
Hibernate,WITHOUT_CLASSIFICATION,// just especially for the trivial collection filter
Hibernate,WITHOUT_CLASSIFICATION,// need to look it up from the persistence-context
Hibernate,WITHOUT_CLASSIFICATION,//sort first by role name
Hibernate,WITHOUT_CLASSIFICATION,// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//update last non-whitespace token if necessary
Hibernate,WITHOUT_CLASSIFICATION,//then by fk
Hibernate,WITHOUT_CLASSIFICATION,"// nothing to do		"
Hibernate,WITHOUT_CLASSIFICATION,/*ArrayList sqlResultTypeList*/
Hibernate,WITHOUT_CLASSIFICATION,// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner
Hibernate,WITHOUT_CLASSIFICATION,//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!
Hibernate,WITHOUT_CLASSIFICATION,// remove initial " "
Hibernate,WITHOUT_CLASSIFICATION,// Generate the select expression.
Hibernate,WITHOUT_CLASSIFICATION,// now update all changed or added rows fks
Hibernate,WITHOUT_CLASSIFICATION,"//			boolean put = persister.getCache().insert(ck cacheEntry);"
Hibernate,WITHOUT_CLASSIFICATION,// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Skip 'DISTINCT' and 'ALL' so we return the first expression node.
Hibernate,WITHOUT_CLASSIFICATION,// Generate the property select tokens.
Hibernate,WITHOUT_CLASSIFICATION,// Get the function name node.
Hibernate,WITHOUT_CLASSIFICATION,// This handles HHH-354 where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...
Hibernate,WITHOUT_CLASSIFICATION,// Method expressions in a SELECT should always be considered scalar.
Hibernate,WITHOUT_CLASSIFICATION,// areturn // return the value of the field
Hibernate,WITHOUT_CLASSIFICATION,//do nothing - we only need to notify the cache...
Hibernate,WITHOUT_CLASSIFICATION,//sort first by entity name
Hibernate,WITHOUT_CLASSIFICATION,// If this is 'elements' then create a new FROM element.
Hibernate,WITHOUT_CLASSIFICATION,//then by id
Hibernate,WITHOUT_CLASSIFICATION,// Not elements(x)
Hibernate,WITHOUT_CLASSIFICATION,// Dialect function
Hibernate,WITHOUT_CLASSIFICATION,// to be safe...
Hibernate,WITHOUT_CLASSIFICATION,// Collection 'property function'
Hibernate,WITHOUT_CLASSIFICATION,// If the constant is an IDENT figure out what it means...
Hibernate,WITHOUT_CLASSIFICATION,// no transformations took place so handle it as we would a // non-instrumented class
Hibernate,WITHOUT_CLASSIFICATION,// IDENT is a class alias in the FROM.
Hibernate,WITHOUT_CLASSIFICATION,// Resolve to an identity column.
Hibernate,WITHOUT_CLASSIFICATION,// see if the entry represents a class file
Hibernate,WITHOUT_CLASSIFICATION,// Otherwise it's a literal.
Hibernate,WITHOUT_CLASSIFICATION,// the name of an entity class
Hibernate,WITHOUT_CLASSIFICATION,//the class discriminator value
Hibernate,WITHOUT_CLASSIFICATION,// Add a space before the display text.
Hibernate,WITHOUT_CLASSIFICATION,// Find or create the WHERE clause
Hibernate,WITHOUT_CLASSIFICATION,// child == parent.getFirstChild()
Hibernate,WITHOUT_CLASSIFICATION,// set the name of bulk accessor.
Hibernate,WITHOUT_CLASSIFICATION,// invokespecial
Hibernate,WITHOUT_CLASSIFICATION,// aload_1 // load bean
Hibernate,WITHOUT_CLASSIFICATION,// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first // then it binds all the HQL query parameters see org.hibernate.loader.Loader.processFilterParameters().
Hibernate,WITHOUT_CLASSIFICATION,// checkcast // cast bean
Hibernate,WITHOUT_CLASSIFICATION,// Put the FILTERS node before the HQL condition and theta joins
Hibernate,WITHOUT_CLASSIFICATION,// astore_3 // store bean
Hibernate,WITHOUT_CLASSIFICATION,// add the current fragment to the FILTERS node
Hibernate,WITHOUT_CLASSIFICATION,// Create a new THETA_JOINS node as a parent of all filters
Hibernate,WITHOUT_CLASSIFICATION,// aload_2 // args
Hibernate,WITHOUT_CLASSIFICATION,// Put the THETA_JOINS node before the HQL condition after the filters.
Hibernate,WITHOUT_CLASSIFICATION,// First try to get the persister using the given name directly.
Hibernate,WITHOUT_CLASSIFICATION,// iconst_i // continue to aastore // growing stack is 1
Hibernate,WITHOUT_CLASSIFICATION,// unable to locate it using this name
Hibernate,WITHOUT_CLASSIFICATION,// If that didn't work try using the 'import' name.
Hibernate,WITHOUT_CLASSIFICATION,// Implicit joins use theta style (WHERE pk = fk) explicit joins use JOIN (after from)
Hibernate,WITHOUT_CLASSIFICATION,// locate the registered function by the given name
Hibernate,WITHOUT_CLASSIFICATION,// determine the type of the first argument...
Hibernate,WITHOUT_CLASSIFICATION,// Use the DOT node to emit the first column name. // Create the column names folled by the column aliases.
Hibernate,WITHOUT_CLASSIFICATION,// Append the text of the current node.
Hibernate,WITHOUT_CLASSIFICATION,// If the node has a first child recurse into the first child.
Hibernate,WITHOUT_CLASSIFICATION,// new
Hibernate,WITHOUT_CLASSIFICATION,// If there is a second child (RHS) recurse into that child.
Hibernate,WITHOUT_CLASSIFICATION,// aload_3 // load the raw bean
Hibernate,WITHOUT_CLASSIFICATION,// invokevirtual
Hibernate,WITHOUT_CLASSIFICATION,// aastore // args
Hibernate,WITHOUT_CLASSIFICATION,// istore_3 // store i
Hibernate,WITHOUT_CLASSIFICATION,// aload_1 // load the bean
Hibernate,WITHOUT_CLASSIFICATION,/* current stack len = 0 */
Hibernate,WITHOUT_CLASSIFICATION,// Iterate through the aliasJoinSequence pairs and generate SQL token nodes.
Hibernate,WITHOUT_CLASSIFICATION,// this is used during SqlGenerator processing
Hibernate,WITHOUT_CLASSIFICATION,// start region to handling exception (BulkAccessorException)
Hibernate,WITHOUT_CLASSIFICATION,// If there is a FROM fragment and the FROM element is an explicit then add the from part.
Hibernate,WITHOUT_CLASSIFICATION,/*&& StringHelper.isNotEmpty( frag )*/
Hibernate,WITHOUT_CLASSIFICATION,// iinc 3 1
Hibernate,WITHOUT_CLASSIFICATION,// The FROM fragment will probably begin with ' '.  Remove this if it is present.
Hibernate,WITHOUT_CLASSIFICATION,// aload 4 // load the raw bean
Hibernate,WITHOUT_CLASSIFICATION,// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name p.Address p
Hibernate,WITHOUT_CLASSIFICATION,// oracle sql-state code for deadlock
Hibernate,WITHOUT_CLASSIFICATION,// aload_2 // load the args
Hibernate,WITHOUT_CLASSIFICATION,// Otherwise try to use the no-arg constructor
Hibernate,WITHOUT_CLASSIFICATION,// iconst_i
Hibernate,WITHOUT_CLASSIFICATION,// eat it and try next
Hibernate,WITHOUT_CLASSIFICATION,// aaload
Hibernate,WITHOUT_CLASSIFICATION,// checkcast
Hibernate,WITHOUT_CLASSIFICATION,//default mode
Hibernate,WITHOUT_CLASSIFICATION,// checkcast (case of reference type)
Hibernate,WITHOUT_CLASSIFICATION,/* current stack len = 2 */
Hibernate,WITHOUT_CLASSIFICATION,// at some point the processing went bad so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible
Hibernate,WITHOUT_CLASSIFICATION,// end region to handling exception (BulkAccessorException)
Hibernate,WITHOUT_CLASSIFICATION,// register in exception table
Hibernate,WITHOUT_CLASSIFICATION,// Private constructor - stops checkstyle from complaining.
Hibernate,WITHOUT_CLASSIFICATION,//reset the dotcount (but not the path) //after reset!
Hibernate,WITHOUT_CLASSIFICATION,//after reset!
Hibernate,WITHOUT_CLASSIFICATION,// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here
Hibernate,WITHOUT_CLASSIFICATION,// dotcount>=2
Hibernate,WITHOUT_CLASSIFICATION,/* local variables | target obj | each oldvalue | */
Hibernate,WITHOUT_CLASSIFICATION,// astore 5 // store exception
Hibernate,WITHOUT_CLASSIFICATION,// aload 5 // load exception
Hibernate,WITHOUT_CLASSIFICATION,/* | this | bean | args | raw bean | */
Hibernate,WITHOUT_CLASSIFICATION,// iload_3 // i
Hibernate,WITHOUT_CLASSIFICATION,// Do the corresponding RHS
Hibernate,WITHOUT_CLASSIFICATION,// invokespecial // BulkAccessorException.<init>
Hibernate,WITHOUT_CLASSIFICATION,// athrow
Hibernate,WITHOUT_CLASSIFICATION,// WARNING: classfile only
Hibernate,WITHOUT_CLASSIFICATION,//if its "id"
Hibernate,WITHOUT_CLASSIFICATION,//swallow
Hibernate,WITHOUT_CLASSIFICATION,//or its the id property name
Hibernate,WITHOUT_CLASSIFICATION,//join = q.createJoinFragment(useThetaStyleJoin);
Hibernate,WITHOUT_CLASSIFICATION,/* local variable | this | */
Hibernate,WITHOUT_CLASSIFICATION,//important!!
Hibernate,WITHOUT_CLASSIFICATION,// an association
Hibernate,WITHOUT_CLASSIFICATION,// aload_0 // load this
Hibernate,WITHOUT_CLASSIFICATION,//allow index() function:
Hibernate,WITHOUT_CLASSIFICATION,// aload_1 // load callback
Hibernate,WITHOUT_CLASSIFICATION,// case of non-static field
Hibernate,WITHOUT_CLASSIFICATION,// log a message about potential connection leaks
Hibernate,WITHOUT_CLASSIFICATION,// getfield // get each field
Hibernate,WITHOUT_CLASSIFICATION,// ifnonnull
Hibernate,WITHOUT_CLASSIFICATION,// *return // each type
Hibernate,WITHOUT_CLASSIFICATION,// *store_1 // each type
Hibernate,WITHOUT_CLASSIFICATION,//many-to-many
Hibernate,WITHOUT_CLASSIFICATION,// ldc // name of the field
Hibernate,WITHOUT_CLASSIFICATION,//opening paren in new Foo ( ... )
Hibernate,WITHOUT_CLASSIFICATION,//if we are inside a new Result() but not inside a nested function
Hibernate,WITHOUT_CLASSIFICATION,// invokeinterface // invoke Callback.read*() // each type
Hibernate,WITHOUT_CLASSIFICATION,//special case
Hibernate,WITHOUT_CLASSIFICATION,// the name of an SQL function
Hibernate,WITHOUT_CLASSIFICATION,//this is basically a copy/paste of OrderByParser ... might be worth refactoring
Hibernate,WITHOUT_CLASSIFICATION,// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name p.Address p
Hibernate,WITHOUT_CLASSIFICATION,// return aliases not supported in classic translator!
Hibernate,WITHOUT_CLASSIFICATION,//register collection role
Hibernate,WITHOUT_CLASSIFICATION,// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.
Hibernate,WITHOUT_CLASSIFICATION,// The keyword used to specify an identity column if identity column key generation is supported.
Hibernate,WITHOUT_CLASSIFICATION,//following doesn't handle (null not null) but unnecessary //since this would mean all rows
Hibernate,WITHOUT_CLASSIFICATION,//crossJoins.add(name);
Hibernate,WITHOUT_CLASSIFICATION,//ie no select clause in HQL
Hibernate,WITHOUT_CLASSIFICATION,// invokeinterface // enabled.getInterceptFieldCallback()
Hibernate,WITHOUT_CLASSIFICATION,// ifnonnull (label1)
Hibernate,WITHOUT_CLASSIFICATION,// we are the LHS of the DOT representing a naked comp-prop-ref
Hibernate,WITHOUT_CLASSIFICATION,// *load_1
Hibernate,WITHOUT_CLASSIFICATION,//ie. no select clause
Hibernate,WITHOUT_CLASSIFICATION,// putfield
Hibernate,WITHOUT_CLASSIFICATION,//there _was_ a select clause
Hibernate,WITHOUT_CLASSIFICATION,// return ;
Hibernate,WITHOUT_CLASSIFICATION,// ldc // field name
Hibernate,WITHOUT_CLASSIFICATION,// getfield // old value of the field
Hibernate,WITHOUT_CLASSIFICATION,// return the concrete type or the underlying type if a concrete type // was not specified
Hibernate,WITHOUT_CLASSIFICATION,// not array
Hibernate,WITHOUT_CLASSIFICATION,// array of reference type
Hibernate,WITHOUT_CLASSIFICATION,//q.addCollection(collectionName collectionRole);
Hibernate,WITHOUT_CLASSIFICATION,// boolean
Hibernate,WITHOUT_CLASSIFICATION,// char
Hibernate,WITHOUT_CLASSIFICATION,// short
Hibernate,WITHOUT_CLASSIFICATION,// classic parser does not support bulk manipulation statements
Hibernate,WITHOUT_CLASSIFICATION,// float
Hibernate,WITHOUT_CLASSIFICATION,// This is called when it's time to fully resolve a path expression.
Hibernate,WITHOUT_CLASSIFICATION,// can't cache this stuff either (per-invocation)
Hibernate,WITHOUT_CLASSIFICATION,// This is the legacy behaviour for HQL queries...
Hibernate,WITHOUT_CLASSIFICATION,// bad type
Hibernate,WITHOUT_CLASSIFICATION,// not known!
Hibernate,WITHOUT_CLASSIFICATION,// boolean byte char int short
Hibernate,WITHOUT_CLASSIFICATION,//Need this since join condition can appear inside parens!
Hibernate,WITHOUT_CLASSIFICATION,//expressionOpeners.add(""); // deliberately excluded
Hibernate,WITHOUT_CLASSIFICATION,//Mainly for OSCache
Hibernate,WITHOUT_CLASSIFICATION,//decrement the lock
Hibernate,WITHOUT_CLASSIFICATION,//recache the updated state
Hibernate,WITHOUT_CLASSIFICATION,// noop
Hibernate,WITHOUT_CLASSIFICATION,//null clientLock is remotely possible but will never happen in practice
Hibernate,WITHOUT_CLASSIFICATION,//by requiring < we rely on lock timeout in the case of an unsuccessful update!
Hibernate,WITHOUT_CLASSIFICATION,// the user provided resulttransformer not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.
Hibernate,WITHOUT_CLASSIFICATION,// disassemble positional parameters
Hibernate,WITHOUT_CLASSIFICATION,// otherwise a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)
Hibernate,WITHOUT_CLASSIFICATION,// this is called from SettingsFactory irregardless; trivial to simply disregard
Hibernate,WITHOUT_CLASSIFICATION,// Do nothing; subclasses may override.
Hibernate,WITHOUT_CLASSIFICATION,// TABLE
Hibernate,WITHOUT_CLASSIFICATION,//Inside a BETWEEN ... AND ... expression
Hibernate,WITHOUT_CLASSIFICATION,//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean
Hibernate,WITHOUT_CLASSIFICATION,//ie. a many-to-many
Hibernate,WITHOUT_CLASSIFICATION,//Cope with []
Hibernate,WITHOUT_CLASSIFICATION,//Cope with a continued path expression (ie. ].baz)
Hibernate,WITHOUT_CLASSIFICATION,//Cope with a subselect
Hibernate,WITHOUT_CLASSIFICATION,// use the id value of a newly instantiated instance as the unsaved-value
Hibernate,WITHOUT_CLASSIFICATION,//Close extra brackets we opened
Hibernate,WITHOUT_CLASSIFICATION,//take note when this is a boolean expression
Hibernate,WITHOUT_CLASSIFICATION,//persister.setIdentifier(result id); //before calling interceptor for consistency with normal load
Hibernate,WITHOUT_CLASSIFICATION,// no-op; CCS did not have such a concept
Hibernate,WITHOUT_CLASSIFICATION,// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.
Hibernate,WITHOUT_CLASSIFICATION,//process a token mapping OO path expressions to SQL expressions
Hibernate,WITHOUT_CLASSIFICATION,//Open any extra brackets we might need.
Hibernate,WITHOUT_CLASSIFICATION,//Cope with special cases of AND NOT )
Hibernate,WITHOUT_CLASSIFICATION,// the next one up must also be
Hibernate,WITHOUT_CLASSIFICATION,// Add any joins
Hibernate,WITHOUT_CLASSIFICATION,// get meta's from <hibernate-mapping>
Hibernate,WITHOUT_CLASSIFICATION,// get meta's from <class>
Hibernate,WITHOUT_CLASSIFICATION,//path expression
Hibernate,WITHOUT_CLASSIFICATION,// DB-OBJECTNAME
Hibernate,WITHOUT_CLASSIFICATION,// just decrement the lock don't recache // (we don't know which transaction won)
Hibernate,WITHOUT_CLASSIFICATION,// MUTABLE
Hibernate,WITHOUT_CLASSIFICATION,// A container for collections we load up when the owning entity is not // yet loaded ... for now this is purely transient!
Hibernate,WITHOUT_CLASSIFICATION,// WHERE
Hibernate,WITHOUT_CLASSIFICATION,// POLYMORPHISM
Hibernate,WITHOUT_CLASSIFICATION,// properties that we have tried to load and not found in the database
Hibernate,WITHOUT_CLASSIFICATION,// the path expression continues after a ]
Hibernate,WITHOUT_CLASSIFICATION,// careful with this!
Hibernate,WITHOUT_CLASSIFICATION,// the path expression ends at the ]
Hibernate,WITHOUT_CLASSIFICATION,// "finish off" the join
Hibernate,WITHOUT_CLASSIFICATION,//NOTICE: no " or . since they are part of (compound) identifiers
Hibernate,WITHOUT_CLASSIFICATION,//cannot instantiate
Hibernate,WITHOUT_CLASSIFICATION,// start by looking for HQL keywords...
Hibernate,WITHOUT_CLASSIFICATION,// inner joins can be abbreviated to 'join'
Hibernate,WITHOUT_CLASSIFICATION,// 'outer' is optional and is ignored
Hibernate,WITHOUT_CLASSIFICATION,// now anything that is not a HQL keyword
Hibernate,WITHOUT_CLASSIFICATION,// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions
Hibernate,WITHOUT_CLASSIFICATION,// treat it as a classname
Hibernate,WITHOUT_CLASSIFICATION,// treat it as a path expression
Hibernate,WITHOUT_CLASSIFICATION,// starts with a path expression (new style)
Hibernate,WITHOUT_CLASSIFICATION,//allow ODMG OQL style: from Person p p.cars c
Hibernate,WITHOUT_CLASSIFICATION,//handle quoted strings
Hibernate,WITHOUT_CLASSIFICATION,// VERSION / TIMESTAMP
Hibernate,WITHOUT_CLASSIFICATION,// Primary key constraint
Hibernate,WITHOUT_CLASSIFICATION,// this is either a <version/> tag with no type attribute // or a <timestamp/> tag
Hibernate,WITHOUT_CLASSIFICATION,// Object insertions updates and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity
Hibernate,WITHOUT_CLASSIFICATION,//ignore whitespace
Hibernate,WITHOUT_CLASSIFICATION,//do replacements
Hibernate,WITHOUT_CLASSIFICATION,//handle HQL2 collection syntax
Hibernate,WITHOUT_CLASSIFICATION,// uuid.hex is deprecated
Hibernate,WITHOUT_CLASSIFICATION,// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//hilo params
Hibernate,WITHOUT_CLASSIFICATION,//sql = query;
Hibernate,WITHOUT_CLASSIFICATION,//for EJB3
Hibernate,WITHOUT_CLASSIFICATION,// performance opt
Hibernate,WITHOUT_CLASSIFICATION,//sql = update;
Hibernate,WITHOUT_CLASSIFICATION,//hilo config
Hibernate,WITHOUT_CLASSIFICATION,// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(
Hibernate,WITHOUT_CLASSIFICATION,//throw new IdentifierGenerationException("save associated object first or disable cascade for inverse association");
Hibernate,WITHOUT_CLASSIFICATION,//count++;
Hibernate,WITHOUT_CLASSIFICATION,// go ahead and set the lazy here since pojo.proxy can override it.
Hibernate,WITHOUT_CLASSIFICATION,// DYNAMIC UPDATE
Hibernate,WITHOUT_CLASSIFICATION,// IMPORT
Hibernate,WITHOUT_CLASSIFICATION,// BATCH SIZE
Hibernate,WITHOUT_CLASSIFICATION,// we need to dirty check collections since they can cause an owner // version number increment
Hibernate,WITHOUT_CLASSIFICATION,// SELECT BEFORE UPDATE
Hibernate,WITHOUT_CLASSIFICATION,// OPTIMISTIC LOCK MODE
Hibernate,WITHOUT_CLASSIFICATION,//first element of array is reserved for the actual instance we are loading!
Hibernate,WITHOUT_CLASSIFICATION,// do nothing until we hit the rsult set containing the generated id
Hibernate,WITHOUT_CLASSIFICATION,// Use the delegate resolve identifiers as FROM element aliases.
Hibernate,WITHOUT_CLASSIFICATION,// Loaded entity instances by EntityKey
Hibernate,WITHOUT_CLASSIFICATION,// if the given name is un-qualified we may neen to qualify it
Hibernate,WITHOUT_CLASSIFICATION,// the default...
Hibernate,WITHOUT_CLASSIFICATION,// cascade-save to many-to-one BEFORE the parent is saved
Hibernate,WITHOUT_CLASSIFICATION,// properties
Hibernate,WITHOUT_CLASSIFICATION,// joined subclasses
Hibernate,WITHOUT_CLASSIFICATION,//even process null collections
Hibernate,WITHOUT_CLASSIFICATION,//keep the existing version number in the case of replicate!
Hibernate,WITHOUT_CLASSIFICATION,//source.getPersistenceContext().removeNonExist( new EntityKey( id persister source.getEntityMode() ) );
Hibernate,WITHOUT_CLASSIFICATION,// Identity map of CollectionEntry instances by the collection wrapper
Hibernate,WITHOUT_CLASSIFICATION,// TABLENAME
Hibernate,WITHOUT_CLASSIFICATION,// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// join.getKey().setType( new Type( lazz.getIdentifier() ) );
Hibernate,WITHOUT_CLASSIFICATION,//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed
Hibernate,WITHOUT_CLASSIFICATION,// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// prepare and execute the insert
Hibernate,WITHOUT_CLASSIFICATION,// COLUMN(S)
Hibernate,WITHOUT_CLASSIFICATION,// if everything went ok commit the transaction and close the obtained // connection handle...
Hibernate,WITHOUT_CLASSIFICATION,//fetch the generated id in a separate query
Hibernate,WITHOUT_CLASSIFICATION,// we just hit the last position
Hibernate,WITHOUT_CLASSIFICATION,// scroll ahead
Hibernate,WITHOUT_CLASSIFICATION,// scroll backward
Hibernate,WITHOUT_CLASSIFICATION,// column index
Hibernate,WITHOUT_CLASSIFICATION,// we have not yet hit the last result...
Hibernate,WITHOUT_CLASSIFICATION,// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//column unique-key
Hibernate,WITHOUT_CLASSIFICATION,// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.
Hibernate,WITHOUT_CLASSIFICATION,// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Caches
Hibernate,WITHOUT_CLASSIFICATION,//Generators:
Hibernate,WITHOUT_CLASSIFICATION,// cache region is defined by the root-class in the hierarchy...
Hibernate,WITHOUT_CLASSIFICATION,//JNDI + Serialization:
Hibernate,WITHOUT_CLASSIFICATION,//checking for named queries
Hibernate,WITHOUT_CLASSIFICATION,//stats
Hibernate,WITHOUT_CLASSIFICATION,// Check named HQL queries
Hibernate,WITHOUT_CLASSIFICATION,//prevents this session from adding things to cache
Hibernate,WITHOUT_CLASSIFICATION,//for a dynamic-class
Hibernate,WITHOUT_CLASSIFICATION,//test this entity to see if we must query it
Hibernate,WITHOUT_CLASSIFICATION,//NOTE EARLY EXIT
Hibernate,WITHOUT_CLASSIFICATION,// for backward-compatability
Hibernate,WITHOUT_CLASSIFICATION,// ignore this error for now
Hibernate,WITHOUT_CLASSIFICATION,//must add to JNDI _after_ adding to HashMaps because some JNDI servers use serialization
Hibernate,WITHOUT_CLASSIFICATION,// look for existing collection as part of the persistence context
Hibernate,WITHOUT_CLASSIFICATION,// Make sure this is a defined parameter and check the incoming value type
Hibernate,WITHOUT_CLASSIFICATION,// for each of the defined parameters make sure its value // has been set
Hibernate,WITHOUT_CLASSIFICATION,//we never need to apply locks to the SQL
Hibernate,WITHOUT_CLASSIFICATION,// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// select-range is terminated by declaration of "from"
Hibernate,WITHOUT_CLASSIFICATION,// for an any
Hibernate,WITHOUT_CLASSIFICATION,// insertable simply because that is the user did not specify // anything; just override it
Hibernate,WITHOUT_CLASSIFICATION,// properties generated on update can never be updateable...
Hibernate,WITHOUT_CLASSIFICATION,// updateable only because the user did not specify  // anything; just override it
Hibernate,WITHOUT_CLASSIFICATION,// the user specifically supplied update="true" // which constitutes an illegal combo
Hibernate,WITHOUT_CLASSIFICATION,// ROLENAME
Hibernate,WITHOUT_CLASSIFICATION,// first try to load it from the temp PC associated to this SS
Hibernate,WITHOUT_CLASSIFICATION,// otherwise immediately materialize it
Hibernate,WITHOUT_CLASSIFICATION,// no auto-flushing to support in stateless session
Hibernate,WITHOUT_CLASSIFICATION,// FETCH STRATEGY
Hibernate,WITHOUT_CLASSIFICATION,//after setting values to object entityMode
Hibernate,WITHOUT_CLASSIFICATION,// SORT
Hibernate,WITHOUT_CLASSIFICATION,// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// unsorted natural comparator.class.name
Hibernate,WITHOUT_CLASSIFICATION,// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// set up second pass
Hibernate,WITHOUT_CLASSIFICATION,// do not auto-flush while outside a transaction
Hibernate,WITHOUT_CLASSIFICATION,// this is an internal error of some sort...
Hibernate,WITHOUT_CLASSIFICATION,//do not return a proxy! //(this option indicates we are initializing a proxy)
Hibernate,WITHOUT_CLASSIFICATION,// for an any // we will have to use reflection
Hibernate,WITHOUT_CLASSIFICATION,//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
Hibernate,WITHOUT_CLASSIFICATION,// if it was previously unreferenced we need to flush in order to // get its state into the database in order to execute query
Hibernate,WITHOUT_CLASSIFICATION,// not for internal use:
Hibernate,WITHOUT_CLASSIFICATION,// otherwise we only need to flush if there are in-memory changes // to the queried tables
Hibernate,WITHOUT_CLASSIFICATION,//if it is initialized see if the underlying //instance is contained since we need to  //account for the fact that it might have been //evicted
Hibernate,WITHOUT_CLASSIFICATION,// decode row selection...
Hibernate,WITHOUT_CLASSIFICATION,// basically just an adapted copy of find(CriteriaImpl)
Hibernate,WITHOUT_CLASSIFICATION,// we need to writeObject() on this since interceptor is user defined
Hibernate,WITHOUT_CLASSIFICATION,// the old-time stand-by...
Hibernate,WITHOUT_CLASSIFICATION,// parameter bind values...
Hibernate,WITHOUT_CLASSIFICATION,// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied // so default to join and non-lazy
Hibernate,WITHOUT_CLASSIFICATION,// use old (HB 2.1) defaults if outer-join is specified
Hibernate,WITHOUT_CLASSIFICATION,// we have a CGLIB enhanced entity
Hibernate,WITHOUT_CLASSIFICATION,// we have a Javassist enhanced entity
Hibernate,WITHOUT_CLASSIFICATION,// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// should *not* need to grow beyond the size of the total number of columns in the rs
Hibernate,WITHOUT_CLASSIFICATION,// should probably no-op commit/rollback here at least in JTA scenarios
Hibernate,WITHOUT_CLASSIFICATION,// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// explicitly perform no checking...
Hibernate,WITHOUT_CLASSIFICATION,// used from testsuite
Hibernate,WITHOUT_CLASSIFICATION,// GENERATOR
Hibernate,WITHOUT_CLASSIFICATION,// register synch; stats.connect()
Hibernate,WITHOUT_CLASSIFICATION,// calls executeBatch()
Hibernate,WITHOUT_CLASSIFICATION,//no big deal
Hibernate,WITHOUT_CLASSIFICATION,// no big deal
Hibernate,WITHOUT_CLASSIFICATION,// see explanation above...
Hibernate,WITHOUT_CLASSIFICATION,// If we are in the process of releasing no sense // checking for aggressive-release possibility.
Hibernate,WITHOUT_CLASSIFICATION,// EARLY EXIT!!!!
Hibernate,WITHOUT_CLASSIFICATION,// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// ID UNSAVED-VALUE
Hibernate,WITHOUT_CLASSIFICATION,// VERSION UNSAVED-VALUE
Hibernate,WITHOUT_CLASSIFICATION,// not necessarily a *unique* property reference
Hibernate,WITHOUT_CLASSIFICATION,// Bind the where
Hibernate,WITHOUT_CLASSIFICATION,// refer to comment in StatefulPersistenceContext.addCollection()
Hibernate,WITHOUT_CLASSIFICATION,// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Note : success = false because we don't know the outcome of the transaction
Hibernate,WITHOUT_CLASSIFICATION,// Bind the order-by
Hibernate,WITHOUT_CLASSIFICATION,// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities or we have previously // registered a transaction synch.
Hibernate,WITHOUT_CLASSIFICATION,// Bind the filters
Hibernate,WITHOUT_CLASSIFICATION,"// overriding inherited meta attribute. HBX-621 & HBX-793			"
Hibernate,WITHOUT_CLASSIFICATION,// first iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.
Hibernate,WITHOUT_CLASSIFICATION,//SessionFactory name:
Hibernate,WITHOUT_CLASSIFICATION,//JDBC and connection settings:
Hibernate,WITHOUT_CLASSIFICATION,//Interrogate JDBC metadata
Hibernate,WITHOUT_CLASSIFICATION,// user supplied JDBC connections
Hibernate,WITHOUT_CLASSIFICATION,// Transaction settings:
Hibernate,WITHOUT_CLASSIFICATION,//SQL Generation settings:
Hibernate,WITHOUT_CLASSIFICATION,//Query parser settings:
Hibernate,WITHOUT_CLASSIFICATION,// Second-level / query cache:
Hibernate,WITHOUT_CLASSIFICATION,//SQL Exception converter:
Hibernate,WITHOUT_CLASSIFICATION,//Statistics and logging:
Hibernate,WITHOUT_CLASSIFICATION,//postInitialize() will be called after initialization
Hibernate,WITHOUT_CLASSIFICATION,// cannot handle single quotes
Hibernate,WITHOUT_CLASSIFICATION,//Schema export:
Hibernate,WITHOUT_CLASSIFICATION,"// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'..."
Hibernate,WITHOUT_CLASSIFICATION,//if dotted and not load-collection nor return-join //regular property
Hibernate,WITHOUT_CLASSIFICATION,// don't even bother trying to read further
Hibernate,WITHOUT_CLASSIFICATION,"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;"
Hibernate,WITHOUT_CLASSIFICATION,// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// generated properties can *never* be insertable...
Hibernate,WITHOUT_CLASSIFICATION,// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,"//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}"
Hibernate,WITHOUT_CLASSIFICATION,// using local since the inheritedMetas at this point is not the correct map since it is always the empty map
Hibernate,WITHOUT_CLASSIFICATION,"//	protected List extendsQueue;"
Hibernate,WITHOUT_CLASSIFICATION,"//		extendsQueue = new ArrayList();"
Hibernate,WITHOUT_CLASSIFICATION,"//		componentTuplizerFactory = new ComponentTuplizerFactory();"
Hibernate,WITHOUT_CLASSIFICATION,// if doc is null then for whatever reason the cached file cannot be used...
Hibernate,WITHOUT_CLASSIFICATION,// position cursor to the last row
Hibernate,WITHOUT_CLASSIFICATION,// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing
Hibernate,WITHOUT_CLASSIFICATION,// Read backwards until we read past the first physical sequential // row with the key we are interested in loading
Hibernate,WITHOUT_CLASSIFICATION,// Finally read ahead one row to position result set cursor // at the first physical row we are interested in loading
Hibernate,WITHOUT_CLASSIFICATION,// This method may be called many times!!
Hibernate,WITHOUT_CLASSIFICATION,// force the proxy to resolve itself
Hibernate,WITHOUT_CLASSIFICATION,// this is equivalent to the old behavior...
Hibernate,WITHOUT_CLASSIFICATION,//if null owner will be retrieved from session
Hibernate,WITHOUT_CLASSIFICATION,"//			Iterator iterator = extendsQueue.iterator();"
Hibernate,WITHOUT_CLASSIFICATION,"//		Iterator iter = extendsQueue.iterator();"
Hibernate,WITHOUT_CLASSIFICATION,// found
Hibernate,WITHOUT_CLASSIFICATION,//final String queryString
Hibernate,WITHOUT_CLASSIFICATION,"//	private final List extendsQueue;"
Hibernate,WITHOUT_CLASSIFICATION,//<String String>
Hibernate,WITHOUT_CLASSIFICATION,//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
Hibernate,WITHOUT_CLASSIFICATION,//orphan delete not supported for EntityMode.DOM4J
Hibernate,WITHOUT_CLASSIFICATION,//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
Hibernate,WITHOUT_CLASSIFICATION,//we can reuse it for each row
Hibernate,WITHOUT_CLASSIFICATION,//can't reuse in this case
Hibernate,WITHOUT_CLASSIFICATION,//needed for SOAP libraries etc
Hibernate,WITHOUT_CLASSIFICATION,// any earlier proxy takes precedence
Hibernate,WITHOUT_CLASSIFICATION,// First we need to suspend any current JTA transaction and obtain // a JDBC connection
Hibernate,WITHOUT_CLASSIFICATION,//if we only returned one entity query by key is more efficient
Hibernate,WITHOUT_CLASSIFICATION,// the element has been removed from the set
Hibernate,WITHOUT_CLASSIFICATION,// the element has changed
Hibernate,WITHOUT_CLASSIFICATION,//Careful: these methods do not initialize the collection.
Hibernate,WITHOUT_CLASSIFICATION,//needed so that we remove this collection from the second-level cache
Hibernate,WITHOUT_CLASSIFICATION,// override on some subclasses
Hibernate,WITHOUT_CLASSIFICATION,//override on some subclasses
Hibernate,WITHOUT_CLASSIFICATION,//do this bit after setting initialized to true or it will recurse
Hibernate,WITHOUT_CLASSIFICATION,// create the collection holding the Orphans
Hibernate,WITHOUT_CLASSIFICATION,// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access
Hibernate,WITHOUT_CLASSIFICATION,// iterate over the *old* list
Hibernate,WITHOUT_CLASSIFICATION,/*(array==null) ? tempList.get(i) :*/
Hibernate,WITHOUT_CLASSIFICATION,// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)
Hibernate,WITHOUT_CLASSIFICATION,//write(); -- doesn't
Hibernate,WITHOUT_CLASSIFICATION,// this is the regression style determination which matches the logic of the classic translator
Hibernate,WITHOUT_CLASSIFICATION,// handle empty collection
Hibernate,WITHOUT_CLASSIFICATION,//handle empty collections
Hibernate,WITHOUT_CLASSIFICATION,// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)
Hibernate,WITHOUT_CLASSIFICATION,// finally what it's all about...
Hibernate,WITHOUT_CLASSIFICATION,// here we do not bother with the discriminator.
Hibernate,WITHOUT_CLASSIFICATION,// validate() instances of Validatable
Hibernate,WITHOUT_CLASSIFICATION,//null version means the object is in the process of being loaded somewhere else in the ResultSet
Hibernate,WITHOUT_CLASSIFICATION,//problematic for <key-many-to-one>!
Hibernate,WITHOUT_CLASSIFICATION,//use the id passed in
Hibernate,WITHOUT_CLASSIFICATION,// The property is a collection...
Hibernate,WITHOUT_CLASSIFICATION,// Anyway here we implement <set> semantics for a // <one-to-many> <bag>!
Hibernate,WITHOUT_CLASSIFICATION,//search for it //note that this code is incorrect for other than one-to-many
Hibernate,WITHOUT_CLASSIFICATION,//a composite key
Hibernate,WITHOUT_CLASSIFICATION,// if no batch use "foo = ? and bar = ?"
Hibernate,WITHOUT_CLASSIFICATION,//it must be a collection fetch
Hibernate,WITHOUT_CLASSIFICATION,// needed later for many-to-many/filter application
Hibernate,WITHOUT_CLASSIFICATION,// Collection wrappers by the CollectionKey //key=CollectionKey value=PersistentCollection
Hibernate,WITHOUT_CLASSIFICATION,// it might still need to apply a collection ordering based on a // many-to-many defined order-by...
Hibernate,WITHOUT_CLASSIFICATION,// belong to other persister // belong to other persister
Hibernate,WITHOUT_CLASSIFICATION,// we found it
Hibernate,WITHOUT_CLASSIFICATION,//we can use an inner join for the many-to-many
Hibernate,WITHOUT_CLASSIFICATION,//disable a join back to this same association
Hibernate,WITHOUT_CLASSIFICATION,//NOTE: unlike all other Loaders this one is NOT //      multithreaded or cacheable!!
Hibernate,WITHOUT_CLASSIFICATION,//alias may be null //EARLY EXIT
Hibernate,WITHOUT_CLASSIFICATION,// if it is a compound path
Hibernate,WITHOUT_CLASSIFICATION,// if its the root criteria we are done
Hibernate,WITHOUT_CLASSIFICATION,// otherwise recurse
Hibernate,WITHOUT_CLASSIFICATION,//the criteria instance
Hibernate,WITHOUT_CLASSIFICATION,// the entity name
Hibernate,WITHOUT_CLASSIFICATION,//not found in inner query  try the outer query
Hibernate,WITHOUT_CLASSIFICATION,//it refers to an alias of a projection
Hibernate,WITHOUT_CLASSIFICATION,//should never happen i think
Hibernate,WITHOUT_CLASSIFICATION,// Convert the string value into the proper type.
Hibernate,WITHOUT_CLASSIFICATION,// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us
Hibernate,WITHOUT_CLASSIFICATION,// Otherwise this is an ordinary value.
Hibernate,WITHOUT_CLASSIFICATION,// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")
Hibernate,WITHOUT_CLASSIFICATION,// List OPERATIONS:
Hibernate,WITHOUT_CLASSIFICATION,"//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;"
Hibernate,WITHOUT_CLASSIFICATION,// this is only needed (afaict) for ResultTransformer processing...
Hibernate,WITHOUT_CLASSIFICATION,// replace {....} with corresponding column aliases
Hibernate,WITHOUT_CLASSIFICATION,// No additional open braces found in the string append the // rest of the string in its entirty and quit this loop
Hibernate,WITHOUT_CLASSIFICATION,// apend everything up until the next encountered open brace
Hibernate,WITHOUT_CLASSIFICATION,//pad with nulls from the current last element up to the new index
Hibernate,WITHOUT_CLASSIFICATION,// it is a simple table alias {foo}
Hibernate,WITHOUT_CLASSIFICATION,// passing through anything we do not know : to support jdbc escape sequences HB-898
Hibernate,WITHOUT_CLASSIFICATION,// The current alias is referencing the collection to be eagerly fetched
Hibernate,WITHOUT_CLASSIFICATION,// it is a property reference {foo.bar}
Hibernate,WITHOUT_CLASSIFICATION,"//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();"
Hibernate,WITHOUT_CLASSIFICATION,// Now process the returns
Hibernate,WITHOUT_CLASSIFICATION,// already been processed...
Hibernate,WITHOUT_CLASSIFICATION,// Make sure the owner alias is known...
Hibernate,WITHOUT_CLASSIFICATION,"//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );"
Hibernate,WITHOUT_CLASSIFICATION,// If this return's alias has not been processed yet do so b4 further processing of this return
Hibernate,WITHOUT_CLASSIFICATION,"//			collectionOwnerAliases.add( ownerAlias );"
Hibernate,WITHOUT_CLASSIFICATION,// from Map
Hibernate,WITHOUT_CLASSIFICATION,// from SortedMap
Hibernate,WITHOUT_CLASSIFICATION,// cannot be instantiated
Hibernate,WITHOUT_CLASSIFICATION,//inject the data
Hibernate,WITHOUT_CLASSIFICATION,//default pool size 20
Hibernate,WITHOUT_CLASSIFICATION,// if debug level is enabled then log the password otherwise mask it
Hibernate,WITHOUT_CLASSIFICATION,// register a cleanup synch
Hibernate,WITHOUT_CLASSIFICATION,// wrap the session in the transaction-protection proxy
Hibernate,WITHOUT_CLASSIFICATION,// then bind it
Hibernate,WITHOUT_CLASSIFICATION,// limit the methods available if no transaction is active
Hibernate,WITHOUT_CLASSIFICATION,// allow these (deprecated) methods to pass through
Hibernate,WITHOUT_CLASSIFICATION,// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)
Hibernate,WITHOUT_CLASSIFICATION,// this is the second pass through on a merge op so here we limit the // replacement to associations types (value types were already replaced // during the first pass)
Hibernate,WITHOUT_CLASSIFICATION,// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree not the output tree!
Hibernate,WITHOUT_CLASSIFICATION,//private String propertyName;
Hibernate,WITHOUT_CLASSIFICATION,//String[] fk = StringHelper.qualify( "collection_" cp.getKeyColumnNames() );
Hibernate,WITHOUT_CLASSIFICATION,//" collection_ where " +
Hibernate,WITHOUT_CLASSIFICATION,//unsupported
Hibernate,WITHOUT_CLASSIFICATION,// if not a composite key use "foo in (? ? ?)" for batching // if no batch and not a composite key use "foo = ?"
Hibernate,WITHOUT_CLASSIFICATION,// currently only the Hibernate-supplied DbTimestampType is supported here
Hibernate,WITHOUT_CLASSIFICATION,//implicit polymorphism not supported (would need a union)
Hibernate,WITHOUT_CLASSIFICATION,//pull off the last " "
Hibernate,WITHOUT_CLASSIFICATION,//always do an INSERT and let it fail by constraint violation
Hibernate,WITHOUT_CLASSIFICATION,//by default natural-ids are "immutable" (constant)
Hibernate,WITHOUT_CLASSIFICATION,// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)
Hibernate,WITHOUT_CLASSIFICATION,// astore 4 // store the raw bean
Hibernate,WITHOUT_CLASSIFICATION,// not so sure this is even valid subtree.  but if it was it'd // represent two unrelated table references...
Hibernate,WITHOUT_CLASSIFICATION,// grrr... for differentiation of mysql storage engines
Hibernate,WITHOUT_CLASSIFICATION,//String[] keyCols = collPersister.getKeyColumnNames();
Hibernate,WITHOUT_CLASSIFICATION,// Oracle did add support for ANSI CASE statements in 9i
Hibernate,WITHOUT_CLASSIFICATION,//refresh() does not pass an entityName
Hibernate,WITHOUT_CLASSIFICATION,// Informix doesn't have a bit type
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (GT a b) ) => (LE a b)
Hibernate,WITHOUT_CLASSIFICATION,// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"
Hibernate,WITHOUT_CLASSIFICATION,// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//pre H3.2 behavior: super.getReturnType(ct m);
Hibernate,WITHOUT_CLASSIFICATION,// finally use the sqltype if == on Hibernate types did not find a match.
Hibernate,WITHOUT_CLASSIFICATION,//because numeric can be anything
Hibernate,WITHOUT_CLASSIFICATION,// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// standard sql92 functions (can be overridden by subclasses)
Hibernate,WITHOUT_CLASSIFICATION,//map second/minute/hour/day/month/year to ANSI extract() override on subclasses
Hibernate,WITHOUT_CLASSIFICATION,// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// by default we report no support
Hibernate,WITHOUT_CLASSIFICATION,//sqlResultTypes = selectClause.getSqlResultTypes();
Hibernate,WITHOUT_CLASSIFICATION,// by default we report no support for NOWAIT lock semantics
Hibernate,WITHOUT_CLASSIFICATION,// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//by default
Hibernate,WITHOUT_CLASSIFICATION,// This is now handled earlier in this method.
Hibernate,WITHOUT_CLASSIFICATION,// -- Loader implementation --
Hibernate,WITHOUT_CLASSIFICATION,// -- Loader overrides --
Hibernate,WITHOUT_CLASSIFICATION,// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
Hibernate,WITHOUT_CLASSIFICATION,// here assume SQLServer2005 using snapshot isolation which does not have this problem
Hibernate,WITHOUT_CLASSIFICATION,// --- Query translator methods ---
Hibernate,WITHOUT_CLASSIFICATION,// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time
Hibernate,WITHOUT_CLASSIFICATION,//" cascade";
Hibernate,WITHOUT_CLASSIFICATION,// -- Implementation private methods --
Hibernate,WITHOUT_CLASSIFICATION,//trim off the length/precision/scale
Hibernate,WITHOUT_CLASSIFICATION,// CHECK VIOLATION
Hibernate,WITHOUT_CLASSIFICATION,// UNIQUE VIOLATION
Hibernate,WITHOUT_CLASSIFICATION,// FOREIGN KEY VIOLATION
Hibernate,WITHOUT_CLASSIFICATION,//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user
Hibernate,WITHOUT_CLASSIFICATION,// to support dialects that have their own identity data type
Hibernate,WITHOUT_CLASSIFICATION,// NOT NULL VIOLATION
Hibernate,WITHOUT_CLASSIFICATION,// ALL OTHER
Hibernate,WITHOUT_CLASSIFICATION,// Register the type of the out param - PostgreSQL uses Types.OTHER
Hibernate,WITHOUT_CLASSIFICATION,// seems to have spotty LOB suppport
Hibernate,WITHOUT_CLASSIFICATION,// HHH-2300
Hibernate,WITHOUT_CLASSIFICATION,// ignore (probably H2 not in the classpath)
Hibernate,WITHOUT_CLASSIFICATION,// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,//used also for generation of FK names!
Hibernate,WITHOUT_CLASSIFICATION,//usually useless
Hibernate,WITHOUT_CLASSIFICATION,//do not add unique constraint on DB not supporting unique and nullable columns
Hibernate,WITHOUT_CLASSIFICATION,//for backward compatibility disable this:
Hibernate,WITHOUT_CLASSIFICATION,//may be final //may be final //may be final
Hibernate,WITHOUT_CLASSIFICATION,//may be final
Hibernate,WITHOUT_CLASSIFICATION,// may be final
Hibernate,WITHOUT_CLASSIFICATION,// Custom SQL
Hibernate,WITHOUT_CLASSIFICATION,//Primary key constraint
Hibernate,WITHOUT_CLASSIFICATION,// ignore it...
Hibernate,WITHOUT_CLASSIFICATION,// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// not null is implicit
Hibernate,WITHOUT_CLASSIFICATION,// Display the dialect version.
Hibernate,WITHOUT_CLASSIFICATION,// nothing to do in a stateful session
Hibernate,WITHOUT_CLASSIFICATION,// The RDMS concat() function only supports 2 parameters
Hibernate,WITHOUT_CLASSIFICATION,//flat recursive algorithm
Hibernate,WITHOUT_CLASSIFICATION,//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later so it needs to be excluded
Hibernate,WITHOUT_CLASSIFICATION,// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hibernate,WITHOUT_CLASSIFICATION,// Original Dialect.java returns " for update";
Hibernate,WITHOUT_CLASSIFICATION,//pass the column name (a generated id almost always has a single column)
Hibernate,WITHOUT_CLASSIFICATION,//needed to satisfy KeyValue
Hibernate,WITHOUT_CLASSIFICATION,// Verify the state of this new method in Hibernate 3.0 Dialect.java
Hibernate,WITHOUT_CLASSIFICATION,// Origial Dialect.java returns true;
Hibernate,WITHOUT_CLASSIFICATION,// index should be last column listed
Hibernate,WITHOUT_CLASSIFICATION,// *** Sequence methods - start. The RDMS dialect needs these
Hibernate,WITHOUT_CLASSIFICATION,// methods to make it possible to use the Native Id generator
Hibernate,WITHOUT_CLASSIFICATION,//if it is a formula index use the element columns in the PK
Hibernate,WITHOUT_CLASSIFICATION,// don't create a unique key 'cos some // databases don't like a UK on nullable // columns
Hibernate,WITHOUT_CLASSIFICATION,// *** Sequence methods - end
Hibernate,WITHOUT_CLASSIFICATION,// Used with DROP TABLE to delete all records in the table.
Hibernate,WITHOUT_CLASSIFICATION,// no foreign key element of for a one-to-many
Hibernate,WITHOUT_CLASSIFICATION,//TODO: we could just return all false...
Hibernate,WITHOUT_CLASSIFICATION,// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
Hibernate,WITHOUT_CLASSIFICATION,// the object is persistent
Hibernate,WITHOUT_CLASSIFICATION,// RDMS supports the UNION ALL clause.
Hibernate,WITHOUT_CLASSIFICATION,// Multi-param dialect functions...
Hibernate,WITHOUT_CLASSIFICATION,// function templates
Hibernate,WITHOUT_CLASSIFICATION,//not null is implicit
Hibernate,WITHOUT_CLASSIFICATION,// this assumes schema support which is present in 1.8.0 and later...
Hibernate,WITHOUT_CLASSIFICATION,// HSQLDB only supports READ_UNCOMMITTED transaction isolation
Hibernate,WITHOUT_CLASSIFICATION,//the entity is associated with the session so check its status
Hibernate,WITHOUT_CLASSIFICATION,// TimesTen has no BLOB/CLOB support but these types may be suitable  // for some applications. The length is limited to 4 million bytes.
Hibernate,WITHOUT_CLASSIFICATION,// new methods in dialect3
Hibernate,WITHOUT_CLASSIFICATION,"/*public boolean supportsForUpdateNowait() {		return false;	}*/"
Hibernate,WITHOUT_CLASSIFICATION,// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...
Hibernate,WITHOUT_CLASSIFICATION,// iterate entries ordered by capacity to find first fit
Hibernate,WITHOUT_CLASSIFICATION,// add new ordered map
Hibernate,WITHOUT_CLASSIFICATION,// expected type is intrinsic here...
Hibernate,WITHOUT_CLASSIFICATION,//return memberPersister.getPropertyType(propertyName);
Hibernate,WITHOUT_CLASSIFICATION,//return memberPersister.toColumns(alias propertyName);
Hibernate,WITHOUT_CLASSIFICATION,//return memberPersister.getType();
Hibernate,WITHOUT_CLASSIFICATION,/*&& !indexIsFormula*/
Hibernate,WITHOUT_CLASSIFICATION,"//		return !isOneToMany();"
Hibernate,WITHOUT_CLASSIFICATION,//instanceof AssociationType;
Hibernate,WITHOUT_CLASSIFICATION,// we need to determine the best way to know that two joinables // represent a single many-to-many...
Hibernate,WITHOUT_CLASSIFICATION,//strip leading ''
Hibernate,WITHOUT_CLASSIFICATION,//public boolean isSubselectLoadable();
Hibernate,WITHOUT_CLASSIFICATION,//columns
Hibernate,WITHOUT_CLASSIFICATION,//SQL statements
Hibernate,WITHOUT_CLASSIFICATION,//extra information about the element type
Hibernate,WITHOUT_CLASSIFICATION,//types
Hibernate,WITHOUT_CLASSIFICATION,// custom sql
Hibernate,WITHOUT_CLASSIFICATION,//private final String unquotedIdentifierColumnName;
Hibernate,WITHOUT_CLASSIFICATION,"//		return ""select CURRENT_TIMESTAMP from RDB$DATABASE"";"
Hibernate,WITHOUT_CLASSIFICATION,// dynamic filters specifically for many-to-many inside the collection
Hibernate,WITHOUT_CLASSIFICATION,// dynamic filters for the collection
Hibernate,WITHOUT_CLASSIFICATION,//registerColumnType data types
Hibernate,WITHOUT_CLASSIFICATION,// IBID for current_time and current_date
Hibernate,WITHOUT_CLASSIFICATION,// If we've been blocking for the mutex perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication confirm it's  // marked "resident" (a status which doesn't replicate)
Hibernate,WITHOUT_CLASSIFICATION,// Tell hibernate to use getBytes instead of getBinaryStream
Hibernate,WITHOUT_CLASSIFICATION,// No batch statements
Hibernate,WITHOUT_CLASSIFICATION,//ELEMENT
Hibernate,WITHOUT_CLASSIFICATION,"/*		 * We might want a special case for 192. This is very common for money types		 * and here it is converted to 181		 */"
Hibernate,WITHOUT_CLASSIFICATION,//no pointbase BIT
Hibernate,WITHOUT_CLASSIFICATION,//no pointbase TINYINT
Hibernate,WITHOUT_CLASSIFICATION,// NativeSQL: collect element column and auto-aliases
Hibernate,WITHOUT_CLASSIFICATION,// INDEX AND ROW SELECT
Hibernate,WITHOUT_CLASSIFICATION,// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table
Hibernate,WITHOUT_CLASSIFICATION,// NativeSQL: collect index column and auto-aliases
Hibernate,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.CLOB 16777215 ""mediumtext"" ); //		registerColumnType( Types.CLOB 65535 ""text"" );"
Hibernate,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.VARCHAR 16777215 ""mediumtext"" ); //		registerColumnType( Types.VARCHAR 65535 ""text"" );"
Hibernate,WITHOUT_CLASSIFICATION,//GENERATE THE SQL:
Hibernate,WITHOUT_CLASSIFICATION,//not all classpersisters implement PropertyMapping!
Hibernate,WITHOUT_CLASSIFICATION,// Handle any filters applied to this collection for many-to-many
Hibernate,WITHOUT_CLASSIFICATION,//if there is a user-specified loader return that //TODO: filters!?
Hibernate,WITHOUT_CLASSIFICATION,"// Take care of any entities that might have // been evicted!	"
Hibernate,WITHOUT_CLASSIFICATION,// Run a subquery loader
Hibernate,WITHOUT_CLASSIFICATION,// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that
Hibernate,WITHOUT_CLASSIFICATION,//Sybase BIT type does not support null values
Hibernate,WITHOUT_CLASSIFICATION,// We could register the session against the transaction even though it is // not started but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).
Hibernate,WITHOUT_CLASSIFICATION,//needed by arrays
Hibernate,WITHOUT_CLASSIFICATION,"//		 This assumes you will want to ignore any update counts"
Hibernate,WITHOUT_CLASSIFICATION,//TODO: something with formulas...
Hibernate,WITHOUT_CLASSIFICATION,//an assertion
Hibernate,WITHOUT_CLASSIFICATION,// Remove all the old entries
Hibernate,WITHOUT_CLASSIFICATION,//create all the new entries
Hibernate,WITHOUT_CLASSIFICATION,//delete all the deleted entries
Hibernate,WITHOUT_CLASSIFICATION,//insert all the new entries

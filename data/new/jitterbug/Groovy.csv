projectname,classification,commenttext
Groovy,SATD,//  todo: inner class nodes don't have an objectInitializers field available 
Groovy,SATD,/*          * TODO: Remove after JDK9 is the minimum JDK supported         *         * JDK9+ correctly accounts for the synthetic parameter and when it becomes         * the minimum version this method should no longer be required.          */
Groovy,SATD,//         currently char isn't found due to a bug so go with Object 
Groovy,SATD,//  TODO check specified type is assignable from declared param type?   ClassNode type = getMemberClassValue(namedParam "type"); 
Groovy,SATD,/*  todo these special cases should be special MetaClasses maybe  */
Groovy,SATD,//  @todo - refactor pulling generic parser interface up 
Groovy,SATD,//  hack to reformat other groovydoc block tags (@see @return @param @throws @author @since) into html 
Groovy,SATD,/*  To swap two children of node t...     *     *<pre>     *   (t)     *    |     *    |     *   (a) -- (b)     *     * t.down = firstNode     * a.right = b     * b.right = null     *</pre>     * becomes     *<pre>     *   (t)     *    |     *    |     *   (b) -- (a)     *     * t.down = b     * a.right = null     * b.right = a     *</pre>     *     * todo - build API of basic tree mutations like this method.      */
Groovy,SATD,// TODO: in case of the array we could maybe make a partial check 
Groovy,SATD,//  TODO: maybe define a Throwable and use it here instead of Object 
Groovy,SATD,// TODO: change that to get the correct scope 
Groovy,SATD,/*  * @todo multi threaded compiling of the same class but with different roots * for compilation... T1 compiles A which uses B T2 compiles B... mark A and B * as parsed and then synchronize compilation. Problems: How to synchronize? * How to get error messages? *  */
Groovy,SATD,// workaround for Groovy-835 
Groovy,SATD,// There HAS to be a better way to do this! 
Groovy,SATD,//  Groovy allows more characters than Character.isValidJavaIdentifier() would allow   if we find a good way to encode special chars we could remove (some of) these checks 
Groovy,SATD,//  TODO: this might not do enough or too much   But it is a good start without spreading logic everywhere 
Groovy,SATD,//  hack warning! fragile! TODO find a better way 
Groovy,SATD,/*      * TODO: Should return the URI for this source but we can't know what it is here.     *     * @return null      */
Groovy,SATD,//  TODO includes? excludes? 
Groovy,SATD,//  cast with explicit weaker generics for now to keep jdk6 happy TODO: find better fix 
Groovy,SATD,// TODO: report multiple missing labels of the same name only once? 
Groovy,SATD,//  GROOVY-6337 HACK: in case newly created field is @Lazy 
Groovy,SATD,//  ignore   TODO should use a low priority logger 
Groovy,SATD,//  TODO the buffer is not read up to the end but up to length - 6 
Groovy,SATD,//  FIXME no implementation?          SoftDoubleKeyMap.Entry val = (SoftDoubleKeyMap.Entry) assignableMap.getOrPut(klazz aClass null); 
Groovy,SATD,//  todo: this might not work correctly for absolute paths 
Groovy,SATD,// TODO: don't ignore inner static classes completely 
Groovy,SATD,//  TODO store this on root node? reset bodyText? 
Groovy,SATD,//  TODO use PackageNode instead here? 
Groovy,SATD,//  TODO: move somewhere else GROOVY-1874 
Groovy,SATD,//  TODO consider moving initcode to <clinit> and remaking field final 
Groovy,SATD,// TODO: inner classes mean a different this-type. This is ignored here! 
Groovy,SATD,//  this is only correct in this context here normally   we would have to compile against compareTo if available   but since we don't compile here this one is enough 
Groovy,SATD,//    FIXME: Use List<String> here current version is not safe   
Groovy,SATD,//  temporary hack 
Groovy,SATD,//  todo windows?? 
Groovy,SATD,//    HACK: For now force all classes to compile so we pick up stub changes 
Groovy,SATD,//  TODO instead of catching Object<T> here stop it from being placed into type in first place 
Groovy,SATD,//  TODO should we check package node doesn't already exist? conflict? 
Groovy,SATD,//  TODO: For GROOVY-2599 do we need something like below but it breaks other things              return (String) invokeMethod(arguments "toString" EMPTY_ARGS); 
Groovy,SATD,//  TODO make EmptyExpression work   partially works but not if only thing in script   return EmptyExpression.INSTANCE; 
Groovy,SATD,//  todo - possibly check for line/col with values of 0 or less... 
Groovy,SATD,// TODO: this method should really return some kind of meta ClassNode   representing the combination of all bounds. The code here just picks   something out to be able to proceed and is not actually correct 
Groovy,SATD,/*      * NOTE: as per the class javadoc this class doesn't obey the normal equals/hashCode contract.     * The following field and method could assist some scenarios which required a similar sort of contract     * (but between equals and the custom canonicalHashCode). Currently commented out since we haven't     * found a real need. We will likely remove this commented out code if no usage is identified soon.      */
Groovy,SATD,/*      * Represents GenericsType name     * TODO In order to distinguish GenericsType with same name(See GROOVY-8409) we should add a property to keep the declaring class.     *     * fixing GROOVY-8409 steps:     * 1) change the signature of constructor GenericsTypeName to `GenericsTypeName(String name ClassNode declaringClass)`     * 2) try to fix all compilation errors(if `GenericsType` has declaringClass property the step would be a bit easy to fix...)     * 3) run all tests to see whether the change breaks anything     * 4) if all tests pass congratulations! but if some tests are broken try to debug and find why...     *     * We should find a way to set declaring class for `GenericsType` first it can be completed at the resolving phase.      */
Groovy,SATD,// todo we should flag this when the path is created that this is a field not a prop...   try direct method... 
Groovy,SATD,// TODO: maybe implement the case localDistance==distance 
Groovy,SATD,//  major hack here...! 
Groovy,SATD,//  getTarget(var) can be null in buggy xform code e.g. Spock <= 1.1   TODO consider removing fixVar once Spock 1.2 is released - replace with informational exception? 
Groovy,SATD,//  TODO: enforce stricter behavior?   given Map.Entry is an interface we get a proxy which gives us lots   of flexibility but sometimes the error messages might be unexpected 
Groovy,SATD,// TODO: maybe do something here? 
Groovy,SATD,// TODO: more cases here 
Groovy,SATD,//  TODO refactor to retain richer type information rather than converting to String 
Groovy,SATD,//  FIXME: all labeled arguments should follow any unlabeled arguments 
Groovy,SATD,// @todo - is this useful? 
Groovy,SATD,//  @todo refactor this path 
Groovy,SATD,//    FIXME: For now just save the first error should really roll a new message with all of the details   
Groovy,SATD,//  should we use a finer grained lock than this? 
Groovy,SATD,//  it's better to cache class instances by the source code   GCL will load the unique class instance for the same source code   and avoid occupying Permanent Area/Metaspace repeatedly 
Groovy,SATD,//  is method object correct type? 
Groovy,SATD,//  A little bit of paranoid checking here? Most drivers will throw BatchUpdateException perhaps? 
Groovy,SATD,// TODO After 1.1 we should introspect the meta property and set editable to false if the property is read only 
Groovy,SATD,// TODO: replace with normal String p not needed 
Groovy,SATD,//  @todo should try with just a node as the child 
Groovy,SATD,//  hack warning!   TODO handle  and ) when they occur within Strings 
Groovy,SATD,//  TODO: this method is very similar to StaticTypesCheckingSupport#extractGenericsConnections   but operates on ClassNodes instead of GenericsType 
Groovy,SATD,// TODO: set correct type here   if setting type and a methodcall is the last expression in a method   then the method will return null if the method itself is not void too!   (in bytecode after call: aconst_null areturn) 
Groovy,SATD,//  TODO handle the owner and delegate cases better for nested scenarios and potentially remove the need for the implicit this case 
Groovy,SATD,// LOGME   do we ignore it or fail? 
Groovy,SATD,//         "The class 'DodgyClass' has an incorrect modifier synchronized."; 
Groovy,SATD,//  we can't have a specialized version of call(Object...) because the dispatch logic in ClosureMetaClass   is too complex! 
Groovy,SATD,// TODO: implement 
Groovy,SATD,//  Don't do this in static initializer because we may never be needed.   TODO: Put this lineSeparator property somewhere everyone can use it. 
Groovy,SATD,/*      * NOTE: as per the class javadoc this class doesn't obey the normal equals/hashCode contract.     * The following field and method could assist some scenarios which required a similar sort of contract     * (but between fastEquals and the custom fastHashCode). Currently commented out since we haven't     * found a real need. We will likely remove this commented out code if no usage is identified soon.      */
Groovy,SATD,//  this should always be the case but adding a test is safer 
Groovy,SATD,//  TODO: not sure why but groovy.ui.view.BasicContentPane#buildOutputArea classDoc is null 
Groovy,SATD,//  todo: the check for isWildcard should be replaced with a more complete check 
Groovy,SATD,//  TODO: is it safe to remove this? What was the original intention? 
Groovy,SATD,//  TODO is this needed so we can click through on default values?      @Override 
Groovy,SATD,//  TODO implement below if/when needed 
Groovy,SATD,//  TODO expose this for stream based stripping? 
Groovy,SATD,//  RFC 2045 says that I'm allowed to take the presence of   these characters as evidence of data corruption   So I will   TODO: change this exception type 
Groovy,SATD,// todo: doesn't parse correctly...   assertEquals("class Foo<T super C> {T t}"pretty("class Foo<T super C> {T t}")); 
Groovy,SATD,//  todo : confirm that TYPE_LOWER_BOUNDS does not have multiple children 
Groovy,SATD,//  todo: handle vargs! 
Groovy,SATD,//  TODO: can STCV be made smarter to avoid this check? 
Groovy,SATD,// TODO: maybe use more specialized type here 
Groovy,SATD,//  TODO make this a method to be called from TupleConstructor xform add check for 'defaults'? 
Groovy,SATD,//  normally we would do the following   handle = MethodHandles.dropArguments(handle0Class.class);   but because there is a bug in invokedynamic in all jdk7 versions    maybe use Unsafe.ensureClassInitialized 
Groovy,SATD,//  TODO this really should find "best" match or find all matches and complain about ambiguity if more than one   TODO handle getAt with more than one parameter   TODO handle default getAt methods on Java 8 interfaces 
Groovy,SATD,//  is method name correct? 
Groovy,SATD,/*      * Compiler configuration.     * <p>     * Used to specify the debug output to print stacktraces in case something fails.     * TODO: Could probably be reused to specify the encoding of the files to load or other properties.      */
Groovy,SATD,// TODO: the case of a NoClassDefFoundError needs a bit more research   a simple recompilation is not possible it seems. The current class   we are searching for is there so we should mark that somehow.   Basically the missing class needs to be completely compiled before   we can again search for the current name. 
Groovy,SATD,//  TODO below will be deleted once we fix type checker to understand   readonly Map otherwise seen as Map<String Serializable> 
Groovy,SATD,//  GROOVY-5814: Immutable is not compatible with @CompileStatic 
Groovy,SATD,//  todo: remove after putAt(Splice) gets deleted 
Groovy,SATD,// TODO in Groovy 2.0 use varargs? 
Groovy,SATD,//  TODO expose this for other usage scenarios e.g. stream based stripping? 
Groovy,SATD,/*     A better set of more complete tests of everything below is on the way!     */
Groovy,SATD,//  todo - the visitor doesn't always take PrintStreams as constructor params!  Could be a more reusable implementation than this... 
Groovy,SATD,//  TODO: remove this visit 
Groovy,SATD,//  TODO we might wanna only try to resolve the name if we are   on the left hand side of an expression or before a dot? 
Groovy,SATD,//  TODO GroovyDoc doesn't parse this file as our java.g doesn't handle this JDK7 syntax 
Groovy,SATD,//  Convenience hack: try convert single-char strings to ints 
Groovy,SATD,//  not thread safe 
Groovy,SATD,//  TODO refactor PIPE to be BITWISE_OR 
Groovy,SATD,//  Implementation note - there are several ways for the Groovy compiler   to report an unexpected EOF. Perhaps this implementation misses some.   If you find another way please add it. 
Groovy,SATD,//  Keep the same default source encoding with the one used by #parseClass(InputStream String)   TODO should we use org.codehaus.groovy.control.CompilerConfiguration.DEFAULT_SOURCE_ENCODING instead? 
Groovy,SATD,//  TODO should we make ProxyGenerator singleton? 
Groovy,SATD,// TODO: this Object[] can be constant 
Groovy,SATD,/*  here is a different implementation that uses getProperties(). I have left         * it commented out because it returns a slightly different list of properties;         * i.e. it does not return privates. I don't know what dump() really should be doing         * although IMO showing private fields is a no-no          */
Groovy,SATD,//  TODO also check for phase after sourceUnit.getPhase()? but will be ignored anyway?   TODO we should only copy those annotations with FIELD_TARGET but haven't visited annotations   and gathered target info at this phase so we can't do this:   return annotation.isTargetAllowed(AnnotationNode.FIELD_TARGET);   instead just don't copy ourselves for now 
Groovy,SATD,// todo: these fail because regexp_literals are converted into string_literals on the antlr AST 
Groovy,SATD,//  TODO remove this once we support declarations in the while condition 
Groovy,SATD,//  TODO: have to think about how to optimize this! 
Groovy,SATD,//  TODO cache these?? 
Groovy,SATD,//  TODO find a way to inject any GroovyLexer/GroovyRecognizer 
Groovy,SATD,/*      * TODO(jwagenleitner): remove or fix in future release     *     * According to the spec getContentEncoding() returns the Content-Encoding     * HTTP Header which typically carries values such as 'gzip' or 'deflate'     * and is not the character set encoding. For compatibility in 2.4.x     * this behavior is retained but should be removed or fixed (parse     * charset from Content-Type header) in future releases.     *     * see GROOVY-8056 and https://github.com/apache/groovy/pull/500      */
Groovy,SATD,//             //TODO: test if this is OK with new MOP should be changed!              // we don't want the exception being unwrapped if it is a IllegalArgumentException              // but in the case it is for example a IllegalThreadStateException we want the unwrapping              // from the runtime              //Note: the reason we want unwrapping sometimes and sometimes not is that the method              // invocation tries to invoke the method with and then reacts with type transformation              // if the invocation failed here. This is OK for IllegalArgumentException but it is              // possible that a Reflector will be used to execute the call and then an Exception from inside              // the method is not wrapped in a InvocationTargetException and we will end here.              boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof org.codehaus.groovy.reflection.GeneratedMetaMethod;              return MetaClassHelper.createExceptionText("failed to invoke method: " this object argumentArray e setReason);          } 
Groovy,SATD,//  TODO @Deprecated 
Groovy,SATD,//  should we throw invalid binding exception?  or fail quietly? 
Groovy,SATD,//  todo: is there anything to do with the module ??? 
Groovy,SATD,// TODO: we should consider calling this one directly for MetaClassImpl        then we save the new method selection 
Groovy,SATD,//  todo will 'super' be allowed in non-parentheses method call styles? 
Groovy,SATD,// todo AntlrParserPlugin: Unexpected node type: '.' found when expecting type: an identifier   fails after parser 
Groovy,SATD,//                     TODO: should be better check for case when only diff in modifiers can be SYNTHETIC flag                      && method.getModifiers() == aMethod.getModifiers() 
Groovy,SATD,//  TODO: checking for isThisOrSuper is enough for AttributeExpression but if this is moved into   visitAttributeOrProperty to handle attributes and properties equally then the extended check should be done 
Groovy,SATD,// TODO: These are the arguments for -p and -i.  Why are we searching using Groovy script extensions?   Where is this documented? 
Groovy,SATD,//  TODO decide if we should support VOLATILE 
Groovy,SATD,//  the groovy.compiler.strictNames system property is experimental and may change default value or be removed in a future version of Groovy 
Groovy,SATD,//  TODO: delete this constant? 
Groovy,SATD,//  TODO track Deprecated usage and give a warning? 
Groovy,SATD,//  fail early with a direct message if possible') 
Groovy,SATD,//  Java2Groovy produces a slightly different tree structure (TODO fix converter or java.g instead?) 
Groovy,SATD,// TODO: maybe use a different bootstrap method since no arguments are needed here 
Groovy,SATD,/*          * TODO : Enable auto ".groovy" extension replacing here!         * http://cvs.groovy.codehaus.org/viewrep/groovy/groovy/groovy-core/src/main/groovy/servlet/GroovyServlet.java?r=1.10#l259          */
Groovy,SATD,//  TODO: spread safe should be handled inside 
Groovy,SATD,//  TODO: do we need to lock down things like: $ownClass 
Groovy,SATD,//  todo : are there other import types that can be specified? 
Groovy,SATD,//  TODO consider creating an element for this 
Groovy,SATD,//  try to get a better error message location based on the property 
Groovy,SATD,//  TODO: add more tests in here (is there a way to share snippets with SourcePrinterTest?) 
Groovy,SATD,// TODO: create a WriteOnlyException class? 
Groovy,SATD,//  TODO: if our code can never access inspect in this way it would be better 
Groovy,SATD,//  TODO: investigate the trait exclusion a bit further needed otherwise   CallMethodOfTraitInsideClosureAndClosureParamTypeInference fails saying   not static method can't be called from a static context 
Groovy,SATD,// TODO: need errors for write-only too! 
Groovy,SATD,// TODO: optimize: add guard based on type Closure 
Groovy,SATD,//  TODO fix 
Groovy,SATD,//  TODO remove? 
Groovy,SATD,//  todo: should this be directly handled by getPlainNodeReference? 
Groovy,SATD,// TODO: apply generics on parameter[0]?                                  storeType(pexp setter.getParameters()[0].getType()); 
Groovy,SATD,// TODO: more than one lower bound for wildcards? 
Groovy,SATD,//  BUG! exception in phase 'conversion' in source unit 'Script1.groovy' null   fails after parser 
Groovy,SATD,//  TODO: Add methods like addMetaConstructor addMetaAttribute addMetaAnnotation etc. 
Groovy,SATD,//  todo: above is not quite the spacing I would expect but good enough for now...   todo not yet implemented in parser: assertEquals("(new Outer()).super()" pretty("(new Outer()).super()")); 
Groovy,SATD,//  GROOVY-7316 : it is an apparently legal thing to allow this. It's not type safe 
Groovy,SATD,//  TODO handle ACC_SYNTHETIC for enum method parameters? 
Groovy,SATD,//  TODO: change this exception type 
Groovy,SATD,//  by default use GrapeIvy  TODO META-INF/services resolver? 
Groovy,SATD,//  this is a limitation that must be removed in a future version   we cannot check generic type arguments if there are default parameters! 
Groovy,SATD,//  todo : type inference on maps and lists if possible 
Groovy,SATD,//  HACK: JavaStubGenerator could have snuck in a constructor we don't want 
Groovy,SATD,// TODO: apply right generics here! 
Groovy,SATD,// TODO: get the type's of the expressions to specify the   list type to List<X> if possible. 
Groovy,SATD,//  TODO a better way to do this? 
Groovy,SATD,//  TODO make @CS lookup smarter so that we don't need both these maps 
Groovy,SATD,// TODO: that is just a quick prototype not the real thing! 
Groovy,SATD,//  TODO IllegalArgumentException for marginChar.length() > 1 ? Or support String as marker? 
Groovy,SATD,// todo the spacing here is... unusual 
Groovy,SATD,//  should we check interfaces as well?  if so at what level? 
Groovy,SATD,//  TODO add generics support so this can be used for @EAHC 
Groovy,SATD,//  since the calling code will push the type again we better remove it here 
Groovy,SATD,//  cater for explicit href in e.g. @see TODO: push this earlier? 
Groovy,SATD,// TODO: if rhs is VariableSlotLoader already then skip crating a new one 
Groovy,SATD,//  todo: inner class nodes don't have a constructors field available 
Groovy,SATD,//  FRICKIN' HACK!!!!! For some reason deleting a string at offset 0   does not get done properly so first replace and remove after parsing 
Groovy,SATD,//  note: def not needed in parameter declarations but it is valid  todo: is it ok to strip out 'def' from parameter declarations? 
Groovy,SATD,// TODO: get the type's of the expressions to specify the   map type to Map<X> if possible. 
Groovy,SATD,// todo spacing is odd c.f. last space in class vs interface above 
Groovy,SATD,//  todo - 17 July 2006 - test fine however this parses but causes error in AntlrParserPlugin   fails after parser 
Groovy,SATD,//  TODO expose this for stream based scenarios? 
Groovy,SATD,//  TODO This is the only area where this MetaClass needs to do some interception because Groovy's current   MetaClass uses hard coded references to the java.lang.reflect.Constructor class so you can't simply   inject Constructor like you can do properties methods and fields. When Groovy's MetaClassImpl is   refactored we can fix this 
Groovy,SATD,//  TODO: is there a better way to do this? 
Groovy,SATD,//  TODO FIX if empty AssertionWriter fails because source text is null 
Groovy,SATD,//  TODO this won't strictly be true when using list expansion in argument calls 
Groovy,SATD,//  should always be the case but safe guard is better 
Groovy,SATD,// TODO: remove this method if possible by switchpoint usage 
Groovy,SATD,//  are we a local variable?   it should not be an explicitly "this" qualified method call   and the current class should have a possible method 
Groovy,SATD,//  TODO: move somewhere else 
Groovy,SATD,//  TODO: Shouldn't these extensions be kept elsewhere?  What about CompilerConfiguration?   This method probably shouldn't be in GroovyMain either. 
Groovy,SATD,/*  Should we make the following method private?  */
Groovy,SATD,// FIXME the warning message will NPE with what I have :( 
Groovy,SATD,//  TODO need returnType.qualifiedTypeName() here 
Groovy,SATD,// FIXME: do we really want this() to create a new object regardless   the position.. for example not as first statement in a constructor   this=first statement in constructor is handled by specialConstructorCallExpression 
Groovy,SATD,/*  *  todo: order methods alphabetically (implement compareTo enough?)  */
Groovy,SATD,//  todo: performance would be better if we created a StringBuilder 
Groovy,SATD,//  TODO remove dupe with SimpleGroovyType 
Groovy,SATD,// TODO: more finals? 
Groovy,SATD,//  ugly hack   type definition i.e.   int[] x; 
Groovy,SATD,//  GROOVY-8914: pre-compiled classes lose synthetic boolean - TODO fix earlier as per GROOVY-4346 then remove extra check here 
Groovy,SATD,//  TODO: Should we have some unified function like PrintWriter.checkError()? 
Groovy,SATD,// TODO: check if this part is actually used 
Groovy,SATD,//  todo: above is not quite the spacing I would expect but good enough for now... 
Groovy,SATD,//  TODO consider moving next two statements "up a level" i.e. have just one more widely invoked 
Groovy,SATD,//  TODO: this should go away once we have proper tags 
Groovy,SATD,/*  @todo we should check if we have the property with the metaClass instead of try/catch   */
Groovy,SATD,//  TODO shouldn't really be treating annotation fields as methods - remove this hack 
Groovy,SATD,//  TODO intern types?   TODO configureAST(...) 
Groovy,SATD,//  todo - inline open block is great but it doesn't work as one would expect (yet). (c.f. with)   slist inside a method body (needed label to distinguish from a closure)   slist inside each case body... 
Groovy,SATD,/*              * TODO treble equal?             return binaryExpression(Types.COMPARE_IDENTICAL node);             case ???:             return binaryExpression(Types.LOGICAL_AND_EQUAL node);             case ???:             return binaryExpression(Types.LOGICAL_OR_EQUAL node);              */
Groovy,SATD,//  FIXME:  What should we use as the base URI?   It is unlikely we get to this point with a relative URI since making a URL   from will make it absolute I think.  But lets handle the simple case of   using file paths and turning that into an absolute file URI.   So we will use the current working directory as the base. 
Groovy,SATD,// todo the following is legal Java but pretty strange...?   fails after parser 
Groovy,SATD,//  TODO should this really be static???   cleared on build() to be safe 
Groovy,SATD,//  TODO validate args? 
Groovy,SATD,// TODO Joche: replace with real implementation 
Groovy,SATD,//  Shall we allow this ? Using Boolean ctors is usually not what user wants... 
Groovy,SATD,//  GROOVY-8174: we'd like stricter checking here but many drivers currently in use just aren't consistent enough so we log 
Groovy,SATD,//  Create one script per socket connection.   This is purposefully not caching the Script   so that the script source file can be changed on the fly   as each connection is made to the server.  FIXME: Groovy has other mechanisms specifically for watching to see if source code changes.   We should probably be using that here.   See also the comment about the fact we recompile a script that can't change. 
Groovy,SATD,// todo test newlines inside strings somehow... 
Groovy,SATD,// TODO: maybe use more special type StringBuffer here 
Groovy,SATD,/*              * Other internal error. Perhaps syntax?!              */
Groovy,SATD,/*               Currently leaving BigInteger and BigDecimal in list but see:              http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6348370              Also Color is not final so while not normally used with child              classes it isn't strictly immutable. Use at your own risk.              This list can by extended by providing "known immutable" classes              via Immutable.knownImmutableClasses              */
Groovy,SATD,//  todo - incomplete as body of do...while... should be executed at least once which this doesn't provide. 
Groovy,SATD,//  we found multiple matching methods   this is a problem because we can use only one   if it is a getter then use the most general return   type to decide which method to use. If it is a setter 
Groovy,SATD,//  todo: replace with a real fast path unary expression helper when available 
Groovy,SATD,// TODO: if we would know exactly which paths require the exceptions        and which paths not we can sometimes save this guard  
Groovy,SATD,// TODO (blackdrag): this if branch needs a rework. There should be no direct method calls be produced the   handling of this/super could be much simplified (see visitAttributeExpression) the field accessibility check   could be moved directly into the search which would also no longer require the GroovyBugError then   the outer class field access seems to be without any tests (if there are tests for that then the code   here is dead code) 
Groovy,SATD,//  TODO don't allow override? 
Groovy,SATD,//  todo need process multi 
Groovy,SATD,//  does this operator make any sense? 
Groovy,SATD,/*  @todo we should use the real Josh Bloch algorithm here  */
Groovy,SATD,//  we have a duplicate class!   One possibility for this is that we declared a script and a   class in the same file and named the class like the file 
Groovy,SATD,/*                      * todo there is no CompileUnit in scope so class name                     * checking won't work but that mostly affects the bytecode                     * generation rather than viewing the AST                      */
Groovy,SATD,/*  @todo maybe a double dispatch thing to handle new large numbers?  */
Groovy,SATD,// TODO: This logic mostly duplicates InvokerHelper.createScript.  They should probably be unified. 
Groovy,SATD,/*      * Should be called when descending into a loop that defines     * also a scope. Calls pushVariableScope and prepares labels     * for a loop structure. Creates a element for the state stack     * so pop has to be called later TODO: @Deprecate      */
Groovy,SATD,//  TODO check that we reset everything here 
Groovy,SATD,//  TODO Jochen: replace with new MetaMethod 
Groovy,SATD,//  todo is '' deprecated now?  assertEquals("assert b == true  99" pretty("assert b==true99")); 
Groovy,SATD,//   TODO: I (ait) don't know why these strange tricks needed and comment following as it effects some Grails tests 
Groovy,SATD,// TODO: implement int operations for this 
Groovy,SATD,//  TODO: should be able to remove the klazz field once 2.5 becomes the mainline release   Gradle has a cleanup mechanism in place to reflectively access this klazz field.   The klazz field is being kept for compatibility so as to not break builds that depend   on versions of Groovy after the field was changed to a WeakReference (classRef).  It   appears that Gradle only performs the cleanup when it detects a groovy version of 2.4.x   so the klazz field and placeholder Sentinel class can likely be safely removed once   the release version bumps to 2.5 (or beyond).   See:   https://github.com/gradle/gradle/blob/711f64/subprojects/core/src/main/java/org/gradle/api/internal/classloading/LeakyOnJava7GroovySystemLoader.java#L74 
Groovy,SATD,//  todo suspicious spacing in the following assertion 
Groovy,SATD,// more than one matching method found --> ambiguous! 
Groovy,SATD,//         "The method 'java.lang.Object vo()' has an incorrect modifier volatile."; 
Groovy,SATD,// todo should the colon be postfixed to the label? 
Groovy,SATD,//  Bad enough to have side effects but worse if their behavior is wonky. 
Groovy,SATD,//  TODO could be made more efficient by using a reverse index 
Groovy,SATD,// TODO: Cater for comments? 
Groovy,WITHOUT_CLASSIFICATION,// lines.add(new StringBuilder()); // dummy row for position [0] in the List 
Groovy,WITHOUT_CLASSIFICATION,/*     * true if either \n or \r     */
Groovy,WITHOUT_CLASSIFICATION,//  ex : (Character) 'c' 
Groovy,WITHOUT_CLASSIFICATION,//  fallback to Map#get 
Groovy,WITHOUT_CLASSIFICATION,//  use a comparator of one item or two 
Groovy,WITHOUT_CLASSIFICATION,/*     The basic strategy is an optimistic-style scheme based on    the guarantee that the hash table and its lists are always    kept in a consistent enough state to be read without locking:    * Read operations first proceed without locking by traversing the       apparently correct list of the apparently correct bin. If an       entry is found but not invalidated (value field null) it is       returned. If not found operations must recheck (after a memory       barrier) to make sure they are using both the right list and       the right table (which can change under re-sizes). If       invalidated reads must acquire main update lock to wait out       the update and then re-traverse.    * All list additions are at the front of each bin making it easy       to check changes and also fast to traverse.  Entry next       pointers are never assigned. Remove() builds new nodes when       necessary to preserve this.    * Remove() (also clear()) invalidates removed nodes to alert read       operations that they must wait out the full modifications.   */
Groovy,WITHOUT_CLASSIFICATION,//  path for JavaStubGenerator 
Groovy,WITHOUT_CLASSIFICATION,//  let's invoke the closure method 
Groovy,WITHOUT_CLASSIFICATION,//  Load the file name list 
Groovy,WITHOUT_CLASSIFICATION,//  structural match route 
Groovy,WITHOUT_CLASSIFICATION,//  add property setter dispatcher 
Groovy,WITHOUT_CLASSIFICATION,//  ClassLoader parentLoader = Thread.currentThread().getContextClassLoader(); 
Groovy,WITHOUT_CLASSIFICATION,//  noop 
Groovy,WITHOUT_CLASSIFICATION,//  adjust stack length 
Groovy,WITHOUT_CLASSIFICATION,//  NOTE: it's important to do no lookup against script files   here since the GroovyClassLoader would 0create a new CompilationUnit 
Groovy,WITHOUT_CLASSIFICATION,/*       * Execute the script represented by scriptStr using the supplied codebase.  If missingPermission      * is non-null then this invocation expects an AccessControlException with missingPermission      * as the reason.  If missingPermission is null the script is expected to execute successfully.       */
Groovy,WITHOUT_CLASSIFICATION,//  and then apply the found information to refine the method level   information. This way the method level information slowly turns 
Groovy,WITHOUT_CLASSIFICATION,// NOTE: we might return false here even if we found a class        because  we want to give a possible script a chance to        recompile. This can only be done if the loader was not 
Groovy,WITHOUT_CLASSIFICATION,//  check if we have \r\n like on Windows   if it's not \r\n we reset otherwise the \n is just consummed 
Groovy,WITHOUT_CLASSIFICATION,//  Make sure we switch over to callback manager 
Groovy,WITHOUT_CLASSIFICATION,/*      * Should be called when descending into a loop that does     * not define a scope. Creates a element for the state stack     * so pop has to be called later TODO: @Deprecate      */
Groovy,WITHOUT_CLASSIFICATION,/*                              * Here we just additionally tried to find another no-arg mixin method of the same name and register that as well if found.                             * Safe to ignore a MethodSelectionException in this additional exercise. (GROOVY-4999)                              */
Groovy,WITHOUT_CLASSIFICATION,//  add method:   PropertyChangeListener[] getPropertyChangeListeners() {     return this$propertyChangeSupport.getPropertyChangeListeners 
Groovy,WITHOUT_CLASSIFICATION,//  visit SlComment()     never visited/created by parser 
Groovy,WITHOUT_CLASSIFICATION,//                 throw new IllegalArgumentException("Arguments to method [respondsTo] must be of type java.lang.Class!"); 
Groovy,WITHOUT_CLASSIFICATION,//  process args as input files 
Groovy,WITHOUT_CLASSIFICATION,//  byte char and short require an extra cast 
Groovy,WITHOUT_CLASSIFICATION,//  the non-hidden ones. 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise the file would not be human readable 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   WARNING LEVELS 
Groovy,WITHOUT_CLASSIFICATION,//  receiver 
Groovy,WITHOUT_CLASSIFICATION,//  after states can only be empty if try and catch statements all return in which case nothing to do 
Groovy,WITHOUT_CLASSIFICATION,//  Message text   Data when the message text is an I18N identifier 
Groovy,WITHOUT_CLASSIFICATION,//  import is like  "import Foo" 
Groovy,WITHOUT_CLASSIFICATION,//  may be we have C[k1:v1] -> should become (C)([k1:v1]) 
Groovy,WITHOUT_CLASSIFICATION,//  disable the replacement whilst the closure is being executed 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see java.lang.Runnable#run()          */
Groovy,WITHOUT_CLASSIFICATION,//  the current meta class 
Groovy,WITHOUT_CLASSIFICATION,//  load this 
Groovy,WITHOUT_CLASSIFICATION,//  now output 
Groovy,WITHOUT_CLASSIFICATION,//  Locate the specific method based on the name and number of parameters 
Groovy,WITHOUT_CLASSIFICATION,//  parameters 
Groovy,WITHOUT_CLASSIFICATION,//  avoids too many errors 
Groovy,WITHOUT_CLASSIFICATION,// else try a statically typed method or a GDK method 
Groovy,WITHOUT_CLASSIFICATION,//  register MetaMethods 
Groovy,WITHOUT_CLASSIFICATION,//  and add this interface to the list of implemented interfaces 
Groovy,WITHOUT_CLASSIFICATION,// TODO check if this should not be change to iterator based call logic 
Groovy,WITHOUT_CLASSIFICATION,//  Unknown type: ANNOTATION_DEF 
Groovy,WITHOUT_CLASSIFICATION,// TODO: value as Annotation here! 
Groovy,WITHOUT_CLASSIFICATION,//  Set it to HTML by default 
Groovy,WITHOUT_CLASSIFICATION,//  The compilation unit global AST transformations are applied on   collected AST transformation names 
Groovy,WITHOUT_CLASSIFICATION,//  generates --> next$Trait$Helper.method(this arg1 arg2) 
Groovy,WITHOUT_CLASSIFICATION,//  no resource found with the default locale try without any locale 
Groovy,WITHOUT_CLASSIFICATION,//  if the current call itself is with empty arg class array no need to recurse with 'new Class[0]' 
Groovy,WITHOUT_CLASSIFICATION,//  Call it immediately. 
Groovy,WITHOUT_CLASSIFICATION,//  <1> 
Groovy,WITHOUT_CLASSIFICATION,// "" 
Groovy,WITHOUT_CLASSIFICATION,// and now use the string section to mangle the line numbers so that they refer to the 
Groovy,WITHOUT_CLASSIFICATION,//    LITERALS 
Groovy,WITHOUT_CLASSIFICATION,//  execute the assignment this will leave the right side    (here the method call result) on the stack 
Groovy,WITHOUT_CLASSIFICATION,//  remove from here and let the caller reposition it 
Groovy,WITHOUT_CLASSIFICATION,//  if origInt and withoutCustomHandle 
Groovy,WITHOUT_CLASSIFICATION,//  empty loop   - read all characters till the end of the reader   UnicodeEscapingReader has side effects of   filling the buffer 
Groovy,WITHOUT_CLASSIFICATION,//  can't seem to do \n in one go with Java regex 
Groovy,WITHOUT_CLASSIFICATION,//  a null element is found in the list skip it because we'll use the other elements from the list 
Groovy,WITHOUT_CLASSIFICATION,//  in case there is no "call" method on the closure we can create a "fast invocation" paths   to avoid going through ClosureMetaClass by call(Object...) method 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setDTDHandler(org.xml.sax.DTDHandler)     */
Groovy,WITHOUT_CLASSIFICATION,//  tag::java_method_selection_head[] 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4043: Do this check up the hierarchy if needed 
Groovy,WITHOUT_CLASSIFICATION,//  load array on stack 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.OffsetDateTime extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  if number of parameters does not match we have no match 
Groovy,WITHOUT_CLASSIFICATION,//  targetType is abstract Collection fitting for HashSet or ArrayList 
Groovy,WITHOUT_CLASSIFICATION,//  alternativeConfigureNode is used only to set the source position 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.ZonedDateTime extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  now if we don't finish with a break we need to jump past   the next comparison 
Groovy,WITHOUT_CLASSIFICATION,//  and object is Collection or array 
Groovy,WITHOUT_CLASSIFICATION,//  Double double 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------   bug: Qualified Exception Types   ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,// Note:  This method is NOT called if number is a BigInteger or BigDecimal because 
Groovy,WITHOUT_CLASSIFICATION,//  write-volatile 
Groovy,WITHOUT_CLASSIFICATION,//  {@code tag} 
Groovy,WITHOUT_CLASSIFICATION,//    Handle any callback that's been set 
Groovy,WITHOUT_CLASSIFICATION,//  worked 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.Closure#call()          */
Groovy,WITHOUT_CLASSIFICATION,//  rhs is ready to use reference just put it in the field 
Groovy,WITHOUT_CLASSIFICATION,//  if the type name was resolved before we can try the successfully resolved packages first which are much less and very likely successful to resolve.   As a result we can avoid trying other default import packages and further resolving which can improve the resolving performance to some extent. 
Groovy,WITHOUT_CLASSIFICATION,//  delegate the get operation to the metaproperty 
Groovy,WITHOUT_CLASSIFICATION,//  only case left is arguments.length == parameterTypes.length 
Groovy,WITHOUT_CLASSIFICATION,//  TODO get normal resolving to set declaring class 
Groovy,WITHOUT_CLASSIFICATION,/*      * A hashCode function that pairs with fastEquals following the normal equals/hashCode contract.     *     * @return the calculated hash code      */
Groovy,WITHOUT_CLASSIFICATION,//  set the delegate to FBS so the closure closes over the builder 
Groovy,WITHOUT_CLASSIFICATION,//  value could not be placed on existing lines so place it on new line(s) 
Groovy,WITHOUT_CLASSIFICATION,//  2 = inner class case 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   TYPE COERSIONS 
Groovy,WITHOUT_CLASSIFICATION,//  we ensure that hasNext has been called before    next is called 
Groovy,WITHOUT_CLASSIFICATION,//  easier to massage here than in the grammar 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    boolean  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  set the args as they might have gotten Newify transformed GROOVY-3491 
Groovy,WITHOUT_CLASSIFICATION,//  this is why shouldFail {} exists in Groovy tests 
Groovy,WITHOUT_CLASSIFICATION,// This is an arbitrary value picked as a reasonable choice for a rounding point 
Groovy,WITHOUT_CLASSIFICATION,//  now inner class node access to outer class fields 
Groovy,WITHOUT_CLASSIFICATION,/* * The Computer Language Benchmarks Game* http://shootout.alioth.debian.org/** Based on contribution of Eckehard Berns* Based on code by Heiner Marxen* and the ATS version by Hongwei Xi* convert to Java by The Anh Tran */
Groovy,WITHOUT_CLASSIFICATION,//  bind is idempotent so no state checking 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovyTag[] tags(String arg0) {/*todo*/return null;} 
Groovy,WITHOUT_CLASSIFICATION,//  this will overwrite a possible field property 
Groovy,WITHOUT_CLASSIFICATION,//  calculate whole list in this case   recommend avoiding -ve's as this is obviously not as efficient 
Groovy,WITHOUT_CLASSIFICATION,//  make the constructor call 
Groovy,WITHOUT_CLASSIFICATION,//  If the range is of size 1 then we can use the existing 
Groovy,WITHOUT_CLASSIFICATION,//  The following fields are only used internally; every occurrence of a user-defined expression of the same kind   has its own instance so as to preserve line information. Consequently to test for such an expression don't   compare against the field but call isXXXExpression() instead. 
Groovy,WITHOUT_CLASSIFICATION,//  important for static compilation! 
Groovy,WITHOUT_CLASSIFICATION,// mv = new org.objectweb.asm.util.TraceMethodVisitor(mv); 
Groovy,WITHOUT_CLASSIFICATION,//    Fill slots with nulls if necessary. 
Groovy,WITHOUT_CLASSIFICATION,//  Note that this getBoolean access may well be synced... 
Groovy,WITHOUT_CLASSIFICATION,//  hand crank it so we can add our own compiler configuration 
Groovy,WITHOUT_CLASSIFICATION,//  TODO remove 
Groovy,WITHOUT_CLASSIFICATION,//  this function will 'correctly' print first 30 permutations 
Groovy,WITHOUT_CLASSIFICATION,//  verify if passing -Xlint in compilerarg had its effect 
Groovy,WITHOUT_CLASSIFICATION,//  the original program used:   Hashtable ht = new Hashtable();   John Olsson points out that Hashtable is for synchronized access   and we should use instead: 
Groovy,WITHOUT_CLASSIFICATION,//  push this operation to master list and then process it. 
Groovy,WITHOUT_CLASSIFICATION,//  the number of arguments is correct but if the last argument   is no array we have to wrap it in a array. If the last argument   is null then we don't have to do anything 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   LOOP SIMPLIFICATION FOR SourceUnit OPERATIONS 
Groovy,WITHOUT_CLASSIFICATION,//  not in java   actually: def z = /blah\s/ // not in java 
Groovy,WITHOUT_CLASSIFICATION,//  prepare target newProxyInstance for fold to drop additional arguments needed by newConvertedClosure 
Groovy,WITHOUT_CLASSIFICATION,//  assert 
Groovy,WITHOUT_CLASSIFICATION,//  The double quote is only escaped if the value is for   an attribute and the builder is configured to output   attribute values inside double quotes. 
Groovy,WITHOUT_CLASSIFICATION,//  The backing data store holding the key-value associations 
Groovy,WITHOUT_CLASSIFICATION,//  this is saved in a field named this$0 
Groovy,WITHOUT_CLASSIFICATION,//  let's check if it already implements an interface 
Groovy,WITHOUT_CLASSIFICATION,//  create a shell 
Groovy,WITHOUT_CLASSIFICATION,//  true part: load $t and cast to S 
Groovy,WITHOUT_CLASSIFICATION,//  potentially skip empty varargs 
Groovy,WITHOUT_CLASSIFICATION,//  dummy fields are only used to carry annotations if instance field 
Groovy,WITHOUT_CLASSIFICATION,//  start try block label needed for exception table 
Groovy,WITHOUT_CLASSIFICATION,//  treat like a singleton list as per Java 
Groovy,WITHOUT_CLASSIFICATION,//  primitive to primitive conversion. Those case are also solved by explicitCastArguments. 
Groovy,WITHOUT_CLASSIFICATION,//  to finally see if the parameter and the argument fit together   we use the provided information to transform the parameter 
Groovy,WITHOUT_CLASSIFICATION,//  we should produce a clean placeholder ClassNode here 
Groovy,WITHOUT_CLASSIFICATION,/*      * Intercepts a setXXX call     *     * @param object   The target object     * @param property The property to set     * @param newValue The new value      */
Groovy,WITHOUT_CLASSIFICATION,/*  * The Computer Language Benchmarks Game * http://shootout.alioth.debian.org/ * * contributed by Anthony Donnefort * redone by Enotus 2010-11-20  */
Groovy,WITHOUT_CLASSIFICATION,//  in case of the "in" operator the receiver and the arguments are reversed   so we use the reversedExpression and get the target method from it 
Groovy,WITHOUT_CLASSIFICATION,//  multiple assignment 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    int  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  restore original metadata 
Groovy,WITHOUT_CLASSIFICATION,//  remove text and reselect the text 
Groovy,WITHOUT_CLASSIFICATION,//  provide setter for CLI Builder purposes unless final 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ double[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,/* dummy receiver: */
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ byte[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  ignore out-of-order write operations 
Groovy,WITHOUT_CLASSIFICATION,// TODO: one day we could try return the previously registered Closure listener for easy removal 
Groovy,WITHOUT_CLASSIFICATION,//  visit ShComment()    never visited/created by parser 
Groovy,WITHOUT_CLASSIFICATION,//  Set up the script context 
Groovy,WITHOUT_CLASSIFICATION,//  order matters here! 
Groovy,WITHOUT_CLASSIFICATION,// package private and used only by the GroovyClassLoader. 
Groovy,WITHOUT_CLASSIFICATION,//    Evaluate the template. 
Groovy,WITHOUT_CLASSIFICATION,//  The InputStream from which we produce a Reader. 
Groovy,WITHOUT_CLASSIFICATION,//  don't rewrite assertions with message 
Groovy,WITHOUT_CLASSIFICATION,//  ensure VariableArguments are read not stored 
Groovy,WITHOUT_CLASSIFICATION,//  empty line 
Groovy,WITHOUT_CLASSIFICATION,//  B=AtA         A multiplied by A transposed 
Groovy,WITHOUT_CLASSIFICATION,//  try parent loader 
Groovy,WITHOUT_CLASSIFICATION,//         mv = tmv; 
Groovy,WITHOUT_CLASSIFICATION,//  handle back to beginning due to modulo incrementing 
Groovy,WITHOUT_CLASSIFICATION,//  the arguments come in like [named_args? args... closure?]   so peel off a hashmap from the front and a closure from the   end and presume that is what they meant since there is   no way to distinguish node(a:bcd) {..} from   node([a:b][cd] {..}) i.e. the user can deliberately confuse   the builder and there is nothing we can really do to prevent   that 
Groovy,WITHOUT_CLASSIFICATION,//  now let's try the classloader which loaded us 
Groovy,WITHOUT_CLASSIFICATION,//  transform "a.x = b" into "def tmp = b; a.setX(tmp); tmp" 
Groovy,WITHOUT_CLASSIFICATION,//  arg is not null and not assignment compatible 
Groovy,WITHOUT_CLASSIFICATION,//  add the cell to the table 
Groovy,WITHOUT_CLASSIFICATION,//  flag if the classes or its members are annotated 
Groovy,WITHOUT_CLASSIFICATION,//  result on the stack which we can remove now if inside a constructor. 
Groovy,WITHOUT_CLASSIFICATION,//  because of type inferrence we must perform an additional check if the right expression   is an empty list expression ([]). In that case and only in that case the inferred type   will be wrong so we will prefer the left type 
Groovy,WITHOUT_CLASSIFICATION,//  if the receiver is "this" or "implicit this" then we must make sure that the compatible   methods are only static if we are in a static context   if we are not in a static context but the current receiver is a static class we must   ensure that all methods are either static or declared by the current receiver or a superclass
Groovy,WITHOUT_CLASSIFICATION,//  script-string-to-generated Class map 
Groovy,WITHOUT_CLASSIFICATION,//             Number n = (Number) newValue;              newValue = Integer.valueOf(n.intValue());          }          array [normaliseIndex(idxarray.length)] = ((Integer)newValue).intValue();          return (Integer) newValue;      }        public static Long putAt(long[] array int idx Object newValue) { 
Groovy,WITHOUT_CLASSIFICATION,//  internal helper method 
Groovy,WITHOUT_CLASSIFICATION,/*  The size of the map.  */
Groovy,WITHOUT_CLASSIFICATION,//  do not overwrite interface methods with instance methods   do not overwrite private methods   Note: private methods from parent classes are not shown here   but when doing the multimethod connection step we overwrite   methods of the parent class with methods of a subclass and   in that case we want to keep the private methods 
Groovy,WITHOUT_CLASSIFICATION,//  groovify the fat Java-Like Groovy AST 
Groovy,WITHOUT_CLASSIFICATION,//  fast path for getter/setters etc. 
Groovy,WITHOUT_CLASSIFICATION,//  print nothing 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ int[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  diamond always matches 
Groovy,WITHOUT_CLASSIFICATION,//  to be replaced with a proper test whether a return value should be used or not 
Groovy,WITHOUT_CLASSIFICATION,// n*LOG(n) version 
Groovy,WITHOUT_CLASSIFICATION,//  Boolean / boolean 
Groovy,WITHOUT_CLASSIFICATION,//    Display our type text and (optional) meaning 
Groovy,WITHOUT_CLASSIFICATION,//  add one to dist to be sure interfaces are preferred 
Groovy,WITHOUT_CLASSIFICATION,//  jump if we don't want to continue 
Groovy,WITHOUT_CLASSIFICATION,//  If the new script base class does not have a contextual constructor (g.l.Binding) then we won't either.   We have to do things this way (and rely on just default constructors) because the logic that generates 
Groovy,WITHOUT_CLASSIFICATION,//  this should never happen 
Groovy,WITHOUT_CLASSIFICATION,//  an extension method is found 
Groovy,WITHOUT_CLASSIFICATION,//  check for null 
Groovy,WITHOUT_CLASSIFICATION,//  note: ifeq tests for ==0 a boolean is 0 if it is false 
Groovy,WITHOUT_CLASSIFICATION,//  find method call target 
Groovy,WITHOUT_CLASSIFICATION,//  the generic method is valid if available (!=null) if static or 
Groovy,WITHOUT_CLASSIFICATION,//  create values() method 
Groovy,WITHOUT_CLASSIFICATION,//  use propX when lazy because lazy is only allowed on fields/properties 
Groovy,WITHOUT_CLASSIFICATION,//       X     Y     Z     [     \     ]     ^     _ 
Groovy,WITHOUT_CLASSIFICATION,//  unchecked assignment within ternary/elvis   examples:   List<A> list = existingAs ?: []   in that case the inferred type of the RHS is the type of the RHS   "completed" with generics type information available in the LHS 
Groovy,WITHOUT_CLASSIFICATION,//  the method call... usually simply Object in operandStack 
Groovy,WITHOUT_CLASSIFICATION,//  add method: void removeVetoableChangeListener(name listener) 
Groovy,WITHOUT_CLASSIFICATION,//  current label for break 
Groovy,WITHOUT_CLASSIFICATION,//  create lexer 
Groovy,WITHOUT_CLASSIFICATION,//  if emptyBody == true then we generate an empty body instead throwing error on unimplemented methods 
Groovy,WITHOUT_CLASSIFICATION,//  tag::java_method_selection_body[]   ...   <1>   <2>   <3>   end::java_method_selection_body[] 
Groovy,WITHOUT_CLASSIFICATION,/*  multiply vector v by matrix A  */
Groovy,WITHOUT_CLASSIFICATION,//  mark all methods as visited. We can't do this in visitMethod because the type checker 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.GroovyObject#getMetaClass()      */
Groovy,WITHOUT_CLASSIFICATION,//  there must be four continuation bytes of the form 10xxxxxx   otherwise the following character is is not a valid UTF-8 construct 
Groovy,WITHOUT_CLASSIFICATION,//  needs all package names   needs all packages / class names   needs all packages 
Groovy,WITHOUT_CLASSIFICATION,//  ignore methods already in owner 
Groovy,WITHOUT_CLASSIFICATION,//  look for full match or match excluding package 
Groovy,WITHOUT_CLASSIFICATION,//  remove the temporary variable to keep the 
Groovy,WITHOUT_CLASSIFICATION,//  For statement contains unexpected tokens. Possible attempt to use unsupported Java-style for loop.   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  let's try getting the property on the second object 
Groovy,WITHOUT_CLASSIFICATION,//  receiver   messageName 
Groovy,WITHOUT_CLASSIFICATION,//  must write under lock 
Groovy,WITHOUT_CLASSIFICATION,//  ignore. In case of some exception release info is not available 
Groovy,WITHOUT_CLASSIFICATION,//    KEYWORDS: RESERVED 
Groovy,WITHOUT_CLASSIFICATION,//  does a getter exists ? 
Groovy,WITHOUT_CLASSIFICATION,//  Object[] vs Object 
Groovy,WITHOUT_CLASSIFICATION,//  literals 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ long[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  xml namespace is always defined 
Groovy,WITHOUT_CLASSIFICATION,//  this part should never be reached! 
Groovy,WITHOUT_CLASSIFICATION,//    Get the output stream writer from the binding. 
Groovy,WITHOUT_CLASSIFICATION,//  from == to and step == 0 nothing to do so return 
Groovy,WITHOUT_CLASSIFICATION,/*      * If the byte has the form 1110xxx then it's the first byte of a three-bytes sequence character.     *     * @param b a byte.     * @return true if it's the first byte of a three-bytes sequence.      */
Groovy,WITHOUT_CLASSIFICATION,//  no-arg closure   same number of arguments   implicit it   vargs 
Groovy,WITHOUT_CLASSIFICATION,//  Use a doPrivileged here as many different properties need to be   read and the policy shouldn't have to list them all. 
Groovy,WITHOUT_CLASSIFICATION,//  look to see if per-field handlers will catch this one... 
Groovy,WITHOUT_CLASSIFICATION,//         printUpdatingTabLevel(tvisit"with ("null") ");      } 
Groovy,WITHOUT_CLASSIFICATION,//  the try finally case 
Groovy,WITHOUT_CLASSIFICATION,//      introspect 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6357 : Following Java's behavior for protected modifier on inner classes: should be public 
Groovy,WITHOUT_CLASSIFICATION,//    Build the specified type or if no type was specified the   smallest type in which the number will fit. 
Groovy,WITHOUT_CLASSIFICATION,//  The phase in which the failures occurred 
Groovy,WITHOUT_CLASSIFICATION,//  both converter and reverseConverter must be set or not 
Groovy,WITHOUT_CLASSIFICATION,//  look for one of these:     import static SomeClass.someProp [as otherName] 
Groovy,WITHOUT_CLASSIFICATION,// SPG modified to reflect DefaultGroovyMethod name change and expected result from 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: heapsort.javav 1.1 2004-05-23 06:37:41 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,/*          * Create groovy assertion style error message for template error. Example:         *         * Error parsing expression on line 71 column 15 message: no such property jboss for for class DUMMY         * templatedata${jboss}templateddatatemplateddata         *             ^------^         *                 |         *           syntax error          */
Groovy,WITHOUT_CLASSIFICATION,//  All objects pending cleanup 
Groovy,WITHOUT_CLASSIFICATION,//  because compiler clients are free to choose any GroovyClassLoader for   resolving ClassNodeS such as annotatedType we have to compare by name   and cannot cast the return value to GroovyASTTransformationClass 
Groovy,WITHOUT_CLASSIFICATION,//  duplicate int arguments 
Groovy,WITHOUT_CLASSIFICATION,//  "DefaultPackage" for 'default package' path rather than null... 
Groovy,WITHOUT_CLASSIFICATION,//  this loop builds a name from right to left each name part   separated by "." 
Groovy,WITHOUT_CLASSIFICATION,// deprecated 
Groovy,WITHOUT_CLASSIFICATION,//  Outer.this in a special constructor call 
Groovy,WITHOUT_CLASSIFICATION,//  fails after parser   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  set real fixed generics for extension methods 
Groovy,WITHOUT_CLASSIFICATION,//  BigDecimal conversion is done by using the double value 
Groovy,WITHOUT_CLASSIFICATION,// just for uniformity 
Groovy,WITHOUT_CLASSIFICATION,//  we have to declare the namespace - choose a tag   If the namespace has been declared in the GPath expression use that tag 
Groovy,WITHOUT_CLASSIFICATION,//  visit AST xforms 
Groovy,WITHOUT_CLASSIFICATION,//    Get the class and calculate its filesystem name   
Groovy,WITHOUT_CLASSIFICATION,//  in case there's nothing else invoke the object's own invokeMethod() 
Groovy,WITHOUT_CLASSIFICATION,//  check for propertyMissing provided through a category 
Groovy,WITHOUT_CLASSIFICATION,//  copy annotations from field to dummy field 
Groovy,WITHOUT_CLASSIFICATION,//  let's use the field expression if it's available 
Groovy,WITHOUT_CLASSIFICATION,// mv.visitInsn(NOP); 
Groovy,WITHOUT_CLASSIFICATION,//  passed as the first argument implicitly. 
Groovy,WITHOUT_CLASSIFICATION,//  -------------------------------   different Variable based checks   ------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  first test special cases 
Groovy,WITHOUT_CLASSIFICATION,//  Wrong list -- must restart traversal at new first 
Groovy,WITHOUT_CLASSIFICATION,//  +   -   *   /   \   %   **   ** 
Groovy,WITHOUT_CLASSIFICATION,//  short 
Groovy,WITHOUT_CLASSIFICATION,//  package-private for use in testing to avoid calling ServiceLoader.load 
Groovy,WITHOUT_CLASSIFICATION,//  need to remove double quotes in string literals 
Groovy,WITHOUT_CLASSIFICATION,//  cast to prevent incorrect @since 1.7 warning 
Groovy,WITHOUT_CLASSIFICATION,//  append classpath if not already defined 
Groovy,WITHOUT_CLASSIFICATION,//  if the provided classnode is a subclass of the upper bound   then check that the generic types supplied by the class node are compatible with   this generics specification   for example we could have the spec saying List<String> but provided classnode 
Groovy,WITHOUT_CLASSIFICATION,//  if this class is not an instance of Script it's a full-blown class   then simply return that class 
Groovy,WITHOUT_CLASSIFICATION,//       H     I J K     L     M N     O 
Groovy,WITHOUT_CLASSIFICATION,//  todo : corner case 
Groovy,WITHOUT_CLASSIFICATION,// slow Path 
Groovy,WITHOUT_CLASSIFICATION,//  We don't want to lose anything so log it 
Groovy,WITHOUT_CLASSIFICATION,//  clear properties to avoid generation of methods 
Groovy,WITHOUT_CLASSIFICATION,//  fallback to the compiler classloader 
Groovy,WITHOUT_CLASSIFICATION,// Statement printStatement = createPrintlnStatement(new VariableExpression("str")); 
Groovy,WITHOUT_CLASSIFICATION,//  tag::jsr223_basic[] 
Groovy,WITHOUT_CLASSIFICATION,//  any explicit false for enabled disables functionality   this allows for example configscript to set all   classes to true and one class to be explicitly disabled 
Groovy,WITHOUT_CLASSIFICATION,//  first pass collect nodes 
Groovy,WITHOUT_CLASSIFICATION,//         @Override 
Groovy,WITHOUT_CLASSIFICATION,//  a type inference has been made on a variable whose type was defined in an instanceof block   we erase available information with the new type 
Groovy,WITHOUT_CLASSIFICATION,//  we are done if we are now in the declaring class 
Groovy,WITHOUT_CLASSIFICATION,// interfaces have no constructors but this code expects one  so create a dummy and don't add it to the class node 
Groovy,WITHOUT_CLASSIFICATION,//  test for JDK9 JIGSAW 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: fibo.javav 1.3 2005-04-25 19:01:38 igouy-guest Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  getMap() already loaded using a null classloader 
Groovy,WITHOUT_CLASSIFICATION,//  Same as AnnotationClosureCompatibilityTest except that annotation closure's   declared type is a bound parameterized type (affects stub generation) 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getEntityResolver()     */
Groovy,WITHOUT_CLASSIFICATION,//  we need to keep the -1 to track the mismatch a +1   by any means could let it look like a direct match   we want to add one because there is an interface between   the interface we search for and the interface we are in. 
Groovy,WITHOUT_CLASSIFICATION,//  if left expression is a closure shared variable a second pass should be done 
Groovy,WITHOUT_CLASSIFICATION,//  let's apply the method to each item in the collection 
Groovy,WITHOUT_CLASSIFICATION,//  throws FileNotFoundException IllegalArgumentException {   throws FileNotFoundException IllegalArgumentException { 
Groovy,WITHOUT_CLASSIFICATION,//  remember non-source/non-repeatable annos (auto collecting of Repeatable annotations is handled elsewhere) 
Groovy,WITHOUT_CLASSIFICATION,//       '     a     b     c     d     e     f     g 
Groovy,WITHOUT_CLASSIFICATION,//  Test subclass of GroovyObjectSupport 
Groovy,WITHOUT_CLASSIFICATION,/*      * Constructor used by makeArray() if a real class is available      */
Groovy,WITHOUT_CLASSIFICATION,//  if we are a number literal then let's just parse it   as the negation operator on MIN_INT causes rounding to a long 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)           * @see groovy.lang.GroovyObjectSupport#setProperty(java.lang.String java.lang.Object)            */
Groovy,WITHOUT_CLASSIFICATION,//    Keywords 
Groovy,WITHOUT_CLASSIFICATION,//  this line should be useless but well just in case 
Groovy,WITHOUT_CLASSIFICATION,//  message string 
Groovy,WITHOUT_CLASSIFICATION,//  last label by default which is added first by APP 
Groovy,WITHOUT_CLASSIFICATION,/*     * Expands the properties inside the given string to it's values.     */
Groovy,WITHOUT_CLASSIFICATION,//  1 param meta method 
Groovy,WITHOUT_CLASSIFICATION,//  now do the business      
Groovy,WITHOUT_CLASSIFICATION,//  don't generate stubs for private classes as they are only visible in the same file 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6240 
Groovy,WITHOUT_CLASSIFICATION,//  start 
Groovy,WITHOUT_CLASSIFICATION,//  If no scheme is specified for the repository root   then turn it into a URI relative to that of the source file. 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   TYPE HIERARCHIES 
Groovy,WITHOUT_CLASSIFICATION,//  a MME was ensued here stating no 't.start()' was available 
Groovy,WITHOUT_CLASSIFICATION,//  simple check on being subclass 
Groovy,WITHOUT_CLASSIFICATION,//  @todo - remove classic references from the TCK 
Groovy,WITHOUT_CLASSIFICATION,//  but it is allowed... 
Groovy,WITHOUT_CLASSIFICATION,//  The phase in which the failures occurred   The *Unit object this exception wraps 
Groovy,WITHOUT_CLASSIFICATION,//  for additional options to be passed to javac. 
Groovy,WITHOUT_CLASSIFICATION,// (element.getReturnType() == Void.class || element.getReturnType() == Void.TYPE) && 
Groovy,WITHOUT_CLASSIFICATION,//  nothing to do in that case 
Groovy,WITHOUT_CLASSIFICATION,//  store array 
Groovy,WITHOUT_CLASSIFICATION,//  wrap arguments into an array 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClassRegistry.MetaClassCreationHandle#create(java.lang.Class groovy.lang.MetaClassRegistry)      */
Groovy,WITHOUT_CLASSIFICATION,//  visitAt() ...     token type 'AT' should never be visited as annotation definitions and usage and     direct field access should have all moved this token out of the way. No test needed. 
Groovy,WITHOUT_CLASSIFICATION,//  High surrogate 
Groovy,WITHOUT_CLASSIFICATION,//  let's compare their generics type 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ short[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  The notification queue and listener 
Groovy,WITHOUT_CLASSIFICATION,/*  This is an optional short-cut; at each recursive call        check to see if the elements in this subset are already        ordered.  If so no further comparisons are needed; the        sub-array can just be copied.  The array must be copied rather        than assigned otherwise sister calls in the recursion might        get out of sync.  When the number of elements is three they        are partitioned so that the first set [low mid) has one        element and and the second [mid high) has two. We skip the        optimisation when the number of elements is three or less as        the first compare in the normal merge will produce the same        sequence of steps. This optimisation seems to be worthwhile        for partially ordered lists but some analysis is needed to        find out how the performance drops to Nlog(N) as the initial        order diminishes - it may drop very quickly.   */
Groovy,WITHOUT_CLASSIFICATION,//  package local 
Groovy,WITHOUT_CLASSIFICATION,/*  5: byte    */
Groovy,WITHOUT_CLASSIFICATION,//  a decimal number 
Groovy,WITHOUT_CLASSIFICATION,//  if argument null take the static type 
Groovy,WITHOUT_CLASSIFICATION,//  handle catch body 
Groovy,WITHOUT_CLASSIFICATION,//  anything that prevents (X) from being a cast 
Groovy,WITHOUT_CLASSIFICATION,//  not in Java Doclet API 
Groovy,WITHOUT_CLASSIFICATION,//  and prevents from infinite loops 
Groovy,WITHOUT_CLASSIFICATION,//  edit input files in place 
Groovy,WITHOUT_CLASSIFICATION,//  since it is possible that the callsite uses some generics as well  
Groovy,WITHOUT_CLASSIFICATION,//  to avoid double initialization in case of several constructors 
Groovy,WITHOUT_CLASSIFICATION,//  not using groups so return the nth   occurrence of the pattern 
Groovy,WITHOUT_CLASSIFICATION,//  return is OK in closures in object initializers 
Groovy,WITHOUT_CLASSIFICATION,//  =====================================================   UNDO/REDO NAMES   ===================================================== 
Groovy,WITHOUT_CLASSIFICATION,//  The calls to DefaultMetaClassInfo.setPrimitiveMeta and sdyn.setBoolean need to be   ordered. Even though metaClassInfo is thread-safe it is included in the block   so the meta classes are added to the queue in the same order. 
Groovy,WITHOUT_CLASSIFICATION,//  clean local vars added during visit of closure 
Groovy,WITHOUT_CLASSIFICATION,//  Only look at things we can actually call 
Groovy,WITHOUT_CLASSIFICATION,//  todo: replace this simple idea of default class name 
Groovy,WITHOUT_CLASSIFICATION,//  trying to guess the concrete list type and create a new instance from it 
Groovy,WITHOUT_CLASSIFICATION,//  Destructive! 
Groovy,WITHOUT_CLASSIFICATION,//  TODO: replace with stream-based version 
Groovy,WITHOUT_CLASSIFICATION,//  empty quote '' 
Groovy,WITHOUT_CLASSIFICATION,//  create a local variable to hold the old value from the getter 
Groovy,WITHOUT_CLASSIFICATION,//  we cannot just wrap in a List as we support primitive type arrays 
Groovy,WITHOUT_CLASSIFICATION,//  check but determine no -ve consequences first 
Groovy,WITHOUT_CLASSIFICATION,/* || param == Byte.TYPE */
Groovy,WITHOUT_CLASSIFICATION,//  load the array 
Groovy,WITHOUT_CLASSIFICATION,// fieldValue  //br  all the sudden that one cannot init the field here. init is done in static initializer and instance initializer. 
Groovy,WITHOUT_CLASSIFICATION,//  single quotation mark 
Groovy,WITHOUT_CLASSIFICATION,//   
Groovy,WITHOUT_CLASSIFICATION,//  since we added an anonymous inner class we should also   add the dispatcher methods 
Groovy,WITHOUT_CLASSIFICATION,//  add one parameter for each expression in the   constructor call 
Groovy,WITHOUT_CLASSIFICATION,//  compare Li1 and Li2 for equality 
Groovy,WITHOUT_CLASSIFICATION,//  is this property already accounted for? 
Groovy,WITHOUT_CLASSIFICATION,//  visitExponent ...     token type EXPONENT only used by lexer never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  for b/c with Java return an int if we can 
Groovy,WITHOUT_CLASSIFICATION,// we use the lookAhead to make sure that a template file ending in say "abcdef\\"  will give a result of "abcdef\\" even though we have special handling for \\ 
Groovy,WITHOUT_CLASSIFICATION,//  myMethod(ab) {... 
Groovy,WITHOUT_CLASSIFICATION,//  we need to handle only assignment to arrays combined with an operation   special here. e.g x[a] += b 
Groovy,WITHOUT_CLASSIFICATION,//  while anything inside a static initializer block is appended   we don't want to append in the case we have a initialization   expression of a static field. In that case we want to add   before the other statements 
Groovy,WITHOUT_CLASSIFICATION,//  test int[] 
Groovy,WITHOUT_CLASSIFICATION,//  if left is Enum and right is String or GString we do valueOf 
Groovy,WITHOUT_CLASSIFICATION,//  stack size = 1 
Groovy,WITHOUT_CLASSIFICATION,//  add marker in the bytecode to show source-bytecode relationship 
Groovy,WITHOUT_CLASSIFICATION,//  Global classes 
Groovy,WITHOUT_CLASSIFICATION,//  Weighted selection from alphabet 
Groovy,WITHOUT_CLASSIFICATION,//  false part: load y and cast to S 
Groovy,WITHOUT_CLASSIFICATION,//  Normalise negative indices. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getErrorHandler()      */
Groovy,WITHOUT_CLASSIFICATION,//  add field: 
Groovy,WITHOUT_CLASSIFICATION,//  and class as property 
Groovy,WITHOUT_CLASSIFICATION,//  the interface beeing added is more specific than the one in the list replace it 
Groovy,WITHOUT_CLASSIFICATION,//  Mock methods used for testing  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  -----------------------   feature: Native Methods 
Groovy,WITHOUT_CLASSIFICATION,//  check whether thread context loader can "see" Groovy Script class 
Groovy,WITHOUT_CLASSIFICATION,//  Notify the listener only if the entry was evicted 
Groovy,WITHOUT_CLASSIFICATION,//  create loader and execute main class 
Groovy,WITHOUT_CLASSIFICATION,//  java tab policy action 
Groovy,WITHOUT_CLASSIFICATION,//  FIXME 
Groovy,WITHOUT_CLASSIFICATION,//  if call is spread safe replace it with a for in loop 
Groovy,WITHOUT_CLASSIFICATION,//  handle back to beginning due to modulo decrementing 
Groovy,WITHOUT_CLASSIFICATION,//  array get: load sub call arrayGet [load b call operation load sub call arraySet] 
Groovy,WITHOUT_CLASSIFICATION,//  do not overwrite final 
Groovy,WITHOUT_CLASSIFICATION,//  execute method   this will load the callsite and the receiver normally in the wrong   order since the receiver is already present but before the callsite   Therefore we use callSiteReceiverSwap to correct the order.    After this call the JVM operand stack will contain the result of 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see java.io.Writer#flush()     */
Groovy,WITHOUT_CLASSIFICATION,//  These two properties are used when no ExpandoMetaClassCreationHandle is present 
Groovy,WITHOUT_CLASSIFICATION,//  create statementBody 
Groovy,WITHOUT_CLASSIFICATION,//  Add an entries to force ReferenceManager.removeStaleEntries 
Groovy,WITHOUT_CLASSIFICATION,//  assigned later by init()   may be changed by init()   may be changed by init() 
Groovy,WITHOUT_CLASSIFICATION,//  let's evaluate the RHS and store the result 
Groovy,WITHOUT_CLASSIFICATION,//  appends buffer 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   special cases 
Groovy,WITHOUT_CLASSIFICATION,//  double x double 
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralInterface     token type "interface" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,//  tag::jsr223_imports[] 
Groovy,WITHOUT_CLASSIFICATION,//  Redirect script output to context writer if out var is not already provided 
Groovy,WITHOUT_CLASSIFICATION,//  we don't use property exists there because findMethod is called on super clases recursively 
Groovy,WITHOUT_CLASSIFICATION,//  def _result = new StringBuilder() 
Groovy,WITHOUT_CLASSIFICATION,//  the name is a type so remove it from the scoping   as it is only a classvariable it is only in   referencedClassVariables but must be removed   for each parentscope too 
Groovy,WITHOUT_CLASSIFICATION,//  fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  load every field 
Groovy,WITHOUT_CLASSIFICATION,//  ignore methods from GroovyObject 
Groovy,WITHOUT_CLASSIFICATION,//  Write out keys and values (alternating) 
Groovy,WITHOUT_CLASSIFICATION,//  isCase 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.temporal.Temporal extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  -------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  so we store the type on stack 
Groovy,WITHOUT_CLASSIFICATION,//    Build the specified type or default to BigDecimal 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-3543: visit the declaration expressions so that declaration variables get added on the varStack 
Groovy,WITHOUT_CLASSIFICATION,//  br experiment with local var table so debuggers can retrieve variable names  AsmClassGenerator.CREATE_DEBUG_INFO) { 
Groovy,WITHOUT_CLASSIFICATION,/*  End universal methods.  */
Groovy,WITHOUT_CLASSIFICATION,//  add given statements for explicitly declared static fields just after enum-special fields   are found - the $VALUES binary expression marks the end of such fields. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.MetaClass#initialize()     */
Groovy,WITHOUT_CLASSIFICATION,//  a  abb   abb -> bba   bbabb   bba 
Groovy,WITHOUT_CLASSIFICATION,//  done will only be true if we ran out of data without seeing the match character 
Groovy,WITHOUT_CLASSIFICATION,//  same for the catch parts 
Groovy,WITHOUT_CLASSIFICATION,//  we should implement the field helper interface too 
Groovy,WITHOUT_CLASSIFICATION,//  here we don't care if the method exists or not we assume the   developer is responsible and wants to override methods where necessary 
Groovy,WITHOUT_CLASSIFICATION,//  various helpers in order to avoid a potential very big class 
Groovy,WITHOUT_CLASSIFICATION,//  @interface Foo{ int bar()... 
Groovy,WITHOUT_CLASSIFICATION,//  return true if a property is found 
Groovy,WITHOUT_CLASSIFICATION,//  == 
Groovy,WITHOUT_CLASSIFICATION,//  no over-runs... 
Groovy,WITHOUT_CLASSIFICATION,//       0     1     2     3     4     5     6     7 
Groovy,WITHOUT_CLASSIFICATION,//  expressions = constructor call arguments 
Groovy,WITHOUT_CLASSIFICATION,// we opt for not doing anthing here...we just do not get context if  this happens 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getErrorHandler()     */
Groovy,WITHOUT_CLASSIFICATION,//  add method:   void addVetoableChangeListener(listener) {       this$vetoableChangeSupport.addVetoableChangeListener(listener) 
Groovy,WITHOUT_CLASSIFICATION,//  The eviction support 
Groovy,WITHOUT_CLASSIFICATION,//  Conversions in which all decimal digits are known to be good. 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    int[]  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  called with null 
Groovy,WITHOUT_CLASSIFICATION,//  declare and initialize 
Groovy,WITHOUT_CLASSIFICATION,//  Chances are this is a Float or a Big.   With Float we're extending binary precision and that gets ugly in decimal.   If we used Float.doubleValue() on 0.1f we get 0.10000000149011612.   Note that this is different than casting '(double) 0.1f' which will do the   binary extension just like in Java.   With Bigs and other unknowns this is likely to be the same. 
Groovy,WITHOUT_CLASSIFICATION,//  we need to add "this" to access unknown methods/properties 
Groovy,WITHOUT_CLASSIFICATION,//  visit lcurly()     token type LCURLY only used inside parser never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  second pass call visit on all of the collected nodes 
Groovy,WITHOUT_CLASSIFICATION,//  Iterator interface  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  usually in new i.e.   def y = new int[5]; 
Groovy,WITHOUT_CLASSIFICATION,//  these two are never reached in bytecode and only there    to avoid verifyerrors and compiler infrastructure hazzle 
Groovy,WITHOUT_CLASSIFICATION,//  because source position seems to be more reliable for statements   than for expressions we get the source text for the whole statement 
Groovy,WITHOUT_CLASSIFICATION,//    Implementation of the TableModelListener interface   
Groovy,WITHOUT_CLASSIFICATION,/*          * GROOVY-3339 - do nothing - so that numbers don't get replaced by cached constants in closure classes          */
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal GroovyObject field handling : get    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  only accepts AssertStatementS so that better error messages can be produced 
Groovy,WITHOUT_CLASSIFICATION,//  count trailing whitespace characters 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   LOOP SIMPLIFICATION FOR PRIMARY ClassNode OPERATIONS 
Groovy,WITHOUT_CLASSIFICATION,/*  ---------------- Builder --------------  */
Groovy,WITHOUT_CLASSIFICATION,/*          * We use the following Binding instance so that global variable lookup         * will be done in the current ScriptContext instance.          */
Groovy,WITHOUT_CLASSIFICATION,//  on an assignment everything that can be done by a GroovyCast is allowed 
Groovy,WITHOUT_CLASSIFICATION,//  both candidate method and receiver have generic information so a check is possible 
Groovy,WITHOUT_CLASSIFICATION,//  No need to check the arguments against an array constructor: it just needs to exist. The array is   created through coercion or by specifying its dimension(s) anyway and would not match an   arbitrary number of parameters. 
Groovy,WITHOUT_CLASSIFICATION,//  FIX_JDK9 remove this exemption for JDK9 
Groovy,WITHOUT_CLASSIFICATION,//   make sure we are adding to correct list 
Groovy,WITHOUT_CLASSIFICATION,//  ----------------------------- inner classes -------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  lazily initialized factory 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.OffsetTime extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,// TraceClassVisitor tracer = new TraceClassVisitor(visitor new PrintWriter(System.errtrue)); 
Groovy,WITHOUT_CLASSIFICATION,//  we do not resolve a vanilla name starting with a lower case letter   try to resolve against a default import because we know that the 
Groovy,WITHOUT_CLASSIFICATION,//  The warning level for filtering 
Groovy,WITHOUT_CLASSIFICATION,//  compileStack.containsVariable(name) means to ask if the variable is already declared   compileStack.getScope().isReferencedClassVariable(name) means to ask if the variable is a field   If it is no field and is not yet declared then it is either a closure shared variable or   an already declared variable. 
Groovy,WITHOUT_CLASSIFICATION,//  also for custom Number implementations 
Groovy,WITHOUT_CLASSIFICATION,//  identifiers 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   NODE IDENTIFICATION AND MEANING 
Groovy,WITHOUT_CLASSIFICATION,//  try inner classes 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#setAttribute(java.lang.Object java.lang.String java.lang.Object)      */
Groovy,WITHOUT_CLASSIFICATION,//  This method only exists as a workaround for GROOVY-6094 
Groovy,WITHOUT_CLASSIFICATION,//  This shouldn't happen but this is the same default used by   BufferedWriter on a security exception. 
Groovy,WITHOUT_CLASSIFICATION,//  to avoid default initialization 
Groovy,WITHOUT_CLASSIFICATION,/*      * A NumberRange's canonicalHashCode is based on hashCode values of the discrete items it represents.     * When two NumberRange's are equal they will have the same canonicalHashCode value.     * Numerical values which Groovy deems equal have the same hashCode during this calculation.     * So currently (0..3).equals(0.0..3.0) yet they have different hashCode values. This breaks     * the normal equals/hashCode contract which is a weakness in Groovy's '==' operator. However     * the contract isn't broken between equals and canonicalHashCode.     *     * @return the hashCode value      */
Groovy,WITHOUT_CLASSIFICATION,//  Always set the "args" property regardless of what path we take in the code. 
Groovy,WITHOUT_CLASSIFICATION,//  we have to handle an enum constant with a class overriding   a method in which case we need to configure the inner class 
Groovy,WITHOUT_CLASSIFICATION,//  if multiple values are associated with the same column only   render the value which was recorded last (i.e. the value   corresponding to the outermost expression) 
Groovy,WITHOUT_CLASSIFICATION,//  inside defineTarget 
Groovy,WITHOUT_CLASSIFICATION,//  if the stream can't be opened let's keep the old reference 
Groovy,WITHOUT_CLASSIFICATION,//  skip DGM methods on an interface if the class already has the method   but don't skip for GroovyObject-related methods as it breaks things :-( 
Groovy,WITHOUT_CLASSIFICATION,//  we could always escape if we wanted to. 
Groovy,WITHOUT_CLASSIFICATION,//  visit right side first to avoid the usage of a   variable before its declaration 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5044 
Groovy,WITHOUT_CLASSIFICATION,//  check needed as @Test(attr = {"elem"}) passes through the parser 
Groovy,WITHOUT_CLASSIFICATION,//  CallSite is normally not showing up on the    operandStack so we place a dummy here with same 
Groovy,WITHOUT_CLASSIFICATION,//  setup two threads to try a deadlock 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.Instant extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  xgetAt() that takes an integer index. 
Groovy,WITHOUT_CLASSIFICATION,//  not normally set for non-major types but appropriate for a script 
Groovy,WITHOUT_CLASSIFICATION,//  ex: (Date)null 
Groovy,WITHOUT_CLASSIFICATION,//  starting position in document 
Groovy,WITHOUT_CLASSIFICATION,//  some short circuit cases for efficiency 
Groovy,WITHOUT_CLASSIFICATION,//  TRICK: we add at the beginning so when we find for remove or get we always have the last one 
Groovy,WITHOUT_CLASSIFICATION,// Class.class  MetaClass.class  Iterator.class  GeneratedClosure.class  GeneratedLambda.class  GroovyObjectSupport.class 
Groovy,WITHOUT_CLASSIFICATION,//  add property getter dispatcher 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7322   static method call in trait? 
Groovy,WITHOUT_CLASSIFICATION,//  dispatching to EmptyStatement will not call back visitor    must call our visitEmptyStatement explicitly 
Groovy,WITHOUT_CLASSIFICATION,//  CONSTRUCTORS 
Groovy,WITHOUT_CLASSIFICATION,/*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Isaac Gouy */
Groovy,WITHOUT_CLASSIFICATION,//  Switched over to Map so need to clear array references 
Groovy,WITHOUT_CLASSIFICATION,//  static imports 
Groovy,WITHOUT_CLASSIFICATION,//  we could rely on the first parameter name ($static$self) but that information is not   guaranteed to be always present 
Groovy,WITHOUT_CLASSIFICATION,//  we use the idle manager so let us use the reference counter   we change the manager once the threshold is reached. There is   a small chance that the value will go beyond Integer.MAX_VALUE   so we check for values below 0 too. If threshold is low then   this is unlikely to happen. If threshold is high then we    have all negative values as fall back 
Groovy,WITHOUT_CLASSIFICATION,//    Last sanity check.   
Groovy,WITHOUT_CLASSIFICATION,//  load return value 
Groovy,WITHOUT_CLASSIFICATION,//  check interfaces at this level first 
Groovy,WITHOUT_CLASSIFICATION,//  check if a super class has @Bindable annotations 
Groovy,WITHOUT_CLASSIFICATION,// can't cache the script because the context may be different.  but don't bother loading parsing the class again 
Groovy,WITHOUT_CLASSIFICATION,//  specifies the interfaces implemented by a class   specifies the base class/interface for a new one   method variable points to the current instance   method variable points to the base instance   type comparator   deprecated; identifies a property   used to create a new instance of a class 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   generic set method  ---------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  unwrap the Object[] and make transformations if needed   that means to duplicate the Object[] make a cast with possible   unboxing and then swap it with the Object[] for each parameter 
Groovy,WITHOUT_CLASSIFICATION,//  TraitClass 
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralElse ...     token type "else" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,//  since 2.4 we can also register precompiled type checking extensions which are not scripts 
Groovy,WITHOUT_CLASSIFICATION,//  load normal receiver as first argument 
Groovy,WITHOUT_CLASSIFICATION,//  no arg method 
Groovy,WITHOUT_CLASSIFICATION,//  multiple assignment check 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getDTDHandler()      */
Groovy,WITHOUT_CLASSIFICATION,//  res== null means it got collected 
Groovy,WITHOUT_CLASSIFICATION,//  add returns to try and catch blocks 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#characters(char[] int int)     */
Groovy,WITHOUT_CLASSIFICATION,/*     * This method tries to read subsequent buffers from the reader using a mark     */
Groovy,WITHOUT_CLASSIFICATION,//  we want to remove the BOM windows adds from a file if the encoding is UTF-8   in other cases we depend on the charsets  
Groovy,WITHOUT_CLASSIFICATION,//  check module node imports aliases   the while loop enables a check for inner classes which are not fully imported 
Groovy,WITHOUT_CLASSIFICATION,//  in normal case we don't need to do script lookups 
Groovy,WITHOUT_CLASSIFICATION,//  Get first hex digit 
Groovy,WITHOUT_CLASSIFICATION,//  if the super class is another non-static inner class in the same outer class hierarchy implicit this   needs to be passed 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.LocalDateTime extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  end::jsr223_invocable[] 
Groovy,WITHOUT_CLASSIFICATION,//  supports Map style newInstance method 
Groovy,WITHOUT_CLASSIFICATION,//  scan source directories and dest directory to build up   compile lists 
Groovy,WITHOUT_CLASSIFICATION,//  private final Comparator this$<property>Comparator = new <type>$<property>Comparator(); 
Groovy,WITHOUT_CLASSIFICATION,//  parameter order is build(CompilePhase boolean String) 
Groovy,WITHOUT_CLASSIFICATION,// Integer/Integer division. 
Groovy,WITHOUT_CLASSIFICATION,//  check for a generic get method provided through a category 
Groovy,WITHOUT_CLASSIFICATION,//  declare the variable even if there was an error to allow more checks 
Groovy,WITHOUT_CLASSIFICATION,//  try to find a declaration of a variable 
Groovy,WITHOUT_CLASSIFICATION,// no inspection unchecked 
Groovy,WITHOUT_CLASSIFICATION,//  used for closure return type inference 
Groovy,WITHOUT_CLASSIFICATION,//  package private class public method   see GROOVY-6962 
Groovy,WITHOUT_CLASSIFICATION,//  inner class case 
Groovy,WITHOUT_CLASSIFICATION,//  import is like "import foo.Bar" 
Groovy,WITHOUT_CLASSIFICATION,//  if no method was found try to find a closure defined as a field of the class and run it 
Groovy,WITHOUT_CLASSIFICATION,//  implicit it 
Groovy,WITHOUT_CLASSIFICATION,//  determine appropriate class loader to serve as parent loader 
Groovy,WITHOUT_CLASSIFICATION,//  keep Object[] on stack 
Groovy,WITHOUT_CLASSIFICATION,//  For generic input streams provide a catch-all codebase of GroovyScript   Security for these classes can be administered via policy grants with   a codebase of file:groovy.script 
Groovy,WITHOUT_CLASSIFICATION,/*              *  if it is static final but not accessed inside a static constructor or             *  if it is an instance final but not accessed inside a instance constructor it is an error              */
Groovy,WITHOUT_CLASSIFICATION,//  compile Java and clean up 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   PHASE HANDLING 
Groovy,WITHOUT_CLASSIFICATION,//  null means no implicit "it" 
Groovy,WITHOUT_CLASSIFICATION,//  ==================================================   ClipBoard   ================================================== 
Groovy,WITHOUT_CLASSIFICATION,//  the actual type identified by the lexer   an interpretation applied to the token after the fact 
Groovy,WITHOUT_CLASSIFICATION,//  itself in the list of receivers already; 
Groovy,WITHOUT_CLASSIFICATION,//  todo: reliable way to call the transformer  parentNode.visit(trn); 
Groovy,WITHOUT_CLASSIFICATION,/* Integer[9] */
Groovy,WITHOUT_CLASSIFICATION,//  to not record the underlying MapExpression twice   we disable the assertion tracker   see https://issues.apache.org/jira/browse/GROOVY-3421 
Groovy,WITHOUT_CLASSIFICATION,// throws FileNotFoundException IllegalArgumentException { 
Groovy,WITHOUT_CLASSIFICATION,//  lets call the function 
Groovy,WITHOUT_CLASSIFICATION,//  invoke through reflection to eliminate mandatory JUnit 4 jar dependency 
Groovy,WITHOUT_CLASSIFICATION,//  e.g int.getClass() 
Groovy,WITHOUT_CLASSIFICATION,//  Non-null iff this scope corresponds to a class as opposed to a method "if" statement   block statement etc. 
Groovy,WITHOUT_CLASSIFICATION,//  global closures map - this is used to simulate a single 
Groovy,WITHOUT_CLASSIFICATION,//  Get the existing code block 
Groovy,WITHOUT_CLASSIFICATION,//  else fall thru.. 
Groovy,WITHOUT_CLASSIFICATION,//  template storage   source file dirs 
Groovy,WITHOUT_CLASSIFICATION,// receivers.add(new Receiver<String>(CLOSURE_TYPE path + "owner")); 
Groovy,WITHOUT_CLASSIFICATION,//  class[]. All of that but the closure must be provided here   
Groovy,WITHOUT_CLASSIFICATION,//  An implicitly created variable such as a variable in a script that's doesn't have an explicit   declaration or the "it" argument to a closure. 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5568 we would be facing a DGM call but instead of foo.getText() have foo.text 
Groovy,WITHOUT_CLASSIFICATION,// Clean up all recursive references to File objects 
Groovy,WITHOUT_CLASSIFICATION,//  a class consisting of a vanilla name can never be   a static inner class because at least one dot is   required for this. Example: foo.bar -> foo$bar 
Groovy,WITHOUT_CLASSIFICATION,//  special case for numbers improve type checking as we can expect ++ and -- to return the same type 
Groovy,WITHOUT_CLASSIFICATION,//  makes this more of an integration test than a unit test... 
Groovy,WITHOUT_CLASSIFICATION,//  
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   GENERAL SUPPORT ROUTINES 
Groovy,WITHOUT_CLASSIFICATION,//  guards for receiver and parameter 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-9136 -- object expression should not overlap source range of property; property stands in for original varibale expression 
Groovy,WITHOUT_CLASSIFICATION,/*                          * the code is (meta class is stored in 1):                         * this.metaClass = <1>                          */
Groovy,WITHOUT_CLASSIFICATION,//            \t    \n                \r 
Groovy,WITHOUT_CLASSIFICATION,//  import is like "import foo.*" 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.Buildable#build(groovy.lang.GroovyObject)      */
Groovy,WITHOUT_CLASSIFICATION,//  remove RHS value from operand stack 
Groovy,WITHOUT_CLASSIFICATION,//  safe value here to avoid multiple reads with possibly   differing values due to concurrency 
Groovy,WITHOUT_CLASSIFICATION,//  and then start our checks with the receiver 
Groovy,WITHOUT_CLASSIFICATION,//  one class is void the other is not 
Groovy,WITHOUT_CLASSIFICATION,//  we use this NOP to have a valid jump target for the various labels 
Groovy,WITHOUT_CLASSIFICATION,//  indirect import checks   if set to true then security rules on imports will also be applied on classnodes. 
Groovy,WITHOUT_CLASSIFICATION,//  try groovy file 
Groovy,WITHOUT_CLASSIFICATION,//  Get the script path from the request - include aware (GROOVY-815) 
Groovy,WITHOUT_CLASSIFICATION,//  assume a <p> paragraph tag signifies end of sentence 
Groovy,WITHOUT_CLASSIFICATION,/*     * This method reads without a buffer.    * It returns too many empty lines if \r\n combinations    * are used. Nothing can be done because we can't push    * back the character we have just read.     */
Groovy,WITHOUT_CLASSIFICATION,/*         * Try to locate the resource and return an opened connection to it.         */
Groovy,WITHOUT_CLASSIFICATION,//  do not create forwarder for private methods   see GROOVY-7213 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#endDocument()     */
Groovy,WITHOUT_CLASSIFICATION,//  lets clear the static bit 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.text.TemplateEngine#createTemplate(java.io.Reader)     */
Groovy,WITHOUT_CLASSIFICATION,//  if script has both loose statements as well as main() then main() is ignored 
Groovy,WITHOUT_CLASSIFICATION,//  don't worry if it's not a ListExpression or AnnotationConstant etc.   the rest of GroovyC will flag it as a syntax error later so we don't   need to raise the error ourselves 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)           * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String java.lang.Object)            */
Groovy,WITHOUT_CLASSIFICATION,//  Place some values on the ReferenceQueue 
Groovy,WITHOUT_CLASSIFICATION,//  byte 
Groovy,WITHOUT_CLASSIFICATION,//  call like this(..)/super(..) after the first statement which shouldn't be allowed. GROOVY-2836 
Groovy,WITHOUT_CLASSIFICATION,// CHECKSTYLE.OFF: ConstantNameCheck - special case with a reusable exception 
Groovy,WITHOUT_CLASSIFICATION,//  The XML namespace is always defined 
Groovy,WITHOUT_CLASSIFICATION,//  We have private methods for that name so remove the   multimethods. That is the same as in our index for   super so just copy the list from there. It is not   possible to use a pointer here because the methods   in the index for super are replaced later by MOP   methods like super$5$foo 
Groovy,WITHOUT_CLASSIFICATION,//  method and than that to make the connections to the SAM type generics 
Groovy,WITHOUT_CLASSIFICATION,//  never persist the MetaClass 
Groovy,WITHOUT_CLASSIFICATION,//  we must check that such a method exists on the LUB 
Groovy,WITHOUT_CLASSIFICATION,//  remove the normalized ending line ending if it was not present 
Groovy,WITHOUT_CLASSIFICATION,//  register the mgr with object name "bsf" 
Groovy,WITHOUT_CLASSIFICATION,// noinspection InfiniteLoopStatement 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setProperty(java.lang.String java.lang.Object)     */
Groovy,WITHOUT_CLASSIFICATION,/* BigDecimal[17] */
Groovy,WITHOUT_CLASSIFICATION,//  force final class remove interface annotation enum and abstract modifiers 
Groovy,WITHOUT_CLASSIFICATION,//  now look for any stray getters that may be used to define a property 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7783 use Sets for O(1) performance for contains 
Groovy,WITHOUT_CLASSIFICATION,//  produce result 
Groovy,WITHOUT_CLASSIFICATION,//  The Foo parameter type should link to lib/Foo.html not api/Foo.html. 
Groovy,WITHOUT_CLASSIFICATION,//  this avoids going through the parent classloaders/bootstrap 
Groovy,WITHOUT_CLASSIFICATION,//  for maps replace map.foo with map.get('foo') 
Groovy,WITHOUT_CLASSIFICATION,//  second visit 
Groovy,WITHOUT_CLASSIFICATION,//  Map.Entry Ops  
Groovy,WITHOUT_CLASSIFICATION,/* &&            !(expression.isImplicitThis() && controller.isInClosure())  */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-9199 
Groovy,WITHOUT_CLASSIFICATION,//  check types are compatible for assignment 
Groovy,WITHOUT_CLASSIFICATION,//  "this" for static methods is the Class instance 
Groovy,WITHOUT_CLASSIFICATION,//  lets avoid class loading 
Groovy,WITHOUT_CLASSIFICATION,//  we are interested in the longest path only 
Groovy,WITHOUT_CLASSIFICATION,//  let's strip off everything after the last '.' 
Groovy,WITHOUT_CLASSIFICATION,//  call the existing block which will presumably set the value properly 
Groovy,WITHOUT_CLASSIFICATION,//  Swallow multiple 'u's 
Groovy,WITHOUT_CLASSIFICATION,//  wrap in a stringOf { ... } closure call 
Groovy,WITHOUT_CLASSIFICATION,//  $idx = 0 
Groovy,WITHOUT_CLASSIFICATION,//  private implementation methods  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  (like @BaseScript) that could change this.  But this is cautious and anticipates possible compiler changes. 
Groovy,WITHOUT_CLASSIFICATION,//  operands are on the stack already 
Groovy,WITHOUT_CLASSIFICATION,//  correct receiver for inner class   we assume the receiver is an instance of the declaring class of the    candidate method but findMethod returns also outer class methods   for that receiver. For now we skip receiver based checks in that case 
Groovy,WITHOUT_CLASSIFICATION,//  and those are not hierarchical we can't use them for making an absolute URI. 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   OUTPUT 
Groovy,WITHOUT_CLASSIFICATION,//  couldn't find compiler - try to find tools.jar   based on java.home setting 
Groovy,WITHOUT_CLASSIFICATION,//  INNER CLASSES 
Groovy,WITHOUT_CLASSIFICATION,//                 int value; 
Groovy,WITHOUT_CLASSIFICATION,//  Simple setter 
Groovy,WITHOUT_CLASSIFICATION,//  first we calculate all arguments that are for sure not part   of vargs.  Since the minimum for arguments is noVargsLength   we can safely iterate to this point 
Groovy,WITHOUT_CLASSIFICATION,//  GroovyCodeVisitor interface  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getEntityResolver()      */
Groovy,WITHOUT_CLASSIFICATION,//  One-time-fill inner classes lookup map 
Groovy,WITHOUT_CLASSIFICATION,//         return values()[ordinal]      } 
Groovy,WITHOUT_CLASSIFICATION,//  ignore all other types 
Groovy,WITHOUT_CLASSIFICATION,//  value is a regular expression. 
Groovy,WITHOUT_CLASSIFICATION,//  no jump so -1 need to pop off surplus LL 
Groovy,WITHOUT_CLASSIFICATION,//  Delegated XMLReader methods  ------------------------------------------------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  when we get something other than -1 we know which regexp   matched; the 0 group is the complete expression of the    matcher which would always return a hit based on the above 
Groovy,WITHOUT_CLASSIFICATION,//  verify static imports 
Groovy,WITHOUT_CLASSIFICATION,//  optimize char initialization 
Groovy,WITHOUT_CLASSIFICATION,//  Allow macro methods to return null as an indicator that they didn't match a method call 
Groovy,WITHOUT_CLASSIFICATION,/*      * The cached canonical hashCode (once calculated)      */
Groovy,WITHOUT_CLASSIFICATION,//  switch does not have a continue label. use its parent's for continue 
Groovy,WITHOUT_CLASSIFICATION,//  try classes under compilation 
Groovy,WITHOUT_CLASSIFICATION,//  expressions will leave a value on stack statements not   so expressions need to pop the alibi null 
Groovy,WITHOUT_CLASSIFICATION,//  we may have to box the argument! 
Groovy,WITHOUT_CLASSIFICATION,//  ignore the return of the call 
Groovy,WITHOUT_CLASSIFICATION,//  instance at the end of the stream 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   getter 
Groovy,WITHOUT_CLASSIFICATION,//  skip if the property type is unknown (this seems to be the case if the   property descriptor is based on a setX() method that has two parameters   which is not a valid property) 
Groovy,WITHOUT_CLASSIFICATION,//  Allow security managers to prevent system property access 
Groovy,WITHOUT_CLASSIFICATION,// load "this" 
Groovy,WITHOUT_CLASSIFICATION,//  would this branch ever be true? 
Groovy,WITHOUT_CLASSIFICATION,//  def $toStringFirst = true 
Groovy,WITHOUT_CLASSIFICATION,//  Get verbosity hint. 
Groovy,WITHOUT_CLASSIFICATION,//  NOTE: timeStamp constants shouldn't belong to Verifier but kept here   for binary compatibility 
Groovy,WITHOUT_CLASSIFICATION,//         assertEquals("println([$x x y])" pretty("println([$x x y])")); // fails after parser // not in java      } 
Groovy,WITHOUT_CLASSIFICATION,//  correcting declaring class for extension methods: 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5202   there might be a non public listener of some kind   we skip that here 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                         methods for this 
Groovy,WITHOUT_CLASSIFICATION,//  should only get here with size = 2 when inner class constructor 
Groovy,WITHOUT_CLASSIFICATION,//  add a more informative name 
Groovy,WITHOUT_CLASSIFICATION,// call asBoolean 
Groovy,WITHOUT_CLASSIFICATION,//  0x41('a') - 0x46('f') 
Groovy,WITHOUT_CLASSIFICATION,//  TODO: correct generics for when receiver is to be skipped 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: ary.javav 1.1 2004-05-22 07:27:00 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------   feature: Enum Definitions 
Groovy,WITHOUT_CLASSIFICATION,//  under certain restrictive environments loading certain classes may be forbidden   and could yield a ClassNotFoundException (Google App Engine) 
Groovy,WITHOUT_CLASSIFICATION,//  ---------------------------------------------------------------------   The Great Computer Language Shootout   http://shootout.alioth.debian.org/     Code based on / inspired by existing relevant Shootout submissions     Contributed by Anthony Borla   --------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Put tail end of permutation after jth position in increasing order 
Groovy,WITHOUT_CLASSIFICATION,//  if original Integer[] meta class 
Groovy,WITHOUT_CLASSIFICATION,//  add thisPara to this(...) 
Groovy,WITHOUT_CLASSIFICATION,//  used to handle exceptions in catches and regularly visited finals 
Groovy,WITHOUT_CLASSIFICATION,//  collect every variable expression used in the loop body 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.DayOfWeek extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  same class in same source 
Groovy,WITHOUT_CLASSIFICATION,//  if there are any joint compilation options set stubDir if not set 
Groovy,WITHOUT_CLASSIFICATION,//  repeat test with subclass 
Groovy,WITHOUT_CLASSIFICATION,//  protected final PropertyChangeSupport this$propertyChangeSupport = new java.beans.PropertyChangeSupport(this) 
Groovy,WITHOUT_CLASSIFICATION,//  check for a category method named like a setter 
Groovy,WITHOUT_CLASSIFICATION,//  replace statement code 
Groovy,WITHOUT_CLASSIFICATION,//  unused 
Groovy,WITHOUT_CLASSIFICATION,//  (next result) = [ result next+result ]   -->   def tmp1 = result   def tmp2 = next+result   next = tmp1   result = tmp2 
Groovy,WITHOUT_CLASSIFICATION,//  to our list 
Groovy,WITHOUT_CLASSIFICATION,//  LITERAL this true false null   SIMPLE_EXPRESSION and various molecules 
Groovy,WITHOUT_CLASSIFICATION,//  dummy methods 
Groovy,WITHOUT_CLASSIFICATION,/*              * Iterate over the classpath provided to groovyc and add any missing path             * entries to the AntClassLoader.  This is a workaround since for some reason             * 'directory' classpath entries were not added to the AntClassLoader' classpath.              */
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   FACTORIES 
Groovy,WITHOUT_CLASSIFICATION,//  jth character of t   ith character of s   cost 
Groovy,WITHOUT_CLASSIFICATION,//  don't bind if we are half set up quietly stop 
Groovy,WITHOUT_CLASSIFICATION,//  return the length of the list 
Groovy,WITHOUT_CLASSIFICATION,// in Groovy2.0 use valueOf 
Groovy,WITHOUT_CLASSIFICATION,//  Compute min capacity for expectedMaxSize given a load factor of 3/4 
Groovy,WITHOUT_CLASSIFICATION,// puts ("key" key); 
Groovy,WITHOUT_CLASSIFICATION,//  let's register the builder as the delegate 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal constructor invocation (via new) 
Groovy,WITHOUT_CLASSIFICATION,// SPG don't use divide since BigInteger implements directly  and we want to dispatch through DefaultGroovyMethods to get a BigDecimal result 
Groovy,WITHOUT_CLASSIFICATION,//  declares the package scope   declares an external class   used in import statements to create an alias 
Groovy,WITHOUT_CLASSIFICATION,// spread expressions 
Groovy,WITHOUT_CLASSIFICATION,//  or a member of a class used in a 'with' 
Groovy,WITHOUT_CLASSIFICATION,//  for backwards compatibility 
Groovy,WITHOUT_CLASSIFICATION,//  wrong column information 
Groovy,WITHOUT_CLASSIFICATION,//  visit rparen()     token type RPAREN only used inside parser never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  codehaus reference implementation usage 
Groovy,WITHOUT_CLASSIFICATION,//  which are common 
Groovy,WITHOUT_CLASSIFICATION,//  Special handling for file:// protocol as getLastModified() often reports   incorrect results (-1) 
Groovy,WITHOUT_CLASSIFICATION,//  correct argumentArray's length 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.temporal.TemporalAmount extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//         key = key.indexOf('.') > -1 ? InvokerHelper.inspect(key) : key; 
Groovy,WITHOUT_CLASSIFICATION,//  sender only for call sites 
Groovy,WITHOUT_CLASSIFICATION,//  the following code will basically do this:  Map<String Object> m = Collections.singletonMap(method.getName() arg);  return ProxyGenerator.INSTANCE.              instantiateAggregateFromBaseClass(m parameter);   TO_GENERATED_PROXY is a handle (ObjectObjectProxyGeneratorClass)GroovyObject   where the second object is the input closure everything else   needs to be provide and is in remaining order: method name    ProxyGenerator.INSTANCE and parameter 
Groovy,WITHOUT_CLASSIFICATION,//  note: BigInteger and BigDecimal are also imported by default 
Groovy,WITHOUT_CLASSIFICATION,//  coerce is not needed 
Groovy,WITHOUT_CLASSIFICATION,//  type is being compiled so it will implement GroovyObject later 
Groovy,WITHOUT_CLASSIFICATION,//  matching method remove abstract status and use the same body 
Groovy,WITHOUT_CLASSIFICATION,//  path length of 1 indicates that probably is 'default package' i.e. "/" 
Groovy,WITHOUT_CLASSIFICATION,//  still no methods found test if delegate or owner are GroovyObjects   and invoke the method on them if so. 
Groovy,WITHOUT_CLASSIFICATION,//  the type of a variable declaration 
Groovy,WITHOUT_CLASSIFICATION,//  asking isResolved here allows to check if a primitive   type name like "int" was used to make t. In such a case   we have nothing left to do. 
Groovy,WITHOUT_CLASSIFICATION,//  Object<T> 
Groovy,WITHOUT_CLASSIFICATION,// ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  slot length. 
Groovy,WITHOUT_CLASSIFICATION,//  translate the graphics origin upwards so the area of the page we   want to print is in the origin; the clipping region auto set 
Groovy,WITHOUT_CLASSIFICATION,//  -------------------- Helper classes ------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  !! from here on args[0] is always not null !! 
Groovy,WITHOUT_CLASSIFICATION,//  validate with list of strings 
Groovy,WITHOUT_CLASSIFICATION,// compare 
Groovy,WITHOUT_CLASSIFICATION,//         TraceMethodVisitor tmv = new TraceMethodVisitor(mv); 
Groovy,WITHOUT_CLASSIFICATION,//  def baos = new ByteArrayOutputStream() 
Groovy,WITHOUT_CLASSIFICATION,//  parse the document 
Groovy,WITHOUT_CLASSIFICATION,//  if origLong and withoutCustomHandle 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.Month extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  Do not use URL.equals.  It uses the network to resolve names and compares ip addresses!   That is a violation of RFC and just plain evil.   http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html   http://docs.oracle.com/javase/7/docs/api/java/net/URL.html#equals(java.lang.Object)   "Since hosts comparison requires name resolution this operation is a blocking operation.   Note: The defined behavior for equals is known to be inconsistent with virtual hosting in HTTP." 
Groovy,WITHOUT_CLASSIFICATION,//  we already visited the sub expression 
Groovy,WITHOUT_CLASSIFICATION,//  Another Thread may be using an instance of this class   (for the first time) requiring a ClassInfo lock and   classloading which would require a lock on classCache.   The following locks on ClassInfo and to avoid deadlock   should not be done with a classCache lock. 
Groovy,WITHOUT_CLASSIFICATION,//   Single node on list 
Groovy,WITHOUT_CLASSIFICATION,//                 throw ScriptBytecodeAdapter.unwrap(gre);              }          }      } 
Groovy,WITHOUT_CLASSIFICATION,//  bind include method 
Groovy,WITHOUT_CLASSIFICATION,//  visit cases 
Groovy,WITHOUT_CLASSIFICATION,//  initialize hints 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: objinst.javav 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Collection class code is from my friend Phil Chu Thanks Phil! 
Groovy,WITHOUT_CLASSIFICATION,//  state flag 
Groovy,WITHOUT_CLASSIFICATION,//  write only property 
Groovy,WITHOUT_CLASSIFICATION,//  don't inherit static methods except our own 
Groovy,WITHOUT_CLASSIFICATION,//  add the fireVetoableChange method call 
Groovy,WITHOUT_CLASSIFICATION,//  'pretty printer' output of AST 
Groovy,WITHOUT_CLASSIFICATION,//  we exclude the finally block from the exception table   here to avoid double visiting of finally statements 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4237 the original variable should always appear   in the variable index otherwise some programs get into   trouble. So we define a dummy variable for the packaging   phase and let it end right away before the normal   reference will be used 
Groovy,WITHOUT_CLASSIFICATION,//  user has specified a type prefer it over the inferred type 
Groovy,WITHOUT_CLASSIFICATION,/*              we will actually do                   (x < y) ? -1 : ((x == y) ? 0 : 1)          which is the essence of what the call with Integers would do          this compiles to something along                        <x>              <y>              IF_ICMPGE L1              ICONST_M1              GOTO L2          L1              <x>              <y>              IF_ICMPNE L3              ICONST_0              GOTO L2          L3              ICONST_1          L2                    since the operators are already on the stack and we don't want          to load them again we will instead duplicate them. This will          require some pop actions in the branches!                        DUP2          (operands: IIII)               IF_ICMPGE L1  (operands: II)              ICONST_M1     (operands: III)              GOTO L2          L1              -----         (operands: II)              IF_ICMPNE L3  (operands: -)              ICONST_0      (operands: I)              GOTO L2          L3              - jump from L1 branch to here (operands: -)              ICONST_1      (operands: I)          L2            - if jump from GOTO L2 we have III but need only I          - if from L3 branch we get only I                    this means we have to pop of II before loading -1                   */
Groovy,WITHOUT_CLASSIFICATION,//  end::jsr223_init[] 
Groovy,WITHOUT_CLASSIFICATION,//  check that there's no star import blacklist 
Groovy,WITHOUT_CLASSIFICATION,/*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/    contributed by Paul Lofte */
Groovy,WITHOUT_CLASSIFICATION,//  let's try the thread context class loader first   let's try to use the system class loader 
Groovy,WITHOUT_CLASSIFICATION,//  unchecked assignment   examples:   List<A> list = []   List<A> list = new LinkedList()   Iterable<A> list = new LinkedList() 
Groovy,WITHOUT_CLASSIFICATION,/*  We are making a bet that not all chars will be unicode.  */
Groovy,WITHOUT_CLASSIFICATION,//  first pass just check for absence of annotations of interest 
Groovy,WITHOUT_CLASSIFICATION,//  class level templates 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise earliest position in line not part of mlr 
Groovy,WITHOUT_CLASSIFICATION,// noinspection unchecked 
Groovy,WITHOUT_CLASSIFICATION,//  Make a copy so destructive operations will not affect the caller 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.LocalTime extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  normal path 
Groovy,WITHOUT_CLASSIFICATION,//  first element == '1' ? 
Groovy,WITHOUT_CLASSIFICATION,//  there will be a default hash map constructor added later 
Groovy,WITHOUT_CLASSIFICATION,//  at the end we remove the Object[]   the vargs case simply the last swap so no pop is needed 
Groovy,WITHOUT_CLASSIFICATION,//  first visit   visit expression 
Groovy,WITHOUT_CLASSIFICATION,//  get the index of where we can start to look for an exit:   i.e. after the end of the length of the segment when we find    that text in question already is set properly we can stop   parsing 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5985 
Groovy,WITHOUT_CLASSIFICATION,//  if one superclass is derived (or equals) another 
Groovy,WITHOUT_CLASSIFICATION,//  The following fields are only used internally; every occurrence of a user-defined expression of the same kind   has its own instance so as to preserve line information. Consequently to test for such an expression don't 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see java.io.Writer#close()     */
Groovy,WITHOUT_CLASSIFICATION,//  the class property stops resolving dynamic property names too 
Groovy,WITHOUT_CLASSIFICATION,//  local inner classes do not specify the outer class name 
Groovy,WITHOUT_CLASSIFICATION,//  let's try setting the property on the first object 
Groovy,WITHOUT_CLASSIFICATION,//  map*.property syntax   only "key" and "value" are allowed 
Groovy,WITHOUT_CLASSIFICATION,//  ACC_SYNTHETIC isn't used here use it as a special flag 
Groovy,WITHOUT_CLASSIFICATION,//  integer 
Groovy,WITHOUT_CLASSIFICATION,//  start all Threads 
Groovy,WITHOUT_CLASSIFICATION,//  The stream/writer to which to output 
Groovy,WITHOUT_CLASSIFICATION,//  Uncomment if at some point this method can be called before parameterTypes initialized   getParameterTypes(); 
Groovy,WITHOUT_CLASSIFICATION,//  if declaration does not provide generics there is no connection to make  
Groovy,WITHOUT_CLASSIFICATION,/*      * Get info about usual Java public fields incl. constants.     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
Groovy,WITHOUT_CLASSIFICATION,//  Ultimately methods can be available in the closure map which are not defined by the superclass 
Groovy,WITHOUT_CLASSIFICATION,//  
Groovy,WITHOUT_CLASSIFICATION,/*  add a map item value.  */
Groovy,WITHOUT_CLASSIFICATION,// success |= isValidAttribute(xform anno ""); 
Groovy,WITHOUT_CLASSIFICATION,// TODO: move to Verifier 
Groovy,WITHOUT_CLASSIFICATION,//  conservative coding 
Groovy,WITHOUT_CLASSIFICATION,//  assume @tag signifies end of sentence 
Groovy,WITHOUT_CLASSIFICATION,//  should always be the case   this should always be the case but adding a test is safer 
Groovy,WITHOUT_CLASSIFICATION,/*          * Never forget super.init()!          */
Groovy,WITHOUT_CLASSIFICATION,//  first extension will be the one set explicitly on <groovyc> 
Groovy,WITHOUT_CLASSIFICATION,//  we did for example find T=String and now check against   T=Object which fails the first compatibleConnection check   but since T=Object works for both the second one will pass   and we need to change the type for T to the more general one 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovySourcePosition position() {/*todo*/return null;}      public GroovySeeTag[] seeTags() {/*todo*/return null;} 
Groovy,WITHOUT_CLASSIFICATION,//  currently just for empty literals not for e.g. Collections.emptyList() at present 
Groovy,WITHOUT_CLASSIFICATION,//  TODO move logic here into resolve 
Groovy,WITHOUT_CLASSIFICATION,/*       Find the entry then         1. Set value field to null to force get() to retry        2. Rebuild the list without this entry.           All entries following removed node can stay in list but           all preceding ones need to be cloned.  Traversals rely           on this strategy to ensure that elements will not be          repeated during iteration.     */
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeConstructor(java.lang.Object[])      */
Groovy,WITHOUT_CLASSIFICATION,// reset() and skip over last linesep 
Groovy,WITHOUT_CLASSIFICATION,//  when resolving getProp() or setProp() 
Groovy,WITHOUT_CLASSIFICATION,//  a dynamic variable is either an undeclared variable 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getDTDHandler()     */
Groovy,WITHOUT_CLASSIFICATION,//  do in privileged block since we may be looking at private stuff 
Groovy,WITHOUT_CLASSIFICATION,//  we put the old dependencies into local cache so createCompilationUnit   can pick it up. We put that entry under the name "." 
Groovy,WITHOUT_CLASSIFICATION,//  means we can't get to system clipboard so create app level one 
Groovy,WITHOUT_CLASSIFICATION,//  set the script source position 
Groovy,WITHOUT_CLASSIFICATION,//  workaround for GROOVY-6095 
Groovy,WITHOUT_CLASSIFICATION,//  The overall AST for this CompilationUnit.   The classes generated during classgen. 
Groovy,WITHOUT_CLASSIFICATION,//  To make a connection to the SAM class we use that new information   to replace the generics in the SAM type parameter of the target 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#setProperty(java.lang.Object java.lang.String java.lang.Object)      */
Groovy,WITHOUT_CLASSIFICATION,//  dquote-tab-dquote 
Groovy,WITHOUT_CLASSIFICATION,//  Copy stream to stream 
Groovy,WITHOUT_CLASSIFICATION,//  default statement can be grouped with previous case 
Groovy,WITHOUT_CLASSIFICATION,/*      * Worker method for the {@link #escapeJavaScript(String)} method.     *     * @param str String to escape values in may be null     * @param escapeSingleQuotes escapes single quotes if <code>true</code>     * @param escapeForwardSlash TODO     * @return the escaped string      */
Groovy,WITHOUT_CLASSIFICATION,//  Write out number of buckets 
Groovy,WITHOUT_CLASSIFICATION,//  Used to store the real access modifiers for inner classes 
Groovy,WITHOUT_CLASSIFICATION,//  naive 
Groovy,WITHOUT_CLASSIFICATION,//  command line arguments could not be parsed 
Groovy,WITHOUT_CLASSIFICATION,/*              * Resource not found.              */
Groovy,WITHOUT_CLASSIFICATION,//  let's create a dynamic proxy 
Groovy,WITHOUT_CLASSIFICATION,//  potentially add default constructor to class docs (but not interfaces) 
Groovy,WITHOUT_CLASSIFICATION,// guard checks 
Groovy,WITHOUT_CLASSIFICATION,//  then let's use the current working directory since the repo can be relative to that. 
Groovy,WITHOUT_CLASSIFICATION,/* final */
Groovy,WITHOUT_CLASSIFICATION,//  test non-integer number 
Groovy,WITHOUT_CLASSIFICATION,//  println helper methods 
Groovy,WITHOUT_CLASSIFICATION,//  we need to transform variable expressions that go to a delegate   to a property expression as ACG would lose the information in   processClassVariable before it reaches any makeCall that could handle it 
Groovy,WITHOUT_CLASSIFICATION,//  check next level of interfaces 
Groovy,WITHOUT_CLASSIFICATION,// throws NumberFormatException 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   TEXTS 
Groovy,WITHOUT_CLASSIFICATION,//  no rename so delete and add 
Groovy,WITHOUT_CLASSIFICATION,//  all arguments are object so test only if argument number is correct 
Groovy,WITHOUT_CLASSIFICATION,//  try to resolve a public static inner class' name 
Groovy,WITHOUT_CLASSIFICATION,//  set it to -1 for starters so parameterTypes will always get a type 
Groovy,WITHOUT_CLASSIFICATION,//  v.Bv /(v.v)   eigenvalue of v 
Groovy,WITHOUT_CLASSIFICATION,//  if constructor call is not in outer class don't pass 'this' implicitly. Return. 
Groovy,WITHOUT_CLASSIFICATION,//  No instances static methods only 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                Property handling super: get    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Optional configuration data 
Groovy,WITHOUT_CLASSIFICATION,//  TODO account for default params giving multiple signatures 
Groovy,WITHOUT_CLASSIFICATION,/*     * Methods on Integer to implement 1.week 4.days etc.     */
Groovy,WITHOUT_CLASSIFICATION,//  assignment for subscript 
Groovy,WITHOUT_CLASSIFICATION,/*  ---------------- Concurrent Map Support --------------  */
Groovy,WITHOUT_CLASSIFICATION,//  if right expression is a ClosureExpression store parameter type information 
Groovy,WITHOUT_CLASSIFICATION,//  if namedArgs.containsKey(propertyName) setProperty(propertyName namedArgs.get(propertyName)); 
Groovy,WITHOUT_CLASSIFICATION,//  this is used to store the goals for a "break foo" call 
Groovy,WITHOUT_CLASSIFICATION,//  testForIterator() covered by testForCondition() 
Groovy,WITHOUT_CLASSIFICATION,//  we should now check if the import is in the star imports 
Groovy,WITHOUT_CLASSIFICATION,// These are the costs for the various edit operations  they are used by the two DamerauLevenshtein implementations 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------------------------------------------------------------------   Below you will find various helper methods aimed at simplifying algorithms for subclasses   ------------------------------------------------------------------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  Performance detail:   not using get(fromIndex) get(toIndex) in the following to avoid stepping over elements twice 
Groovy,WITHOUT_CLASSIFICATION,//  ignore will try lazy reference 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.GroovyObject#setProperty(java.lang.String java.lang.Object)          */
Groovy,WITHOUT_CLASSIFICATION,//  use Iterator.hasNext() to check for available inner classes 
Groovy,WITHOUT_CLASSIFICATION,//  and understandability of this solution over more complex but efficient alternatives) 
Groovy,WITHOUT_CLASSIFICATION,//  Interchange a[j] and a[k] 
Groovy,WITHOUT_CLASSIFICATION,//  Properties   ---------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Find index k such that a[k] is smallest integer 
Groovy,WITHOUT_CLASSIFICATION,//  Look at the super classes 
Groovy,WITHOUT_CLASSIFICATION,//   BITWISE_OR / PIPE   340    BITWISE_AND         341    BIWISE_XOR          342 
Groovy,WITHOUT_CLASSIFICATION,//  force check of modifier conflicts 
Groovy,WITHOUT_CLASSIFICATION,//  in theory there can only be one annotation of that type 
Groovy,WITHOUT_CLASSIFICATION,//  the break statement is only allowed inside loops or switches   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  TODO GROOVY-5011 handle case of @Override on a property 
Groovy,WITHOUT_CLASSIFICATION,//  package private 
Groovy,WITHOUT_CLASSIFICATION,//  on the stack 
Groovy,WITHOUT_CLASSIFICATION,//  Allow the msg to be a Throwable and handle it properly if no cause is given 
Groovy,WITHOUT_CLASSIFICATION,//  if java did atomic blocks this would be one 
Groovy,WITHOUT_CLASSIFICATION,/*  package private  */
Groovy,WITHOUT_CLASSIFICATION,//  then we're in the weird case of a \ at the end of the   string let's output it anyway. 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    double  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  constructor call expression 
Groovy,WITHOUT_CLASSIFICATION,//  give a chance to type checker extensions to throw errors based on information gathered afterwards 
Groovy,WITHOUT_CLASSIFICATION,//  Classloader for global and local transforms 
Groovy,WITHOUT_CLASSIFICATION,//  lets try invoke the method on the real String 
Groovy,WITHOUT_CLASSIFICATION,//  look into the module node if there is a class with that name 
Groovy,WITHOUT_CLASSIFICATION,//  let us save that value for the return 
Groovy,WITHOUT_CLASSIFICATION,//  In order to divide tasks 'equally' for many threads permut generation   strategy is different than that of original single thread. 
Groovy,WITHOUT_CLASSIFICATION,//  no MOP methods if not a child of GroovyObject 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovyTypeVariable[] typeParameters() {/*todo*/return null;} // not supported in groovy      public GroovyParamTag[] typeParamTags() {/*todo*/return null;} // not supported in groovy 
Groovy,WITHOUT_CLASSIFICATION,//       * final GroovyCastException 
Groovy,WITHOUT_CLASSIFICATION,//  group 1: tag name group 2: tag body 
Groovy,WITHOUT_CLASSIFICATION,//  cannot infer return list type 
Groovy,WITHOUT_CLASSIFICATION,//  (it might have been UTF-7 but this encoding is usually internally used only by mail systems) 
Groovy,WITHOUT_CLASSIFICATION,//  ex: short s = (short) 0 
Groovy,WITHOUT_CLASSIFICATION,//  start on either side of the removed text 
Groovy,WITHOUT_CLASSIFICATION,//  case D   penalty for vargs 
Groovy,WITHOUT_CLASSIFICATION,//  startColumns.get(i) is the first non-empty column of lines.get(i) 
Groovy,WITHOUT_CLASSIFICATION,//  if a byte has its most significant bit set the file is in UTF-8 or in the default encoding 
Groovy,WITHOUT_CLASSIFICATION,//  create a new temporary element in the if-then-else type info 
Groovy,WITHOUT_CLASSIFICATION,//  we already had a match so we don't make a direct call at all 
Groovy,WITHOUT_CLASSIFICATION,//  we replace '.' only in the className part   with '$' to find an inner class. The case that   the package is really a class is handled elsewhere 
Groovy,WITHOUT_CLASSIFICATION,/*  The current length of the map.  */
Groovy,WITHOUT_CLASSIFICATION,//  helpful error 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: moments.javav 1.1 2004-11-23 08:08:44 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  type spec for generics 
Groovy,WITHOUT_CLASSIFICATION,//  test if one class inherits from the other 
Groovy,WITHOUT_CLASSIFICATION,//  e.g. x[a] += b   to avoid loading x and a twice we transform the expression to use   ExpressionAsVariableSlot   -> subscript=a receiver=x receiver[subscript]+b = receiver[subscript]   -> subscript=a receiver=x receiver#getAt(subscript)#plus(b) = receiver#putAt(subscript)   -> subscript=a receiver=x receiver#putAt(subscript receiver#getAt(subscript)#plus(b))   the result of x[a] += b is x[a]+b thus:   -> subscript=a receiver=x receiver#putAt(subscript ret=receiver#getAt(subscript)#plus(b)) ret 
Groovy,WITHOUT_CLASSIFICATION,//  joint compilation parameters 
Groovy,WITHOUT_CLASSIFICATION,//  it's important to use a stable sort here otherwise   renderValues() will skip the wrong values 
Groovy,WITHOUT_CLASSIFICATION,//  check varged 
Groovy,WITHOUT_CLASSIFICATION,//  case C&D we use baseType to calculate and set it   to the value we need according to case C and D   case C 
Groovy,WITHOUT_CLASSIFICATION,//  tag::bsf_simple[] 
Groovy,WITHOUT_CLASSIFICATION,//  now rhs is completely done and we need only to store. In a[1]++ this    would be a.getAt(1).next() for the rhs "lhs" code is a.putAt(1 rhs) 
Groovy,WITHOUT_CLASSIFICATION,//  used to store type information on class nodes   in flow analysis represents the type of the declaration node lhs   used to store inferred return type for methods and closures   used to store closure argument types on a variable expression   used to tell that a property expression refers to a readonly property   used to store the default expression for a parameter   used to store the MethodNode a MethodCallExpression should target   used to store the delegation strategy and delegate type of a closure when declared with @DelegatesTo   if the receiver is implicit but not "this" store the name of the receiver (delegate or owner)   set of private fields that are accessed from closures or inner classes   set of private fields that are set from closures or inner classes   set of private methods that are accessed from closures or inner classes   call recognized by a type checking extension as a dynamic method call   used to store the list of MOP methods that still have to be generated 
Groovy,WITHOUT_CLASSIFICATION,//  top is not primitive so unbox   leave that BH#doCast later 
Groovy,WITHOUT_CLASSIFICATION,//  @interface Foo...   1 & 2   1 | 2   1 >>> 2   1 ^ 2   class Foo...   private Foo() {...    3/4   foo.bar   enum Foo...   a >= b   a > b   interface Foo...   myMethod(name:"Jez")   foo:x=1                           true && false   a <= b   foo as Bar 
Groovy,WITHOUT_CLASSIFICATION,//  Ignore parent delegation and just try to load locally 
Groovy,WITHOUT_CLASSIFICATION,//  must invalidate all to force concurrent get's to wait and then retry 
Groovy,WITHOUT_CLASSIFICATION,//  get lock type 
Groovy,WITHOUT_CLASSIFICATION,//  power asserts 
Groovy,WITHOUT_CLASSIFICATION,//  bug where the increment was not executed when hitting non-executed if branch 
Groovy,WITHOUT_CLASSIFICATION,//  ... print result 
Groovy,WITHOUT_CLASSIFICATION,//  assume gradle syntax   see: http://www.gradle.org/latest/docs/userguide/dependency_management.html#sec:how_to_declare_your_dependencies 
Groovy,WITHOUT_CLASSIFICATION,//  tag::jsr223_variables[] 
Groovy,WITHOUT_CLASSIFICATION,//    Prep the generator machinery 
Groovy,WITHOUT_CLASSIFICATION,//  add Grape.grab(excludeArgs [group:group module:module version:version classifier:classifier])   or Grape.grab([group:group module:module version:version classifier:classifier]) 
Groovy,WITHOUT_CLASSIFICATION,//  Step through ClassDocs and tie up loose ends 
Groovy,WITHOUT_CLASSIFICATION,/* Constructor[] */
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.MetaBeanProperty#getGetter()       */
Groovy,WITHOUT_CLASSIFICATION,//  let's fast calculate the size 
Groovy,WITHOUT_CLASSIFICATION,//  we have to have handle DelcarationExpressions special since their    entry should be outside the optimization path we have to do that of   course only if we are actually going to do two different paths    otherwise it is not needed     there are several cases to be considered now.   (1) no fast path possible so just do super   (2) fast path possible and at path split point (meaning not in        fast path and not in slow path). Here we have to extract the        Declaration and replace by an assignment   (3) fast path possible and in slow or fastPath. Nothing to do here.     the only case we need to handle is then (2). 
Groovy,WITHOUT_CLASSIFICATION,//  node and any subclass resolving will then take place elsewhere 
Groovy,WITHOUT_CLASSIFICATION,//  calculate whole list in this case   recommend avoiding -ve's as this is not as efficient 
Groovy,WITHOUT_CLASSIFICATION,//  found a leaf 
Groovy,WITHOUT_CLASSIFICATION,//  default 
Groovy,WITHOUT_CLASSIFICATION,/*    * This class performs a best-effort bounding of a ConcurrentHashMap using a   * page-replacement algorithm to determine which entries to evict when the   * capacity is exceeded.   *   * The page replacement algorithm's data structures are kept eventually   * consistent with the map. An update to the map and recording of reads may   * not be immediately reflected on the algorithm's data structures. These   * structures are guarded by a lock and operations are applied in batches to   * avoid lock contention. The penalty of applying the batches is spread across   * threads so that the amortized cost is slightly higher than performing just   * the ConcurrentHashMap operation.   *   * A memento of the reads and writes that were performed on the map are   * recorded in buffers. These buffers are drained at the first opportunity   * after a write or when the read buffer exceeds a threshold size. The reads   * are recorded in a lossy buffer allowing the reordering operations to be   * discarded if the draining process cannot keep up. Due to the concurrent   * nature of the read and write operations a strict policy ordering is not   * possible but is observably strict when single threaded.   *   * Due to a lack of a strict ordering guarantee a task can be executed   * out-of-order such as a removal followed by its addition. The state of the   * entry is encoded within the value's weight.   *   * Alive: The entry is in both the hash-table and the page replacement policy.   * This is represented by a positive weight.   *   * Retired: The entry is not in the hash-table and is pending removal from the   * page replacement policy. This is represented by a negative weight.   *   * Dead: The entry is not in the hash-table and is not in the page replacement   * policy. This is represented by a weight of zero.   *   * The Least Recently Used page replacement algorithm was chosen due to its   * simplicity high hit rate and ability to be implemented with O(1) time   * complexity.    */
Groovy,WITHOUT_CLASSIFICATION,//  -> 
Groovy,WITHOUT_CLASSIFICATION,//  cache   once per documentation set   cache   once per package   cache   once per class 
Groovy,WITHOUT_CLASSIFICATION,//  ---------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#startDocument()     */
Groovy,WITHOUT_CLASSIFICATION,//  throw null pointer exception if key null 
Groovy,WITHOUT_CLASSIFICATION,// empty the reference queue 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   PROCESSING 
Groovy,WITHOUT_CLASSIFICATION,//  middle element is condition lower half is init higher half is increment 
Groovy,WITHOUT_CLASSIFICATION,//  expected 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                         methods for super 
Groovy,WITHOUT_CLASSIFICATION,//  must be called for break/continue/return 
Groovy,WITHOUT_CLASSIFICATION,//  strip off trailing attributes 
Groovy,WITHOUT_CLASSIFICATION,//    TYPE CLASSES 
Groovy,WITHOUT_CLASSIFICATION,//  let's assume its a collection of 1 
Groovy,WITHOUT_CLASSIFICATION,//  look for one of these:     import static MyClass.* 
Groovy,WITHOUT_CLASSIFICATION,//  true when inside a task so special ant.target handling occurs just at top level 
Groovy,WITHOUT_CLASSIFICATION,//  add the firePropertyChange method call 
Groovy,WITHOUT_CLASSIFICATION,//  if the property expression is an attribute expression (o.@attr) then 
Groovy,WITHOUT_CLASSIFICATION,//  the following code will basically do this:   return Proxy.newProxyInstance(          arg.getClass().getClassLoader()          new Class[]{parameter}          new ConvertedClosure((Closure) arg));   TO_REFLECTIVE_PROXY will do that for us though   input is the closure the method name the class loader and the  
Groovy,WITHOUT_CLASSIFICATION,//  visitLetter ...     token type LETTER only used by lexer never visited/created 
Groovy,WITHOUT_CLASSIFICATION,// creates the collection to look for values. 
Groovy,WITHOUT_CLASSIFICATION,// we have to keep 3 rows instead of the 2 used in Levenshtein 
Groovy,WITHOUT_CLASSIFICATION,//  exclusive   multi-line strings are always placed on new lines 
Groovy,WITHOUT_CLASSIFICATION,//  wrap arguments from call site in Object[] 
Groovy,WITHOUT_CLASSIFICATION,//     exprNode = node.getNextSibling();  } 
Groovy,WITHOUT_CLASSIFICATION,//  load array index: sub=a [load x DUP load sub call arrayGet load b call operation load sub call arraySet] 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setProperty(java.lang.String java.lang.Object)      */
Groovy,WITHOUT_CLASSIFICATION,//  use Class.forName instead of new Dummy() to allow separate compilation 
Groovy,WITHOUT_CLASSIFICATION,//  assume we got a true reference to the object 
Groovy,WITHOUT_CLASSIFICATION,//  should never reach here! 
Groovy,WITHOUT_CLASSIFICATION,//  {   }   [   ]   (   ) 
Groovy,WITHOUT_CLASSIFICATION,//  observable interface 
Groovy,WITHOUT_CLASSIFICATION,//  annotations 
Groovy,WITHOUT_CLASSIFICATION,//  check first parameters 
Groovy,WITHOUT_CLASSIFICATION,//  20 steps of the power method 
Groovy,WITHOUT_CLASSIFICATION,//  is different in its specified form. That means we have to create a bridge method! 
Groovy,WITHOUT_CLASSIFICATION,//  when resolving prop reference 
Groovy,WITHOUT_CLASSIFICATION,//  implementation of methods 
Groovy,WITHOUT_CLASSIFICATION,//  store copy in temporary variable 
Groovy,WITHOUT_CLASSIFICATION,//  append to right side of Li2 (reversing list) 
Groovy,WITHOUT_CLASSIFICATION,//  Direct instantiation of classes without imports will therefore also fail if this option is enabled 
Groovy,WITHOUT_CLASSIFICATION,//  pass 
Groovy,WITHOUT_CLASSIFICATION,//  true == replace 
Groovy,WITHOUT_CLASSIFICATION,//  we do not do our name mangling to find an inner class   if the type is a ConstructedClassWithPackage because in this case we   are resolving the name at a different place already 
Groovy,WITHOUT_CLASSIFICATION,//  this shouldn't happen since we are Cloneable 
Groovy,WITHOUT_CLASSIFICATION,//  little bit of hackery to avoid Groovy dependency in this file 
Groovy,WITHOUT_CLASSIFICATION,//  this   constructor arg n is the closure map 
Groovy,WITHOUT_CLASSIFICATION,//  constructor calls with this() and super() 
Groovy,WITHOUT_CLASSIFICATION,//  generic meta method invocation path 
Groovy,WITHOUT_CLASSIFICATION,//  check for a category method named like a getter 
Groovy,WITHOUT_CLASSIFICATION,//  if right is array map or collection we try invoking the 
Groovy,WITHOUT_CLASSIFICATION,//  search for the file and if it exists don't try to use URIs ... 
Groovy,WITHOUT_CLASSIFICATION,//  varg call 
Groovy,WITHOUT_CLASSIFICATION,// reload saved value 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#endElement(java.lang.String java.lang.String java.lang.String)     */
Groovy,WITHOUT_CLASSIFICATION,//  ignore the no arg constructor might not exist. 
Groovy,WITHOUT_CLASSIFICATION,// do nothing 
Groovy,WITHOUT_CLASSIFICATION,//  return statement added after visitConstructorOrMethod finished... we can not count these auto-generated return statements(GROOVY-7753) see `typeCheckingContext.pushEnclosingReturnStatement` 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal Property handling : get    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Implementation methods  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  not in java 
Groovy,WITHOUT_CLASSIFICATION,//  Have to call fireTestStared/fireTestFinished via reflection as they unfortunately have protected access in Project 
Groovy,WITHOUT_CLASSIFICATION,//  If they want to use a name other than than "run" then make the change. 
Groovy,WITHOUT_CLASSIFICATION,// the below is a quirk we do this so that every non-string-section is prefixed by  the same number of characters (the others have "out<<\"\"\"${") this allows us to  figure out the exception row and column later on 
Groovy,WITHOUT_CLASSIFICATION,/* DIV */
Groovy,WITHOUT_CLASSIFICATION,//  search for nested class 
Groovy,WITHOUT_CLASSIFICATION,//  package level templates 
Groovy,WITHOUT_CLASSIFICATION,//  set the offset to start where we left off 
Groovy,WITHOUT_CLASSIFICATION,//  LCONST_0 LCONST_1 
Groovy,WITHOUT_CLASSIFICATION,//  disabled until checked with fraz  new CompilationUnit(configuration null createGroovyClassLoaderWithExpectations(configuration)); 
Groovy,WITHOUT_CLASSIFICATION,//  FloatingPointMath wins according to promotion Matrix 
Groovy,WITHOUT_CLASSIFICATION,// if they share case check for substitution 
Groovy,WITHOUT_CLASSIFICATION,//  convert byte into unsigned hex string 
Groovy,WITHOUT_CLASSIFICATION,//  compare a list longer than the range 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   TOKEN INITIALIZATION AND SUCH 
Groovy,WITHOUT_CLASSIFICATION,//  inference 
Groovy,WITHOUT_CLASSIFICATION,//  if it is an anonymous inner class don't generate the stub code for it. 
Groovy,WITHOUT_CLASSIFICATION,/*  ---------------- Serialization Support --------------  */
Groovy,WITHOUT_CLASSIFICATION,//  2 is for inner class case 
Groovy,WITHOUT_CLASSIFICATION,//  check nested type parameters 
Groovy,WITHOUT_CLASSIFICATION,//  GroovyClassVisitor interface 
Groovy,WITHOUT_CLASSIFICATION,//  this program modified from:     http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html   Timing Trials or the Trials of Timing: Experiments with Scripting   and User-Interface Languages</a> by Brian W. Kernighan and   Christopher J. Van Wyk. 
Groovy,WITHOUT_CLASSIFICATION,//  Set in safe defaults 
Groovy,WITHOUT_CLASSIFICATION,//  starting with number will never reach a non-number same for string 
Groovy,WITHOUT_CLASSIFICATION,//  rotate all value arrays upwards(older rows get a higher index) 
Groovy,WITHOUT_CLASSIFICATION,//  wrapper creation methods 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: sieve.javav 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  UncheckedThrow allows throwing checked exceptions without declaring a throws 
Groovy,WITHOUT_CLASSIFICATION,//  patch needed here too but we need a test case to trip it first 
Groovy,WITHOUT_CLASSIFICATION,//  Do not use HashMap 
Groovy,WITHOUT_CLASSIFICATION,//  stash declared variable in case we do subsequent visits after we   change to assignment only 
Groovy,WITHOUT_CLASSIFICATION,//  load this   load closure map   load method name 
Groovy,WITHOUT_CLASSIFICATION,//  this is a closure.call() call 
Groovy,WITHOUT_CLASSIFICATION,//  also don't bother with guard if we have "simple" method args 
Groovy,WITHOUT_CLASSIFICATION,//  Convert long to int for IFEQ comparison using LCMP 
Groovy,WITHOUT_CLASSIFICATION,//  if original long meta class 
Groovy,WITHOUT_CLASSIFICATION,//  Don't create statement in subclass constructors to avoid throw in constructors 
Groovy,WITHOUT_CLASSIFICATION,//  unary plus unary minus bitwise negation 
Groovy,WITHOUT_CLASSIFICATION,// prevent NPE if in .war 
Groovy,WITHOUT_CLASSIFICATION,//  store inferred type on CCE 
Groovy,WITHOUT_CLASSIFICATION,//  obtain the snippet from the buffer within specified bounds 
Groovy,WITHOUT_CLASSIFICATION,//       x     y     z 
Groovy,WITHOUT_CLASSIFICATION,//  load return value && correct operand stack stack 
Groovy,WITHOUT_CLASSIFICATION,//  default for inner classes 
Groovy,WITHOUT_CLASSIFICATION,//  for binary compatibility only 
Groovy,WITHOUT_CLASSIFICATION,//         }          return (Float) primitiveArrayPut(array idx newValue);      }        public static Double putAt(double[] array int idx Object newValue) { 
Groovy,WITHOUT_CLASSIFICATION,//  Postfix expressions 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   VetoableChangeListener[] getVetoableChangeListeners(String name) {     return this$vetoableChangeSupport.getVetoableChangeListeners(name) 
Groovy,WITHOUT_CLASSIFICATION,//  it is super(..) since this(..) is already covered 
Groovy,WITHOUT_CLASSIFICATION,//  check the exception for a nested compilation exception 
Groovy,WITHOUT_CLASSIFICATION,//  --   --   --   - (negation) 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal GroovyObject Property handling : get    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6123 
Groovy,WITHOUT_CLASSIFICATION,//  pop for "makeBlockRecorder(catches)" 
Groovy,WITHOUT_CLASSIFICATION,//  test if vanilla name is current class name 
Groovy,WITHOUT_CLASSIFICATION,/*  oldM  */
Groovy,WITHOUT_CLASSIFICATION,//  null signals the value shouldn't be rendered 
Groovy,WITHOUT_CLASSIFICATION,//  we don't need the closure any longer so remove it 
Groovy,WITHOUT_CLASSIFICATION,//  The apostrophe is only escaped if the value is for an   attribute as opposed to element content and if the   builder is configured to surround attribute values with   single quotes. 
Groovy,WITHOUT_CLASSIFICATION,//  In order to keep binary compatibility 
Groovy,WITHOUT_CLASSIFICATION,//  loop through methods in class 
Groovy,WITHOUT_CLASSIFICATION,//  given ScriptContext. If available call it. 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   PropertyChangeListener[] getPropertyChangeListeners(String name) {     return this$propertyChangeSupport.getPropertyChangeListeners(name) 
Groovy,WITHOUT_CLASSIFICATION,//  class through the receiver 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.MetaBeanProperty#getSetter()       */
Groovy,WITHOUT_CLASSIFICATION,/* ignore */
Groovy,WITHOUT_CLASSIFICATION,//  not a script try running through run method but properties will not be available 
Groovy,WITHOUT_CLASSIFICATION,//  Otherwise try the older method based on the constructor's call expression 
Groovy,WITHOUT_CLASSIFICATION,//  JDK 9 and above correctly report 4   assertEquals(3 ctor.getParameterAnnotations().length); //[][@Anno1@Anno2][@Anno2] 
Groovy,WITHOUT_CLASSIFICATION,//  workaround for generated code in enums which use .next() returning a Number 
Groovy,WITHOUT_CLASSIFICATION,//  ----------------------------------------------------   deprecate in parser?: 'continue' allowed in closures 
Groovy,WITHOUT_CLASSIFICATION,//  if it is not static and we do no static access 
Groovy,WITHOUT_CLASSIFICATION,/*  double quote  */
Groovy,WITHOUT_CLASSIFICATION,//  try finding a delegate that has that method... we start from   outside building a stack and try each delegate 
Groovy,WITHOUT_CLASSIFICATION,//  Reuse trailing consecutive sequence of all same bit 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: sumcol.javav 1.5 2007-06-20 03:32:39 bfulgham Exp $   http://www.bagley.org/~doug/shootout/  
Groovy,WITHOUT_CLASSIFICATION,//  method name to DSL name 
Groovy,WITHOUT_CLASSIFICATION,//  assume "is" or "[gs]et" 
Groovy,WITHOUT_CLASSIFICATION,//  LITERAL "(" "{"   things the expression parser should cross lines for in it doesn't have to 
Groovy,WITHOUT_CLASSIFICATION,/*              * Class files generated for inner classes have an INNERCLASS             * reference to self. The top level class access modifiers for             * an inner class will not accurately reflect their access. For             * example top-level access modifiers for private inner classes             * are package-private protected inner classes are public and             * the static modifier is not included. So the INNERCLASS self             * reference is used to capture the correct modifiers.             *             * Must compare against the fully qualified name because there may             * be other INNERCLASS references to same named nested classes from             * other classes.             *             * Example:             *             *   public final class org/foo/Groovy8632$Builder extends org/foo/Groovy8632Abstract$Builder  {             *     public final static INNERCLASS org/foo/Groovy8632$Builder org/foo/Groovy8632 Builder             *     public static abstract INNERCLASS org/foo/Groovy8632Abstract$Builder org/foo/Groovy8632Abstract Builder              */
Groovy,WITHOUT_CLASSIFICATION,//  push expression string onto stack 
Groovy,WITHOUT_CLASSIFICATION,//  for expressions like foo = { ... }   we know that the RHS type is a closure   but we must check if the binary expression is an assignment   because we need to check if a setter uses @DelegatesTo 
Groovy,WITHOUT_CLASSIFICATION,/*                  * If it is a statement for an explicitly declared static field inside an enum store its                 * reference. For enums they need to be handled differently as such init statements should                 * come after the enum values have been initialized inside <clinit> block. GROOVY-3161.                  */
Groovy,WITHOUT_CLASSIFICATION,//  These fields provide support for notifying a listener. 
Groovy,WITHOUT_CLASSIFICATION,//  we do not add one for super classes only for interfaces 
Groovy,WITHOUT_CLASSIFICATION,// new ErrorReporter( e false ).write( new PrintWriter(writer) ); 
Groovy,WITHOUT_CLASSIFICATION,//  are we using groups?   yes so return the specified group as list 
Groovy,WITHOUT_CLASSIFICATION,//  probably facing a type mismatch 
Groovy,WITHOUT_CLASSIFICATION,//  compensate for closure's time 
Groovy,WITHOUT_CLASSIFICATION,//  check direct interfaces (GROOVY-7149) 
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralDef ...     token type "def" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,//    Check to see if the requested script/template source file has been the   target of a RequestDispatcher.include(). 
Groovy,WITHOUT_CLASSIFICATION,//  this method mimics EMC behavior 
Groovy,WITHOUT_CLASSIFICATION,//  cast argument to parameter class inclusive unboxing 
Groovy,WITHOUT_CLASSIFICATION,//  wrong line information 
Groovy,WITHOUT_CLASSIFICATION,//  valid method branch 
Groovy,WITHOUT_CLASSIFICATION,//  internal field 
Groovy,WITHOUT_CLASSIFICATION,//  we need to know the class we want to start 
Groovy,WITHOUT_CLASSIFICATION,//  thus for each argument we try to find the connected generics first 
Groovy,WITHOUT_CLASSIFICATION,// set type as indicator for Java2GroovyConvertor to turn into LIST_CONSTRUCTOR 
Groovy,WITHOUT_CLASSIFICATION,//  we have two interfaces but none inherits from the other 
Groovy,WITHOUT_CLASSIFICATION,//  This will pick up incorrect sibling node if 'node' is a plain 'return'   
Groovy,WITHOUT_CLASSIFICATION,//  assume properties contain paths 
Groovy,WITHOUT_CLASSIFICATION,/*          * GROOVY-4524: The following is not needed anymore as an ant Project already by default has inputhandler         * set to DefaultInputHandler. And if it is again set here it mistakenly overrides the custom input handler         * if set using -inputhandler switch.           */
Groovy,WITHOUT_CLASSIFICATION,//  keeping 3 bits for additional information such as vargs 
Groovy,WITHOUT_CLASSIFICATION,//  most outer class is now element 0 
Groovy,WITHOUT_CLASSIFICATION,//    Recurse to display the children. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.GroovyObject#setProperty(java.lang.String java.lang.Object)     */
Groovy,WITHOUT_CLASSIFICATION,//  swallow for strict security managers module systems android or others   but try one-by-one to get the allowed ones at least 
Groovy,WITHOUT_CLASSIFICATION,//  obsolete? 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal field handling : set    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//    KEYWORDS: CONTROL STRUCTURES 
Groovy,WITHOUT_CLASSIFICATION,//  todo - allow locale to be passed in 
Groovy,WITHOUT_CLASSIFICATION,//  do nothing but clear the value recorder 
Groovy,WITHOUT_CLASSIFICATION,//  a similar method exists we need a super bridge   trait$super$foo(Class currentTrait ...) 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovyThrowsTag[] throwsTags() {/*todo*/return null;}      public GroovyTypeVariable[] typeParameters() {/*todo*/return null;}      public GroovyParamTag[] typeParamTags() {/*todo*/return null;} 
Groovy,WITHOUT_CLASSIFICATION,//  Output the attribute name 
Groovy,WITHOUT_CLASSIFICATION,//  given that we might have a grandParent... 
Groovy,WITHOUT_CLASSIFICATION,//  warning - do...while... ignored 
Groovy,WITHOUT_CLASSIFICATION,//         return values()[ordinal]       } 
Groovy,WITHOUT_CLASSIFICATION,//  it could just be a class so let's wrap it in a Script   wrapper; though the bindings will be ignored 
Groovy,WITHOUT_CLASSIFICATION,//  method name 
Groovy,WITHOUT_CLASSIFICATION,//  a==null 
Groovy,WITHOUT_CLASSIFICATION,//  throws FileNotFoundException IllegalArgumentException { 
Groovy,WITHOUT_CLASSIFICATION,//  there must be three continuation bytes of the form 10xxxxxx   otherwise the following character is is not a valid UTF-8 construct 
Groovy,WITHOUT_CLASSIFICATION,//  primitive types should be ignored as they will result in another failure 
Groovy,WITHOUT_CLASSIFICATION,//  skip private super methods 
Groovy,WITHOUT_CLASSIFICATION,//  type of quotes are currently configured. 
Groovy,WITHOUT_CLASSIFICATION,//  !   ||   && 
Groovy,WITHOUT_CLASSIFICATION,//  rebind if we were bound 
Groovy,WITHOUT_CLASSIFICATION,//  if the number of parameters does not match we have    a vargs usage     case A: arguments.length<parameters.length             In this case arguments.length is always equal to           noVargsLength because only the last parameter           might be a optional vargs parameter             VArgs penalty: 1l     case B: arguments.length>parameters.length             In this case all arguments with a index bigger than           paramMinus1 are part of the vargs so a            distance calculation needs to be done against            parameters[noVargsLength].getComponentType()             VArgs penalty: 2l+arguments.length-parameters.length     case C: arguments.length==parameters.length &&            isAssignableFrom( parameters[noVargsLength]                             arguments[noVargsLength] )             In this case we have no vargs so calculate directly             VArgs penalty: 0l     case D: arguments.length==parameters.length &&            !isAssignableFrom( parameters[noVargsLength]                              arguments[noVargsLength] )             In this case we have a vargs case again we need            to calculate arguments[noVargsLength] against           parameters[noVargsLength].getComponentType             VArgs penalty: 2l             This gives: VArgs_penalty(C)<VArgs_penalty(A)                       VArgs_penalty(A)<VArgs_penalty(D)                       VArgs_penalty(D)<VArgs_penalty(B) 
Groovy,WITHOUT_CLASSIFICATION,//  If the first param is def or a Map named args might not work as expected so we add a hard-coded map constructor in this case   we don't do it for LinkedHashMap for now (would lead to duplicate signature)   or if there is only one Map property (for backwards compatibility) 
Groovy,WITHOUT_CLASSIFICATION,//     public final Object callGetProperty (Object receiver) throws Throwable {          return acceptGetProperty(receiver).getProperty(receiver);      } 
Groovy,WITHOUT_CLASSIFICATION,//  this boolean is used through setHandled(boolean) 
Groovy,WITHOUT_CLASSIFICATION,//  Keep a hardref so we can test get later 
Groovy,WITHOUT_CLASSIFICATION,//  not in java   not in java 
Groovy,WITHOUT_CLASSIFICATION,//  Output the attribute value within quotes. Use whichever 
Groovy,WITHOUT_CLASSIFICATION,//  Expressions  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Method in base script that will contain the script body code. 
Groovy,WITHOUT_CLASSIFICATION,//  only overwrite if we find something more specific 
Groovy,WITHOUT_CLASSIFICATION,//  check for recursive generic typedef like in   <T extends Comparable<? super T>> 
Groovy,WITHOUT_CLASSIFICATION,//  if a this appears as parameter here then it should be   not static unless we are in a static method. But since    ACG#visitVariableExpression does the opposite for this case we   push here an explicit this. This should not have any negative effect   sine visiting a method call or property with implicit this will push   a new value for this again. 
Groovy,WITHOUT_CLASSIFICATION,//  load rhs 
Groovy,WITHOUT_CLASSIFICATION,// DO NOTHING 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ short ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  some constants for modifiers 
Groovy,WITHOUT_CLASSIFICATION,/*  The current index into the file name array  */
Groovy,WITHOUT_CLASSIFICATION,//  check bounds: unbounded wildcard (aka "?") is universal substitute 
Groovy,WITHOUT_CLASSIFICATION,//  additional constructor not used directly but exercises inspection code 
Groovy,WITHOUT_CLASSIFICATION,// noinspection ThrowableInstanceNeverThrown 
Groovy,WITHOUT_CLASSIFICATION,//  to be run in PrivilegedAction! 
Groovy,WITHOUT_CLASSIFICATION,//  Apply all pending writes 
Groovy,WITHOUT_CLASSIFICATION,//  Jsr parser 
Groovy,WITHOUT_CLASSIFICATION,/*  redirect().isPrimaryNode &&  */
Groovy,WITHOUT_CLASSIFICATION,//  only used for star imports 
Groovy,WITHOUT_CLASSIFICATION,//  By default forward all events to all the listeners. 
Groovy,WITHOUT_CLASSIFICATION,/* Float[14] */
Groovy,WITHOUT_CLASSIFICATION,//  def (key value) == array.toList() 
Groovy,WITHOUT_CLASSIFICATION,//  we are the top of the tree 
Groovy,WITHOUT_CLASSIFICATION,//  determine direct result 
Groovy,WITHOUT_CLASSIFICATION,//  do you want full stack traces in script exceptions? 
Groovy,WITHOUT_CLASSIFICATION,//  ignore was probably a dynamic property 
Groovy,WITHOUT_CLASSIFICATION,//  rhs is normal value set the value in the Reference 
Groovy,WITHOUT_CLASSIFICATION,//     public static Boolean putAt(boolean[] array int idx Boolean newValue) {          return (Boolean) primitiveArrayPut(array idx newValue);      }        public static Byte putAt(byte[] array int idx Object newValue) { 
Groovy,WITHOUT_CLASSIFICATION,//  let's try invoke the constructor with the list as arguments   such as for creating a Dimension Point Color etc. 
Groovy,WITHOUT_CLASSIFICATION,//  Do not allow this class to be instantiated 
Groovy,WITHOUT_CLASSIFICATION,//  let's treat the script as a Test 
Groovy,WITHOUT_CLASSIFICATION,//  already added 
Groovy,WITHOUT_CLASSIFICATION,//  a==b 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.GroovyObject#setMetaClass(groovy.lang.MetaClass)       */
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------   feature: Annotation Definition   ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,// none of the interfaces here match so continue with super class 
Groovy,WITHOUT_CLASSIFICATION,//  2 way relationship for visible classes:   add reference to classes inside this package   add reference to this package inside classes 
Groovy,WITHOUT_CLASSIFICATION,//  don't use the ClassHelper here! 
Groovy,WITHOUT_CLASSIFICATION,//    OPERATORS AND OTHER MARKERS 
Groovy,WITHOUT_CLASSIFICATION,//  INSTANCE VARIABLES 
Groovy,WITHOUT_CLASSIFICATION,//  let's recreate the parser each time as it tends to keep around state 
Groovy,WITHOUT_CLASSIFICATION,//  --------------------------------------------   end of delegate to the type checking context   -------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  closures are always dynamic   propertyExpressions will handle the error a bit differently 
Groovy,WITHOUT_CLASSIFICATION,//  set a DEFAULT precision if otherwise non-terminating 
Groovy,WITHOUT_CLASSIFICATION,//  just like modifiers but for package/enum declarations 
Groovy,WITHOUT_CLASSIFICATION,//  A callback for use during classgen()   A callback for use during compile() 
Groovy,WITHOUT_CLASSIFICATION,//   Implement overtype mode by selecting the character at the current    caret position 
Groovy,WITHOUT_CLASSIFICATION,//  the left operand is determining the result of the operation 
Groovy,WITHOUT_CLASSIFICATION,//  ignore for factories that don't support this 
Groovy,WITHOUT_CLASSIFICATION,//  check for all pieces if we don't have the triad quit silently 
Groovy,WITHOUT_CLASSIFICATION,//  do a little bit of pre-work since Groovy compiler hasn't added property accessors yet 
Groovy,WITHOUT_CLASSIFICATION,//  the text of the token   the source line on which the token begins   the source column on which the token begins 
Groovy,WITHOUT_CLASSIFICATION,//  null is always false 
Groovy,WITHOUT_CLASSIFICATION,//  not null if if the ClassNode is an array 
Groovy,WITHOUT_CLASSIFICATION,//  check for reference to method closure for loop try with or catch block parameter from a non-nested closure 
Groovy,WITHOUT_CLASSIFICATION,//  { def tmp = new Foo(); tmp.x = 1; tmp.y = 2; return tmp }() 
Groovy,WITHOUT_CLASSIFICATION,//  now repeat the same for each parameter given in the ClosureExpression 
Groovy,WITHOUT_CLASSIFICATION,//  load b and convert to boolean 
Groovy,WITHOUT_CLASSIFICATION,//  if after normalizing both are numbers assume intended range was numbers 
Groovy,WITHOUT_CLASSIFICATION,//  Skip Synthetic methods inserted by JDK 1.5 compilers and later 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.Closure#asWritable()          */
Groovy,WITHOUT_CLASSIFICATION,//  add non-abstract methods; abstract methods covered from trait interface 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   REPORTING ROUTINES 
Groovy,WITHOUT_CLASSIFICATION,//  All objects should have been collected 
Groovy,WITHOUT_CLASSIFICATION,//  will need the extra for isNaN call if required 
Groovy,WITHOUT_CLASSIFICATION,//  method body should be: 
Groovy,WITHOUT_CLASSIFICATION,//  "."-"<<"   cast ternary and closure expression   new this super instanceof true false null   LITERAL   "[" 
Groovy,WITHOUT_CLASSIFICATION,//  if the class not is an inner class node there are chances that the call to super is already added   so we must ensure not to add it twice (see GROOVY-4471) 
Groovy,WITHOUT_CLASSIFICATION,/* jes this may be rewritten to use the new getProperties() stuff         * but the original pulls out private variables whereas getProperties()         * does not. What's the real use of dump() here?          */
Groovy,WITHOUT_CLASSIFICATION,//  need to call here here because we used the static target type   it won't be done otherwise because handle.type() == callSite.type() 
Groovy,WITHOUT_CLASSIFICATION,// -----------------------------------------------------------------------   SPECIAL CASES 
Groovy,WITHOUT_CLASSIFICATION,//  ctors are not considered static ! 
Groovy,WITHOUT_CLASSIFICATION,//  retry as an intermediate update may have replaced the value with   an equal instance that has a different reference identity 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8233 skip static properties for traits since they don't make the interface 
Groovy,WITHOUT_CLASSIFICATION,/*          * we have a name foo.bar and an import foo.foo. This means foo.bar is possibly         * foo.foo.bar rather than foo.bar. This means to cut at the dot in foo.bar and         * foo for import          */
Groovy,WITHOUT_CLASSIFICATION,//  import checks that stack is not empty  
Groovy,WITHOUT_CLASSIFICATION,/*      * Guess the encoding of the provided buffer.     * If Byte Order Markers are encountered at the beginning of the buffer we immediately     * return the charset implied by this BOM. Otherwise the file would not be a human     * readable text file.     * <p>     * If there is no BOM this method tries to discern whether the file is UTF-8 or not.     * If it is not UTF-8 we assume the encoding is the default system encoding     * (of course it might be any 8-bit charset but usually an 8-bit charset is the default one).     * <p>     * It is possible to discern UTF-8 thanks to the pattern of characters with a multi-byte sequence.     * <pre>     * UCS-4 range (hex.)        UTF-8 octet sequence (binary)     * 0000 0000-0000 007F       0xxxxxxx     * 0000 0080-0000 07FF       110xxxxx 10xxxxxx     * 0000 0800-0000 FFFF       1110xxxx 10xxxxxx 10xxxxxx     * 0001 0000-001F FFFF       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 0020 0000-03FF FFFF       111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 0400 0000-7FFF FFFF       1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * </pre>     * With UTF-8 0xFE and 0xFF never appear.     *     * @return the Charset recognized.      */
Groovy,WITHOUT_CLASSIFICATION,//  stack size = 2   array index stack size = 3   primitive types must be boxed 
Groovy,WITHOUT_CLASSIFICATION,//  Arrays.copyOfRange only since JDK 1.6 
Groovy,WITHOUT_CLASSIFICATION,//  return value of assignment 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ boolean[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,/*          * Synchronization is avoided here for performance reasons since         * this method is called frequently from callsite locations. For         * a typical case when no Categories are in use the initialized         * value of 0 will be correctly read. For cases where multiple         * Threads are using Categories it is possible that a stale         * non-zero value may be read but in that case the ThreadLocal         * check will produce the correct result. When the current Thread         * is using Categories it would have incremented the counter         * so whatever version of the value it observes here should be         * non-zero and good enough for the purposes of this quick exit         * check.          */
Groovy,WITHOUT_CLASSIFICATION,//  not required for stub generation 
Groovy,WITHOUT_CLASSIFICATION,//  visitBlock() ...     token type BLOCK never created/visited see CLOSABLE_BLOCK etc... 
Groovy,WITHOUT_CLASSIFICATION,//  The bounds on the declared type are at least as good as the ones on an unbounded wildcard since it has   none! 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   special cases  ---------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  we have two methods so no SAM 
Groovy,WITHOUT_CLASSIFICATION,//  Was neither already loaded nor compiling so compile and add to cache. 
Groovy,WITHOUT_CLASSIFICATION,//  we look at the closure later in detail so skip it here 
Groovy,WITHOUT_CLASSIFICATION,//  special path for boxed boolean 
Groovy,WITHOUT_CLASSIFICATION,// accept(cv); 
Groovy,WITHOUT_CLASSIFICATION,//  downgrade to readlock before releasing just in case 
Groovy,WITHOUT_CLASSIFICATION,//  check uri and for legacy cases just check prefix name (not recommended) 
Groovy,WITHOUT_CLASSIFICATION,//  track the end of the matching string  
Groovy,WITHOUT_CLASSIFICATION,//  fallback to the source unit classloader 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)        * @see java.io.Writer#flush()         */
Groovy,WITHOUT_CLASSIFICATION,//  to the corresponding parameters of the SAM type method 
Groovy,WITHOUT_CLASSIFICATION,//  to match property name 
Groovy,WITHOUT_CLASSIFICATION,//  The set of child nodes   Used for completion marking by some parts of the parser 
Groovy,WITHOUT_CLASSIFICATION,/*      * Implementation note:     *   This has to be an inner class!     *     * Reason:     *   Closure.this.call will call the outer call method but     * with the inner class as executing object. This means any     * invokeMethod or getProperty call will be called on this     * inner class instead of the outer!      */
Groovy,WITHOUT_CLASSIFICATION,//  delete contained files 
Groovy,WITHOUT_CLASSIFICATION,//  look in the namespaces whose declaration has already been emitted 
Groovy,WITHOUT_CLASSIFICATION,//  start catch block label needed for exception table 
Groovy,WITHOUT_CLASSIFICATION,//  call flags and the constructor number 
Groovy,WITHOUT_CLASSIFICATION,//  ... find shapes that fit 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6183 
Groovy,WITHOUT_CLASSIFICATION,//  validate with one string 
Groovy,WITHOUT_CLASSIFICATION,//  value = this.prop <=> other.prop; 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   handling of static 
Groovy,WITHOUT_CLASSIFICATION,// if it's not setter get the type info of the return type of the get* method 
Groovy,WITHOUT_CLASSIFICATION,/*  All \r\n sequences are treated as a single \n. By doing this we         * produce the same output as the GStringTemplateEngine. Otherwise some         * of our output is on a newline when it should not be.         *         * Instead of using a pushback reader we just keep a private instance         * variable 'lastRead'.          */
Groovy,WITHOUT_CLASSIFICATION,//  change the arguments for an uncurried call 
Groovy,WITHOUT_CLASSIFICATION,//  ignore veto exceptions just let the binding fail like a validation does 
Groovy,WITHOUT_CLASSIFICATION,//  Fallback for non-standard base "script" classes with no context (Binding) constructor. 
Groovy,WITHOUT_CLASSIFICATION,//  we add a package if there is none yet and the module has one. But we   do not add that if the type is a ConstructedClassWithPackage. The code in ConstructedClassWithPackage   hasPackageName() will return true if ConstructedClassWithPackage#className has no dots.   but since the prefix may have them and the code there does ignore that 
Groovy,WITHOUT_CLASSIFICATION,//  It might annotate an annotation e.g. jqwik @Property 
Groovy,WITHOUT_CLASSIFICATION,//  handle constant meta class and category changes 
Groovy,WITHOUT_CLASSIFICATION,//  to match JSR-295 
Groovy,WITHOUT_CLASSIFICATION,//  if original boolean meta class 
Groovy,WITHOUT_CLASSIFICATION,//  normal type transformation  
Groovy,WITHOUT_CLASSIFICATION,//  for MetaClassImpl we try to pick meta method 
Groovy,WITHOUT_CLASSIFICATION,//  store type information 
Groovy,WITHOUT_CLASSIFICATION,//  make the first fetch lazy too 
Groovy,WITHOUT_CLASSIFICATION,//  add the super call 
Groovy,WITHOUT_CLASSIFICATION,//  Swallow exception - does not exist locally 
Groovy,WITHOUT_CLASSIFICATION,//  look at the interfaces there's a chance that a method is not implemented and we should not hide the   error from the compiler 
Groovy,WITHOUT_CLASSIFICATION,//    call the closure corresponding to the tag 
Groovy,WITHOUT_CLASSIFICATION,//  if not null this instance is handled as proxy 
Groovy,WITHOUT_CLASSIFICATION,//  let's add a getter & setter 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   CONSTRUCTION AND SUCH 
Groovy,WITHOUT_CLASSIFICATION,//  possible loss of precision 
Groovy,WITHOUT_CLASSIFICATION,//  execute dependencies (if any) 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see java.io.Writer#write(char[] int int)     */
Groovy,WITHOUT_CLASSIFICATION,//  instead of using the SubList backed by the parent list a new ArrayList instance is used 
Groovy,WITHOUT_CLASSIFICATION,//  visitBigSuffix() ...     token type BIG_SUFFIX never created/visited NUM_BIG_INT NUM_BIG_DECIMAL instead...     
Groovy,WITHOUT_CLASSIFICATION,//  now handle primitive types 
Groovy,WITHOUT_CLASSIFICATION,//  We don't try to analyse which statement within the try block might have thrown an exception.   We make a crude assumption that anywhere from none to all of the statements might have been executed.   Run visitor for both scenarios so the eager checks will be performed for either of these cases. 
Groovy,WITHOUT_CLASSIFICATION,//       h i     j     k     l     m     n     o 
Groovy,WITHOUT_CLASSIFICATION,//  if recompilation fails we want cls==null 
Groovy,WITHOUT_CLASSIFICATION,//  log4j api is inconsistent so trace requires special handling 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see java.lang.Object#hashCode()          */
Groovy,WITHOUT_CLASSIFICATION,/* Object[19] */
Groovy,WITHOUT_CLASSIFICATION,//  we make a dummy return for label ranges that reach here 
Groovy,WITHOUT_CLASSIFICATION,//  all of the below 1900 series 
Groovy,WITHOUT_CLASSIFICATION,// trying to determine the base class of the collections  special case for Numbers 
Groovy,WITHOUT_CLASSIFICATION,/*      * Parse the Groovy code contained in the GroovyCodeSource as a privileged operation (i.e. do not     * require the code source to have specific compile time permissions) and return the resulting class.      */
Groovy,WITHOUT_CLASSIFICATION,//  set parent afterwards 
Groovy,WITHOUT_CLASSIFICATION,/*                  * fix for GROOVY-2284                 * seems like AntClassLoader doesn't check if the file                 * may not exist in the classpath yet                  */
Groovy,WITHOUT_CLASSIFICATION,//  integer   decimal 
Groovy,WITHOUT_CLASSIFICATION,//  add a document listener to hint whether the line number gutter has to be repainted   when the number of lines changes 
Groovy,WITHOUT_CLASSIFICATION,// find the type of the field; if it's a setter need to get the type of the params 
Groovy,WITHOUT_CLASSIFICATION,//  Ignore 
Groovy,WITHOUT_CLASSIFICATION,//  also allows abstract or static self methods to be selected for overriding but they are ignored later 
Groovy,WITHOUT_CLASSIFICATION,//  compare lists that are the same size but contain different elements 
Groovy,WITHOUT_CLASSIFICATION,//  symbol/keyword type -> text   text -> symbol/keyword type   valid keywords 
Groovy,WITHOUT_CLASSIFICATION,/*          * If verbose log the parameter values.          */
Groovy,WITHOUT_CLASSIFICATION,//  Imported classes 
Groovy,WITHOUT_CLASSIFICATION,//  only guard this particular class 
Groovy,WITHOUT_CLASSIFICATION,/*      * Get info about Properties (Java and Groovy alike).     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
Groovy,WITHOUT_CLASSIFICATION,//  now do the business 
Groovy,WITHOUT_CLASSIFICATION,//  no class found there should have been an exception before now 
Groovy,WITHOUT_CLASSIFICATION,//  check if values have been passed for all annotation attributes that don't have defaults 
Groovy,WITHOUT_CLASSIFICATION,//  in this case we need two "this" in between and the Object[]   at the bottom of the stack as well as on top for our invokeSpecial   So we do DUP_X1 DUP2_X1 POP       Object[]this -DUP_X1-> thisObject[]this       thisObject[]this -DUP2_X1-> Object[]thisthisObject[]this       Object[]thisthisObject[]this -POP->  Object[]thisthisObject[] 
Groovy,WITHOUT_CLASSIFICATION,//  for typical user math when a non-terminating result would otherwise occur. 
Groovy,WITHOUT_CLASSIFICATION,//  = += etc.   == === > < etc.   + - / * % plus the LOGICAL_OPERATORS   || && !   .. ...   =~ etc.   . ->   | & << >> >>> ^ ~ 
Groovy,WITHOUT_CLASSIFICATION,//  index of the last variable on stack 
Groovy,WITHOUT_CLASSIFICATION,//  this test depends deeply on the String.next implementation   009.next is 00: not 010 
Groovy,WITHOUT_CLASSIFICATION,//         dup_x1:     ---           dup_x2:     aab  -> baab          dup2_x1:    abb  -> bbabb          dup2_x2:    aabb -> bbaabb          b = top element a = element under b          top element at right   aa   aabb   aabb -> bbaa   bbaabb   bbaa 
Groovy,WITHOUT_CLASSIFICATION,//  we only need one of these that can be reused over and over. 
Groovy,WITHOUT_CLASSIFICATION,//  we cannot a target for the constructor call since we cannot easily   check the meta class of the other class   setMethodTarget(call "<init>" call.getArguments() false); 
Groovy,WITHOUT_CLASSIFICATION,//  expect a colon between the key and value pair 
Groovy,WITHOUT_CLASSIFICATION,//  Instantiate all beans. 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   LEXING SUPPORT 
Groovy,WITHOUT_CLASSIFICATION,//  if we added a package 
Groovy,WITHOUT_CLASSIFICATION,//  add method dispatcher 
Groovy,WITHOUT_CLASSIFICATION,//  goto finally start 
Groovy,WITHOUT_CLASSIFICATION,//  here we box and unbox to get the goal type 
Groovy,WITHOUT_CLASSIFICATION,//  this.x = ... shouldn't use a setter if in the same class 
Groovy,WITHOUT_CLASSIFICATION,//  -------------------------------------   delegate to the type checking context   ------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClassImpl#initialize()      */
Groovy,WITHOUT_CLASSIFICATION,//  avoid using a narrowed type if the method is defined on object because it can interfere   with delegate type inference in static compilation mode and trigger a ClassCastException 
Groovy,WITHOUT_CLASSIFICATION,/*          * Hook for extra processing e.g. GSP tag element!          */
Groovy,WITHOUT_CLASSIFICATION,//  Controls behavior of classgen() and other routines.   Set true after the first configure() operation 
Groovy,WITHOUT_CLASSIFICATION,//  helper method for getAt and putAt 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise make up a new tag and check it has not been used before 
Groovy,WITHOUT_CLASSIFICATION,//  Wrong list or interference 
Groovy,WITHOUT_CLASSIFICATION,//  workaround for map-style checks putting setter info on wrong AST nodes 
Groovy,WITHOUT_CLASSIFICATION,//  Discard all pending reads 
Groovy,WITHOUT_CLASSIFICATION,//  check that first item is now SIZE 
Groovy,WITHOUT_CLASSIFICATION,//  xxx br defmacro 
Groovy,WITHOUT_CLASSIFICATION,//  if original float meta class 
Groovy,WITHOUT_CLASSIFICATION,//  handle unicode 
Groovy,WITHOUT_CLASSIFICATION,//  Lazily initialize the single instance of the HandleMetaClass metaClass 
Groovy,WITHOUT_CLASSIFICATION,//  first visit of node 
Groovy,WITHOUT_CLASSIFICATION,/*          * Handle normal element like <html> ... </html>.          */
Groovy,WITHOUT_CLASSIFICATION,//  in a temporary variable 
Groovy,WITHOUT_CLASSIFICATION,//  arguments to the script 
Groovy,WITHOUT_CLASSIFICATION,/*  * The Computer Language Benchmarks Game * http://shootout.alioth.debian.org/ * * Contributed by Oleg Mazurov June 2010 *  */
Groovy,WITHOUT_CLASSIFICATION,/*      * this method is called for local variables shared between scopes.     * These variables must not have init values because these would     * then in later steps be used to create multiple versions of the     * same method in this case the constructor. A closure should not     * have more than one constructor!      */
Groovy,WITHOUT_CLASSIFICATION,/*      * Get all properties including JavaBean pseudo properties matching JavaBean getter or setter conventions.     *     * @param type the ClassNode     * @param includeSuperProperties whether to include super properties     * @param includeStatic whether to include static properties     * @param includePseudoGetters whether to include JavaBean pseudo (getXXX/isYYY) properties with no corresponding field     * @param includePseudoSetters whether to include JavaBean pseudo (setXXX) properties with no corresponding field     * @param superFirst are properties gathered first from parent classes     * @return the list of found property nodes      */
Groovy,WITHOUT_CLASSIFICATION,// partial match 
Groovy,WITHOUT_CLASSIFICATION,//  The CSTNode that indicates the location to which the message applies 
Groovy,WITHOUT_CLASSIFICATION,//  tag::bsf_variable_passing[] 
Groovy,WITHOUT_CLASSIFICATION,//  defaults 
Groovy,WITHOUT_CLASSIFICATION,/*     * Methods on Integer to implement 1.month 4.years etc.     */
Groovy,WITHOUT_CLASSIFICATION,//  we cannot infer anything thus we simply return the provided samUsage 
Groovy,WITHOUT_CLASSIFICATION,//  not a change don't fire it 
Groovy,WITHOUT_CLASSIFICATION,//  no-op 
Groovy,WITHOUT_CLASSIFICATION,//  RFC2396   scheme        = alpha *( alpha | digit | "+" | "-" | "." ) 
Groovy,WITHOUT_CLASSIFICATION,//  in primopts we convert to the left type for supported binary operations 
Groovy,WITHOUT_CLASSIFICATION,//  let's check if it already uses a mixin 
Groovy,WITHOUT_CLASSIFICATION,// public static final Expression EMPTY_ARRAY = new PropertyExpression(new ClassExpression(ArgumentListExpression.class.getName()) "EMPTY_ARRAY"); 
Groovy,WITHOUT_CLASSIFICATION,//  must be call to this(...) 
Groovy,WITHOUT_CLASSIFICATION,//  remove problem meta characters returns 
Groovy,WITHOUT_CLASSIFICATION,//  create a valid (empty) test suite on disk 
Groovy,WITHOUT_CLASSIFICATION,//  add to super call 
Groovy,WITHOUT_CLASSIFICATION,//  clazz!=null when resolved 
Groovy,WITHOUT_CLASSIFICATION,//  -   :   ;   ? 
Groovy,WITHOUT_CLASSIFICATION,//  Introspection failure...   May happen in Android 
Groovy,WITHOUT_CLASSIFICATION,//  You defined a method without body. Try adding a body or declare it abstract   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  check if the placeholder corresponds to the placeholder of the first parameter 
Groovy,WITHOUT_CLASSIFICATION,//  ... fits badly ?
Groovy,WITHOUT_CLASSIFICATION,/*  2: long    */
Groovy,WITHOUT_CLASSIFICATION,//  Object is superclass of arrays but no generics involved 
Groovy,WITHOUT_CLASSIFICATION,//  Check this class loader 
Groovy,WITHOUT_CLASSIFICATION,//  will replace these with nullish values 
Groovy,WITHOUT_CLASSIFICATION,//  it's really just a field 
Groovy,WITHOUT_CLASSIFICATION,//  finish and cleanup 
Groovy,WITHOUT_CLASSIFICATION,//  If we didn't find anything report on all the exceptions that occurred. 
Groovy,WITHOUT_CLASSIFICATION,//  could be a closure field 
Groovy,WITHOUT_CLASSIFICATION,// For testing only 
Groovy,WITHOUT_CLASSIFICATION,//  extract implemented interfaces before "going up" 
Groovy,WITHOUT_CLASSIFICATION,// Prepare for each security test.  First check to see if groovy.lib can be determined via  a call to checkSecurity().  If not fail() the first test.  Establish a security manager  and make the GroovyClassLoader the initiating class loader (ala GroovyShell) to compile AND  invoke the test scripts.  This handles cases where multiple .groovy scripts are involved in a  test case: a.groovy depends on b.groovy; a.groovy is parsed (and in the process the gcl  loads b.groovy via findClass).  Note that b.groovy is only available in the groovy class loader.  See 
Groovy,WITHOUT_CLASSIFICATION,//    Template not cached or the source file changed - compile new template!   
Groovy,WITHOUT_CLASSIFICATION,//  in case a "flow type" is found it is preferred to use it instead of   the declaration type 
Groovy,WITHOUT_CLASSIFICATION,//  node==null means a compilation error prevented   groovy from building an ast 
Groovy,WITHOUT_CLASSIFICATION,//  rhs is normal value set normal value 
Groovy,WITHOUT_CLASSIFICATION,//  do nothing 
Groovy,WITHOUT_CLASSIFICATION,//  we already know the lengths are equal 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeStaticMethod(java.lang.Object java.lang.String java.lang.Object[])      */
Groovy,WITHOUT_CLASSIFICATION,//  br should get a "native" property match first. getProperty includes such fall-back logic 
Groovy,WITHOUT_CLASSIFICATION,//  it is possible to use a getter 
Groovy,WITHOUT_CLASSIFICATION,//  this name contains @name we need to return name 
Groovy,WITHOUT_CLASSIFICATION,//  modifier and block type   modifier and block type 
Groovy,WITHOUT_CLASSIFICATION,//  Compiler configuration used to set the encodings of the scripts/classes 
Groovy,WITHOUT_CLASSIFICATION,//  is next line needed at all? 
Groovy,WITHOUT_CLASSIFICATION,//  if we are in a class and no variable is declared until   now then we can break the loop because we are allowed   to declare a variable of the same name as a class member 
Groovy,WITHOUT_CLASSIFICATION,//  we may inline a var!=null check instead of calling a helper method iff   (1) the class doesn't define an asBoolean method (already tested)   (2) no subclass defines an asBoolean method   For (2) we check that we are in one of those cases   (a) a final class   (b) a private inner class without subclass 
Groovy,WITHOUT_CLASSIFICATION,//  _result = HashCodeHelper.updateHash(_result getProperty()) // plus self-reference checking 
Groovy,WITHOUT_CLASSIFICATION,//  case B   we give our a vargs penalty for each exceeding argument and iterate   by using parameters[noVargsLength].getComponentType()   penalty for vargs 
Groovy,WITHOUT_CLASSIFICATION,//  Unknown type: "threadsafe"   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  allow Diamond for non-AIC cases from CCE 
Groovy,WITHOUT_CLASSIFICATION,//  and the closure after them 
Groovy,WITHOUT_CLASSIFICATION,//  end::bsf_access[] 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise or if method doesn't exist we make call via POJO meta class 
Groovy,WITHOUT_CLASSIFICATION,// <param-value></param-value> is prohibited 
Groovy,WITHOUT_CLASSIFICATION,//  todo (iterate) 
Groovy,WITHOUT_CLASSIFICATION,/*  explicit  */
Groovy,WITHOUT_CLASSIFICATION,//  map containing named labels of current block 
Groovy,WITHOUT_CLASSIFICATION,//  Method has been optimized to reach a target of 325 bytecode size making it JIT'able 
Groovy,WITHOUT_CLASSIFICATION,//  sum all the meetings 
Groovy,WITHOUT_CLASSIFICATION,// @todo -- 
Groovy,WITHOUT_CLASSIFICATION,//  let's try use the cache to find the method 
Groovy,WITHOUT_CLASSIFICATION,//  wait for all threads to complete 
Groovy,WITHOUT_CLASSIFICATION,//  Test class implementing GroovyObject 
Groovy,WITHOUT_CLASSIFICATION,//  lazy create for edge-case efficiency 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ float[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  Only attempt to render our self if our super-class is resolved else wait for it 
Groovy,WITHOUT_CLASSIFICATION,//  Do nothing. 
Groovy,WITHOUT_CLASSIFICATION,//  assume we have a script 
Groovy,WITHOUT_CLASSIFICATION,//  we create separate method lists just to be able to print out   a nice error message to the user   a method is accessible if it is static or if we are not in a static context and it is   declared by the current receiver or a superclass 
Groovy,WITHOUT_CLASSIFICATION,//  and the getters and setters 
Groovy,WITHOUT_CLASSIFICATION,//  check module static imports (for static inner classes) 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal Property handling : set    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  added to track the enclosing method for local inner classes 
Groovy,WITHOUT_CLASSIFICATION,//  JDK 1.6 has changed the implementation to do a   String.valueOf(x) rather than call print(x).   Probably to improve performance by doing the conversion outside the lock.   This will do the same thing for us and we don't have to have access to the lock. 
Groovy,WITHOUT_CLASSIFICATION,//  unreachable statement 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   boolean removeVetoableChangeListener(listener) {      return this$vetoableChangeSupport.removeVetoableChangeListener(listener); 
Groovy,WITHOUT_CLASSIFICATION,// Subclasses implement according to the type promotion hierarchy rules 
Groovy,WITHOUT_CLASSIFICATION,/*  * The Great Computer Language Shootout * http://shootout.alioth.debian.org/ * * contributed by James McIlree  */
Groovy,WITHOUT_CLASSIFICATION,//  start on the string that was inserted 
Groovy,WITHOUT_CLASSIFICATION,//  make sure that no values are ever placed on empty line   + 1: no whitespace required between end of value and "|" 
Groovy,WITHOUT_CLASSIFICATION,//  this code is in an extra method to avoid   lazy initialization issues 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   EXTERNAL CALLBACKS 
Groovy,WITHOUT_CLASSIFICATION,//  falling back to pre 2.1.9 selection algorithm   in practice this branch will only be reached if the class calling this code is a Groovy class   compiled with an earlier version of the Groovy compiler 
Groovy,WITHOUT_CLASSIFICATION,//  copy annotations 
Groovy,WITHOUT_CLASSIFICATION,//       p     q     r     s     t     u     v     w 
Groovy,WITHOUT_CLASSIFICATION,/*     * create a subset of the original dataset     */
Groovy,WITHOUT_CLASSIFICATION,//  we stop now otherwise we must check the parent class 
Groovy,WITHOUT_CLASSIFICATION,//  tokens from Types 
Groovy,WITHOUT_CLASSIFICATION,//  prepare call site 
Groovy,WITHOUT_CLASSIFICATION,//  anything can be assigned to an Object String Boolean 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   void addPropertyChangeListener(name listener) {       this$propertyChangeSupport.addPropertyChangeListener(name listener) 
Groovy,WITHOUT_CLASSIFICATION,//  consume the first double quote starting the string 
Groovy,WITHOUT_CLASSIFICATION,//  resolve scope (for closures) 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.helpers.DefaultHandler#startPrefixMapping(java.lang.String java.lang.String)     */
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralPackage     token type "package" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see java.io.Writer#write(int)     */
Groovy,WITHOUT_CLASSIFICATION,//  TODO we could one day store the Antlr AST on the Groovy AST   node.setCSTNode(ast); 
Groovy,WITHOUT_CLASSIFICATION,//  $idx++ 
Groovy,WITHOUT_CLASSIFICATION,//  static init 
Groovy,WITHOUT_CLASSIFICATION,//  must replace backslashes first as the other replacements add backslashes not to be escaped 
Groovy,WITHOUT_CLASSIFICATION,//  If class name is looked up below additional types will be used in error message 
Groovy,WITHOUT_CLASSIFICATION,/*      * Get info about usual Java instance and class Methods as well as Constructors.     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
Groovy,WITHOUT_CLASSIFICATION,//  direct read 
Groovy,WITHOUT_CLASSIFICATION,//  is this a file on disk 
Groovy,WITHOUT_CLASSIFICATION,//  only false when this classNode is constructed from a class 
Groovy,WITHOUT_CLASSIFICATION,// correct SAM type for generics  sam = applyGenericsContext(placeholders sam); 
Groovy,WITHOUT_CLASSIFICATION,//  we're using node metadata here in order to fix GROOVY-6094   without breaking external APIs 
Groovy,WITHOUT_CLASSIFICATION,//  TODO remove dup with SimpleGroovyClassDoc 
Groovy,WITHOUT_CLASSIFICATION,//  if we have to delegate to another object generate the appropriate delegate field 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5580 it is still possible that we're calling a superinterface property 
Groovy,WITHOUT_CLASSIFICATION,//  for thread safety grab local copy 
Groovy,WITHOUT_CLASSIFICATION,//  if the current generics spec is a wildcard spec or a placeholder spec   then we must check upper and lower bounds 
Groovy,WITHOUT_CLASSIFICATION,//  here we want to point to a method named "doCall" instead of "call"   but we don't want to replace the original call site name otherwise   we loose the fact that the original method name was "call" so instead   we will point to a metamethod called "doCall"   see GROOVY-5806 for details 
Groovy,WITHOUT_CLASSIFICATION,//  for consistency with AsmClassGenerator. see AsmClassGenerator.visitBooleanExpression. 
Groovy,WITHOUT_CLASSIFICATION,//  We need @InheritConstructors from parent classes processed first   so force that order here. The transformation is benign on an already   processed node so processing twice in any order won't matter bar   a very small time penalty. 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5150 
Groovy,WITHOUT_CLASSIFICATION,/*  = 0 */
Groovy,WITHOUT_CLASSIFICATION,//  avoid re-triggering 
Groovy,WITHOUT_CLASSIFICATION,//  add "this$0" field init 
Groovy,WITHOUT_CLASSIFICATION,//  generate bytecode 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setEntityResolver(org.xml.sax.EntityResolver)      */
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------   feature: classic Java for loop   ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  fastPathBlocked -> slow path 
Groovy,WITHOUT_CLASSIFICATION,//  we skip bridge methods implemented in current class already 
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralEnum ...     token type "enum" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,//    KEYWORDS: SPECIAL VALUES 
Groovy,WITHOUT_CLASSIFICATION,// skip contents because of dynamic scope 
Groovy,WITHOUT_CLASSIFICATION,//  trigger the call to VMPlugin#configureClassNode(CompileUnitClassNode) 
Groovy,WITHOUT_CLASSIFICATION,//  add property getter 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal GroovyObject Property handling : set    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,/*      * Get all properties including JavaBean pseudo properties matching getter conventions.     *     * @param type the ClassNode     * @param includeSuperProperties whether to include super properties     * @param includeStatic whether to include static properties     * @param includePseudoGetters whether to include JavaBean pseudo (getXXX/isYYY) properties with no corresponding field     * @return the list of found property nodes      */
Groovy,WITHOUT_CLASSIFICATION,//  Ranges 
Groovy,WITHOUT_CLASSIFICATION,//  and that should link to api/Foo.html not to lib/Foo.html. 
Groovy,WITHOUT_CLASSIFICATION,//  and collect the name of the methods for which delegation is active 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5570: if a closure shared variable is a primitive type it must be boxed 
Groovy,WITHOUT_CLASSIFICATION,//  check cast not necessary because Object never evolves   and it prevents a potential ClassCastException if the delegate of a closure   is changed in a statically compiled closure 
Groovy,WITHOUT_CLASSIFICATION,/*          * Test cache for a valid template bound to the key.          */
Groovy,WITHOUT_CLASSIFICATION,// noinspection UnnecessaryContinue 
Groovy,WITHOUT_CLASSIFICATION,//  automatically split each line using the splitpattern 
Groovy,WITHOUT_CLASSIFICATION,//  int sum(int x) should be preferred to int sum(int x int... y) 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String java.lang.Object)          */
Groovy,WITHOUT_CLASSIFICATION,//  Statements  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,// if the error was thrown on the same row as where the last string section 
Groovy,WITHOUT_CLASSIFICATION,//  add special handling of getDelegate() and getOwner() 
Groovy,WITHOUT_CLASSIFICATION,//  not in JavaDoc API 
Groovy,WITHOUT_CLASSIFICATION,//  Else try to render some arguments 
Groovy,WITHOUT_CLASSIFICATION,//  code to negate the primitive boolean 
Groovy,WITHOUT_CLASSIFICATION,//  name too short? 
Groovy,WITHOUT_CLASSIFICATION,//  added to avoid hash collision attack 
Groovy,WITHOUT_CLASSIFICATION,//  retrieve the proper style from groupNum of the groupList and 
Groovy,WITHOUT_CLASSIFICATION,//  Class<TraitClass> 
Groovy,WITHOUT_CLASSIFICATION,//  (3) there is more than one argument for the vargs array 
Groovy,WITHOUT_CLASSIFICATION,//  Exit early if we run out of data 
Groovy,WITHOUT_CLASSIFICATION,// either a map or a collection 
Groovy,WITHOUT_CLASSIFICATION,//  simply return the values of the metaproperty map as a List 
Groovy,WITHOUT_CLASSIFICATION,//  drop dummy receiver 
Groovy,WITHOUT_CLASSIFICATION,//  meaning that we reached the top of the object hierarchy 
Groovy,WITHOUT_CLASSIFICATION,//  Traits order *must* be preserved   See GROOVY-7285 
Groovy,WITHOUT_CLASSIFICATION,//  in case of this(...) let the other constructor do the init 
Groovy,WITHOUT_CLASSIFICATION,// space between classdef and objblock 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8728 make idempotent   remove default expression and store it as node metadata 
Groovy,WITHOUT_CLASSIFICATION,//  Use a new class loader by default for each class so each class can be independently garbage collected 
Groovy,WITHOUT_CLASSIFICATION,//  inner classes created while generating bytecode 
Groovy,WITHOUT_CLASSIFICATION,//  let's try setting the property on the second object 
Groovy,WITHOUT_CLASSIFICATION,//  couldn't access files 
Groovy,WITHOUT_CLASSIFICATION,//  if it implements Runnable try to instantiate it 
Groovy,WITHOUT_CLASSIFICATION,//  An entry may be scheduled for reordering despite having been removed.   This can occur when the entry was concurrently read while a writer was   removing it. If the entry is no longer linked then it does not need to   be processed. 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------         special constructor invocation (via this/super)    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,/*              * If the current value is a node recurse into that node.              */
Groovy,WITHOUT_CLASSIFICATION,// exception table writing 
Groovy,WITHOUT_CLASSIFICATION,/*      * Get info about instance and class Methods that are dynamically added through Groovy.     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
Groovy,WITHOUT_CLASSIFICATION,//  extract joint options some get pushed up... 
Groovy,WITHOUT_CLASSIFICATION,//  temporarily store the delegation strategy and the delegate type 
Groovy,WITHOUT_CLASSIFICATION,//  iterate through the rows and add each one to the layout... 
Groovy,WITHOUT_CLASSIFICATION,//  already registered 
Groovy,WITHOUT_CLASSIFICATION,//  we have to handle here different cases in which we do no   transformations. We depend on our method selection to have   selected only a compatible method that means for a null   argument we don't have to do anything. Same of course is if   the argument is an instance of the parameter type. We also   exclude boxing since the MethodHandles will do that part   already for us. Another case is the conversion of a primitive   to another primitive or of the wrappers or a combination of    these. This is also handled already. What is left is the    GString conversion and the number conversions. 
Groovy,WITHOUT_CLASSIFICATION,//  loop body 
Groovy,WITHOUT_CLASSIFICATION,//  The exception source of the message if any 
Groovy,WITHOUT_CLASSIFICATION,//  this used to be synchronized but we also used to remove the   metaclass.  Since adding the metaclass is now a side effect we   don't need to ensure the meta-class won't be observed and don't   need to hide the side effect. 
Groovy,WITHOUT_CLASSIFICATION,//  vim: set ts=4 ft=java 
Groovy,WITHOUT_CLASSIFICATION,//  if origShort and withoutCustomHandle 
Groovy,WITHOUT_CLASSIFICATION,//  value is on stack 
Groovy,WITHOUT_CLASSIFICATION,// load spread expressions as array 
Groovy,WITHOUT_CLASSIFICATION,//  handle instanceof cases 
Groovy,WITHOUT_CLASSIFICATION,//  raw type usage is always allowed 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#getMethods()      */
Groovy,WITHOUT_CLASSIFICATION,//  wrap the standard MetaClass with the delegate 
Groovy,WITHOUT_CLASSIFICATION,//  invert the map is now one to many 
Groovy,WITHOUT_CLASSIFICATION,//  CONSTANTS 
Groovy,WITHOUT_CLASSIFICATION,//  goto finally part 
Groovy,WITHOUT_CLASSIFICATION,//  allows a closure to be used to configure Statement objects before its use 
Groovy,WITHOUT_CLASSIFICATION,//  anything text and not a keyword 
Groovy,WITHOUT_CLASSIFICATION,//  Causes the invalid escape to be skipped 
Groovy,WITHOUT_CLASSIFICATION,//  ClassLoaders should only be created inside a doPrivileged block in case   this method is invoked by code that does not have security permissions. 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.temporal.TemporalAccessor extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  return false if cannot do fast path and if are already on the path 
Groovy,WITHOUT_CLASSIFICATION,//  unbox 
Groovy,WITHOUT_CLASSIFICATION,//  IMPLEMENTATION NOTE:   classpath must be the first argument so that the `startGroovy(.bat)` script   can extract it and the JVM can be started with the classpath already correctly set.   This saves us from having to fork a new JVM process with the classpath set from the processed arguments. 
Groovy,WITHOUT_CLASSIFICATION,//  means we're in middle of mlr so start at beginning of mlr 
Groovy,WITHOUT_CLASSIFICATION,//  for efficiency set maxRows (adjusted for the first offset rows we are going to skip the cursor over) 
Groovy,WITHOUT_CLASSIFICATION,//  don't take blank lines into account for calculating the indent 
Groovy,WITHOUT_CLASSIFICATION,//  Set the RHS to '= URI.create("string for this URI")'.   That may throw an IllegalArgumentExpression wrapping the URISyntaxException. 
Groovy,WITHOUT_CLASSIFICATION,//  fast/slow path generation 
Groovy,WITHOUT_CLASSIFICATION,//  lets register the builder as the delegate 
Groovy,WITHOUT_CLASSIFICATION,//  if the right hand side is a boolean expression we need to autobox 
Groovy,WITHOUT_CLASSIFICATION,//  make copy & set type 
Groovy,WITHOUT_CLASSIFICATION,//  merge if/else branches 
Groovy,WITHOUT_CLASSIFICATION,//  it happens with @interface methods 
Groovy,WITHOUT_CLASSIFICATION,//  merge maps 
Groovy,WITHOUT_CLASSIFICATION,//  Define null less than everything. 
Groovy,WITHOUT_CLASSIFICATION,//  Remove some refs so GC will work in order to test multiple iterating threads   removing collected references 
Groovy,WITHOUT_CLASSIFICATION,//  append super if needed 
Groovy,WITHOUT_CLASSIFICATION,//  perform some early param checking for non-vararg case 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: except.javav 1.1 2004-05-23 04:36:29 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Collection class code is from my friend Phil Chu Thanks Phil! 
Groovy,WITHOUT_CLASSIFICATION,//  duplicate arguments 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ long ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  handle receiver 
Groovy,WITHOUT_CLASSIFICATION,//  safe to return null here because then we'll get the default provider 
Groovy,WITHOUT_CLASSIFICATION,//  parse the child regexps if any within a matched block 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.Period extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  fact. We check here for ConstructedClassWithPackage. 
Groovy,WITHOUT_CLASSIFICATION,// we don't need a template.clone here as curry calls clone under the hood 
Groovy,WITHOUT_CLASSIFICATION,//  let's brute-force calculate the size by iterating start to end 
Groovy,WITHOUT_CLASSIFICATION,//  perform visit 
Groovy,WITHOUT_CLASSIFICATION,//   this.$delegate$closure$methodName.call(new Object[] { method arguments }) 
Groovy,WITHOUT_CLASSIFICATION,//  Look for closure valued variable in the  
Groovy,WITHOUT_CLASSIFICATION,//  create previous() method code:      Day previous() {          int ordinal = ordinal().previous() 
Groovy,WITHOUT_CLASSIFICATION,//  this super class stuff is for Java 1.4 support only   it isn't needed on a 5.0 VM 
Groovy,WITHOUT_CLASSIFICATION,//  in case of a precompiled class the outerclass is unknown 
Groovy,WITHOUT_CLASSIFICATION,//             int result = 17;              result = result * 31 + (reverse ? 1 : 0);              result = result * 31 + (inclusive ? 1 : 0); 
Groovy,WITHOUT_CLASSIFICATION,/* float[13] */
Groovy,WITHOUT_CLASSIFICATION,//  test list 
Groovy,WITHOUT_CLASSIFICATION,//  method call with default arguments 
Groovy,WITHOUT_CLASSIFICATION,//  if the object is a Class call a static method from that class 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   VetoableChangeListener[] getVetoableChangeListeners() {     return this$vetoableChangeSupport.getVetoableChangeListeners 
Groovy,WITHOUT_CLASSIFICATION,//  Nothing should be done when no elements need protection against eviction 
Groovy,WITHOUT_CLASSIFICATION,// out.print("</" + t.getType() + ">"); 
Groovy,WITHOUT_CLASSIFICATION,//  on a special call there's no object on stack 
Groovy,WITHOUT_CLASSIFICATION,//         LinkedList<DeclarationExpression> declarations = new LinkedList<DeclarationExpression>(); 
Groovy,WITHOUT_CLASSIFICATION,//  noSuchMethod(method object arguments); 
Groovy,WITHOUT_CLASSIFICATION,//  remove annotations 
Groovy,WITHOUT_CLASSIFICATION,//  The exception on which to report   If true stack traces are always output 
Groovy,WITHOUT_CLASSIFICATION,//  given an offset return the mlr it resides in 
Groovy,WITHOUT_CLASSIFICATION,//    GSTRING TOKENS 
Groovy,WITHOUT_CLASSIFICATION,//  store target method 
Groovy,WITHOUT_CLASSIFICATION,//  load arguments 
Groovy,WITHOUT_CLASSIFICATION,//  add no-arg constructor 
Groovy,WITHOUT_CLASSIFICATION,//         List<FieldNode> fields = getFields(transform anno buildee); 
Groovy,WITHOUT_CLASSIFICATION,//  uncached constants. 
Groovy,WITHOUT_CLASSIFICATION,//  only used on rare occasions e.g. the '(' in this snippet...   @Foo  (  a=1 b=2 c=3) 
Groovy,WITHOUT_CLASSIFICATION,//  method invocation 
Groovy,WITHOUT_CLASSIFICATION,//  don't log the password 
Groovy,WITHOUT_CLASSIFICATION,//  if we lazily create default values use 'null' as placeholder 
Groovy,WITHOUT_CLASSIFICATION,//  copy arguments that are not a varg 
Groovy,WITHOUT_CLASSIFICATION,//  the document buffer and segment 
Groovy,WITHOUT_CLASSIFICATION,//  direct method call paths 
Groovy,WITHOUT_CLASSIFICATION,//  add fields 
Groovy,WITHOUT_CLASSIFICATION,//  let's make the constructor 
Groovy,WITHOUT_CLASSIFICATION,//  identifiers primitive types   identifiers primitive types except void 
Groovy,WITHOUT_CLASSIFICATION,//  default packages do not contain classes like these 
Groovy,WITHOUT_CLASSIFICATION,//  things like com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl   do implement Element NodeList and Node. But here we prefer element   so we force the usage of Element. Without this DOMCategoryTest may fail   in strange ways 
Groovy,WITHOUT_CLASSIFICATION,//  resolve property types 
Groovy,WITHOUT_CLASSIFICATION,// could be more efficient by compiling expressions in advance. 
Groovy,WITHOUT_CLASSIFICATION,// There may be more than 1 failure:  iterate to ensure that they all match the missingPermission. 
Groovy,WITHOUT_CLASSIFICATION,//  we drop the receiver which might be a Class (invocation on Class)   or it might be an object (static method invocation on instance)   Object.class handles both cases at once 
Groovy,WITHOUT_CLASSIFICATION,//    Store Access   
Groovy,WITHOUT_CLASSIFICATION,//  create a list of integers (Li1) from 1 to SIZE 
Groovy,WITHOUT_CLASSIFICATION,//  let's pass along any other modifiers we need 
Groovy,WITHOUT_CLASSIFICATION,//  cached data 
Groovy,WITHOUT_CLASSIFICATION,//  Scheduler will run foerever 
Groovy,WITHOUT_CLASSIFICATION,//  currently not looking for PropertyExpression: dealt with at runtime using ReadOnlyPropertyException 
Groovy,WITHOUT_CLASSIFICATION,//  look if really compare 
Groovy,WITHOUT_CLASSIFICATION,//  another case we want to check here is if we are in a   nested class A$B$C and want to access B without   qualifying it by A.B. A alone will work since that   is the qualified (minus package) name of that class   anyway.  
Groovy,WITHOUT_CLASSIFICATION,//  set super class and generics info   "enum X" -> class X extends Enum<X> 
Groovy,WITHOUT_CLASSIFICATION,//  May happen on JDK8 and below. We add elements to the front of the array to account for the synthetic params:   - for an inner class we expect one param to account for the synthetic outer reference   - for an enum we expect two params to account for the synthetic name and ordinal 
Groovy,WITHOUT_CLASSIFICATION,/* Character[7] */
Groovy,WITHOUT_CLASSIFICATION,/*      * If a main method is provided by user account for it under run() as scripts generate their own 'main' so they can run.        */
Groovy,WITHOUT_CLASSIFICATION,//  TODO: dk: make FileNameFinder injectable 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                    unboxing methods    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  now let's look up the name via JMX to check 
Groovy,WITHOUT_CLASSIFICATION,//  can safely use '/' because Windows understands '/' as separator 
Groovy,WITHOUT_CLASSIFICATION,//  look in the namespaces who will be declared at the next element 
Groovy,WITHOUT_CLASSIFICATION,/*  *     * load a message on the stack and remove it right away. Good for put a mark in the generated bytecode for debugging purpose.     *     * @param msg      */
Groovy,WITHOUT_CLASSIFICATION,//  use this to synchronize access for the lazy init 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getFeature(java.lang.String)      */
Groovy,WITHOUT_CLASSIFICATION,//   **********************************************************************************    **********************************************************************************    **************          methods not covered by the new MOP          **************    **********************************************************************************    ********************************************************************************** 
Groovy,WITHOUT_CLASSIFICATION,// This is also the cost for a insert 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7307 
Groovy,WITHOUT_CLASSIFICATION,//  ensure leading '|' is removed 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ double ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7822 use Set for O(1) performance for contains 
Groovy,WITHOUT_CLASSIFICATION,//  type conversions 
Groovy,WITHOUT_CLASSIFICATION,//  protected means same class or same package or subclass 
Groovy,WITHOUT_CLASSIFICATION,//  end::jsr223_imports[] 
Groovy,WITHOUT_CLASSIFICATION,//  VariableExpressions will stop resolving 
Groovy,WITHOUT_CLASSIFICATION,//  swallow for strict security managers module systems android or others 
Groovy,WITHOUT_CLASSIFICATION,//  check that the provided classnode is a subclass of all provided upper bounds 
Groovy,WITHOUT_CLASSIFICATION,//  get the setter method 
Groovy,WITHOUT_CLASSIFICATION,/*          * Log some debug information for https://issues.apache.org/jira/browse/GROOVY-861          */
Groovy,WITHOUT_CLASSIFICATION,//  $idx<$len? 
Groovy,WITHOUT_CLASSIFICATION,//  The pattern used to split the current line 
Groovy,WITHOUT_CLASSIFICATION,//  fall through getErrorReporter().failIfErrors() will trigger 
Groovy,WITHOUT_CLASSIFICATION,//  br for setting on the LocalVariableTable in the class file   these fields should probably go to jvm Operand class 
Groovy,WITHOUT_CLASSIFICATION,//  Take a permut array continuously flipping until first element is '1' 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.MonthDay extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  Special handling is done for floating point types in order to   handle checking for 0 or NaN values. 
Groovy,WITHOUT_CLASSIFICATION,//  not in java   not in java   equiv to f() // not in java 
Groovy,WITHOUT_CLASSIFICATION,//  do the same again for an inner inner class 
Groovy,WITHOUT_CLASSIFICATION,//  either index >= size or the normalised index is negative 
Groovy,WITHOUT_CLASSIFICATION,//  eliminate static 
Groovy,WITHOUT_CLASSIFICATION,// add this parameter to node 
Groovy,WITHOUT_CLASSIFICATION,//  parser bug 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getFeature(java.lang.String)     */
Groovy,WITHOUT_CLASSIFICATION,//  cleanup 
Groovy,WITHOUT_CLASSIFICATION,//  skip the final modifier if it's present 
Groovy,WITHOUT_CLASSIFICATION,//  there is nothing to be done. 
Groovy,WITHOUT_CLASSIFICATION,//  Otherwise let's trust the source to know where it is from.   And actually InputStreamReaderSource doesn't know what to do and so returns null. 
Groovy,WITHOUT_CLASSIFICATION,//  place holder to avoid problems with empty catch blocks 
Groovy,WITHOUT_CLASSIFICATION,//  --------------------------------------------------   bugs?: spread expressions in closures and GStrings 
Groovy,WITHOUT_CLASSIFICATION,//  let's find a main method 
Groovy,WITHOUT_CLASSIFICATION,// keep field 
Groovy,WITHOUT_CLASSIFICATION,//  for lists replace list.foo with:   def result = new ArrayList(list.size()) 
Groovy,WITHOUT_CLASSIFICATION,//  restore dummy collector target 
Groovy,WITHOUT_CLASSIFICATION,//  reference type 
Groovy,WITHOUT_CLASSIFICATION,//  all Blocks do know the label so use all finally blocks 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise find the default constructor 
Groovy,WITHOUT_CLASSIFICATION,//  Implementation methods 
Groovy,WITHOUT_CLASSIFICATION,//  include original line/col info and source code on the mindmap output 
Groovy,WITHOUT_CLASSIFICATION,//  have to lookup registered beans 
Groovy,WITHOUT_CLASSIFICATION,//  <2> 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8943 
Groovy,WITHOUT_CLASSIFICATION,//  subsequent bounds if present can be interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  the next items require conversion to int when initializing 
Groovy,WITHOUT_CLASSIFICATION,//  if that main method exist invoke it 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.GroovyObject#setMetaClass(groovy.lang.MetaClass)     */
Groovy,WITHOUT_CLASSIFICATION,//  scope != null means aic we don't handle that here 
Groovy,WITHOUT_CLASSIFICATION,/*      * Methods to allow Date Duration arithmetic      */
Groovy,WITHOUT_CLASSIFICATION,//  filter out DGM beans 
Groovy,WITHOUT_CLASSIFICATION,//  give value through or unbox 
Groovy,WITHOUT_CLASSIFICATION,//  Set up a new array of indexes with the right number of elements   for the new data model. 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------------------------   deprecate in parser?: 'break' allowed in methods 
Groovy,WITHOUT_CLASSIFICATION,//  backslash   line feed   carriage return   tab   form feed 
Groovy,WITHOUT_CLASSIFICATION,//  don't delegate to putAll since we want case handling from put 
Groovy,WITHOUT_CLASSIFICATION,//     public static Boolean negate(Boolean left) {          return Boolean.valueOf(!left.booleanValue());      } 
Groovy,WITHOUT_CLASSIFICATION,//  returns the default charset rather than US-ASCII if the enforce8Bit flag is set. 
Groovy,WITHOUT_CLASSIFICATION,//  the description of the property 
Groovy,WITHOUT_CLASSIFICATION,//  port to listen on when processing sockets 
Groovy,WITHOUT_CLASSIFICATION,//  setMetaClass 
Groovy,WITHOUT_CLASSIFICATION,// resolve class names at the end of adding all files to the tree 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see java.lang.Object#equals(java.lang.Object)      */
Groovy,WITHOUT_CLASSIFICATION,//  initialize the segment with the complete document so the segment doesn't   have an underlying gap in the buffer 
Groovy,WITHOUT_CLASSIFICATION,//  getMetaClass 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal method invocation 
Groovy,WITHOUT_CLASSIFICATION,//  can't check synchronized here as it doubles up with ACC_SUPER  private static final String EXPECTED_SYNCHRONIZED_CLASS_ERROR_MESSAGE = 
Groovy,WITHOUT_CLASSIFICATION,//  reverse Li1 
Groovy,WITHOUT_CLASSIFICATION,//  save name before redirect 
Groovy,WITHOUT_CLASSIFICATION,//  indexes into strings s and t 
Groovy,WITHOUT_CLASSIFICATION,//  if original double meta class 
Groovy,WITHOUT_CLASSIFICATION,//  we are not in a tuple so boxing might be missing for   this single argument call 
Groovy,WITHOUT_CLASSIFICATION,//  static star imports 
Groovy,WITHOUT_CLASSIFICATION,//  incompatible assignment 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5207 So that Closures can see newly added fields   (not super efficient for a very large class with many @Fields but we chose simplicity 
Groovy,WITHOUT_CLASSIFICATION,//  Used to keep a hard reference to the References so they are not collected 
Groovy,WITHOUT_CLASSIFICATION,/*  ignore  */
Groovy,WITHOUT_CLASSIFICATION,//  use name of class for constructor from the class definition 
Groovy,WITHOUT_CLASSIFICATION,//  receiver   we operate on GroovyObject if possible 
Groovy,WITHOUT_CLASSIFICATION,//  This could be changed to support some hash of the parameter types etc.   but should distinguish between reordered params while allowing normal   type coercions to be honored 
Groovy,WITHOUT_CLASSIFICATION,//  using a comparator of parameters 
Groovy,WITHOUT_CLASSIFICATION,//  Read in number of buckets and allocate the bucket array; 
Groovy,WITHOUT_CLASSIFICATION,//  use a temporary variable for the arraylist in which the results of the spread call will be stored 
Groovy,WITHOUT_CLASSIFICATION,//  new line so reset unicode escapes 
Groovy,WITHOUT_CLASSIFICATION,//  a five-bytes sequence was encountered 
Groovy,WITHOUT_CLASSIFICATION,//  } 
Groovy,WITHOUT_CLASSIFICATION,//  treat as simple type - probably a String 
Groovy,WITHOUT_CLASSIFICATION,/*  We need to chop up this child container.  */
Groovy,WITHOUT_CLASSIFICATION,// check for an alias 
Groovy,WITHOUT_CLASSIFICATION,//  ignore leave property expression in place and we'll report later 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.Year extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,/*      * According to section 6.4.1 of the JavaBeans spec this is legal but not     * good practice.  We need to test what can be done not what should be done      */
Groovy,WITHOUT_CLASSIFICATION,//  we are probably looking for a property of the class 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: prodcons.javav 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Producer-Consumer Example by Bill Lear   Adapted from http://java.sun.com/docs/books/tutorial/essential/threads 
Groovy,WITHOUT_CLASSIFICATION,// GROOVY-3712 - if it's an MOP method it's an error as they aren't supposed to exist before ACG is invoked 
Groovy,WITHOUT_CLASSIFICATION,//  in this case we need one "this" so a SWAP will exchange   "this" and Object[] a DUP_X1 will then copy the Object[]  / to the last place in the stack:       Object[]this -SWAP-> thisObject[]       thisObject[] -DUP_X1-> Object[]thisObject[] 
Groovy,WITHOUT_CLASSIFICATION,//  false part: load false expression and cast to S 
Groovy,WITHOUT_CLASSIFICATION,/*          * Bind the default variables.          */
Groovy,WITHOUT_CLASSIFICATION,//  Run the script 
Groovy,WITHOUT_CLASSIFICATION,//  CLASS METHODS 
Groovy,WITHOUT_CLASSIFICATION,//  let's check if one of the operands is the null constant 
Groovy,WITHOUT_CLASSIFICATION,//  our last action in the above loop was to rotate vals so vals[1] now 
Groovy,WITHOUT_CLASSIFICATION,//  if in unicode then we're reading unicode   values in somehow 
Groovy,WITHOUT_CLASSIFICATION,/*      * searches for \n or \r     * Returns -1 if not found.      */
Groovy,WITHOUT_CLASSIFICATION,//  need to abbreviate this comment for the summary 
Groovy,WITHOUT_CLASSIFICATION,//  so we really need to rewrap 
Groovy,WITHOUT_CLASSIFICATION,//  retry if wrong list or lost race against concurrent remove 
Groovy,WITHOUT_CLASSIFICATION,//  anything other than PropertyExpressions or 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.Closure#getDelegate()          */
Groovy,WITHOUT_CLASSIFICATION,//  every element was the null constant 
Groovy,WITHOUT_CLASSIFICATION,//  [123].each {foo(it)}  <-- Closure 
Groovy,WITHOUT_CLASSIFICATION,//     public int canonicalHashCode() { 
Groovy,WITHOUT_CLASSIFICATION,//  ensure invariant from <= to 
Groovy,WITHOUT_CLASSIFICATION,//  remove the new tags we had to define for this element 
Groovy,WITHOUT_CLASSIFICATION,//  Cache closure call methods 
Groovy,WITHOUT_CLASSIFICATION,//  variable already declared 
Groovy,WITHOUT_CLASSIFICATION,//    SPECIAL (CALCULATED) MEANINGS 
Groovy,WITHOUT_CLASSIFICATION,//  always return if the parent loader was successful 
Groovy,WITHOUT_CLASSIFICATION,//  skip if there is no such annotation 
Groovy,WITHOUT_CLASSIFICATION,//  We lied about our CodeSource and that makes URLClassLoader unhappy. 
Groovy,WITHOUT_CLASSIFICATION,//  iterate from the inner most to the outer and check for classes   this check will ignore a .class property for Example Integer.class will be   a PropertyExpression with the ClassExpression of Integer as objectExpression 
Groovy,WITHOUT_CLASSIFICATION,//  Add a penalty against boxing or unboxing to get a resolution similar to JLS 15.12.2   (http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.2). 
Groovy,WITHOUT_CLASSIFICATION,//  stack: closure 
Groovy,WITHOUT_CLASSIFICATION,//  Add parameter names to the MethodVisitor (jdk8+ only) 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                       Closures    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,/*              *  GROOVY-4009: when a normal variable is simply being used there is no need to try to              *  resolve its type. Variable type resolve should proceed only if the variable is being declared.               */
Groovy,WITHOUT_CLASSIFICATION,//  try to find a target 
Groovy,WITHOUT_CLASSIFICATION,//  last parameters wrapped in an array 
Groovy,WITHOUT_CLASSIFICATION,//  IGNORE 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                  static normal method invocation 
Groovy,WITHOUT_CLASSIFICATION,//  deprecated 
Groovy,WITHOUT_CLASSIFICATION,//  getInitialExpression above will be null if not in same source unit   so instead set within (static) initializer 
Groovy,WITHOUT_CLASSIFICATION,//  update max_flip foreach flipping position 
Groovy,WITHOUT_CLASSIFICATION,//  prefer super method if it matches better 
Groovy,WITHOUT_CLASSIFICATION,//  tag::precompiled_java_extension[] 
Groovy,WITHOUT_CLASSIFICATION,//  import is like "import static foo.Bar.method"   packageName is really class name in this case 
Groovy,WITHOUT_CLASSIFICATION,//  reset any out of bounds requests 
Groovy,WITHOUT_CLASSIFICATION,//  call() 
Groovy,WITHOUT_CLASSIFICATION,//  goto after all-catching block 
Groovy,WITHOUT_CLASSIFICATION,//  tag::bsf_access[] 
Groovy,WITHOUT_CLASSIFICATION,//             return createGetPropertySite(receiver).getProperty(receiver); 
Groovy,WITHOUT_CLASSIFICATION,//  if the bound is not using generics there's nothing to compare with 
Groovy,WITHOUT_CLASSIFICATION,//  non thread-safe iterator 
Groovy,WITHOUT_CLASSIFICATION,//  this block does not get a source position because we don't 
Groovy,WITHOUT_CLASSIFICATION,//  and we want to recompile if needed. 
Groovy,WITHOUT_CLASSIFICATION,//  with a lower case letter anymore 
Groovy,WITHOUT_CLASSIFICATION,//  check if maybe dependency was recompiled but this one here not 
Groovy,WITHOUT_CLASSIFICATION,//  if node text is found to be "super"/"this" when a method call is being processed it is a  
Groovy,WITHOUT_CLASSIFICATION,//  effort to get more logging in case a dependency of a class is loaded   although it shouldn't have 
Groovy,WITHOUT_CLASSIFICATION,//  apply configuration customizers if any 
Groovy,WITHOUT_CLASSIFICATION,//  if the classnode we compare to is a generics placeholder (like <E>) then we   only need to check that the names are equal 
Groovy,WITHOUT_CLASSIFICATION,//  bind redirect method 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6061 
Groovy,WITHOUT_CLASSIFICATION,//  imports 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.Writable#writeTo(java.io.Writer)          */
Groovy,WITHOUT_CLASSIFICATION,//  index for the next variable on stack 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#getAttribute(java.lang.Object java.lang.String)      */
Groovy,WITHOUT_CLASSIFICATION,//  replace call to <init>(Map) or <init>(this Map)   with a call to <init>() or <init>(this) + appropriate setters   for example foo(x:1 y:2) is replaced with: 
Groovy,WITHOUT_CLASSIFICATION,//  cast argument to parameter class inclusive unboxing   for methods with primitive types 
Groovy,WITHOUT_CLASSIFICATION,//  if null test if wildcard exists 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8819 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: random.javav 1.2 2004-08-14 08:19:19 bfulgham Exp $   http://shootout.alioth.debian.org/     Brent Fulgham:  Changed to use 32-bit integers (like the C   version) based on a suggestion by Yonik Seeley. 
Groovy,WITHOUT_CLASSIFICATION,//    This element is preceded by CDATA if keepIgnorableWhitespace is false (the default setting) and   it's not whitespace add it to the body   Note that according to the XML spec we should preserve the CDATA if it's all whitespace   but for the sort of work I'm doing ignoring the whitespace is preferable   
Groovy,WITHOUT_CLASSIFICATION,//  since indy does not give us the runtime types   we produce first a dummy call site which then changes the target to one   that does the method selection including the direct call to the   real method. 
Groovy,WITHOUT_CLASSIFICATION,//  Note: old closure syntax using LOR is deprecated and also never creates/visits a LOR node 
Groovy,WITHOUT_CLASSIFICATION,//  unpack argument from Object[] 
Groovy,WITHOUT_CLASSIFICATION,//  other cases don't need storing so nothing to be done for them 
Groovy,WITHOUT_CLASSIFICATION,//  recur 
Groovy,WITHOUT_CLASSIFICATION,//  counter used to generate unique global Script class names 
Groovy,WITHOUT_CLASSIFICATION,//  a keyword should be ok 
Groovy,WITHOUT_CLASSIFICATION,//  If weighted values are used then the pending operations will adjust   the size to reflect the correct weight 
Groovy,WITHOUT_CLASSIFICATION,// CHECKSTYLE.ON: ConstantNameCheck 
Groovy,WITHOUT_CLASSIFICATION,//             String s = (String) newValue; 
Groovy,WITHOUT_CLASSIFICATION,//  remove middle of large bits of text 
Groovy,WITHOUT_CLASSIFICATION,//  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere.   WARNING: This code does not expect a class that has a static            inner class in DEFAULT_IMPORTS 
Groovy,WITHOUT_CLASSIFICATION,//  visitComma ...     token type COMMA never created/visited     see TYPE_ARGUMENTS ANNOTATION many others ... 
Groovy,WITHOUT_CLASSIFICATION,//  fail dirty no checks 
Groovy,WITHOUT_CLASSIFICATION,//  just check length MOP will match it up 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                    boxing methods    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   generic get method  ---------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  visit rbrack()     token type RBRACK only used inside parser never visited/created 
Groovy,WITHOUT_CLASSIFICATION,/*  The Great Computer Language Shootout http://shootout.alioth.debian.org/ contributed by Java novice Jarkko Miettinen modified ~3 lines of the original C#-version by Isaac Gouy  */
Groovy,WITHOUT_CLASSIFICATION,//  generated proxy using a map to store the closure 
Groovy,WITHOUT_CLASSIFICATION,//  It's normally safe to ignore exceptions during cleanup but here if there is   a closed statement in the cache the cache is possibly corrupted hence log   at slightly elevated level than similar cases. 
Groovy,WITHOUT_CLASSIFICATION,//  run through all our current properties and create MetaProperty objects 
Groovy,WITHOUT_CLASSIFICATION,//         getState().clear(); 
Groovy,WITHOUT_CLASSIFICATION,//  use 1000000 as offset to avoid conflicts with names from the GroovyShell 
Groovy,WITHOUT_CLASSIFICATION,//         SoftDoubleKeyMap.Entry val = (SoftDoubleKeyMap.Entry) assignableMap.getOrPut(klazz aClass null); 
Groovy,WITHOUT_CLASSIFICATION,/*     public static final int LEFT_SHIFT_EQUAL            = 285;   // <<=    public static final int RIGHT_SHIFT_EQUAL           = 286;   // >>=    public static final int RIGHT_SHIFT_UNSIGNED_EQUAL  = 287;   // >>>=    public static final int BITWISE_OR_EQUAL            = 350;   // |=    public static final int BITWISE_AND_EQUAL           = 351;   // &=    public static final int BITWISE_XOR_EQUAL           = 352;   // ^=    public static final int BITWISE_NEGATION            = REGEX_PATTERN;    // ~     */
Groovy,WITHOUT_CLASSIFICATION,//  get the name of the pane (or user name) and the time for the header 
Groovy,WITHOUT_CLASSIFICATION,//  check if the next block is over the max allowed 
Groovy,WITHOUT_CLASSIFICATION,//  only want to do this once per node... 
Groovy,WITHOUT_CLASSIFICATION,//  javax.script.Compilable methods  
Groovy,WITHOUT_CLASSIFICATION,// assert 
Groovy,WITHOUT_CLASSIFICATION,//  baos.withObjectOutputStream{ it.writeObject(this) } 
Groovy,WITHOUT_CLASSIFICATION,//  resolve constant-looking expressions statically (do here as they get transformed away later) 
Groovy,WITHOUT_CLASSIFICATION,//  overall used variables for a method/constructor 
Groovy,WITHOUT_CLASSIFICATION,//             val.setValue(Boolean.valueOf(klazz.isAssignableFrom(aClass)));          }          return ((Boolean)val.getValue()).booleanValue(); 
Groovy,WITHOUT_CLASSIFICATION,/* ignore. */
Groovy,WITHOUT_CLASSIFICATION,//  add getter/setter even though setter not strictly needed for final fields 
Groovy,WITHOUT_CLASSIFICATION,//  do nothing by default 
Groovy,WITHOUT_CLASSIFICATION,//  First we try to get as much information about the declaration 
Groovy,WITHOUT_CLASSIFICATION,//  on Windows "\r\n" is a new line. 
Groovy,WITHOUT_CLASSIFICATION,//  no checks on the sun.reflect classes for reflection speed-up   in particular ConstructorAccessorImpl MethodAccessorImpl FieldAccessorImpl and SerializationConstructorAccessorImpl   which are generated at runtime by the JDK 
Groovy,WITHOUT_CLASSIFICATION,//  for GroovyClassLoader instance 
Groovy,WITHOUT_CLASSIFICATION,//  find out the number of gaps to fill with null/the default value 
Groovy,WITHOUT_CLASSIFICATION,//  cheat and borrow first param for result as we don't use it anyway 
Groovy,WITHOUT_CLASSIFICATION,//  now delete directory itself 
Groovy,WITHOUT_CLASSIFICATION,/*  package-private for use in builders  */
Groovy,WITHOUT_CLASSIFICATION,/*  for later class resolution  */
Groovy,WITHOUT_CLASSIFICATION,/*  = 0  */
Groovy,WITHOUT_CLASSIFICATION,//  falls-back on default encoding 
Groovy,WITHOUT_CLASSIFICATION,//  ... parse command line arguments 
Groovy,WITHOUT_CLASSIFICATION,//  change statement to do assignment only 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4415 / GROOVY-4645: check that there's no abstract method which corresponds to this one 
Groovy,WITHOUT_CLASSIFICATION,//  write hex string to writer 
Groovy,WITHOUT_CLASSIFICATION,//    Ensure the path is ready for the file 
Groovy,WITHOUT_CLASSIFICATION,/*  Don't eat EOL chars in sections - as they are valid instruction separators.                 * See https://issues.apache.org/jira/browse/GROOVY-980                  */
Groovy,WITHOUT_CLASSIFICATION,//  local is kept as hard reference to avoid garbage collection 
Groovy,WITHOUT_CLASSIFICATION,//  From Hacker's Delight Chapter 3 Harry S. Warren Jr. 
Groovy,WITHOUT_CLASSIFICATION,//  insert at beginning so we have the classloader set up before the class is called 
Groovy,WITHOUT_CLASSIFICATION,//  first check normal number of parameters 
Groovy,WITHOUT_CLASSIFICATION,//  a proxy is supposed to be a concrete class so it cannot extend an interface.   If the provided superclass is an interface then we replace the superclass with Object 
Groovy,WITHOUT_CLASSIFICATION,// TODO: other cases 
Groovy,WITHOUT_CLASSIFICATION,//  generate a new method 
Groovy,WITHOUT_CLASSIFICATION,//  Same as "0.0". 
Groovy,WITHOUT_CLASSIFICATION,/* int[8] */
Groovy,WITHOUT_CLASSIFICATION,//  only print out if we are being used for template generation 
Groovy,WITHOUT_CLASSIFICATION,//  compare against the field but call isXXXExpression() instead. 
Groovy,WITHOUT_CLASSIFICATION,//  {@link processing hack} 
Groovy,WITHOUT_CLASSIFICATION,//  The String from which we produce Readers. 
Groovy,WITHOUT_CLASSIFICATION,/*      * Intercepts a getXXX call and returns a result. The result is replaced by the     * real value if doGet() return false     *     * @param object   The target object     * @param property The property to get     * @return A value supplied by the interceptor      */
Groovy,WITHOUT_CLASSIFICATION,//  next we get the block parameter types and set the generics   information just like before 
Groovy,WITHOUT_CLASSIFICATION,//  advance to first entry 
Groovy,WITHOUT_CLASSIFICATION,//  Read the keys and values and put the mappings in the table 
Groovy,WITHOUT_CLASSIFICATION,//  already handling verbose but pass on too 
Groovy,WITHOUT_CLASSIFICATION,//  we have C[*:map] -> should become (C) map 
Groovy,WITHOUT_CLASSIFICATION,//  start finally 
Groovy,WITHOUT_CLASSIFICATION,//     Visibility field() default Visibility.UNDEFINED; 
Groovy,WITHOUT_CLASSIFICATION,//  at least '$' is consumed ... read next chars. 
Groovy,WITHOUT_CLASSIFICATION,//  log(" = " + made); 
Groovy,WITHOUT_CLASSIFICATION,//  Opening of files and such   Lexing parsing and AST building   CST to AST conversion   AST semantic analysis and elucidation   AST completion   Class generation phase 1   Class generation phase 2   Output of class to disk   Cleanup   Synonym for full compilation 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   STRING CONVERSION 
Groovy,WITHOUT_CLASSIFICATION,//  attempt builder resolution 
Groovy,WITHOUT_CLASSIFICATION,//  as groovy AST doesn't expect to have them 
Groovy,WITHOUT_CLASSIFICATION,//  if the meta class call fails we may still want to fall back to call   GroovyObject#invokeMethod if the receiver is a GroovyObject 
Groovy,WITHOUT_CLASSIFICATION,//  keys to list of invocation times and before and after 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4035  
Groovy,WITHOUT_CLASSIFICATION,//  falls through 
Groovy,WITHOUT_CLASSIFICATION,//  If the namespace has been used in the parse document use that tag 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5961 
Groovy,WITHOUT_CLASSIFICATION,//  targetTypes String Enum and Class are handled    by the compiler already 
Groovy,WITHOUT_CLASSIFICATION,//  see: http://ant.apache.org/ivy/history/latest-milestone/textual.html 
Groovy,WITHOUT_CLASSIFICATION,//  top might be primitive target is not   so let invocation writer box if needed and do groovy cast otherwise 
Groovy,WITHOUT_CLASSIFICATION,//  Coerce the file URL to a File 
Groovy,WITHOUT_CLASSIFICATION,//  visitEof ...     token type EOF never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  is one of the arguments a closure? 
Groovy,WITHOUT_CLASSIFICATION,//  Early return to avoid macro context and arguments creation 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String java.lang.Object)       */
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    char  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Parse the script generate the class and invoke the main method.  This is a little looser than 
Groovy,WITHOUT_CLASSIFICATION,//  parameter in case of an extension method we must not.  
Groovy,WITHOUT_CLASSIFICATION,//         }          return (Byte) primitiveArrayPut(array idx newValue);      }        public static Character putAt(char[] array int idx Object newValue) { 
Groovy,WITHOUT_CLASSIFICATION,//  3 operands the array the index and the value! 
Groovy,WITHOUT_CLASSIFICATION,/*         Start off at the apparently correct bin.  If entry is found we       need to check after a barrier anyway.  If not found we need a       barrier to check if we are actually in right bin. So either       way we encounter only one barrier unless we need to retry.       And we only need to fully synchronize if there have been       concurrent modifications.     */
Groovy,WITHOUT_CLASSIFICATION,//  so we can create the curried closure 
Groovy,WITHOUT_CLASSIFICATION,//  Source file encoding 
Groovy,WITHOUT_CLASSIFICATION,//  remove local variable 
Groovy,WITHOUT_CLASSIFICATION,//  !=   ===   !==   ==   <   <=   >   >=   <=> 
Groovy,WITHOUT_CLASSIFICATION,//  in groovy methods and classes are assumed public unless informed otherwise 
Groovy,WITHOUT_CLASSIFICATION,//  Because we can not rely on 3rd party library(excluding antlr asm) we have to implement our own utils such as the `inverse` method...   Actually `BiMap` of Guava and `BidiMap` of commons-collections are both suitable for this scenario. 
Groovy,WITHOUT_CLASSIFICATION,//  annotation closure; replaced with this specific class literal to cover the   case where annotation type uses Class<? extends Closure> for the closure's type 
Groovy,WITHOUT_CLASSIFICATION,//                     element = new MetaBeanProperty(mp.getName() mp.getType() mp.getGetter() null);                  } 
Groovy,WITHOUT_CLASSIFICATION,// toURI().toURL() will encode but toURL() will not. 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4973: Range made-up of from: Integer and to: Long should have 'from' promoted to type Long. 
Groovy,WITHOUT_CLASSIFICATION,//    Then set in the element. 
Groovy,WITHOUT_CLASSIFICATION,//  if left type is not a list but right type is a list then we're in the case of a groovy   constructor type : Dimension d = [100200]   In that case more checks can be performed 
Groovy,WITHOUT_CLASSIFICATION,/* !isAttributeExpression &&  */
Groovy,WITHOUT_CLASSIFICATION,//  validate with closures 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5150 : Initialize value with a dummy constant so that Java cross compiles correctly 
Groovy,WITHOUT_CLASSIFICATION,//  ex: Comparable<Integer> <=> Comparable<? super T> 
Groovy,WITHOUT_CLASSIFICATION,//  mark a ml run 
Groovy,WITHOUT_CLASSIFICATION,//    Sort the parameters out 
Groovy,WITHOUT_CLASSIFICATION,//  ... try piece in puzzle 
Groovy,WITHOUT_CLASSIFICATION,//  VARBINARY() and other methods were assumed to be Constructors make sure they aren't anymore... 
Groovy,WITHOUT_CLASSIFICATION,// LOGME 
Groovy,WITHOUT_CLASSIFICATION,//  FF   FE 
Groovy,WITHOUT_CLASSIFICATION,//  superCallArguments = arguments for the super call == the constructor call arguments 
Groovy,WITHOUT_CLASSIFICATION,/*  The next File object we'll iterate over  */
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralClass ...     token type "class" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,//  we need later an array to store the curried   closures so we create it here and ave it 
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Mark C. Lewis */
Groovy,WITHOUT_CLASSIFICATION,//  Indexes to retrieve field and method information 
Groovy,WITHOUT_CLASSIFICATION,//  both have generics 
Groovy,WITHOUT_CLASSIFICATION,//  could be changed into do..while but then   we might create an additional StringBuilder 
Groovy,WITHOUT_CLASSIFICATION,//  then we use the remaining information to refine the given generics 
Groovy,WITHOUT_CLASSIFICATION,//  ")" ""   "]" ""   "implements" "throws" "{" ""   identifier "[" "." 
Groovy,WITHOUT_CLASSIFICATION,//  making this false helps find matches 
Groovy,WITHOUT_CLASSIFICATION,//  different parsing without leading keyword 
Groovy,WITHOUT_CLASSIFICATION,//  add curried versions 
Groovy,WITHOUT_CLASSIFICATION,//  the following fields are closures executed in event-based methods 
Groovy,WITHOUT_CLASSIFICATION,//  create array initialization methods 
Groovy,WITHOUT_CLASSIFICATION,//  result 
Groovy,WITHOUT_CLASSIFICATION,//  found a source compile it if newer 
Groovy,WITHOUT_CLASSIFICATION,//  ok found one static method 
Groovy,WITHOUT_CLASSIFICATION,//  don't worry about the bind state if the binding   is completed we will bind in rebuild 
Groovy,WITHOUT_CLASSIFICATION,//  jth object of t 
Groovy,WITHOUT_CLASSIFICATION,//  if the method was not found in the current scope (the script's methods)   let's try to see if there's a method closure with the same name in the binding 
Groovy,WITHOUT_CLASSIFICATION,//  create exception variable and store the exception 
Groovy,WITHOUT_CLASSIFICATION,//  generic array to array conversion 
Groovy,WITHOUT_CLASSIFICATION,//  form as it is closure shared 
Groovy,WITHOUT_CLASSIFICATION,//  Since we use the data: scheme for StringReaderSources (which are fairly common) 
Groovy,WITHOUT_CLASSIFICATION,//  template declaring its expected types from model directly   modelTypes = {    List<String> items    ...   } 
Groovy,WITHOUT_CLASSIFICATION,//  not java try groovy instead :-) 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovySerialFieldTag[] serialFieldTags() {/*todo*/return null;} 
Groovy,WITHOUT_CLASSIFICATION,//  built in namespace   pseudo namespace for markup keywords 
Groovy,WITHOUT_CLASSIFICATION,//  we maybe can't fix a synthetic field 
Groovy,WITHOUT_CLASSIFICATION,//  prepare fields 
Groovy,WITHOUT_CLASSIFICATION,//  the start and end indices of a match in the Matcher looking 
Groovy,WITHOUT_CLASSIFICATION,//  get array element 
Groovy,WITHOUT_CLASSIFICATION,//  primitive type 
Groovy,WITHOUT_CLASSIFICATION,//  exception was thrown or we get wrong class 
Groovy,WITHOUT_CLASSIFICATION,//  it's a script 
Groovy,WITHOUT_CLASSIFICATION,//  if the match was multiline which we'll know if they span   multiple paragraph elements the mark it (this list was cleaned 
Groovy,WITHOUT_CLASSIFICATION,//  there must be five continuation bytes of the form 10xxxxxx   otherwise the following character is is not a valid UTF-8 construct 
Groovy,WITHOUT_CLASSIFICATION,// TODO: use pre-generated Object[] 
Groovy,WITHOUT_CLASSIFICATION,//  subsequent steps will bomb out but try to give some more friendly information first 
Groovy,WITHOUT_CLASSIFICATION,//  here we handle a.b++ and a++ 
Groovy,WITHOUT_CLASSIFICATION,// StyleConstants. 
Groovy,WITHOUT_CLASSIFICATION,//  visitOneNl     new lines are used by parser but are not created on the AST     they can be implied by the source code line/column information 
Groovy,WITHOUT_CLASSIFICATION,//    Level helpers   
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-3726: clear volatile transient modifiers so that they don't get applied to methods 
Groovy,WITHOUT_CLASSIFICATION,//  both classes do not represent interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  expect just one scope to be set on the way in but now also set higher levels of visibility 
Groovy,WITHOUT_CLASSIFICATION,//  add property setter 
Groovy,WITHOUT_CLASSIFICATION,//  if there is a user-defined methodNode add compiler error msg and continue 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String java.lang.Object)     */
Groovy,WITHOUT_CLASSIFICATION,//  end::jsr223_variables[] 
Groovy,WITHOUT_CLASSIFICATION,// params.length < args.length   we depend on the method selection having done a good    job before already so the only case for this here is that   all trailing arguments belong into the vargs array 
Groovy,WITHOUT_CLASSIFICATION,//  we're using a copy here because new extensions can be added during the "setup" phase 
Groovy,WITHOUT_CLASSIFICATION,//                 declarations.add((DeclarationExpression) expr); 
Groovy,WITHOUT_CLASSIFICATION,//  a six-bytes sequence was encountered 
Groovy,WITHOUT_CLASSIFICATION,//  printModifiers(out constructorNode.getModifiers()); 
Groovy,WITHOUT_CLASSIFICATION,//  We don't copy DGM methods to superclasses' indexes   The reason we can do that is particular set of DGM methods in use   if at some point we will define DGM method for some Groovy class or   for a class derived from such we will need to revise this condition.   It saves us a lot of space and some noticeable time 
Groovy,WITHOUT_CLASSIFICATION,//  in the script 
Groovy,WITHOUT_CLASSIFICATION,/*                  *  GROOVY-4585                 *  Handle backslash characters.                  */
Groovy,WITHOUT_CLASSIFICATION,//  end::bsf_variable_passing[] 
Groovy,WITHOUT_CLASSIFICATION,//  char c = (char) ... 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   FACTORY METHODS 
Groovy,WITHOUT_CLASSIFICATION,//  skip values() method and valueOf(String) 
Groovy,WITHOUT_CLASSIFICATION,//  on the inner class node itself private/protected are not allowed 
Groovy,WITHOUT_CLASSIFICATION,//  if we reach this point this means the interface is new 
Groovy,WITHOUT_CLASSIFICATION,//  standard chooser for cases if it is not a single method and if it is   not the standard closure. 
Groovy,WITHOUT_CLASSIFICATION,//  we are not at the end of the buffer 
Groovy,WITHOUT_CLASSIFICATION,//  load receiver if not static invocation   todo: fix inner class case 
Groovy,WITHOUT_CLASSIFICATION,// TODO: add support for super here too 
Groovy,WITHOUT_CLASSIFICATION,//  verify component type 
Groovy,WITHOUT_CLASSIFICATION,//  for methodMissing first parameter should be String type - to allow overriding of this method without   type String explicitly specified for first parameter (missing method name) - GROOVY-2951 
Groovy,WITHOUT_CLASSIFICATION,//  for each method defined in the class generate the appropriate delegation bytecode 
Groovy,WITHOUT_CLASSIFICATION,//  tag::bsf_apply[] 
Groovy,WITHOUT_CLASSIFICATION,//  value can be an object an array a number string boolean or null values 
Groovy,WITHOUT_CLASSIFICATION,//  to reach path which is equal to both paths 
Groovy,WITHOUT_CLASSIFICATION,//  Template not cached or the source file changed - compile new template! 
Groovy,WITHOUT_CLASSIFICATION,//  none if the direct interfaces match but we must check "upper" in the hierarchy 
Groovy,WITHOUT_CLASSIFICATION,//  create valueOf 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                     exception handling 
Groovy,WITHOUT_CLASSIFICATION,//  new let's strip everything up to and including the path separators 
Groovy,WITHOUT_CLASSIFICATION,/* BigInteger[12] */
Groovy,WITHOUT_CLASSIFICATION,//  Singleton 
Groovy,WITHOUT_CLASSIFICATION,//  TODO read mixins 
Groovy,WITHOUT_CLASSIFICATION,//  which is a really nice way of seeing the AST folding nodes etc 
Groovy,WITHOUT_CLASSIFICATION,//  T extends Object should just be printed as T 
Groovy,WITHOUT_CLASSIFICATION,//  DO NOTHING 
Groovy,WITHOUT_CLASSIFICATION,// extract the field name 
Groovy,WITHOUT_CLASSIFICATION,//  Script.class 
Groovy,WITHOUT_CLASSIFICATION,//  look for one of these:     import static MyClass.setProp [as setOtherProp]     import static MyClass.getProp [as getOtherProp] 
Groovy,WITHOUT_CLASSIFICATION,//  ignore methods that are not abstract and from Object 
Groovy,WITHOUT_CLASSIFICATION,//  some methods to avoid binary incompatibility - don't gain us a lot but gives the user 
Groovy,WITHOUT_CLASSIFICATION,//  nothing to do 
Groovy,WITHOUT_CLASSIFICATION,// restoring line breaks is important b/c of lack of semicolons 
Groovy,WITHOUT_CLASSIFICATION,//  translate offsets to lines 
Groovy,WITHOUT_CLASSIFICATION,//  stop at super and this 
Groovy,WITHOUT_CLASSIFICATION,//  simple (for now) decision on java or groovy   java 
Groovy,WITHOUT_CLASSIFICATION,//  add namedValues 
Groovy,WITHOUT_CLASSIFICATION,//  we trick ourselves here 
Groovy,WITHOUT_CLASSIFICATION,//  ignore the constructor that takes a Collection as an argument may not exist 
Groovy,WITHOUT_CLASSIFICATION,//  Invoke each task in the right order 
Groovy,WITHOUT_CLASSIFICATION,//  A.super.foo = ... 
Groovy,WITHOUT_CLASSIFICATION,//  now the finally only case but only if no catches 
Groovy,WITHOUT_CLASSIFICATION,//  object already has per instance meta class 
Groovy,WITHOUT_CLASSIFICATION,//  Get the current context classloader and save it on the stack 
Groovy,WITHOUT_CLASSIFICATION,//  perform additional type checking on arguments 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   TOKEN FACTORIES 
Groovy,WITHOUT_CLASSIFICATION,//  full match 
Groovy,WITHOUT_CLASSIFICATION,//  check if a getAt method can be found on the receiver 
Groovy,WITHOUT_CLASSIFICATION,//  Boolean based methods  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  prefer class if no recompilation 
Groovy,WITHOUT_CLASSIFICATION,//  Those member should stay protected so that subclasses may use different   cache keys as the ones used by this implementation 
Groovy,WITHOUT_CLASSIFICATION,//  static alias only for inner classes and must be at end of chain 
Groovy,WITHOUT_CLASSIFICATION,//  ranges don't contain other ranges 
Groovy,WITHOUT_CLASSIFICATION,//  second we must ensure that this method MUST be statically checked   for example in a mixed mode where only some methods are statically checked   we must not visit a method which used dynamic dispatch.   We do not check for an annotation because some other AST transformations 
Groovy,WITHOUT_CLASSIFICATION,//  ----------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7300 
Groovy,WITHOUT_CLASSIFICATION,//  continue normal tree walking 
Groovy,WITHOUT_CLASSIFICATION,//  a negative index will count backwards from the last column. 
Groovy,WITHOUT_CLASSIFICATION,//  if string length is odd then throw exception 
Groovy,WITHOUT_CLASSIFICATION,//  case of += -= /= ... 
Groovy,WITHOUT_CLASSIFICATION,//  jump to test the condition again 
Groovy,WITHOUT_CLASSIFICATION,// this means we have received a double backslash sequence  if this is followed by ${ or <% we output one backslash  and interpret the following sequences with groovy if followed by anything  else we output the two backslashes and continue as usual  
Groovy,WITHOUT_CLASSIFICATION,//  it's a static extension method 
Groovy,WITHOUT_CLASSIFICATION,//  For use by verify(). 
Groovy,WITHOUT_CLASSIFICATION,//  this may happen under Windows because getResource is case insensitive under that OS! 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.Closure#getParameterTypes()          */
Groovy,WITHOUT_CLASSIFICATION,// LOGME ignore the failure 
Groovy,WITHOUT_CLASSIFICATION,//  perhaps it's a meta-annotation e.g. jqwik @Example is annotated with @Property 
Groovy,WITHOUT_CLASSIFICATION,//  The scheduler for cooperative Multithreading 
Groovy,WITHOUT_CLASSIFICATION,//  or if there is already a @MapConstructor annotation 
Groovy,WITHOUT_CLASSIFICATION,//  new value is already on stack so nothing to do here 
Groovy,WITHOUT_CLASSIFICATION,//  should never happen 
Groovy,WITHOUT_CLASSIFICATION,//  then it is the common super type 
Groovy,WITHOUT_CLASSIFICATION,//  add missing method dispatcher 
Groovy,WITHOUT_CLASSIFICATION,//  statements 
Groovy,WITHOUT_CLASSIFICATION,//   PLUS        200    MINUS       201    MULTIPLY    202    DIV         203    INTDIV      204    MOD         203 
Groovy,WITHOUT_CLASSIFICATION,//  wrap up 
Groovy,WITHOUT_CLASSIFICATION,//  If set a reader on the current source file   The last line read from the current source file   The last line number read 
Groovy,WITHOUT_CLASSIFICATION,//  let's add a typesafe call method 
Groovy,WITHOUT_CLASSIFICATION,//  constructor 
Groovy,WITHOUT_CLASSIFICATION,//  visitEmptyStat ...     token type EMPTY_STAT obsolete and should be removed never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  Cannot add static compilation of init method because of GROOVY-7217 see example 2 of test case  AnnotationNode an = new AnnotationNode(TraitComposer.COMPILESTATIC_CLASSNODE);  initializer.addAnnotation(an);  cNode.addTransform(StaticCompileTransformation.class an); 
Groovy,WITHOUT_CLASSIFICATION,//  SAM = single public abstract method   if the class is not abstract there is no abstract method 
Groovy,WITHOUT_CLASSIFICATION,//  This handles byte short char and int 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   CONSTRUCTION AND DATA ACCESS 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                       type conversion    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  the owner of the property 
Groovy,WITHOUT_CLASSIFICATION,//  create constructor with a nested class as the first parameter creating one if necessary 
Groovy,WITHOUT_CLASSIFICATION,//  tabs with spaces (I hate tabs) 
Groovy,WITHOUT_CLASSIFICATION,//  ret contains the type specs what we now need is the type spec for the   current class. To get that we first apply the type parameters to the   current class and then use the type names of the current class to reset   the map. Example:     class A<VWX>{}     class B<T extends Number> extends A<TLongString> {}   first we have:    T->Number   we apply it to A<TLongString> -> A<NumberLongString>   resulting in:     V->NumberW->LongX->String 
Groovy,WITHOUT_CLASSIFICATION,//  try to find a static one 
Groovy,WITHOUT_CLASSIFICATION,//  Low surrogate 
Groovy,WITHOUT_CLASSIFICATION,//  the following fields are only used internally; there are no user-defined expressions of the same kind 
Groovy,WITHOUT_CLASSIFICATION,//  super class causing bridge methods for abstract methods in original class 
Groovy,WITHOUT_CLASSIFICATION,//  assume underscore variables are for the wrapper script 
Groovy,WITHOUT_CLASSIFICATION,//  Void.TYPE   Closure.class   GString.class   List.class   Map.class   Range.class  Pattern.class 
Groovy,WITHOUT_CLASSIFICATION,//  That means if the current class is not an InnerClassNode 
Groovy,WITHOUT_CLASSIFICATION,//  FileScanner is a Groovy utility 
Groovy,WITHOUT_CLASSIFICATION,//  |   ||   |   &   ^ 
Groovy,WITHOUT_CLASSIFICATION,//  call the script global function of the given name 
Groovy,WITHOUT_CLASSIFICATION,//  in master list of other phases and keep processing them for this phase. 
Groovy,WITHOUT_CLASSIFICATION,//  Return flipping times 
Groovy,WITHOUT_CLASSIFICATION,//  can't check volatile here as it doubles up with bridge 
Groovy,WITHOUT_CLASSIFICATION,//  to select the constructor we need also the number of   available constructors and the class we want to make 
Groovy,WITHOUT_CLASSIFICATION,//  use last one if we stored a character 
Groovy,WITHOUT_CLASSIFICATION,//  For compatibility ignore exceptions from getInputStream() call 
Groovy,WITHOUT_CLASSIFICATION,/*  unhandled types from from org.codehaus.groovy.syntax.Types    public static final int LOGICAL_OR                  = 162;   // ||    public static final int LOGICAL_AND                 = 164;   // &&    public static final int DIVIDE                      = 203;   // /    public static final int STAR_STAR                   = 206;   // **    public static final int POWER                       = STAR_STAR;   //        public static final int PLUS_EQUAL                  = 210;   // +=    public static final int MINUS_EQUAL                 = 211;   // -=    public static final int MULTIPLY_EQUAL              = 212;   // *=    public static final int DIVIDE_EQUAL                = 213;   // /=    public static final int INTDIV_EQUAL                = 214;   // \=    public static final int MOD_EQUAL                   = 215;   // %=    public static final int POWER_EQUAL                 = 216;   // **=    public static final int PLUS_PLUS                   = 250;   // ++    public static final int PREFIX_PLUS_PLUS            = 251;   // ++    public static final int POSTFIX_PLUS_PLUS           = 252;   // ++    public static final int PREFIX_PLUS                 = 253;   // +    public static final int MINUS_MINUS                 = 260;   // --    public static final int PREFIX_MINUS_MINUS          = 261;   // --    public static final int POSTFIX_MINUS_MINUS         = 262;   // --    public static final int PREFIX_MINUS                = 263;   // - (negation) */
Groovy,WITHOUT_CLASSIFICATION,//  print warnings if any 
Groovy,WITHOUT_CLASSIFICATION,//  also takes care of both \ and / depending on the host compiling environment 
Groovy,WITHOUT_CLASSIFICATION,//         Script script = new GroovyShell().parse(new File("src/test/groovy/xml/dom/NamespaceDOMTest.groovy"));  //        GroovyObject object = compile("src/test/groovy/xml/dom/NamespaceDOMTest.groovy");          script.invokeMethod("testXsdSchemaWithBuilderHavingAutoPrefix" null);      } 
Groovy,WITHOUT_CLASSIFICATION,//             int hashCode = 1; 
Groovy,WITHOUT_CLASSIFICATION,/*          * If no specific super class has been found and type fallback is an interface check if all arg classes          * implement it. If yes then that interface is the common type across arguments.          */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-9049: EncodingGroovyMethods.digest() truncates hashes over 128 bits starting with 0's 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see java.lang.Object#clone()          */
Groovy,WITHOUT_CLASSIFICATION,//  bind forward method 
Groovy,WITHOUT_CLASSIFICATION,//  wait for the threads to finish 
Groovy,WITHOUT_CLASSIFICATION,//  initialize resolver 
Groovy,WITHOUT_CLASSIFICATION,//  let custom factories be resolved first 
Groovy,WITHOUT_CLASSIFICATION,// toString == pattern 
Groovy,WITHOUT_CLASSIFICATION,//  Unexpected node type: a numeric literal found when expecting type: an identifier   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  first visit 
Groovy,WITHOUT_CLASSIFICATION,//  no default value 
Groovy,WITHOUT_CLASSIFICATION,/*      * Classes but not interfaces should have ACC_SUPER set     * See http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.6-300-D.2-5     * for what flags are allowed depending on the fact we are writing the inner class table     * or the class itself      */
Groovy,WITHOUT_CLASSIFICATION,//  Construct a simplistic key to support overloaded operations on the MBean. 
Groovy,WITHOUT_CLASSIFICATION,//         final Class[] argClasses = MetaClassHelper.convertToTypeArray(arguments);            unwrap(arguments); 
Groovy,WITHOUT_CLASSIFICATION,//  chain secondary exception 
Groovy,WITHOUT_CLASSIFICATION,//  we are at the first name part. This is the right most part.   If this part is in lower case then we do not need a class   check. other parts of the property expression will be tested   by a different method call to this method so foo.Bar.bar   can still be resolved to the class foo.Bar and the static   field bar. 
Groovy,WITHOUT_CLASSIFICATION,//  another instanceOf_not was before no need store vars 
Groovy,WITHOUT_CLASSIFICATION,//  AST transformations state data 
Groovy,WITHOUT_CLASSIFICATION,/*  duplicated with DateUtilExtensions utility method but we don't want the modules to depend on one another  */
Groovy,WITHOUT_CLASSIFICATION,//  For statement contains unexpected tokens. Possible attempt to use unsupported Java-style for loop. 
Groovy,WITHOUT_CLASSIFICATION,//  should not use a static variable because of possible changes to node metadata   which would be visible to other compilation units 
Groovy,WITHOUT_CLASSIFICATION,//  this should never ever happen while writing to a StringBuilderWriter 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4004: Clear the methods from the outer class so that they don't get duplicated in inner ones 
Groovy,WITHOUT_CLASSIFICATION,//  important for GROOVY-4344 
Groovy,WITHOUT_CLASSIFICATION,//  a 0-length type argument list means we face the diamond operator 
Groovy,WITHOUT_CLASSIFICATION,//  next entry to return   current slot 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5114 : if we have to choose between two methods   foo(Object[]) and foo(Object) and that the argument is an array type 
Groovy,WITHOUT_CLASSIFICATION,/*  = false  */
Groovy,WITHOUT_CLASSIFICATION,//  ignore the missing method exception   as it means no end() method is present 
Groovy,WITHOUT_CLASSIFICATION,//  Find either next array element or end of array while ignoring comments 
Groovy,WITHOUT_CLASSIFICATION,//  We need to guarantee that any existing reads of old Map can   proceed. So we cannot yet null out each bin. 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6590: wrap primitive types 
Groovy,WITHOUT_CLASSIFICATION,//  if there are no groovy statements between the enclosing Groovy tags   then read groovy statements in from a text file using the src attribute 
Groovy,WITHOUT_CLASSIFICATION,//  we must use the redirect node otherwise InnerClassNode would not have the "correct" type 
Groovy,WITHOUT_CLASSIFICATION,// WE USE THIS AS REUSABLE         
Groovy,WITHOUT_CLASSIFICATION,//  force Object super class 
Groovy,WITHOUT_CLASSIFICATION,//  define "owning" task as wrapper to avoid having tasks added to the target   but it needs to be an UnknownElement and no access is available from   task to its original UnknownElement  
Groovy,WITHOUT_CLASSIFICATION,//  simulate "Hello ${user}!" 
Groovy,WITHOUT_CLASSIFICATION,//  loop end 
Groovy,WITHOUT_CLASSIFICATION,//  execute fold: 
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralExtends     token type "extends" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,//  invokes the super class constructor 
Groovy,WITHOUT_CLASSIFICATION,// todo: this should parse... assertEquals("private static <T> void foo(List<T> list){}" pretty("private static <T> void foo(List<T> list){}")); 
Groovy,WITHOUT_CLASSIFICATION,//  no exception info for Groovy MetaMethods 
Groovy,WITHOUT_CLASSIFICATION,//  so the only possible return type is Object 
Groovy,WITHOUT_CLASSIFICATION,//  visit rcurly()     token type RCURLY only used inside parser never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  The AST node metadata has the flag that indicates that this method is a script body.   It may also be carrying data for other AST transforms. 
Groovy,WITHOUT_CLASSIFICATION,//  with the receiver type of the with method 
Groovy,WITHOUT_CLASSIFICATION,// GROOVY-4508 
Groovy,WITHOUT_CLASSIFICATION,//  if assignment succeeds but result type is not a subtype of original type then we are in a special cast handling   and we must update the result type 
Groovy,WITHOUT_CLASSIFICATION,//  this case always succeeds the result is a Matcher 
Groovy,WITHOUT_CLASSIFICATION,//  first collect closure shared variables and reinitialize types 
Groovy,WITHOUT_CLASSIFICATION,//  Groovy runtime without circumventing JVM access checks (see CachedMethod for example). 
Groovy,WITHOUT_CLASSIFICATION,/* boolean[0] */
Groovy,WITHOUT_CLASSIFICATION,//  cache no-arg constructor 
Groovy,WITHOUT_CLASSIFICATION,//  abort if explicit false found 
Groovy,WITHOUT_CLASSIFICATION,//  for x[a] += b we have the structure:     x = left(left(binExp))) b = right(binExp) a = right(left(binExp)))   for array set we need these values on stack: array index right    for array get we need these values on stack: array index   to eval the expression we need x[a] = x[a]+b   -> arraySet(xa x[a]+b)    -> arraySet(xa arrayGet(xab))   --> xa xa b as operands   --> load x load a DUP2 call arrayGet load b call operationcall arraySet   since we cannot DUP2 here easily we will save the subscript and DUP x   --> sub=a load x DUP load sub call arrayGet load b call operation load sub call arraySet 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   executing the getter method  ---------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  load Expressions 
Groovy,WITHOUT_CLASSIFICATION,//  calculate 
Groovy,WITHOUT_CLASSIFICATION,//  getResourceConnection() opening the inputstream let's ensure all streams are closed 
Groovy,WITHOUT_CLASSIFICATION,//  check if no superclass is defined 
Groovy,WITHOUT_CLASSIFICATION,//  FE   FF 
Groovy,WITHOUT_CLASSIFICATION,// the below being true indicates that we had an unterminated ${ or <% sequence and  the column is thus meaningless we reset it to where the %{ or <% starts to at 
Groovy,WITHOUT_CLASSIFICATION,/*  will do  */
Groovy,WITHOUT_CLASSIFICATION,//  retain legacy field (will be given lower precedence than above) 
Groovy,WITHOUT_CLASSIFICATION,//  no element so use emptyDefault 
Groovy,WITHOUT_CLASSIFICATION,//  let's see if we get a deadlock 
Groovy,WITHOUT_CLASSIFICATION,//  into something that can exist in the callsite context 
Groovy,WITHOUT_CLASSIFICATION,//  if left expression is a closure shared variable we should check it twice   see GROOVY-5874 
Groovy,WITHOUT_CLASSIFICATION,//  let's look for methods with 1 argument which matches the type of the   arguments 
Groovy,WITHOUT_CLASSIFICATION,/*          *  Damage must be overridden whenever the paint method is overridden         *  (The damaged area is the area the caret is painted in. We must         *  consider the area for the default caret and this caret)          */
Groovy,WITHOUT_CLASSIFICATION,//  The original code converted to decimal string this way: 
Groovy,WITHOUT_CLASSIFICATION,//  For a placeholder a type based on the generics type is used for the compatibility check to match on   the actual bounds and not the name of the placeholder. 
Groovy,WITHOUT_CLASSIFICATION,//  handle interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  if there isn't any argument we can make invocation faster using the cached constructor 
Groovy,WITHOUT_CLASSIFICATION,/*  if the map is null then we create it.  */
Groovy,WITHOUT_CLASSIFICATION,//  declared beans should just be available 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.MetaClass#getProperties()     */
Groovy,WITHOUT_CLASSIFICATION,//  the method which has been chosen is supposed to be a call on delegate or owner   so we store the information so that the static compiler may reuse it 
Groovy,WITHOUT_CLASSIFICATION,//  tag::jsr223_init[] 
Groovy,WITHOUT_CLASSIFICATION,//  determine composite result 
Groovy,WITHOUT_CLASSIFICATION,/*       * Parse the script contained in the GroovyCodeSource as a privileged operation (i.e. do not      * require the code source to have specific compile time permissions).  If the class produced is a      * TestCase run the test in a suite and evaluate against the missingPermission.      * Otherwise run the class as a groovy script and evaluate against the missingPermission.       */
Groovy,WITHOUT_CLASSIFICATION,//  visitFloatSuffix ... never visited/created see NUM_DOUBLE or NUM_FLOAT instead 
Groovy,WITHOUT_CLASSIFICATION,//             CachedMethod cachedMethod = methods[i]; 
Groovy,WITHOUT_CLASSIFICATION,//  set other optimizations options to false here 
Groovy,WITHOUT_CLASSIFICATION,//  visit receiver 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.Duration extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  workaround for GROOVY-6834: accessing a parameter which is not yet seen in scope 
Groovy,WITHOUT_CLASSIFICATION,//  to keep stack height put a null on stack 
Groovy,WITHOUT_CLASSIFICATION,//  if expr is of READONLY_PROPERTY_RETURN type then it means we are on a missing property 
Groovy,WITHOUT_CLASSIFICATION,//  null indicates a static method which may still need generics correction 
Groovy,WITHOUT_CLASSIFICATION,//  in case of null safe invocation it is possible that what was supposed to be a primitive type   becomes the "null" constant so we need to recheck 
Groovy,WITHOUT_CLASSIFICATION,//  if you are compiling the script because the JVM isn't executing the main method. 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6771 
Groovy,WITHOUT_CLASSIFICATION,//  we have two options:   (1) embed initExpr within holder class but redirect field access/method calls to declaring class members   (2) keep initExpr within a declaring class method that is only called by the holder class   currently we have gone with (2) for simplicity with only a slight memory footprint increase in the declaring class 
Groovy,WITHOUT_CLASSIFICATION,//  in the future the target will be wider than annotations but for now it is just on annotations 
Groovy,WITHOUT_CLASSIFICATION,/*  dist binary layout:    * 0-20: interface    * 21-22: primitive dist    * 23-43: object dist    * 44-48: vargs penalty     */
Groovy,WITHOUT_CLASSIFICATION,//  Must now be three more hex digits 
Groovy,WITHOUT_CLASSIFICATION,//  empty text 
Groovy,WITHOUT_CLASSIFICATION,//  helpful error? 
Groovy,WITHOUT_CLASSIFICATION,//  load this   load delegate   using InvokerHelper to allow potential intercepted calls 
Groovy,WITHOUT_CLASSIFICATION,//  multi-assignment 
Groovy,WITHOUT_CLASSIFICATION,//               CompileThread.addMethod(this);          } 
Groovy,WITHOUT_CLASSIFICATION,//  end ConsoleTextEditor.PrintAction 
Groovy,WITHOUT_CLASSIFICATION,//  override exists in the weaved class itself 
Groovy,WITHOUT_CLASSIFICATION,//  not a primitive type so call booleanUnbox 
Groovy,WITHOUT_CLASSIFICATION,/*  *** Not used yet. See comments in getScriptUri(HttpServletRequest). ***     * Servlet API include key name: request_uri      */
Groovy,WITHOUT_CLASSIFICATION,//  chop off the single quotes at start and end 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-2156 
Groovy,WITHOUT_CLASSIFICATION,//  return bais.withObjectInputStream(getClass().classLoader){ (<type>) it.readObject() } 
Groovy,WITHOUT_CLASSIFICATION,//  defaults to left 
Groovy,WITHOUT_CLASSIFICATION,//  and we can't find it 
Groovy,WITHOUT_CLASSIFICATION,//  Compute the appropriate capacity 
Groovy,WITHOUT_CLASSIFICATION,//  a default value exists we can skip this param 
Groovy,WITHOUT_CLASSIFICATION,// GROOVY-4285 
Groovy,WITHOUT_CLASSIFICATION,// cv.visitMethodInsn(INVOKESPECIAL innerClassinternalName "<init>" prototype + ")V"); 
Groovy,WITHOUT_CLASSIFICATION,//  all parameters of a method 
Groovy,WITHOUT_CLASSIFICATION,// check the script is currently valid before starting a server against the script 
Groovy,WITHOUT_CLASSIFICATION,//  GroovyObject interface 
Groovy,WITHOUT_CLASSIFICATION,//  testForInit() covered by testForCondition() 
Groovy,WITHOUT_CLASSIFICATION,//         }      } 
Groovy,WITHOUT_CLASSIFICATION,//  we load the array and create a list from it 
Groovy,WITHOUT_CLASSIFICATION,//  but visible as the surrounding class is imported and the inner class is public/protected static 
Groovy,WITHOUT_CLASSIFICATION,//  adjust for multiple levels of nesting if needed 
Groovy,WITHOUT_CLASSIFICATION,//  append ending SQL after last param. 
Groovy,WITHOUT_CLASSIFICATION,//  if something has been evicted do a clean-up 
Groovy,WITHOUT_CLASSIFICATION,/*                  * GROOVY-3161: initialize statements for explicitly declared static fields                 * inside an enum should come after enum values are initialized                  */
Groovy,WITHOUT_CLASSIFICATION,/*  less than space is a control char  */
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   listener method 
Groovy,WITHOUT_CLASSIFICATION,//  add all classpaths that compilation unit sees 
Groovy,WITHOUT_CLASSIFICATION,//    Requested script/template file has not been the target of a    RequestDispatcher.include(). Reconstruct its path from the request's   getServletPath() and getPathInfo() results. 
Groovy,WITHOUT_CLASSIFICATION,//       (     )     *     +          -     .     / 
Groovy,WITHOUT_CLASSIFICATION,/*          * Some drivers (Oracle classes12.zip) have difficulty resolving data         * type if setObject(null). We will modify the query to pass 'null' 'is         * null' and 'is not null'          */
Groovy,WITHOUT_CLASSIFICATION,//  if original Integer meta class 
Groovy,WITHOUT_CLASSIFICATION,//  gather and sort all unvisited AST nodes 
Groovy,WITHOUT_CLASSIFICATION,//  current label for continue 
Groovy,WITHOUT_CLASSIFICATION,//  avoid different case keys being added by explicit remove 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8090 handle generics varargs e.g. `U x = ...; Arrays.asList(x)`   we should connect the type of vararg(e.g. T is the type of T...) to the argument type 
Groovy,WITHOUT_CLASSIFICATION,//  true && false   a < b   this.&foo()    4 % 3   1 - 1   foo?.bar 
Groovy,WITHOUT_CLASSIFICATION,//  core access scope modifiers 
Groovy,WITHOUT_CLASSIFICATION,//  we know here that from!=to so a distance of 0 is never valid   get primitive type indexes 
Groovy,WITHOUT_CLASSIFICATION,//  if origBoolean and withoutCustomHandle 
Groovy,WITHOUT_CLASSIFICATION,//  if the file is in UTF-8 high order bytes must have a certain value in order to be valid 
Groovy,WITHOUT_CLASSIFICATION,//  package-level visibility for testing purposes (just usage/errors at this stage) 
Groovy,WITHOUT_CLASSIFICATION,//  BigInteger conversion is done by using the string representation 
Groovy,WITHOUT_CLASSIFICATION,//  ignore we'll throw e1 
Groovy,WITHOUT_CLASSIFICATION,//  in case we are not in a constructor we have an additional   object on the stack the result of our constructor call   which we want to keep so we swap with the dummy object and   do normal removal of it. In the end the call result will be   on the stack then 
Groovy,WITHOUT_CLASSIFICATION,//  consume argument 
Groovy,WITHOUT_CLASSIFICATION,//  Will store already created indents. 
Groovy,WITHOUT_CLASSIFICATION,//  change path representation to something more system independent. 
Groovy,WITHOUT_CLASSIFICATION,//  br using l2 as the 2nd param seems create the right table entry 
Groovy,WITHOUT_CLASSIFICATION,//  Simple getter 
Groovy,WITHOUT_CLASSIFICATION,//  handle different states for being on the left hand side 
Groovy,WITHOUT_CLASSIFICATION,//  Check for a single minus now rather than finding out later during lazy parsing. 
Groovy,WITHOUT_CLASSIFICATION,//  check whether closure shared variables refer to params with default values (GROOVY-5632) 
Groovy,WITHOUT_CLASSIFICATION,//  ex : def foos = ['a''b''c'] 
Groovy,WITHOUT_CLASSIFICATION,//  call(Object) 
Groovy,WITHOUT_CLASSIFICATION,//  set owner null here it will be updated by addField 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6112 : also copy acceptable Groovy transforms 
Groovy,WITHOUT_CLASSIFICATION,//  Style names 
Groovy,WITHOUT_CLASSIFICATION,//  Indexes to retrieve Class Property information 
Groovy,WITHOUT_CLASSIFICATION,//  another special case here where the bound is a "virtual" type   we must then check the superclass and the interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  int on stack 
Groovy,WITHOUT_CLASSIFICATION,// site 
Groovy,WITHOUT_CLASSIFICATION,/* Short[5] */
Groovy,WITHOUT_CLASSIFICATION,//  end of file   the unknown token 
Groovy,WITHOUT_CLASSIFICATION,//  no jump so -1 need to pop off surplus II 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovyParamTag[] paramTags() {/*todo*/return null;} 
Groovy,WITHOUT_CLASSIFICATION,//  <<=   >>=   >>>= 
Groovy,WITHOUT_CLASSIFICATION,//  extract the generics from the return type 
Groovy,WITHOUT_CLASSIFICATION,/*      further operations to be handled here maybe:    a / b a.div(b) (if one is double return double otherwise BD)    a[b]    a.getAt(b)    a[b] = c    a.putAt(b c)     */
Groovy,WITHOUT_CLASSIFICATION,//  possible getter/setter? 
Groovy,WITHOUT_CLASSIFICATION,//  boolean getter 
Groovy,WITHOUT_CLASSIFICATION,//  swallow and do as if no method is available 
Groovy,WITHOUT_CLASSIFICATION,//  no array so wrap it 
Groovy,WITHOUT_CLASSIFICATION,//  ||=   &&= 
Groovy,WITHOUT_CLASSIFICATION,/*  KeyStroke keyStroke =  */
Groovy,WITHOUT_CLASSIFICATION,//     public final Object callGetProperty (Object receiver) throws Throwable { 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-1262 
Groovy,WITHOUT_CLASSIFICATION,/*          * Handle empty elements like '<br/>' '<img/> or '<hr noshade="noshade"/>.          */
Groovy,WITHOUT_CLASSIFICATION,//  special guards for receiver 
Groovy,WITHOUT_CLASSIFICATION,//  check if there's a potential better match 
Groovy,WITHOUT_CLASSIFICATION,//  Set the context classloader back to what it was.  AccessController.doPrivileged(new DoSetContext(currentClassLoader)); 
Groovy,WITHOUT_CLASSIFICATION,//  recurse on them 
Groovy,WITHOUT_CLASSIFICATION,//  Do not use HashSet 
Groovy,WITHOUT_CLASSIFICATION,//  Copy the column values into a list of a list. 
Groovy,WITHOUT_CLASSIFICATION,//  ... generate list 
Groovy,WITHOUT_CLASSIFICATION,//  let's try getting the property on the first object 
Groovy,WITHOUT_CLASSIFICATION,//  look first for field with encoded modifier information 
Groovy,WITHOUT_CLASSIFICATION,//  any of those otherwise 
Groovy,WITHOUT_CLASSIFICATION,//  or Class typed variable 
Groovy,WITHOUT_CLASSIFICATION,// noinspection GroovyConditionalCanBeElvis 
Groovy,WITHOUT_CLASSIFICATION,//  The rewrite we do is causing some troubles with type checking which will   not be able to perform closure parameter type inference   so we store the replacement which will be done *after* type checking. 
Groovy,WITHOUT_CLASSIFICATION,//  check for local synthetics 
Groovy,WITHOUT_CLASSIFICATION,//  visitNls     new lines are used by parser but are not created on the AST     they can be implied by the source code line/column information 
Groovy,WITHOUT_CLASSIFICATION,//  reflective proxy generation since we need a ConvertedClosure but have only a normal Closure we need to create that wrapper object as well 
Groovy,WITHOUT_CLASSIFICATION,//  since there is no saving 
Groovy,WITHOUT_CLASSIFICATION,// isSetter 
Groovy,WITHOUT_CLASSIFICATION,//  remove surplus values 
Groovy,WITHOUT_CLASSIFICATION,//  Initialise with the identity mapping. 
Groovy,WITHOUT_CLASSIFICATION,//  In case of getting a ConstructedClassWithPackage here we do not do checks for partial   matches with imported classes. The ConstructedClassWithPackage is already a constructed 
Groovy,WITHOUT_CLASSIFICATION,//  try to continue even in case of error 
Groovy,WITHOUT_CLASSIFICATION,//  translate the graphics object back to reality in the y dimension 
Groovy,WITHOUT_CLASSIFICATION,//  visitColon ...     token type COLON never created/visited see LABELED_STAT FOR_IN_ITERABLE      ASSERT CASE QUESTION MAP_CONSTRUCTOR LABELED_ARG SPREAD_MAP_ARG 
Groovy,WITHOUT_CLASSIFICATION,//  there are three case for vargs   (1) varg part is left out (there's one less argument than there are parameters)   (2) last argument is put in the vargs array 
Groovy,WITHOUT_CLASSIFICATION,// The calls below require access to user.dir - allow here since getName() and getCodeSource() are 
Groovy,WITHOUT_CLASSIFICATION,//  @DelegatesTo.Target Obj foo 
Groovy,WITHOUT_CLASSIFICATION,//  no need to keep any of those on the operand stack   after this expression is processed the operand stack 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.MetaClass#addNewInstanceMethod(java.lang.reflect.Method)     */
Groovy,WITHOUT_CLASSIFICATION,/*  The values stored in the map.  */
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)        * @see java.io.Writer#close()         */
Groovy,WITHOUT_CLASSIFICATION,/*  The iterator over the FileSet objects  */
Groovy,WITHOUT_CLASSIFICATION,//  iterate over all interfaces to check if any corresponds to the bound we are   comparing to 
Groovy,WITHOUT_CLASSIFICATION,//  todo : other cases 
Groovy,WITHOUT_CLASSIFICATION,//  may happen if generic type is Foo<T extends Foo> and classnode is Foo -> Foo 
Groovy,WITHOUT_CLASSIFICATION,//         assertEquals("with (myObject) {x = 1}" pretty("with(myObject) {x = 1}")); // fails after parser // not in java      } 
Groovy,WITHOUT_CLASSIFICATION,//  visit init 
Groovy,WITHOUT_CLASSIFICATION,//  else IGNORE 
Groovy,WITHOUT_CLASSIFICATION,//  normalise index again to get positive index 
Groovy,WITHOUT_CLASSIFICATION,//  found an existing static method that is going to conflict with interface 
Groovy,WITHOUT_CLASSIFICATION,//  ignore taken care of in debug 
Groovy,WITHOUT_CLASSIFICATION,//  do not mix Class<Foo> with Foo 
Groovy,WITHOUT_CLASSIFICATION,//  now work on the buffer(s) 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------   class visit   ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  magic number much greater than current number of java tokens 
Groovy,WITHOUT_CLASSIFICATION,//  could be security io etc.  Ignore it.   End result is as if .exists() returned null 
Groovy,WITHOUT_CLASSIFICATION,//             System.err.println("e.getMessage() = " + e.getMessage()); 
Groovy,WITHOUT_CLASSIFICATION,//  make sure a new list is returned each time 
Groovy,WITHOUT_CLASSIFICATION,//  invokes the specified method/function on the given object. 
Groovy,WITHOUT_CLASSIFICATION,//  TODO : Parse pattern compile flags (literal names). 
Groovy,WITHOUT_CLASSIFICATION,//  stores the current binary expression. This is used when assignments are made with a null object for type 
Groovy,WITHOUT_CLASSIFICATION,//  enforce yield so we have something to interrupt 
Groovy,WITHOUT_CLASSIFICATION,//  the following code will basically do this:   Map<StringClosure> impl = Collections.singletonMap(method.getName()arg);   return ProxyGenerator.INSTANCE.instantiateAggregate(implCollections.singletonList(clazz));   TO_SAMTRAIT_PROXY is a handle (ObjectObjectProxyGeneratorClass)GroovyObject   where the second object is the input closure everything else   needs to be provide and is in remaining order: method name   ProxyGenerator.INSTANCE and singletonList(parameter) 
Groovy,WITHOUT_CLASSIFICATION,//  case A   we give a penalty for vargs since we have no direct   match for the last argument 
Groovy,WITHOUT_CLASSIFICATION,//  let's create a new expression 
Groovy,WITHOUT_CLASSIFICATION,/*                 * We override the MetaClass of this script object so that we can                * forward calls to global closures (of previous or future "eval" calls)                * This gives the illusion of working on the same "global" scope.                 */
Groovy,WITHOUT_CLASSIFICATION,//  to do this we first bind the values to #setBeanProperties 
Groovy,WITHOUT_CLASSIFICATION,//  reuse the full list of fields 
Groovy,WITHOUT_CLASSIFICATION,//  the casese true and null for a match are through the   remaining case is false and that means adding the method 
Groovy,WITHOUT_CLASSIFICATION,//  @Blue(foo=123)   a = b   a &= b   a |= b   a >>>= b   a ^= b   a <=> b   a /= b   a == b   a -= b   a %= b   a != b   a += b   a =~ b   a ==~ b   a <<= b   a >>= b   a *= b   x **= 3 
Groovy,WITHOUT_CLASSIFICATION,//  class only used to store setter information when an expression of type 
Groovy,WITHOUT_CLASSIFICATION,/*      * Cached unmodifiable List used for iteration. Any method that mutates     * the runnerMap must set to null to invalidate the cache. Volatile is     * used because reads for DCL are faster than a lock/unlock.     * The values are cached in order to speed up iteration and avoid     * allocation of new collections on each call to the iterator.      */
Groovy,WITHOUT_CLASSIFICATION,//  a.x = foo or x=foo is found and that it corresponds to a setter call 
Groovy,WITHOUT_CLASSIFICATION,//  check if constructor call expression makes use of the diamond operator 
Groovy,WITHOUT_CLASSIFICATION,/*  ElementType.IMPORT */
Groovy,WITHOUT_CLASSIFICATION,//  we have handle that takes no arguments to create the bean    we have to use its return value to call #setBeanProperties with it   and the meta class. 
Groovy,WITHOUT_CLASSIFICATION,//  8k 
Groovy,WITHOUT_CLASSIFICATION,//  change (receivercallsite) to (callsitereceiver) 
Groovy,WITHOUT_CLASSIFICATION,//  They'll get empty args since none exist in the context. 
Groovy,WITHOUT_CLASSIFICATION,//  Primitive type array methods  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Closure 
Groovy,WITHOUT_CLASSIFICATION,//  If there are no bounds the generic type is basically Object and everything is compatible. 
Groovy,WITHOUT_CLASSIFICATION,/*  FALL THROUGH  */
Groovy,WITHOUT_CLASSIFICATION,//  override standard engine with caching one 
Groovy,WITHOUT_CLASSIFICATION,//  does not specify ast transform class names or classes 
Groovy,WITHOUT_CLASSIFICATION,//  At this point we know that we have a match for pname. This may   mean that name[pname.length()..<-1] is a static inner class.   For this the rest of the name does not need any dots in its name.   It is either completely a inner static class or it is not.   Since we do not want to have useless lookups we create the name   completely and use a ConstructedClassWithPackage to prevent lookups against the package. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#getMetaMethods()      */
Groovy,WITHOUT_CLASSIFICATION,//  parent will care about when children perform 
Groovy,WITHOUT_CLASSIFICATION,//  <<   >>   >>> 
Groovy,WITHOUT_CLASSIFICATION,//  Simplify common case of {expr} to expr. 
Groovy,WITHOUT_CLASSIFICATION,//  we have here different generics contexts we have to deal with.   There is firstly the context given through the class and the method.   The method context may hide generics given through the class but use  
Groovy,WITHOUT_CLASSIFICATION,//  here we must check if the right number is short enough to fit in the left type 
Groovy,WITHOUT_CLASSIFICATION,//  treat the case Ant is run through Maven and 
Groovy,WITHOUT_CLASSIFICATION,/*      * Worker method for the {@link #escapeJavaScript(String)} method.     *      * @param out writer to receive the escaped string     * @param str String to escape values in may be null     * @param escapeSingleQuote escapes single quotes if <code>true</code>     * @param escapeForwardSlash TODO     * @throws IOException if an IOException occurs      */
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   ACTIONS 
Groovy,WITHOUT_CLASSIFICATION,//  boolean->boolean Boolean->boolean boolean->Boolean   is handled by compiler   that leaves (T)Z and (T)Boolean where T is the static type   but runtime type of T might be Boolean 
Groovy,WITHOUT_CLASSIFICATION,//      that case is handled above already when params and args have the same length 
Groovy,WITHOUT_CLASSIFICATION,//  TODO: pass printstream(s) down through process 
Groovy,WITHOUT_CLASSIFICATION,//  verify imports 
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Benchmarks Game   http://shootout.alioth.debian.org/   contributed by Stefan Krause   slightly modified by Chad Whipkey */
Groovy,WITHOUT_CLASSIFICATION,//  handle body 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6521: must set strategy to DELEGATE_FIRST otherwise writing   books = 'foo' in a template would store 'books' in the binding of the template script itself ("script")   instead of storing it in the delegate which is a Binding too 
Groovy,WITHOUT_CLASSIFICATION,//  we need to remove the leading "{" and trailing "}" 
Groovy,WITHOUT_CLASSIFICATION,//  parsing 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7812(#1): Static inner classes cannot be accessed from other files when running by 'groovy' command   if the type to resolve is an inner class and it is in an outer class which is not resolved   we set the resolved type to a placeholder class node i.e. a ConstructedOuterNestedClass instance 
Groovy,WITHOUT_CLASSIFICATION,//  create unit vector 
Groovy,WITHOUT_CLASSIFICATION,//  We need to get the input stream and close it to force the open   file descriptor to be released. Otherwise we will reach the limit   for number of files open at one time. 
Groovy,WITHOUT_CLASSIFICATION,//  these are packages in the call stack that are only part of the groovy MOP 
Groovy,WITHOUT_CLASSIFICATION,//  apply the verifier to have the property nodes generated 
Groovy,WITHOUT_CLASSIFICATION,// Void.class 
Groovy,WITHOUT_CLASSIFICATION,//  Quick method for scalars. 
Groovy,WITHOUT_CLASSIFICATION,//  safe is not necessary here because "super" is always not null   but keeping the flag would trigger a VerifyError (see GROOVY-6045) 
Groovy,WITHOUT_CLASSIFICATION,//  launch threads each one instantiating the scriptClass and running   it numIter times 
Groovy,WITHOUT_CLASSIFICATION,// TODO: set sender class 
Groovy,WITHOUT_CLASSIFICATION,//  add inferred type information 
Groovy,WITHOUT_CLASSIFICATION,/*  3: double  */
Groovy,WITHOUT_CLASSIFICATION,//  Unexpected node type: '.' found when expecting type: an identifier   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  check that a setter also exists 
Groovy,WITHOUT_CLASSIFICATION,//  add static property missing setter dispatcher 
Groovy,WITHOUT_CLASSIFICATION,//    SPECIAL TOKENS 
Groovy,WITHOUT_CLASSIFICATION,//  methods from GroovyClassDoc 
Groovy,WITHOUT_CLASSIFICATION,//  mop methods are helper for this and super calls and do direct calls 
Groovy,WITHOUT_CLASSIFICATION,//  start a block catching any Exception 
Groovy,WITHOUT_CLASSIFICATION,//  assume closures have only 1 constructor of the form (Object Reference*) 
Groovy,WITHOUT_CLASSIFICATION,//  Multiply by 127 (quickly via shifts) and mix in some high   bits to help guard against bunching of codes that are   consecutive or equally spaced. 
Groovy,WITHOUT_CLASSIFICATION,//  false is default so something to do only in true case 
Groovy,WITHOUT_CLASSIFICATION,//  unicode now contains the four hex digits   which represents our unicode character 
Groovy,WITHOUT_CLASSIFICATION,//  visit semi()    SEMI only used inside parser never visited/created (see visitForCondition() visitForIterator()) 
Groovy,WITHOUT_CLASSIFICATION,//  8K 
Groovy,WITHOUT_CLASSIFICATION,//  Clone all remaining nodes 
Groovy,WITHOUT_CLASSIFICATION,//  length of s   length of t 
Groovy,WITHOUT_CLASSIFICATION,//  TODO: set sender class 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6021 
Groovy,WITHOUT_CLASSIFICATION,//  this is a corner case you should not   compare two class nodes if one of them is null 
Groovy,WITHOUT_CLASSIFICATION,//  set the properties  noinspection unchecked 
Groovy,WITHOUT_CLASSIFICATION,//         }          return (Double) primitiveArrayPut(array idx newValue);      } 
Groovy,WITHOUT_CLASSIFICATION,//  all arg classes implement interface fallback so use that as the array component type 
Groovy,WITHOUT_CLASSIFICATION,//  --> results in XOR 
Groovy,WITHOUT_CLASSIFICATION,//  args will be replaced 
Groovy,WITHOUT_CLASSIFICATION,//  --------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  The mapping only affects the contents of the data rows.   Pass all requests to these rows through the mapping array: "indexes". 
Groovy,WITHOUT_CLASSIFICATION,//  generic fallback to castToType 
Groovy,WITHOUT_CLASSIFICATION,//  remove each individual item from left side of Li2 and 
Groovy,WITHOUT_CLASSIFICATION,//    Create the file and write out the data 
Groovy,WITHOUT_CLASSIFICATION,//  allow any internal number that is not a floating point one 
Groovy,WITHOUT_CLASSIFICATION,//  reading the content of the file within a char buffer   allow to keep the correct line endings 
Groovy,WITHOUT_CLASSIFICATION,//  since Groovy 2.2 it is possible to use FQCN for type checking extension scripts 
Groovy,WITHOUT_CLASSIFICATION,//  static inner classes don't need this$0 
Groovy,WITHOUT_CLASSIFICATION,//         }          return (Short) primitiveArrayPut(array idx newValue);      }        public static Integer putAt(int[] array int idx Object newValue) { 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7333: filter out Object 
Groovy,WITHOUT_CLASSIFICATION,/* byte[2] */
Groovy,WITHOUT_CLASSIFICATION,//  If the source is already open and is passed the line we   want close it. 
Groovy,WITHOUT_CLASSIFICATION,//  nothing else to do here 
Groovy,WITHOUT_CLASSIFICATION,// remove the leading / as we are trying with a leading / now 
Groovy,WITHOUT_CLASSIFICATION,//     private MethodVisitor mv; 
Groovy,WITHOUT_CLASSIFICATION,//  same class is always allowed access 
Groovy,WITHOUT_CLASSIFICATION,//  recalculate in case we have already done some stripping 
Groovy,WITHOUT_CLASSIFICATION,//  visitForEachClause ...      FOR_EACH_CLAUSE obsolete and should be removed never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  will take care of the rest 
Groovy,WITHOUT_CLASSIFICATION,//  check upper bound(s) 
Groovy,WITHOUT_CLASSIFICATION,// expect to get the elementType 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8002: propagate position to (possibly new) method expression 
Groovy,WITHOUT_CLASSIFICATION,/*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Jarkko Miettinen */
Groovy,WITHOUT_CLASSIFICATION,//  cost 
Groovy,WITHOUT_CLASSIFICATION,//  let's create a default 'it' parameter 
Groovy,WITHOUT_CLASSIFICATION,//  we are in a case of a type inference failure probably because code was generated   it is better to avoid using this 
Groovy,WITHOUT_CLASSIFICATION,//  Check for each property 
Groovy,WITHOUT_CLASSIFICATION,//  first fetch the constructor taking String[] as parameter 
Groovy,WITHOUT_CLASSIFICATION,// mv.visitInsn(ACONST_NULL);  stack.replace(OBJECT_TYPE); 
Groovy,WITHOUT_CLASSIFICATION,//  do call only for final classes and primitive types 
Groovy,WITHOUT_CLASSIFICATION,//  store last row update count for executeUpdate executeInsert and execute 
Groovy,WITHOUT_CLASSIFICATION,// String pcsFieldName = "this$propertyChangeSupport"; 
Groovy,WITHOUT_CLASSIFICATION,//  clean the tree by ensuring multi line styles are reset in area   of parsing 
Groovy,WITHOUT_CLASSIFICATION,//  res stores the first found abstract method 
Groovy,WITHOUT_CLASSIFICATION,//  ... initialise 
Groovy,WITHOUT_CLASSIFICATION,// extract the place holders 
Groovy,WITHOUT_CLASSIFICATION,//  the cached hasNext call value 
Groovy,WITHOUT_CLASSIFICATION,//  Could be null if there are no errors 
Groovy,WITHOUT_CLASSIFICATION,//  Check parent classloader keep the exception for future use 
Groovy,WITHOUT_CLASSIFICATION,/*                  * Handle raw new line characters.                  */
Groovy,WITHOUT_CLASSIFICATION,/*              The _only_ special escaping this template engine allows is to escape the sequences:             ${ and <% and potential slashes in front of these. Escaping in any other sections of the             source string is ignored. The following is a source -> result mapping of a few values assume a             binding of [alice: 'rabbit'].             Note: we don't do java escaping of slashes in the below             example i.e. the source string is what you would see in a text editor when looking at your template             file:              source string     result             'bob'            -> 'bob'             '\bob'           -> '\bob'             '\\bob'          -> '\\bob'             '${alice}'       -> 'rabbit'             '\${alice}'      -> '${alice}'             '\\${alice}'     -> '\rabbit'             '\\$bob'         -> '\\$bob'             '\\'             -> '\\'             '\\\'             -> '\\\'             '%<= alice %>'   -> 'rabbit'             '\%<= alice %>'  -> '%<= alice %>'              */
Groovy,WITHOUT_CLASSIFICATION,/*  8: bool    */
Groovy,WITHOUT_CLASSIFICATION,//             char c = s.charAt(0); 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   TYPE SUGAR 
Groovy,WITHOUT_CLASSIFICATION,//  receivers 
Groovy,WITHOUT_CLASSIFICATION,//     public int fastHashCode() { 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise latest position in line not part of mlr 
Groovy,WITHOUT_CLASSIFICATION,//  load the exception and rethrow it 
Groovy,WITHOUT_CLASSIFICATION,//  but add empty body for setter for legacy compatibility 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7783 use Set for O(1) performance for contains 
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Shootouthttp://shootout.alioth.debian.org/contributed by Alkis Evlogimenos */
Groovy,WITHOUT_CLASSIFICATION,//  returns from a closure or method   if   else   do loop   while loop   for loop 
Groovy,WITHOUT_CLASSIFICATION,//  set all the actions 
Groovy,WITHOUT_CLASSIFICATION,//  boolean truth   boolean false   missing instance 
Groovy,WITHOUT_CLASSIFICATION,/*          * Bind request header key-value hash map.          */
Groovy,WITHOUT_CLASSIFICATION,//  Maybe this type belongs in the same package as the node that is doing the   static import. In that case the package may not have been explicitly specified.   Try with the node's package too. If still not found revert to original type name. 
Groovy,WITHOUT_CLASSIFICATION,//  add the first/last element being always the default value 
Groovy,WITHOUT_CLASSIFICATION,//  end position in document 
Groovy,WITHOUT_CLASSIFICATION,//  the returned node is DummyNode<Param1 Param2 Param3 ...) 
Groovy,WITHOUT_CLASSIFICATION,//  copy annotations from field to legacy dummy field 
Groovy,WITHOUT_CLASSIFICATION,//  add method: void removePropertyChangeListener(name listener) 
Groovy,WITHOUT_CLASSIFICATION,//  compare a list shorter than the range 
Groovy,WITHOUT_CLASSIFICATION,//  fall through and let the URL be null 
Groovy,WITHOUT_CLASSIFICATION,//  use evaluate to pass in the BSF variables 
Groovy,WITHOUT_CLASSIFICATION,//             addError("Annotation " + MY_TYPE_NAME + " member 'value' should be a class literal." value);              return;          } 
Groovy,WITHOUT_CLASSIFICATION,//  everything in this package 
Groovy,WITHOUT_CLASSIFICATION,//  end::jsr223_basic[] 
Groovy,WITHOUT_CLASSIFICATION,//  command pattern implementation classes  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  Li3 must now be empty 
Groovy,WITHOUT_CLASSIFICATION,//  Temporary file - delete on exit create (assured unique name). 
Groovy,WITHOUT_CLASSIFICATION,//  maybe we are looking for a setter ? 
Groovy,WITHOUT_CLASSIFICATION,//  package-privates 
Groovy,WITHOUT_CLASSIFICATION,//  create switch targets 
Groovy,WITHOUT_CLASSIFICATION,//  a high order bit was encountered thus the encoding is not US-ASCII   it may be either an 8-bit encoding or UTF-8 
Groovy,WITHOUT_CLASSIFICATION,// throw a runtime exception if conversion would be out-of-range for the type. 
Groovy,WITHOUT_CLASSIFICATION,//  Here we instantiate objects representing MetaMethods for DGM methods.   Calls for such meta methods done without reflection so more effectively. 
Groovy,WITHOUT_CLASSIFICATION,//  And now the real init work... 
Groovy,WITHOUT_CLASSIFICATION,//  first find the state defining the label. That is the state   directly after the state not knowing this label. If no state   in the list knows that label then the defining state is the   current state. 
Groovy,WITHOUT_CLASSIFICATION,//  fall back to some defaults 
Groovy,WITHOUT_CLASSIFICATION,//  when resolving prop or field reference 
Groovy,WITHOUT_CLASSIFICATION,//  the number of arguments is too big wrap all exceeding elements   in an array but keep the old elements that are no vargs 
Groovy,WITHOUT_CLASSIFICATION,//  look into the compile unit if there is a class with that name 
Groovy,WITHOUT_CLASSIFICATION,//  if alignment target is a wildcard type   then we must make best effort to return a parameterized   wildcard 
Groovy,WITHOUT_CLASSIFICATION,//  visit arguments as array index 
Groovy,WITHOUT_CLASSIFICATION,//  skip 
Groovy,WITHOUT_CLASSIFICATION,//  visit RegexpCtorEnd   visit RegexpLiteral   visit RegexpSymbol      token types REGEXP_CTOR_END REGEXP_LITERAL REGEXP_SYMBOL only used inside lexer 
Groovy,WITHOUT_CLASSIFICATION,//  Methods from GroovyDoc 
Groovy,WITHOUT_CLASSIFICATION,//  StackOverflow prevention 
Groovy,WITHOUT_CLASSIFICATION,//  start threads   wait for them to complete 
Groovy,WITHOUT_CLASSIFICATION,//  register with server 
Groovy,WITHOUT_CLASSIFICATION,//  last resort look in the category 
Groovy,WITHOUT_CLASSIFICATION,//  use the generics information from the Closure to further specify the type 
Groovy,WITHOUT_CLASSIFICATION,//  message 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6903: May happen in some special environment like under Android due   to classloading issues 
Groovy,WITHOUT_CLASSIFICATION,//  not found  
Groovy,WITHOUT_CLASSIFICATION,//  dynamic properties 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                field handling super: get    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,// Check for transposition 
Groovy,WITHOUT_CLASSIFICATION,//  modelled very closely on the commons lang StringUtils replaceEach method 
Groovy,WITHOUT_CLASSIFICATION,//  remove place holder underscore before starting 
Groovy,WITHOUT_CLASSIFICATION,// todo        assertEquals("myMethod(int i = 0; i++; i < 10)" pretty("myMethod(int i=0;i++;i<10)")); // not in java 
Groovy,WITHOUT_CLASSIFICATION,/*          * Creates a new instance of LexerNode           */
Groovy,WITHOUT_CLASSIFICATION,//  visit body 
Groovy,WITHOUT_CLASSIFICATION,//  remove all multiples of prime: i 
Groovy,WITHOUT_CLASSIFICATION,//  Not a macro call 
Groovy,WITHOUT_CLASSIFICATION,//  first parameters as usual 
Groovy,WITHOUT_CLASSIFICATION,//  only print parenthesis if is not of form def x = new int[5] 
Groovy,WITHOUT_CLASSIFICATION,//  Binary expressions 
Groovy,WITHOUT_CLASSIFICATION,//  invoke overridden toString closure method 
Groovy,WITHOUT_CLASSIFICATION,//  Expect a comma for an upcoming value   or a closing bracket for the end of the array 
Groovy,WITHOUT_CLASSIFICATION,//  invoke overridden equals closure method 
Groovy,WITHOUT_CLASSIFICATION,//  This is an arbitrary value picked as a reasonable choice for a precision 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  fill it up path with parts which were not equal 
Groovy,WITHOUT_CLASSIFICATION,//  potentially allow Collection coercion for a constructor 
Groovy,WITHOUT_CLASSIFICATION,//  <2 because foo() is same as foo(null) 
Groovy,WITHOUT_CLASSIFICATION,/* todo */
Groovy,WITHOUT_CLASSIFICATION,//  When the outer class is resolved all inner classes are resolved too 
Groovy,WITHOUT_CLASSIFICATION,//             name = "java/lang/Object";          } 
Groovy,WITHOUT_CLASSIFICATION,//  Prepare a list to contain the auto-generated column   values and then fetch them from the statement. 
Groovy,WITHOUT_CLASSIFICATION,//  initialize the PRINT_PANE (need this so that wrapping 
Groovy,WITHOUT_CLASSIFICATION,//  do not generate bytecode for private methods 
Groovy,WITHOUT_CLASSIFICATION,//  any bare string data 
Groovy,WITHOUT_CLASSIFICATION,//  need to visit even if we only look for a setters for compatibility 
Groovy,WITHOUT_CLASSIFICATION,//  remove and replace the delete action to another spot so ctrl H later   on is strictly for showing the find & replace dialog 
Groovy,WITHOUT_CLASSIFICATION,//  ignore the missing method exception   as it means no begin() method is present 
Groovy,WITHOUT_CLASSIFICATION,//  metaClass is invalid 
Groovy,WITHOUT_CLASSIFICATION,//  Below are registered as module extension classes              DateUtilExtensions.class              DateTimeStaticExtensions.class              DateTimeExtensions.class              SqlExtensions.class              SwingGroovyMethods.class              XmlGroovyMethods.class              NioGroovyMethods.class 
Groovy,WITHOUT_CLASSIFICATION,//  Catch any statements not followed by ; 
Groovy,WITHOUT_CLASSIFICATION,//  Let the thread exit. 
Groovy,WITHOUT_CLASSIFICATION,//  '7' '8' '9' ':' ';' 
Groovy,WITHOUT_CLASSIFICATION,//  automatically output the result of each script 
Groovy,WITHOUT_CLASSIFICATION,// All args have to be boxed since argumentTypes is always boxed 
Groovy,WITHOUT_CLASSIFICATION,//  range may still be reversed this value is ignored for inclusive-aware ranges 
Groovy,WITHOUT_CLASSIFICATION,//  AIC are already done doing them here again will lead to wrong scopes 
Groovy,WITHOUT_CLASSIFICATION,//  fall through and attempt other search strategies 
Groovy,WITHOUT_CLASSIFICATION,//  output AST in format suitable for opening in http://freemind.sourceforge.net   which is a really nice way of seeing the AST folding nodes etc   uppercase to hide from jarjar 
Groovy,WITHOUT_CLASSIFICATION,//  working variables 
Groovy,WITHOUT_CLASSIFICATION,//  the supplied AST was null 
Groovy,WITHOUT_CLASSIFICATION,//  defines the first variable index usable after 
Groovy,WITHOUT_CLASSIFICATION,//  for compatibility with the legacy proxy generator we should throw an UnsupportedOperationException   instead of an AbtractMethodException 
Groovy,WITHOUT_CLASSIFICATION,//  This is a home-grown implementation which we have not had time   to research - it may perform poorly in some circumstances. It   requires twice the space of an in-place algorithm and makes   NlogN assignments shuttling the values between the two   arrays. The number of compares appears to vary between N-1 and   NlogN depending on the initial order but the main reason for 
Groovy,WITHOUT_CLASSIFICATION,//  (a=1; a<10; a++)   abc   abc   <String Object>   "foo${bar}wibble"   class Foo<T extends F>   class Foo<T>   class Foo<T extends F> 
Groovy,WITHOUT_CLASSIFICATION,//   -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//    NOTE: This piece of code is heavily inspired by Apaches Jasper2!      http://cvs.apache.org/viewcvs.cgi/jakarta-tomcat-jasper/jasper2/ \          src/share/org/apache/jasper/servlet/JspServlet.java?view=markup     Why doesn't it use request.getRequestURI() or INC_REQUEST_URI?   
Groovy,WITHOUT_CLASSIFICATION,//  no explicit locale in the template path or resource not found   fallback to the default configuration locale 
Groovy,WITHOUT_CLASSIFICATION,//  There is no-where else to put this.   Add a mouse listener to the Table to trigger a table sort 
Groovy,WITHOUT_CLASSIFICATION,//  br to leave a copy of rvalue on the stack. see also isPopRequired() 
Groovy,WITHOUT_CLASSIFICATION,//         Class[] argClasses = MetaClassHelper.convertToTypeArray(arguments); 
Groovy,WITHOUT_CLASSIFICATION,//  stack: closuretypetypeclosure 
Groovy,WITHOUT_CLASSIFICATION,//  ternary operator 
Groovy,WITHOUT_CLASSIFICATION,//  fall back to creation 
Groovy,WITHOUT_CLASSIFICATION,//    Strip off any type specifier and convert it to lower   case if present. 
Groovy,WITHOUT_CLASSIFICATION,//  def bais = new ByteArrayInputStream(baos.toByteArray()) 
Groovy,WITHOUT_CLASSIFICATION,/*       * Execute the groovy script contained in file.  If missingPermission      * is non-null then this invocation expects an AccessControlException with missingPermission      * as the reason.  If missingPermission is null the script is expected to execute successfully.       */
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setErrorHandler(org.xml.sax.ErrorHandler)     */
Groovy,WITHOUT_CLASSIFICATION,//  int value = 0; 
Groovy,WITHOUT_CLASSIFICATION,/*  fix for GROOVY-5809  */
Groovy,WITHOUT_CLASSIFICATION,//  only show the file name and its extension like javac does in its stacktraces rather than the full path 
Groovy,WITHOUT_CLASSIFICATION,// object.invokeMethod("testInject" null); 
Groovy,WITHOUT_CLASSIFICATION,//  can't check volatile here as it doubles up with bridge  private static final String EXPECTED_VOLATILE_METHOD_ERROR_MESSAGE = 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.GroovyObject#getMetaClass()       */
Groovy,WITHOUT_CLASSIFICATION,//  integer overflow cases 
Groovy,WITHOUT_CLASSIFICATION,//  process sockets 
Groovy,WITHOUT_CLASSIFICATION,//                 // can't access the field directly but there may be a getter                  mp = null;              } 
Groovy,WITHOUT_CLASSIFICATION,//  private bridge methods already added 
Groovy,WITHOUT_CLASSIFICATION,//  no interface in common 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setFeature(java.lang.String boolean)     */
Groovy,WITHOUT_CLASSIFICATION,//  add static property missing getter dispatcher 
Groovy,WITHOUT_CLASSIFICATION,//  prefer primitive type over boxed type 
Groovy,WITHOUT_CLASSIFICATION,/* | ACC_STATIC */
Groovy,WITHOUT_CLASSIFICATION,//  Helper methods  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  the document segment 
Groovy,WITHOUT_CLASSIFICATION,//  we use a map in addition to the internal caching mechanism of Groovy because the latter   will always read from the URL even if it's cached 
Groovy,WITHOUT_CLASSIFICATION,//  for binary compatibility only don't use or override this 
Groovy,WITHOUT_CLASSIFICATION,//  Map to store cached classes 
Groovy,WITHOUT_CLASSIFICATION,//  fallback 
Groovy,WITHOUT_CLASSIFICATION,//  normal mode with different paths   important is to not to have a fastpathblock here   otherwise the per expression statement improvement    is impossible 
Groovy,WITHOUT_CLASSIFICATION,/*  * TODO share some code with {@link org.codehaus.groovy.transform.stc.StaticTypeCheckingSupport.ExtensionMethodCache} * * @since 2.5.0  */
Groovy,WITHOUT_CLASSIFICATION,/*         The use of volatile for value field ensures that       we can detect status changes without synchronization.       The other fields are never changed and are       marked as final.      */
Groovy,WITHOUT_CLASSIFICATION,//      sp     !     "     #     $     %     &     ' 
Groovy,WITHOUT_CLASSIFICATION,//  add a new invoke 
Groovy,WITHOUT_CLASSIFICATION,// There is not requirement to escape solidus so we will not.                          case '/':                              _buffer[_location] = '\\';                              _location ++;                              _buffer[_location] =  '/';                              _location ++;                              break; 
Groovy,WITHOUT_CLASSIFICATION,//  array access 
Groovy,WITHOUT_CLASSIFICATION,// file does not exist! 
Groovy,WITHOUT_CLASSIFICATION,//  we can get actual parameters directly 
Groovy,WITHOUT_CLASSIFICATION,//  visit increment 
Groovy,WITHOUT_CLASSIFICATION,//  Create a dummy ModuleNode to represent a failed parse - in case a later phase attempts to use the ast 
Groovy,WITHOUT_CLASSIFICATION,// import is like "import Foo as Bar" 
Groovy,WITHOUT_CLASSIFICATION,//  sort interfaces so that we may ensure a deterministic behaviour in case of   ambiguous fields (class implementing two interfaces using the same field) 
Groovy,WITHOUT_CLASSIFICATION,// ended fix column value 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: echo.javav 1.1 2004-05-22 07:57:50 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   author: Dirus@programmer.net 
Groovy,WITHOUT_CLASSIFICATION,//  A fast-path containment check 
Groovy,WITHOUT_CLASSIFICATION,//  2.5.3 and above gets from annotation attribute otherwise self 
Groovy,WITHOUT_CLASSIFICATION,// runTest("tree/NestedClosureBugTest.groovy"); 
Groovy,WITHOUT_CLASSIFICATION,//  This class provides a doubly-linked list that is optimized for the virtual   machine. The first and last elements are manipulated instead of a slightly   more convenient sentinel element to avoid the insertion of null checks with   NullPointerException throws in the byte code. The links to a removed   element are cleared to help a generational garbage collector if the   discarded elements inhabit more than one generation. 
Groovy,WITHOUT_CLASSIFICATION,//    Temp code to ignore wrapped parameters   The New MOP will deal with these properly   
Groovy,WITHOUT_CLASSIFICATION,//  maybe we can infer the component type 
Groovy,WITHOUT_CLASSIFICATION,// ClassLoader currentClassLoader = thread.getContextClassLoader(); 
Groovy,WITHOUT_CLASSIFICATION,//  check if we can create a URL from that URI 
Groovy,WITHOUT_CLASSIFICATION,//  $len = array.length 
Groovy,WITHOUT_CLASSIFICATION,/*  The Ant project  */
Groovy,WITHOUT_CLASSIFICATION,//  no comparison possible 
Groovy,WITHOUT_CLASSIFICATION,//  Unknown type: ENUM_DEF   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  left hand side of an assignment : map['foo'] = ... 
Groovy,WITHOUT_CLASSIFICATION,//  The URL from which we produce Readers. 
Groovy,WITHOUT_CLASSIFICATION,//  *very* defensive... 
Groovy,WITHOUT_CLASSIFICATION,//  this map is used to ensure that two errors are not reported on the same line/column 
Groovy,WITHOUT_CLASSIFICATION,//  13! won't fit into int 
Groovy,WITHOUT_CLASSIFICATION,//  Declare the loop counter. 
Groovy,WITHOUT_CLASSIFICATION,//  check for star imports (import static pkg.Outer.*) matching static inner classes 
Groovy,WITHOUT_CLASSIFICATION,//  load "this" 
Groovy,WITHOUT_CLASSIFICATION,/*      * Get the Class Properties of the object under inspection.     *     * @return String array to be indexed by the CLASS_xxx_IDX constants      */
Groovy,WITHOUT_CLASSIFICATION,//  as anything can be assigned to a String Class or boolean return the left type instead 
Groovy,WITHOUT_CLASSIFICATION,//  record the transforms found in the first scan so that in the 2nd scan phase operations  
Groovy,WITHOUT_CLASSIFICATION,//  Write out size (number of Mappings) 
Groovy,WITHOUT_CLASSIFICATION,//  case length ==0 handled already   we have now two cases   the argument is wrapped in the vargs array or   the argument is an array that can be used for the vargs part directly   we test only the wrapping part since the non wrapping is done already 
Groovy,WITHOUT_CLASSIFICATION,//  add empty default constructor 
Groovy,WITHOUT_CLASSIFICATION,//  can happen for compiler rewritten code where type information is missing 
Groovy,WITHOUT_CLASSIFICATION,//  just a dummy for later 
Groovy,WITHOUT_CLASSIFICATION,//  in case if verifier visited the call already 
Groovy,WITHOUT_CLASSIFICATION,// should be SQLFeatureNotSupportedException instead once we move to Java 1.6 
Groovy,WITHOUT_CLASSIFICATION,//  throw original 
Groovy,WITHOUT_CLASSIFICATION,/* <MenuElement> */
Groovy,WITHOUT_CLASSIFICATION,// All nulls have to be wrapped so that they can be compared 
Groovy,WITHOUT_CLASSIFICATION,//  ++ ! etc.   ++ etc.   + - = etc.   + -   prefix + prefix - 
Groovy,WITHOUT_CLASSIFICATION,//  pick best fit 
Groovy,WITHOUT_CLASSIFICATION,//  remove the boolean from the operand stack tracker 
Groovy,WITHOUT_CLASSIFICATION,//  trait defined in same source unit 
Groovy,WITHOUT_CLASSIFICATION,//  Increment the count for each non/java src we found 
Groovy,WITHOUT_CLASSIFICATION,//  define setter/getter helper methods (setter added even for final fields for legacy compatibility) 
Groovy,WITHOUT_CLASSIFICATION,//                 return effective.getProperty(receiver); 
Groovy,WITHOUT_CLASSIFICATION,//  load argument i 
Groovy,WITHOUT_CLASSIFICATION,//  now let's load the various parameters we're passing   we start at index 2 because the first variable we pass   is the owner instance and at this point it is already 
Groovy,WITHOUT_CLASSIFICATION,/*  4: char    */
Groovy,WITHOUT_CLASSIFICATION,//  x?:y is equal to x?x:y which evals to         var t=x; boolean(t)?t:y   first we load x dup it convert the dupped to boolean then    jump depending on the value. For true we are done for false we   have to load y thus we first remove x and then load y.    But since x and y may have different stack lengths this cannot work   Thus we have to have to do the following:   Be X the type of x Y the type of y and S the common supertype of    X and Y then we have to see x?:y as          var t=x;boolean(t)?S(t):S(y)   so we load x dup it store the value in a local variable (t) then    do boolean conversion. In the true part load t and cast it to S    in the false part load y and cast y to S  
Groovy,WITHOUT_CLASSIFICATION,//  because the class may be generated even if a error was found 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see java.lang.Object#equals(java.lang.Object)          */
Groovy,WITHOUT_CLASSIFICATION,//  meta class match receiver 
Groovy,WITHOUT_CLASSIFICATION,//  Check to support wild card classpath 
Groovy,WITHOUT_CLASSIFICATION,//  We use BufferedWriter rather than System.getProperty because   it has the security manager rigamarole to deal with the possible exception. 
Groovy,WITHOUT_CLASSIFICATION,//  load x dup it store one in $t and cast the remaining one to boolean 
Groovy,WITHOUT_CLASSIFICATION,//  you can't parameterize a non-generified type 
Groovy,WITHOUT_CLASSIFICATION,//  Expect a comma for an upcoming key/value pair   or a closing curly brace for the end of the object 
Groovy,WITHOUT_CLASSIFICATION,//  left is a float/double and right is a BigDecimal 
Groovy,WITHOUT_CLASSIFICATION,// Ignored here just used for exiting the read loop. Yeah I know we don't like  empty catch blocks or expected behavior trowing exceptions but this just cleaned out the code  _so_ much that I thought it worth it...this once -Matias Bjarland 20100126 
Groovy,WITHOUT_CLASSIFICATION,/*  We are covering our bet with a safety net.                      otherwise we would have to have 5x buffer                      allocated for control chars  */
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.GroovyObject#getProperty(java.lang.String)       */
Groovy,WITHOUT_CLASSIFICATION,//             // TODO              String importTextWithSlashesInsteadOfDots = extractImportPath(t); 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------           GlobalMetaClassVersioning 
Groovy,WITHOUT_CLASSIFICATION,//  check if there are appropriate class or method annotations   that suggest we have a JUnit 4 test 
Groovy,WITHOUT_CLASSIFICATION,// + " declared by " + annotation.getClassNode().getName() 
Groovy,WITHOUT_CLASSIFICATION,//  initialize and load (recursive call) result ignored 
Groovy,WITHOUT_CLASSIFICATION,//  path through ScriptBytecodeAdapter 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see java.lang.Runnable#run()      */
Groovy,WITHOUT_CLASSIFICATION,//  _result = HashCodeHelper.updateHash(_result field) // plus self-reference checking 
Groovy,WITHOUT_CLASSIFICATION,//  owner first   owner first means we start with the outer most owner that is not a generated closure   this owner is equal to the this object so we check that one first. 
Groovy,WITHOUT_CLASSIFICATION,//  set log to consume traces by default end user can override later 
Groovy,WITHOUT_CLASSIFICATION,//  Number based methods  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  it's no real property but a property of the component 
Groovy,WITHOUT_CLASSIFICATION,//  register the new class with the compile unit 
Groovy,WITHOUT_CLASSIFICATION,//  we should not visit embedded closures recursively 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6219 
Groovy,WITHOUT_CLASSIFICATION,//  skip hidden and read-only props 
Groovy,WITHOUT_CLASSIFICATION,// else if there's a statically typed method or a GDK method 
Groovy,WITHOUT_CLASSIFICATION,//  set child first 
Groovy,WITHOUT_CLASSIFICATION,//  Java and JavaScript  -------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,// append nothing -> delete ';' 
Groovy,WITHOUT_CLASSIFICATION,//  adjust typing for explicit math methods which have special handling - operator variants handled elsewhere 
Groovy,WITHOUT_CLASSIFICATION,/*      * If the byte has the form 10xxxxx then it's a continuation byte of a multiple byte character;     *     * @param b a byte.     * @return true if it's a continuation char.      */
Groovy,WITHOUT_CLASSIFICATION,//  maybe we have C[k1:v1 k2:v2] -> should become (C)([k1:v1 k2:v2]) 
Groovy,WITHOUT_CLASSIFICATION,//  one of the objects is at the top of the hierarchy 
Groovy,WITHOUT_CLASSIFICATION,//  make call 
Groovy,WITHOUT_CLASSIFICATION,//  remove all static private and package private methods 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   void addVetoableChangeListener(name listener) {       this$vetoableChangeSupport.addVetoableChangeListener(name listener) 
Groovy,WITHOUT_CLASSIFICATION,//  skip built-in properties 
Groovy,WITHOUT_CLASSIFICATION,//  first can be class or interface 
Groovy,WITHOUT_CLASSIFICATION,//  .   ..   ... 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5890 
Groovy,WITHOUT_CLASSIFICATION,//  also check interfaces in case we have interfaces with nested classes 
Groovy,WITHOUT_CLASSIFICATION,//  The SourceUnits from which this unit is built   Summary of each SourceUnit   Summary of each SourceUnit   Summary of each Class   Names for each SourceUnit in sources. 
Groovy,WITHOUT_CLASSIFICATION,// ---- additional 
Groovy,WITHOUT_CLASSIFICATION,//  should we throw a validation failed exception?  or fail quietly? 
Groovy,WITHOUT_CLASSIFICATION,//  lib.Foo is imported later that api.Foo so groovydoc tries to resolve to lib.Foo first. 
Groovy,WITHOUT_CLASSIFICATION,//  if we finished before hitting the end of the checkpoint from   no mroe matches then set ensure the text is reset to the   defaultStyle 
Groovy,WITHOUT_CLASSIFICATION,//  exception blocks list 
Groovy,WITHOUT_CLASSIFICATION,//  public|protected 
Groovy,WITHOUT_CLASSIFICATION,//  Decided against syntax exception since this is not a syntax error.   The down side is we lose line number information for the offending   @Grab annotation. 
Groovy,WITHOUT_CLASSIFICATION,//  ignore 
Groovy,WITHOUT_CLASSIFICATION,//  get the new value to emit in the event 
Groovy,WITHOUT_CLASSIFICATION,//  give precedence to methods of self (but not abstract or static superclass methods) 
Groovy,WITHOUT_CLASSIFICATION,//  indexes into arrays s and t 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovyAnnotationTypeDoc asAnnotationTypeDoc() {/*todo*/          return null;      }        public GroovyClassDoc asClassDoc() {/*todo*/          return null;      }        public GroovyParameterizedType asParameterizedType() {/*todo*/          return null;      }        public GroovyTypeVariable asTypeVariable() {/*todo*/          return null;      }        public GroovyWildcardType asWildcardType() {/*todo*/          return null;      }        public String dimension() {/*todo*/          return null;      } 
Groovy,WITHOUT_CLASSIFICATION,//  currently temporary variables in use 
Groovy,WITHOUT_CLASSIFICATION,//  visit lbrack()     token type LBRACK only used inside parser never visited/created 
Groovy,WITHOUT_CLASSIFICATION,//  INSTANCE METHODS 
Groovy,WITHOUT_CLASSIFICATION,//  get same description but with paths relative to root 
Groovy,WITHOUT_CLASSIFICATION,//  print the methods from traits 
Groovy,WITHOUT_CLASSIFICATION,/* Double[16] */
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    byte  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  visit WS - only used by lexer 
Groovy,WITHOUT_CLASSIFICATION,//  let's try load it from the classpath 
Groovy,WITHOUT_CLASSIFICATION,//  look for quick exit 
Groovy,WITHOUT_CLASSIFICATION,//  check if param part of control structure - but not if inside instanceof 
Groovy,WITHOUT_CLASSIFICATION,//  not a valid import type do not modify the code 
Groovy,WITHOUT_CLASSIFICATION,/*  * The Great Computer Language Shootout  * http://shootout.alioth.debian.org/ *  * modified by Mehmet D. AKIN *  */
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Tony Seebregts   modified by  */
Groovy,WITHOUT_CLASSIFICATION,//  return new Foo(new ShellContext(args)).run() 
Groovy,WITHOUT_CLASSIFICATION,//     public GroovyTag[] firstSentenceTags() {/*todo*/return null;}      public GroovyTag[] inlineTags() {/*todo*/return null;} 
Groovy,WITHOUT_CLASSIFICATION,//  Map interface 
Groovy,WITHOUT_CLASSIFICATION,//  can't remember the exact Josh Bloch algorithm and I've not got the book handy   but its something like this IIRC 
Groovy,WITHOUT_CLASSIFICATION,//  DO NOT USE isStatic variable here! 
Groovy,WITHOUT_CLASSIFICATION,//  this is just a simple set field handling static and non-static but not Closure and inner classes 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.ZoneOffset extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  slightly strange as subsequent visit is done after closing visit 
Groovy,WITHOUT_CLASSIFICATION,//  exits a loop or block   restarts a loop on the next iteration   switch block   item in a switch block   catch-all item in a switch block 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6706: Sometimes an NPE is thrown here.   The reason is that our transform is getting called more than once sometimes.   
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5585 
Groovy,WITHOUT_CLASSIFICATION,//  replace all calls for this with the correct MOP method 
Groovy,WITHOUT_CLASSIFICATION,//  char as left expression 
Groovy,WITHOUT_CLASSIFICATION,//  finally block to clean assertion recorder 
Groovy,WITHOUT_CLASSIFICATION,//  = 
Groovy,WITHOUT_CLASSIFICATION,//  expr?foo:bar 
Groovy,WITHOUT_CLASSIFICATION,//  rewrite it so that it can be statically compiled 
Groovy,WITHOUT_CLASSIFICATION,//  lets check that the argument types are valid 
Groovy,WITHOUT_CLASSIFICATION,//  a.k.a. "variable arity parameter" in the JLS 
Groovy,WITHOUT_CLASSIFICATION,// least give the user a sporting chance 
Groovy,WITHOUT_CLASSIFICATION,//  global functions namespace  
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   MEMBER ACCESS 
Groovy,WITHOUT_CLASSIFICATION,//  handle an escaped value 
Groovy,WITHOUT_CLASSIFICATION,/*  1: int     */
Groovy,WITHOUT_CLASSIFICATION,//  remove contexts created after we started 
Groovy,WITHOUT_CLASSIFICATION,// classes interfaces class/instance vars and methods 
Groovy,WITHOUT_CLASSIFICATION,//  ---- 
Groovy,WITHOUT_CLASSIFICATION,//  int x int 
Groovy,WITHOUT_CLASSIFICATION,//  test Integer[] 
Groovy,WITHOUT_CLASSIFICATION,//  bean-style constructor 
Groovy,WITHOUT_CLASSIFICATION,//         Expression value = node.getMember("value"); 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   OPERATIONS 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-9035 supply a "no-op" CompilationCustomizer if none found to make DSL friendly for empty case 
Groovy,WITHOUT_CLASSIFICATION,//  ELSE keep original char   and pushback the one we just read 
Groovy,WITHOUT_CLASSIFICATION,//  Manually wire beans together. 
Groovy,WITHOUT_CLASSIFICATION,//  create next() method code:       Day next() {          int ordinal = ordinal().next() 
Groovy,WITHOUT_CLASSIFICATION,//  build the pieces 
Groovy,WITHOUT_CLASSIFICATION,//  we assume arity related errors are already handled here. 
Groovy,WITHOUT_CLASSIFICATION,//  declaration visibility   declaration visibility   declaration visibility 
Groovy,WITHOUT_CLASSIFICATION,//  support list[1..-1] 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4922: Due to a numbering scheme change we must find the super$X$method which exists   with the highest number. If we don't no method may be found leading to a stack overflow 
Groovy,WITHOUT_CLASSIFICATION,//  handle conversion to boolean 
Groovy,WITHOUT_CLASSIFICATION,//  if left type is array we should check the right component types 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ byte ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  potentially add a no-arg constructor too 
Groovy,WITHOUT_CLASSIFICATION,//  Print the length 1 & 2 counts. We know the offsets of the tasks so we can cheat. 
Groovy,WITHOUT_CLASSIFICATION,//             result = 31 * result + (compileTimeClassNode != null ? compileTimeClassNode.hashCode() : 0); 
Groovy,WITHOUT_CLASSIFICATION,//  any number can be assigned to a big decimal 
Groovy,WITHOUT_CLASSIFICATION,//  call for checking if method is still valid 
Groovy,WITHOUT_CLASSIFICATION,//  build up the metaproperties based on the public fields property descriptors 
Groovy,WITHOUT_CLASSIFICATION,//  assume must be static class field or enum value or class that Java can resolve 
Groovy,WITHOUT_CLASSIFICATION,//  create a new array for the vargs and copy them 
Groovy,WITHOUT_CLASSIFICATION,//  ex: LUB type 
Groovy,WITHOUT_CLASSIFICATION,// usualy name has text 
Groovy,WITHOUT_CLASSIFICATION,//  guard every class and method defined in this script 
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Benchmarks Game http://shootout.alioth.debian.org/ contributed by James McIlree  */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8531: Fail to resolve type defined in super class written in Java 
Groovy,WITHOUT_CLASSIFICATION,//  if set to true the name getGenericsTypes consists 
Groovy,WITHOUT_CLASSIFICATION,//  Provide access to engine context if context var is not already provided 
Groovy,WITHOUT_CLASSIFICATION,//    It's not the greatest of design that the interface allows this but it   is a tradeoff with convenience and the convenience is more important. 
Groovy,WITHOUT_CLASSIFICATION,//  snapshot of table   current slot    current node of slot   key for current node   value for current node   last node returned by next 
Groovy,WITHOUT_CLASSIFICATION,//  instanceof applies stash away the type reusing key used elsewhere 
Groovy,WITHOUT_CLASSIFICATION,//  only visit the expression 
Groovy,WITHOUT_CLASSIFICATION,//  actually has the most recent cost counts 
Groovy,WITHOUT_CLASSIFICATION,/* @ClosureParams(value=FromString.class options="?Integer") */
Groovy,WITHOUT_CLASSIFICATION,//  visitDollar ...     token type DOLLAR never created/visited see SCOPE_ESCAPE instead 
Groovy,WITHOUT_CLASSIFICATION,//  force <clinit> 
Groovy,WITHOUT_CLASSIFICATION,//  unwrap to the real exception 
Groovy,WITHOUT_CLASSIFICATION,// n*n version 
Groovy,WITHOUT_CLASSIFICATION,//  retry with raw types 
Groovy,WITHOUT_CLASSIFICATION,//  According to http://michaelscharf.blogspot.jp/2006/11/javaneturlequals-and-hashcode-make.html use java.net.URI instead. 
Groovy,WITHOUT_CLASSIFICATION,//  meta class check with boolean holder 
Groovy,WITHOUT_CLASSIFICATION,// LOGME   ignore it likely failing because we are faking out properties   such as a call to Math.min(int BindPathSnooper) 
Groovy,WITHOUT_CLASSIFICATION,//  used to ensure that hasNext has been called 
Groovy,WITHOUT_CLASSIFICATION,//  load property name 
Groovy,WITHOUT_CLASSIFICATION,//  remove the result of the method call 
Groovy,WITHOUT_CLASSIFICATION,//  now try with flow type instead of declaration type 
Groovy,WITHOUT_CLASSIFICATION,//  3 from JMock 
Groovy,WITHOUT_CLASSIFICATION,//  the context we compare with in the end is the one of the callsite   so far we specified the context of the method declaration only 
Groovy,WITHOUT_CLASSIFICATION,//  and mark as ambiguous if needed 
Groovy,WITHOUT_CLASSIFICATION,//  Since normalizing did not help use original values at user's risk 
Groovy,WITHOUT_CLASSIFICATION,//  straight xstream output of AST 
Groovy,WITHOUT_CLASSIFICATION,//  test default imports 
Groovy,WITHOUT_CLASSIFICATION,//  cache first element avoid swapping perm[0] and perm[k] 
Groovy,WITHOUT_CLASSIFICATION,//  at this point the receiver will be already on the stack 
Groovy,WITHOUT_CLASSIFICATION,// isCase 
Groovy,WITHOUT_CLASSIFICATION,//  we may have to add a check and remove this part of the code 
Groovy,WITHOUT_CLASSIFICATION,//  using it here is that unlike qsort it is stable. 
Groovy,WITHOUT_CLASSIFICATION,//  strings must be equal except for the last character 
Groovy,WITHOUT_CLASSIFICATION,//  skip the LF in CR LF 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ char ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  Not loaded try to load it 
Groovy,WITHOUT_CLASSIFICATION,//  we need this method as trick to guarantee correct method selection 
Groovy,WITHOUT_CLASSIFICATION,//  check that direct access is allowed 
Groovy,WITHOUT_CLASSIFICATION,//  write "this" 
Groovy,WITHOUT_CLASSIFICATION,//  add methods declared by DGM for interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  next & previous 
Groovy,WITHOUT_CLASSIFICATION,//  else go to object case 
Groovy,WITHOUT_CLASSIFICATION,//  detect namespace declared on the added node like xmlns:foo="http:/foo" 
Groovy,WITHOUT_CLASSIFICATION,//  ContentHandler interface  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4833 : annotations that are not Groovy transforms should be transferred to the generated field 
Groovy,WITHOUT_CLASSIFICATION,//  Now this is a bit unusual 
Groovy,WITHOUT_CLASSIFICATION,//  implicit closure coercion in action! 
Groovy,WITHOUT_CLASSIFICATION,//  should be limited to the current SourceUnit or propagated to the whole CompilationUnit 
Groovy,WITHOUT_CLASSIFICATION,//  instantiate a runnable and run it 
Groovy,WITHOUT_CLASSIFICATION,//  end::precompiled_java_extension[] 
Groovy,WITHOUT_CLASSIFICATION,//  equal class nothing to do 
Groovy,WITHOUT_CLASSIFICATION,//  if left and right are primitives or numbers allow 
Groovy,WITHOUT_CLASSIFICATION,//  throws FileNotFoundException { 
Groovy,WITHOUT_CLASSIFICATION,//  get encoding 
Groovy,WITHOUT_CLASSIFICATION,//  we remove it here because addProperty will add it   again and we want to avoid it showing up multiple   times in the fields list. 
Groovy,WITHOUT_CLASSIFICATION,//  we have something like A.B.this and need to make it   into this.this$0.this$0 where this.this$0 returns   A.B and this.this$0.this$0 return A. 
Groovy,WITHOUT_CLASSIFICATION,//  if we still haven't found the file point back to the originally specified filename 
Groovy,WITHOUT_CLASSIFICATION,//  create a shell   register the mgr with object name "bsf" 
Groovy,WITHOUT_CLASSIFICATION,//  cleanup temporary variables 
Groovy,WITHOUT_CLASSIFICATION,//  applied to class names   applied to interface names   applied to mixin names   applied to method names   applied to property names   applied to method/closure parameter names 
Groovy,WITHOUT_CLASSIFICATION,//  ignore trait methods which have a default implementation 
Groovy,WITHOUT_CLASSIFICATION,//  we are calling an outer class method 
Groovy,WITHOUT_CLASSIFICATION,// IGNORED_PACKAGES.add("java.lang.reflect"); 
Groovy,WITHOUT_CLASSIFICATION,//  create and add the undo/redo manager 
Groovy,WITHOUT_CLASSIFICATION,//  a four-bytes sequence was encountered 
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Shootout   http://shootout.alioth.debian.org/   benchmark implementation (not optimized)   JRE 1.5 only   contributed by Josh Goldfoot  */
Groovy,WITHOUT_CLASSIFICATION,//  tag::jsr223_invocable[] 
Groovy,WITHOUT_CLASSIFICATION,//  fetch all the nodes in this AST into a List 
Groovy,WITHOUT_CLASSIFICATION,//  have to remove 1 because of the GOTO 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7363: There can be multiple matches for a getter returning a generic parameter type due to   the generation of a bridge method. The real getter is really the non-bridge non-synthetic one as it   has the most specific and exact return type of the two. Picking the bridge method results in loss of   type information as it down-casts the return type to the lower bound of the generic parameter. 
Groovy,WITHOUT_CLASSIFICATION,//  Check for nulls 
Groovy,WITHOUT_CLASSIFICATION,//    Nested task adapters   
Groovy,WITHOUT_CLASSIFICATION,//  if the file has a Byte Order Marker we can assume the file is in UTF-xx 
Groovy,WITHOUT_CLASSIFICATION,//  push new node on stack 
Groovy,WITHOUT_CLASSIFICATION,//  when resolving the outer class later we set the resolved type of ConstructedOuterNestedClass instance to the actual inner class node(SEE GROOVY-7812(#2)) 
Groovy,WITHOUT_CLASSIFICATION,//  ignore result 
Groovy,WITHOUT_CLASSIFICATION,//  we print the error but we don't stop with an exception here   since it is more comfortable this way for development 
Groovy,WITHOUT_CLASSIFICATION,//  add the undo actions 
Groovy,WITHOUT_CLASSIFICATION,/* <Constructor[]> */
Groovy,WITHOUT_CLASSIFICATION,//  since there can be field init statements that depend on method/property dispatching   that uses this$0 it needs to bubble up before the super call itself (GROOVY-4471) 
Groovy,WITHOUT_CLASSIFICATION,//  class interface mixin   public private abstract etc. 
Groovy,WITHOUT_CLASSIFICATION,//  and to differentiate from static fields otherwise 
Groovy,WITHOUT_CLASSIFICATION,//  check that the node doesn't belong to the list of declared constructors 
Groovy,WITHOUT_CLASSIFICATION,//  fall back to cast 
Groovy,WITHOUT_CLASSIFICATION,//  it is idiotic story but if config map doesn't allow null values (like Hashtable)   we can't do too much 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeMethod(java.lang.Object java.lang.String java.lang.Object)      */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5940 
Groovy,WITHOUT_CLASSIFICATION,//  add methods 
Groovy,WITHOUT_CLASSIFICATION,//  but that's protected and unavailable to us. 
Groovy,WITHOUT_CLASSIFICATION,//  other primitives 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8272 support inherited static methods 
Groovy,WITHOUT_CLASSIFICATION,// nothing 
Groovy,WITHOUT_CLASSIFICATION,//  ignore too bad so sad they don't follow conventions we'll just leave the listener attached 
Groovy,WITHOUT_CLASSIFICATION,//  start on the text that was replaced 
Groovy,WITHOUT_CLASSIFICATION,//  if enum constants have been used check if they are all valid 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6849: prefer extension methods in case of ambiguity 
Groovy,WITHOUT_CLASSIFICATION,//  if convenience hack did not make classes match   throw exception when starting with known class and thus "from" cannot be advanced over "to".   Note if start is an unusual Object it could have a next() method   that yields a Number or String to close the range 
Groovy,WITHOUT_CLASSIFICATION,//  should we verify the property is valid? 
Groovy,WITHOUT_CLASSIFICATION,//  this *is* verbose! ;) 
Groovy,WITHOUT_CLASSIFICATION,/*  Holds the actual map that will be lazily created.  */
Groovy,WITHOUT_CLASSIFICATION,//  adjust the first statement if it's a super call 
Groovy,WITHOUT_CLASSIFICATION,//  If the first thing is an value then we need a dummy empty string in front of it so that when we   toString it they come out in the correct order. 
Groovy,WITHOUT_CLASSIFICATION,//  to be used in generics type must be boxed   to be used in generics type must be boxed 
Groovy,WITHOUT_CLASSIFICATION,//  this is used to store the goals for a "continue foo" call 
Groovy,WITHOUT_CLASSIFICATION,//  break once idx goes to -1 or for case of empty string once   we get to the end to avoid JDK library bug (see GROOVY-5858) 
Groovy,WITHOUT_CLASSIFICATION,/*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Alexei Svitkine */
Groovy,WITHOUT_CLASSIFICATION,//  stack: closurecurriedClosure 
Groovy,WITHOUT_CLASSIFICATION,//  imagine we have: list*.foo = 100   then the assignment must be checked against [100] not 100 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: wc.javav 1.2 2004-06-20 08:39:47 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   with help from Dirus@programmer.net 
Groovy,WITHOUT_CLASSIFICATION,//  Use our privileged access in order to prevent checks lower in the call stack.  Otherwise we would have   to grant access to IDE unit test runners and unit test libs.  We only care about testing the call stack   higher upstream from this point of execution. 
Groovy,WITHOUT_CLASSIFICATION,//  null check because of http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4803836 
Groovy,WITHOUT_CLASSIFICATION,//  unimplemented abstract methods from interfaces 
Groovy,WITHOUT_CLASSIFICATION,//   Potentially throws Exception. 
Groovy,WITHOUT_CLASSIFICATION,//  reset last 
Groovy,WITHOUT_CLASSIFICATION,/*  * Test classes extracted and adapted from the AssertJ project.  */
Groovy,WITHOUT_CLASSIFICATION,//  not in java   empty regexp_literal should be treated as single line comment // not in java 
Groovy,WITHOUT_CLASSIFICATION,//  since we have B and want to get A we start with the most    outer class put them together and then see if that does   already exist. In case of B from within A$B we are done    after the first step already. In case of for example   A.B.C.D.E.F and accessing E from F we test A$E=failed    A$B$E=failed A$B$C$E=fail A$B$C$D$E=success 
Groovy,WITHOUT_CLASSIFICATION,//    KEYWORDS: PRIMITIVE TYPES 
Groovy,WITHOUT_CLASSIFICATION,//  default to Number class in exception details else use the specified Number subtype. 
Groovy,WITHOUT_CLASSIFICATION,//  look for one of these:     import static SomeClass.method [as otherName] 
Groovy,WITHOUT_CLASSIFICATION,//  racy multiple threads may set cachedValues but rather have that than take a write lock 
Groovy,WITHOUT_CLASSIFICATION,//    Strip off the sign if present 
Groovy,WITHOUT_CLASSIFICATION,//  invokeMethod 
Groovy,WITHOUT_CLASSIFICATION,//  Define false < true 
Groovy,WITHOUT_CLASSIFICATION,//     public MethodVisitor getMethodVisitor() {          return mv;      } 
Groovy,WITHOUT_CLASSIFICATION,//  assume the first param is the delegate by default 
Groovy,WITHOUT_CLASSIFICATION,//  check if it's a property 
Groovy,WITHOUT_CLASSIFICATION,//  Check if the annotation target is correct unless it's the target annotating an annotation definition   defining on which target elements the annotation applies 
Groovy,WITHOUT_CLASSIFICATION,//  standard closure (2 methods because "it" is with default null) 
Groovy,WITHOUT_CLASSIFICATION,//  cleanup stack 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------   feature: type parameters 
Groovy,WITHOUT_CLASSIFICATION,/*      * Wrap an existing setter.      */
Groovy,WITHOUT_CLASSIFICATION,// CHECKSTYLE.OFF: VisibilityModifierCheck - special case direct access for performance 
Groovy,WITHOUT_CLASSIFICATION,//  That's what you get for "1.0". 
Groovy,WITHOUT_CLASSIFICATION,//  remove all the * from beginning of lines 
Groovy,WITHOUT_CLASSIFICATION,//  fall back after method change 
Groovy,WITHOUT_CLASSIFICATION,// unbox primitives 
Groovy,WITHOUT_CLASSIFICATION,//  emulate named params constructor 
Groovy,WITHOUT_CLASSIFICATION,//  whenever a method using a closure as argument (typically "with") is detected this list is updated 
Groovy,WITHOUT_CLASSIFICATION,//  let's ignore exception and return the original object   as the caller has more context to be able to throw a more   meaningful exception (but stash to get message later) 
Groovy,WITHOUT_CLASSIFICATION,//  mutate the tree when in Javaland 
Groovy,WITHOUT_CLASSIFICATION,// accept_FirstChild_v_SecondChild_v(t); 
Groovy,WITHOUT_CLASSIFICATION,//                         value = next.stripTrailingZeros().hashCode();                      }                  }                  hashCode = 31 * hashCode + value;              }              canonicalHashCodeCache = hashCode;          }          return canonicalHashCodeCache;      } 
Groovy,WITHOUT_CLASSIFICATION,//  ensure exact matches are preferred over vargs 
Groovy,WITHOUT_CLASSIFICATION,// The number 8 below represents the number of characters in the header of a non-string-section such as  <% ... %>. A section like this is represented in the target script as:  out<<"""......."""  12345678 
Groovy,WITHOUT_CLASSIFICATION,//  for call result 
Groovy,WITHOUT_CLASSIFICATION,//  we want this exception exposed. 
Groovy,WITHOUT_CLASSIFICATION,/*              *  this happens             *  *    when groovyc calls FileSystemCompiler in forked mode or             *  *    when FileSystemCompiler is run from the command line directly or             *  *    when groovy was not started using groovyc or FileSystemCompiler either              */
Groovy,WITHOUT_CLASSIFICATION,//  invoke via metaclass 
Groovy,WITHOUT_CLASSIFICATION,//  map the nodes to Groovy types 
Groovy,WITHOUT_CLASSIFICATION,// regexpr 
Groovy,WITHOUT_CLASSIFICATION,//  still not method here so see if there is an invokeMethod method up the hierarchy 
Groovy,WITHOUT_CLASSIFICATION,//  should the open block provide final information we apply that 
Groovy,WITHOUT_CLASSIFICATION,//  fall back for parameterless constructor 
Groovy,WITHOUT_CLASSIFICATION,//  got here to property not found look for getProperty or setProperty overrides 
Groovy,WITHOUT_CLASSIFICATION,//  now the optional exception expression 
Groovy,WITHOUT_CLASSIFICATION,//  multiple declaration 
Groovy,WITHOUT_CLASSIFICATION,//  test ranges 
Groovy,WITHOUT_CLASSIFICATION,//  meta class match receiver   metaClass still be valid 
Groovy,WITHOUT_CLASSIFICATION,//  stores if on left-hand-side during compilation 
Groovy,WITHOUT_CLASSIFICATION,//  We'll be silent here.   If the URI scheme is unknown or not hierarchical then we just can't help them and shouldn't cause any trouble either.   addError("Attribute \"root\" has value '" + root + "' which can't be turned into a valid URI relative to it's source '" + getSourceUnit().getName() + "' @" + node.getClassNode().getNameWithoutPackage() + " annotations" node); 
Groovy,WITHOUT_CLASSIFICATION,//  copy the list to Li2 (not by individual items) 
Groovy,WITHOUT_CLASSIFICATION,//  memorize current assignment context 
Groovy,WITHOUT_CLASSIFICATION,//  if we have a BinaryExpression let us check if it is with   subscription 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.Closure#setDelegate(java.lang.Object)          */
Groovy,WITHOUT_CLASSIFICATION,//  true part: load x and cast to S 
Groovy,WITHOUT_CLASSIFICATION,//  store the type of parameter and block type as meta information 
Groovy,WITHOUT_CLASSIFICATION,// those classes implement a method with a better exact match. 
Groovy,WITHOUT_CLASSIFICATION,//  store value into array 
Groovy,WITHOUT_CLASSIFICATION,//  invoke overridden hashCode closure method 
Groovy,WITHOUT_CLASSIFICATION,//  Method invocation tests  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,// sb.append(" siblings=").append(siblings); 
Groovy,WITHOUT_CLASSIFICATION,//  let's assume it's a collection of 1 
Groovy,WITHOUT_CLASSIFICATION,//                     } 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   INITIALIZATION AND SUCH 
Groovy,WITHOUT_CLASSIFICATION,//  we should infer the type of the exception from the expression 
Groovy,WITHOUT_CLASSIFICATION,//  For ' and " we only escape if needed. As far as XML is concerned 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                normal field handling : get    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  the method represents the operation type only and we must add an assignment 
Groovy,WITHOUT_CLASSIFICATION,//  lets run the script 
Groovy,WITHOUT_CLASSIFICATION,//  try to find the cached value again 
Groovy,WITHOUT_CLASSIFICATION,//  We could jump through some hoops to have GroovyShell make our script name but that seems unwarranted.   If we *did* jump through that hoop then we should probably change the run loop to not recompile   the script on every iteration since the script text can't change (the reason for the recompilation). 
Groovy,WITHOUT_CLASSIFICATION,//  add flags 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6373: references to 'log' field are normally already FieldNodes by now so revisit scoping 
Groovy,WITHOUT_CLASSIFICATION,//  of 1 element describing the name of the placeholder 
Groovy,WITHOUT_CLASSIFICATION,//  vargs need special attention and transformation though 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   PARSING SUPPORT 
Groovy,WITHOUT_CLASSIFICATION,//  if <0 probably an AST transform or internal code (like generated metaclass field ...) 
Groovy,WITHOUT_CLASSIFICATION,//  if this an Array then add the special read-only "length" property 
Groovy,WITHOUT_CLASSIFICATION,//  No need to print 'def' if we already have some modifiers 
Groovy,WITHOUT_CLASSIFICATION,//  use linked hash set so order is preserved 
Groovy,WITHOUT_CLASSIFICATION,//  assume completely blank line signifies end of sentence 
Groovy,WITHOUT_CLASSIFICATION,//  Prefix expressions 
Groovy,WITHOUT_CLASSIFICATION,//  protected implementation methods - extension points for subclasses  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  protected static VetoableChangeSupport this$vetoableChangeSupport = new java.beans.VetoableChangeSupport(this) 
Groovy,WITHOUT_CLASSIFICATION,//  copy default one may override later 
Groovy,WITHOUT_CLASSIFICATION,//  read only property 
Groovy,WITHOUT_CLASSIFICATION,//  we need to cheat using the type 
Groovy,WITHOUT_CLASSIFICATION,//  we are first save the streams 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4548: temp fix to stop CCE until proper support is added 
Groovy,WITHOUT_CLASSIFICATION,/* Byte[3] */
Groovy,WITHOUT_CLASSIFICATION,//  If last element is not being removed shift the last element into this slot 
Groovy,WITHOUT_CLASSIFICATION,//  look for possible legacy fields (trait compiled pre 2.4.8) 
Groovy,WITHOUT_CLASSIFICATION,//  add it to the class 
Groovy,WITHOUT_CLASSIFICATION,//  prevents the proxy from being abstract 
Groovy,WITHOUT_CLASSIFICATION,//  return the completed node 
Groovy,WITHOUT_CLASSIFICATION,//  Li2 must now be empty   remove each individual item from right side of Li3 and 
Groovy,WITHOUT_CLASSIFICATION,//  reading the content of the file within a byte buffer 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8868 don't want an empty body to cause the constructor to be deleted later 
Groovy,WITHOUT_CLASSIFICATION,//  as in Target.execute() 
Groovy,WITHOUT_CLASSIFICATION,//    because of reverse iteration use ArrayList 
Groovy,WITHOUT_CLASSIFICATION,//  32767 is the command line length limit on Windows 
Groovy,WITHOUT_CLASSIFICATION,//  removes one Object[] leaves the int containing the 
Groovy,WITHOUT_CLASSIFICATION,//  "case" "default" "}"   "case" "default" 
Groovy,WITHOUT_CLASSIFICATION,//  void f(String ... others) {} 
Groovy,WITHOUT_CLASSIFICATION,//  then resolve receivers from method arguments 
Groovy,WITHOUT_CLASSIFICATION,//  RFC2396 
Groovy,WITHOUT_CLASSIFICATION,//       8     9     :     ;     <     =     >     ? 
Groovy,WITHOUT_CLASSIFICATION,//  now mutate (groovify) the ast into groovy 
Groovy,WITHOUT_CLASSIFICATION,//  stack clean 
Groovy,WITHOUT_CLASSIFICATION,//  just in case remove carriage returns 
Groovy,WITHOUT_CLASSIFICATION,//  cast to Object to test routing through equals(Object) 
Groovy,WITHOUT_CLASSIFICATION,//  perform regular type conversion 
Groovy,WITHOUT_CLASSIFICATION,//  try matching against 'prefix:localname' 
Groovy,WITHOUT_CLASSIFICATION,//  now create the MetaProperty object 
Groovy,WITHOUT_CLASSIFICATION,//  resolve method return types and parameter types 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   Unwrap wrapped values fo now - the new MOP will handle them properly 
Groovy,WITHOUT_CLASSIFICATION,//  double   no possible loose here 
Groovy,WITHOUT_CLASSIFICATION,//  fail fast! if we got a malformed URL the Classloader has to tell it 
Groovy,WITHOUT_CLASSIFICATION,//  check for stray labeled arguments: 
Groovy,WITHOUT_CLASSIFICATION,//    Add the sign back if necessary 
Groovy,WITHOUT_CLASSIFICATION,// Check for transposition somewhat more complex now since we have to check for case 
Groovy,WITHOUT_CLASSIFICATION,/*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/    contributed by Isaac Gouy  */
Groovy,WITHOUT_CLASSIFICATION,//  each interface may have one or more "extends" so we must find those 
Groovy,WITHOUT_CLASSIFICATION,//  We can compare here by length because pname is always   a substring of name so same length means they are equal. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setFeature(java.lang.String boolean)      */
Groovy,WITHOUT_CLASSIFICATION,//  we have a call to super here so we need to add   our code after that 
Groovy,WITHOUT_CLASSIFICATION,//     def optionals = [[0 1] [0 1] [0 1] [0 1]].combinations{ a b c d ->              (a ? hex('80') : 0) + (b ? hex('10') : 0) + (c ? hex('8') : 0) + (d ? hex('2') : hex('1'))      }.sort() 
Groovy,WITHOUT_CLASSIFICATION,//  match URIs but not Windows filenames e.g.: http://cnn.com but not C:\xxx\file.ext 
Groovy,WITHOUT_CLASSIFICATION,// throw new NullPointerException("Cannot invoke method " + methodName + "() on null object"); 
Groovy,WITHOUT_CLASSIFICATION,//  create our own local copy of the closure 
Groovy,WITHOUT_CLASSIFICATION,/*  multiply vector v by matrix A and then by matrix A transposed  */
Groovy,WITHOUT_CLASSIFICATION,//  and remove the final modifier from classNode to allow the sub class 
Groovy,WITHOUT_CLASSIFICATION,// operandStack.box(); 
Groovy,WITHOUT_CLASSIFICATION,// todo push through InvokerHelper.asList? 
Groovy,WITHOUT_CLASSIFICATION,//  make sure we keep primitive types 
Groovy,WITHOUT_CLASSIFICATION,/*      * If the byte has the form 110xxxx then it's the first byte of a two-bytes sequence character.     *     * @param b a byte.     * @return true if it's the first byte of a two-bytes sequence.      */
Groovy,WITHOUT_CLASSIFICATION,//  if right is a constant then we optimize only if it makes   a block complete so we set a maybe 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------   helper methods  ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  the constructors for our script class have already run. 
Groovy,WITHOUT_CLASSIFICATION,//    Run the generation and create the class (if required) 
Groovy,WITHOUT_CLASSIFICATION,//  choose the distance to Object if a parameter is null   this will mean that Object is preferred over a more   specific type 
Groovy,WITHOUT_CLASSIFICATION,//  visit Vocab - only used by Lexer 
Groovy,WITHOUT_CLASSIFICATION,//  This is a good point to call t.setSnippet()   but it bulks up the AST too much for production code. 
Groovy,WITHOUT_CLASSIFICATION,/*  field and declaration we don't return false  */
Groovy,WITHOUT_CLASSIFICATION,//  star imports 
Groovy,WITHOUT_CLASSIFICATION,//  there might be annotations not present in the classpath   e.g. java.lang.Synthetic (http://forge.ow2.org/tracker/?aid=307392&group_id=23&atid=100023&func=detail)   so skip them 
Groovy,WITHOUT_CLASSIFICATION,//  place holder for "empty" synchronized blocks for example   if there is only a break/continue. 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5620: Spread safe/Null safe operator on LHS is not supported 
Groovy,WITHOUT_CLASSIFICATION,//  load argument array 
Groovy,WITHOUT_CLASSIFICATION,//  constructor call is in static context and the inner class is non-static - 1st arg is supposed to be    passed as enclosing "this" instance   
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   setter 
Groovy,WITHOUT_CLASSIFICATION,//  Comment Summary using first sentence (Locale sensitive) 
Groovy,WITHOUT_CLASSIFICATION,//  for the redirect 
Groovy,WITHOUT_CLASSIFICATION,//  if rightExpression is null and leftExpression is not a primitive type it's ok 
Groovy,WITHOUT_CLASSIFICATION,//  TODO allow string quoting delimiter to be specified e.g. ' vs " 
Groovy,WITHOUT_CLASSIFICATION,//  now iterate over the map of property descriptors and generate   MetaBeanProperty objects 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.LocalDate extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  Use setUp/tearDown to avoid mucking with system properties for other tests... 
Groovy,WITHOUT_CLASSIFICATION,//  Constructor is actually "FooAdapter(FooImpl foo)"   but it should show "Foo" as the link text not "FooImpl". 
Groovy,WITHOUT_CLASSIFICATION,//  enable recompilation? 
Groovy,WITHOUT_CLASSIFICATION,//                     element = new MetaBeanProperty(mp.getName() mp.getType() null mp.getSetter());                  } 
Groovy,WITHOUT_CLASSIFICATION,//  In a method call with SAM coercion the inference is to be   understood as a two phase process. We have the normal method call   to the target method with the closure argument and we have the   SAM method that will be called inside the normal target method.   To infer correctly we have to "simulate" this process. We know the   call to the closure will be done through the SAM type so the SAM   type generics deliver information about the Closure. At the same   time the SAM class is used in the target method parameter   providing a connection from the SAM type and the target method   declaration class. 
Groovy,WITHOUT_CLASSIFICATION,//  items.inject([]){ ss h -> ss.collect { it + [h] }  + ss + [[h]] } 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   OPERATOR PRECEDENCE 
Groovy,WITHOUT_CLASSIFICATION,//  right expression is the subscript expression   we store the result of the subscription on the stack 
Groovy,WITHOUT_CLASSIFICATION,//  0 is the key 1 is the value 
Groovy,WITHOUT_CLASSIFICATION,//  for example LHS is List<ConcreteClass> and RHS is List<T> where T is a placeholder 
Groovy,WITHOUT_CLASSIFICATION,//  alreadyVisitedMethods prevents from visiting the same method multiple times 
Groovy,WITHOUT_CLASSIFICATION,//  try to find a method for the operation 
Groovy,WITHOUT_CLASSIFICATION,//  javax.script.Invokable methods. 
Groovy,WITHOUT_CLASSIFICATION,//  we use a hard index instead of incrementing the _i variable due to previous 
Groovy,WITHOUT_CLASSIFICATION,//  ... find next position 
Groovy,WITHOUT_CLASSIFICATION,//    KEYWORDS: (PRIMARILY) CLASS/METHOD DECLARATION MODIFIERS 
Groovy,WITHOUT_CLASSIFICATION,//  check to see if an external file is needed 
Groovy,WITHOUT_CLASSIFICATION,//  CLASS VARIABLES 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6344 
Groovy,WITHOUT_CLASSIFICATION,//    Determine radix (default is 10). 
Groovy,WITHOUT_CLASSIFICATION,//  true if it's a static method 
Groovy,WITHOUT_CLASSIFICATION,//  left classloading very simple in light of potential changes needed for jdk9   that means you might need @GrabConfig(systemClassLoader=true) if getting json via grab              ClassLoader rootLoader = DefaultGroovyMethods.getRootLoader(loader); 
Groovy,WITHOUT_CLASSIFICATION,//  tear stuff down even if we are half built 
Groovy,WITHOUT_CLASSIFICATION,//  if you have a Bar class with a static foo property and this:     import static Bar.foo as baz   then this constructor (not normal usage of statics):     new Bar(baz:1)   will become:     new Bar(foo:1) 
Groovy,WITHOUT_CLASSIFICATION,//  check if it's a trait 
Groovy,WITHOUT_CLASSIFICATION,//    TYPE GROUPS (OPERATIONS SUPPORT) 
Groovy,WITHOUT_CLASSIFICATION,// skip : 
Groovy,WITHOUT_CLASSIFICATION,// puts ("key" key "value" value); 
Groovy,WITHOUT_CLASSIFICATION,//  fields and properties 
Groovy,WITHOUT_CLASSIFICATION,//  method call receivers are :     - possible "with" receivers     - the actual receiver as found in the method call expression     - any of the potential receivers found in the instanceof temporary table   in that order 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ boolean ------------------ 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.Writable#writeTo(java.io.Writer)     */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5939 
Groovy,WITHOUT_CLASSIFICATION,//  if constructor call is not in static context return 
Groovy,WITHOUT_CLASSIFICATION,// all entries are guaranteed to be EntryWithValue. Value can only be null if computeValue returns null 
Groovy,WITHOUT_CLASSIFICATION,//                     value = 0; 
Groovy,WITHOUT_CLASSIFICATION,//  "unable to resolve class" error can be thrown already no need to `addError` so just return 
Groovy,WITHOUT_CLASSIFICATION,//  todo precompile regex 
Groovy,WITHOUT_CLASSIFICATION,//  The class is not in the tree being documented 
Groovy,WITHOUT_CLASSIFICATION,//  not in a closure or within an inner class 
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralImport     token type "import" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,/*  InvocationHandler implementation.  */
Groovy,WITHOUT_CLASSIFICATION,//  (JLS §9.1.1.1). Such a class file must not have its ACC_FINAL ACC_SUPER or ACC_ENUM flags set. 
Groovy,WITHOUT_CLASSIFICATION,//  setter 
Groovy,WITHOUT_CLASSIFICATION,//  if size is >1 then the method was overwritten or something we ignore that   if it is an error we have to test it at another place. But size==0 is   an error because it means that no such attribute exists. 
Groovy,WITHOUT_CLASSIFICATION,//  If we fail then exit with an error so scripting frameworks can catch it. 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: strcat.javav 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Pelle Nilsson suggested we also illustrate StringBuffer   since it is the preferred method for concatenating    strings in Java 
Groovy,WITHOUT_CLASSIFICATION,//  we may need to pass in some other constructors 
Groovy,WITHOUT_CLASSIFICATION,//  don't rewrite assertions w/o source text 
Groovy,WITHOUT_CLASSIFICATION,//  This may deadlock so run in a separate thread 
Groovy,WITHOUT_CLASSIFICATION,//  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere. 
Groovy,WITHOUT_CLASSIFICATION,/*      * Compute factorial (TODO: expose this)     *     * @param n the input integer     * @return the factorial for n      */
Groovy,WITHOUT_CLASSIFICATION,//  init declarations 
Groovy,WITHOUT_CLASSIFICATION,//  in that case the inferred type of the binary expression is the type of the RHS   "completed" with generics type information available in the LHS 
Groovy,WITHOUT_CLASSIFICATION,//  applied to the optional "(" that marks a call to a method   applied to "(" that marks a type cast   applied to "{" that marks a block   applied to "{" that marks a closure   applied to a statement label   applied to "?" that marks a ternary expression   applied to "{" that marks an array initializer 
Groovy,WITHOUT_CLASSIFICATION,//  complete rhs: load b call operation [load sub call arraySet] 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.YearMonth extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  precompiled trait 
Groovy,WITHOUT_CLASSIFICATION,//  java (special name used for testing) 
Groovy,WITHOUT_CLASSIFICATION,// this.project.setInputHandler(new DefaultInputHandler()); 
Groovy,WITHOUT_CLASSIFICATION,//       the instance defining the class. 
Groovy,WITHOUT_CLASSIFICATION,//  an integer number 
Groovy,WITHOUT_CLASSIFICATION,//  we have C[] if the list is empty -> should be an array then! 
Groovy,WITHOUT_CLASSIFICATION,//  objects are equal 
Groovy,WITHOUT_CLASSIFICATION,//  Regular expression pattern used to identify words ending in 'y' preceded by a consonant 
Groovy,WITHOUT_CLASSIFICATION,/*          * Grab the servlet context.          */
Groovy,WITHOUT_CLASSIFICATION,//  totally empty in the case of [:] 
Groovy,WITHOUT_CLASSIFICATION,/*      * If the byte has the form 1110xxx then it's the first byte of a six-bytes sequence character.     *     * @param b a byte.     * @return true if it's the first byte of a six-bytes sequence.      */
Groovy,WITHOUT_CLASSIFICATION,//  skip non-Strings e.g. Integer 
Groovy,WITHOUT_CLASSIFICATION,//  rotate down perm[0..r] by one 
Groovy,WITHOUT_CLASSIFICATION,// do nothing              
Groovy,WITHOUT_CLASSIFICATION,/*      * To make sure the MethodCallExpression is visited and we do not test against     * the default value of isImplicitThis      */
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                field handling super: set    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  a groovy instance (including builder closure ...) 
Groovy,WITHOUT_CLASSIFICATION,//  factory type may be references as fully qualified an import or an alias  default package 
Groovy,WITHOUT_CLASSIFICATION,//  we need special code for arrays to store the result (like for a[1]++) 
Groovy,WITHOUT_CLASSIFICATION,//  Funky rule so that names like 'pNAME' will still work. 
Groovy,WITHOUT_CLASSIFICATION,//  pull them out of package node but treat them like they were on class node 
Groovy,WITHOUT_CLASSIFICATION,//         }          return (Character) primitiveArrayPut(array idx newValue);      }        public static Short putAt(short[] array int idx Object newValue) { 
Groovy,WITHOUT_CLASSIFICATION,//             fastHashCodeCache = result;          }          return fastHashCodeCache;      } 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7812(#2): Static inner classes cannot be accessed from other files when running by 'groovy' command 
Groovy,WITHOUT_CLASSIFICATION,//  above in parseDocument()) 
Groovy,WITHOUT_CLASSIFICATION,//                 return mp.getProperty(object); 
Groovy,WITHOUT_CLASSIFICATION,//  It was no primitive type so next we see if the name   which is a vanilla name starts with a lower case letter.   In that case we change it to a LowerCaseClass to let the   compiler skip the resolving at several places in this class. 
Groovy,WITHOUT_CLASSIFICATION,//  message name 
Groovy,WITHOUT_CLASSIFICATION,//    Create a reader on the source and run the parser. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)           * @see groovy.lang.MetaMethod#invoke(java.lang.Object java.lang.Object[])            */
Groovy,WITHOUT_CLASSIFICATION,//  ant's <javac> supports nested <compilerarg value=""> elements (there can be multiple of them) 
Groovy,WITHOUT_CLASSIFICATION,//  since the object does not have a valid compareTo method   we compare using the hashcodes. null cases are handled by   DefaultTypeTransformation.compareTo   This is not exactly a mathematical valid approach since we compare object   that cannot be compared. To avoid strange side effects we do a pseudo order   using hashcodes but without equality. Since then an x and y with the same   hashcodes will behave different depending on if we compare x with y or   x with y the result might be unstable as well. Setting x and y to equal   may mean the removal of x or y in a sorting operation which we don't want. 
Groovy,WITHOUT_CLASSIFICATION,//  1 + 1   [1..<10]   [1..10]   a << b   foo*.bar   a >> b   a * b   or    import foo.*   x ** 3   trait Foo... 
Groovy,WITHOUT_CLASSIFICATION,//  Methods from Comparable 
Groovy,WITHOUT_CLASSIFICATION,//  we always adds meta methods to class itself 
Groovy,WITHOUT_CLASSIFICATION,/*             since there is no DUP4 we have to do this:            DUP2_X1            POP2            DUP2_X1            DUP2_X1            POP2            DUP2_X1                    */
Groovy,WITHOUT_CLASSIFICATION,//  After normalisation 'from' may be greater than 'to'. In that   case we need to reverse them and make sure the range's 'reverse'   property is correct.   TODO We should probably use DefaultGroovyMethodsSupport.subListBorders() 
Groovy,WITHOUT_CLASSIFICATION,// nothing else possible 
Groovy,WITHOUT_CLASSIFICATION,//  validate date format pattern 
Groovy,WITHOUT_CLASSIFICATION,//                         // workaround on pre-Java8 for http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6480539                          value = BigDecimal.ZERO.hashCode(); 
Groovy,WITHOUT_CLASSIFICATION,//  <class_name>( 
Groovy,WITHOUT_CLASSIFICATION,// for typical user math. 
Groovy,WITHOUT_CLASSIFICATION,//  Setup the configuration data 
Groovy,WITHOUT_CLASSIFICATION,//  TODO use pList and fList 
Groovy,WITHOUT_CLASSIFICATION,//  TODO use it or lose it 
Groovy,WITHOUT_CLASSIFICATION,/*  We copy all returned values from the getValue call in casean optimised model is reusing one object to return many values.The Number subclasses in the JDK are immutable and so will not be used inthis way but other subclasses of Number might want to do this to savespace and avoid unnecessary heap allocation. */
Groovy,WITHOUT_CLASSIFICATION,//  ContentHandler interface 
Groovy,WITHOUT_CLASSIFICATION,//  we need to add parameters 
Groovy,WITHOUT_CLASSIFICATION,//  Properties  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,// appropriate line in the source template data 
Groovy,WITHOUT_CLASSIFICATION,//  import is like "import static foo.Bar.*"   packageName is actually a className in this case 
Groovy,WITHOUT_CLASSIFICATION,//  minimum of cell to the left+1 to the top+1 diagonally left and up +cost 
Groovy,WITHOUT_CLASSIFICATION,//    Run the Verifier on the outer class 
Groovy,WITHOUT_CLASSIFICATION,//  this program is modified from:     http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html   Timing Trials or the Trials of Timing: Experiments with Scripting   and User-Interface Languages</a> by Brian W. Kernighan and   Christopher J. Van Wyk. 
Groovy,WITHOUT_CLASSIFICATION,//  copy statements from static and instance init blocks 
Groovy,WITHOUT_CLASSIFICATION,//  with transform detection alone these phases are inaccessible so don't add it 
Groovy,WITHOUT_CLASSIFICATION,//  let's assign all the parameter fields from the outer context 
Groovy,WITHOUT_CLASSIFICATION,//  def _result = super.clone() as cNode 
Groovy,WITHOUT_CLASSIFICATION,// ignore 
Groovy,WITHOUT_CLASSIFICATION,// load insertion index 
Groovy,WITHOUT_CLASSIFICATION,//  If the line source is closed try to open it. 
Groovy,WITHOUT_CLASSIFICATION,/*  never true for batchSize of 0  */
Groovy,WITHOUT_CLASSIFICATION,//  Typically Android can throw ClassNotFoundException 
Groovy,WITHOUT_CLASSIFICATION,//  we already know there are at least params.length elements in both arrays 
Groovy,WITHOUT_CLASSIFICATION,//  really this should never happen it's evidence of corruption if it does 
Groovy,WITHOUT_CLASSIFICATION,//  GroovyClassLoader should be able to find classes compiled from java sources 
Groovy,WITHOUT_CLASSIFICATION,//  attempt resolution on all types so don't short-circuit and stop if we've previously failed 
Groovy,WITHOUT_CLASSIFICATION,//  all arguments are Object but last which is a vargs argument that   will fit all so just test if the number of argument is equal or   more than the parameters we have. 
Groovy,WITHOUT_CLASSIFICATION,//  {@code processing hack} 
Groovy,WITHOUT_CLASSIFICATION,//  br: the old logic seems to add static to all def f().... in a script which makes enclosing   inner classes (including closures) in a def function difficult. Comment it out. 
Groovy,WITHOUT_CLASSIFICATION,//  any keyword   any symbol   strings numbers identifiers   integers and decimals   "+" "-"   true false null   true false   void byte short int etc.   any PRIMITIVE_TYPE except void   do while etc.   const goto etc.   keywords that can appear as identifiers   any of the SYNTH types 
Groovy,WITHOUT_CLASSIFICATION,//  assertFailed called static with 2 arguments  
Groovy,WITHOUT_CLASSIFICATION,//  first we must check the 'with' context 
Groovy,WITHOUT_CLASSIFICATION,//  set assertionTracker to null to deactivate AssertionWriter#record calls 
Groovy,WITHOUT_CLASSIFICATION,//  we only do check abstract classes (including enums) no interfaces or non-abstract classes 
Groovy,WITHOUT_CLASSIFICATION,/*      * The cached fast hashCode (once calculated)      */
Groovy,WITHOUT_CLASSIFICATION,//  init table 
Groovy,WITHOUT_CLASSIFICATION,//  choose an arbitrary method to display an error message 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7876: when comparing for equality we try to only call compareTo when an assignable   relationship holds but with a container/holder class and because of erasure we might still end   up with the prospect of a ClassCastException which we want to ignore but only if testing equality 
Groovy,WITHOUT_CLASSIFICATION,//    one of the BAND tokens is actually replaced by TYPE_UPPER_BOUNDS (e.g. class Foo<T extends C & I> {T t} ) 
Groovy,WITHOUT_CLASSIFICATION,//  execute Method 
Groovy,WITHOUT_CLASSIFICATION,//  Write out the threshold loadfactor and any hidden stuff 
Groovy,WITHOUT_CLASSIFICATION,//  create a temporary variable to store the constructed object 
Groovy,WITHOUT_CLASSIFICATION,//  if origChar and withoutCustomHandle 
Groovy,WITHOUT_CLASSIFICATION,//  No elements match GPath expression - do nothing 
Groovy,WITHOUT_CLASSIFICATION,//  ClassHelper.classes minus interfaces abstract classes and classes with private ctors 
Groovy,WITHOUT_CLASSIFICATION,//  ret starts with the original type specs now add gts for the current method if any 
Groovy,WITHOUT_CLASSIFICATION,//  ignore interception and missing method fallback 
Groovy,WITHOUT_CLASSIFICATION,//  declare a static variable to be able to continue the check 
Groovy,WITHOUT_CLASSIFICATION,//  direct access is allowed if we are in the same class as the declaring class   or we are in an inner class 
Groovy,WITHOUT_CLASSIFICATION,//  can be replaced with a direct constructor call 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5802 IAE for missing properties with classes that extend List 
Groovy,WITHOUT_CLASSIFICATION,//  it might directly annotate a class e.g. Specification in Spock 2 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6099: restore assignment info as before the if branch 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   boolean removePropertyChangeListener(listener) {      return this$propertyChangeSupport.removePropertyChangeListener(listener); 
Groovy,WITHOUT_CLASSIFICATION,/*      * Load a possibly filtered path. Filters are defined     * by using the * wildcard like in any shell.      */
Groovy,WITHOUT_CLASSIFICATION,//  since Java has no Closures... 
Groovy,WITHOUT_CLASSIFICATION,//  every other subsequent visit use an escaping $ 
Groovy,WITHOUT_CLASSIFICATION,//  create method void <setter>(<type> fieldName) 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7647 
Groovy,WITHOUT_CLASSIFICATION,//  the verifier created the field and the setter/getter methods so here is   not really something to do 
Groovy,WITHOUT_CLASSIFICATION,//  @Lazy not meaningful with primitive so convert to wrapper if needed 
Groovy,WITHOUT_CLASSIFICATION,//  8K at a time 
Groovy,WITHOUT_CLASSIFICATION,//  output AST in format suitable for opening in http://freemind.sourceforge.net 
Groovy,WITHOUT_CLASSIFICATION,/* Boolean[1] */
Groovy,WITHOUT_CLASSIFICATION,//  Unexpected node type: TYPE_PARAMETERS found when expecting type: OBJBLOCK   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  ensure we try to unbox null to cause a runtime NPE in case we assign    null to a primitive typed variable even if it is used only in boxed  
Groovy,WITHOUT_CLASSIFICATION,//  $Id: hash.javav 1.1 2004-05-23 05:06:51 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  e.g. BinaryOperator extends BiFunction BinaryOperator contains no abstract method but it is really a SAM 
Groovy,WITHOUT_CLASSIFICATION,//  LEFT_SHIFT               280   RIGHT_SHIFT              281   RIGHT_SHIFT_UNSIGNED     282 
Groovy,WITHOUT_CLASSIFICATION,//  for compound assignment "x op= y" find type as if it was "x = (x op y)" 
Groovy,WITHOUT_CLASSIFICATION,//  fail fast! if we got a malformed URI the Classloader has to tell it 
Groovy,WITHOUT_CLASSIFICATION,// the below params are:    _p - parent class for handling exceptions    _s - sections string sections list    _b - binding map    out - out stream  the three first parameters will be curried in as we move along 
Groovy,WITHOUT_CLASSIFICATION,//  the URI has a false format so lets try it with files ... 
Groovy,WITHOUT_CLASSIFICATION,//  load configuration file 
Groovy,WITHOUT_CLASSIFICATION,//  ab -> ba 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6970 choose between equivalent interface methods 
Groovy,WITHOUT_CLASSIFICATION,//  end::java_method_selection_head[] 
Groovy,WITHOUT_CLASSIFICATION,//  The data store and its maximum capacity 
Groovy,WITHOUT_CLASSIFICATION,//    RELEVANT WHITESPACE 
Groovy,WITHOUT_CLASSIFICATION,/*  The keys  stored in the map.  */
Groovy,WITHOUT_CLASSIFICATION,//  A script's contextual constructor should call it's super class' contextual constructor if it has one.   In practice this will always be true because currently this visitor is run before the AST transformations 
Groovy,WITHOUT_CLASSIFICATION,//  have here to ensure it won't be the inner class 
Groovy,WITHOUT_CLASSIFICATION,//  heuristic size to pre-alocate stringbuffers for collections of items 
Groovy,WITHOUT_CLASSIFICATION,//  TODO: GROOVY-6561: GroovyMain got the name this way: script.substring(script.lastIndexOf("/") + 1) 
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Josh Goldfoot   based on the Nice entry by Isaac Guoy */
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.MetaMethod#getName()          */
Groovy,WITHOUT_CLASSIFICATION,//  method body missing   declaration cannot be overridden   a native code entry point   property should not be persisted   compiler should never cache property 
Groovy,WITHOUT_CLASSIFICATION,//       @     A     B     C     D     E     F     G 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-3311: pre-defined constants added by groovy compiler for numbers/characters should be   initialized first so that code dependent on it does not see their values as empty 
Groovy,WITHOUT_CLASSIFICATION,//  we are facing a self referencing type ! 
Groovy,WITHOUT_CLASSIFICATION,//  there must be two continuation bytes of the form 10xxxxxx   otherwise the following character is is not a valid UTF-8 construct 
Groovy,WITHOUT_CLASSIFICATION,//  return type 
Groovy,WITHOUT_CLASSIFICATION,//  Select a constructor from our class or super-class which is legal to call   then write out an invoke w/nulls using casts to avoid ambiguous crapo 
Groovy,WITHOUT_CLASSIFICATION,//  Handle other Number implementations 
Groovy,WITHOUT_CLASSIFICATION,//  the return type of the SAM method exactly corresponds to the inferred return type 
Groovy,WITHOUT_CLASSIFICATION,//  no need for 'def' if in a parameter list 
Groovy,WITHOUT_CLASSIFICATION,//  block = init code for the constructor we produce 
Groovy,WITHOUT_CLASSIFICATION,//  integer overflow 
Groovy,WITHOUT_CLASSIFICATION,//  nothing to really test here...just looking for debug that says it   used cache version 
Groovy,WITHOUT_CLASSIFICATION,//  todo: more cases 
Groovy,WITHOUT_CLASSIFICATION,//    To support delta compilations we always restart   the compiler.  The individual passes are responsible   for not reprocessing old code. 
Groovy,WITHOUT_CLASSIFICATION,// load normal arguments as array 
Groovy,WITHOUT_CLASSIFICATION,//  if no byte with an high order bit set the encoding is US-ASCII 
Groovy,WITHOUT_CLASSIFICATION,/*      * TODO: remove optimization of this.foo -> this.@foo     *      */
Groovy,WITHOUT_CLASSIFICATION,//  Expand enough to hold at least n elements without resizing.   We can only resize table by factor of two at a time.   It is faster to rehash with fewer elements so do it now. 
Groovy,WITHOUT_CLASSIFICATION,//  =~   ==~   ~ 
Groovy,WITHOUT_CLASSIFICATION,//  create values field 
Groovy,WITHOUT_CLASSIFICATION,//  we need no security check for getting the system class   loader since if we do the invoker has a null loader   in which case no security check will be done 
Groovy,WITHOUT_CLASSIFICATION,//  at this point the receiver will be already on the stack.   in a[1]++ the method will be "++" aka "next" and the receiver a[1] 
Groovy,WITHOUT_CLASSIFICATION,//  use default expression 
Groovy,WITHOUT_CLASSIFICATION,//         ASMifierClassVisitor.main(new String[]{"target/classes/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.class"});          ASMifierClassVisitor.main(new String[]{"target/test-classes/spectralnorm.class"});          ASMifierClassVisitor.main(new String[]{"target/test-classes/groovy/bugs/CustomMetaClassTest.class"}); 
Groovy,WITHOUT_CLASSIFICATION,//  check module node import packages 
Groovy,WITHOUT_CLASSIFICATION,//  we won't get here if we are a PrintWriter 
Groovy,WITHOUT_CLASSIFICATION,//  constructors are not distinguished from methods in java ast 
Groovy,WITHOUT_CLASSIFICATION,//  cut original string in tabstop-length pieces 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6099: First element of the list may be null if no assignment was made before the branch 
Groovy,WITHOUT_CLASSIFICATION,//  stack: closure type   for a constructor call we need the type two times 
Groovy,WITHOUT_CLASSIFICATION,//  we compile b?x:y as         boolean(b)?S(x):S(y) S = common super type of xy   so we load b do boolean conversion.    In the true part load x and cast it to S    in the false part load y and cast y to S  
Groovy,WITHOUT_CLASSIFICATION,/*  6: short   */
Groovy,WITHOUT_CLASSIFICATION,//  anything other than 0 
Groovy,WITHOUT_CLASSIFICATION,//  run the script numIter times 
Groovy,WITHOUT_CLASSIFICATION,//  return result list 
Groovy,WITHOUT_CLASSIFICATION,/*  checks if all needed classes are compiled before generating the bytecode  */
Groovy,WITHOUT_CLASSIFICATION,//  call closure 
Groovy,WITHOUT_CLASSIFICATION,//  check direct match 
Groovy,WITHOUT_CLASSIFICATION,//  the call on 
Groovy,WITHOUT_CLASSIFICATION,//  throw new IOException(file.getAbsolutePath()); 
Groovy,WITHOUT_CLASSIFICATION,//  +=   -=   *=   /=   \=   %=   **= 
Groovy,WITHOUT_CLASSIFICATION,// when we get exceptions from the parseXXX methods in the main loop we might try to  re-finish a section 
Groovy,WITHOUT_CLASSIFICATION,//  Lazily initialized and loaded should be accessed internally using getMap() 
Groovy,WITHOUT_CLASSIFICATION,//  includes another Groovy template   includes raw content escaped before rendering 
Groovy,WITHOUT_CLASSIFICATION,//  fallback option as ClassLoader#findResource() is protected 
Groovy,WITHOUT_CLASSIFICATION,/*  if it has been chopped then you have to return.  */
Groovy,WITHOUT_CLASSIFICATION,//  now let's visit the contents of the class 
Groovy,WITHOUT_CLASSIFICATION,//  can be added for only for new transforms that have come in  
Groovy,WITHOUT_CLASSIFICATION,//  append to right side of Li3 (preserving order) 
Groovy,WITHOUT_CLASSIFICATION,//  fill all gaps 
Groovy,WITHOUT_CLASSIFICATION,//  method is in current class nothing to be done 
Groovy,WITHOUT_CLASSIFICATION,//  warning: treating Java chars as "String" in Groovy 
Groovy,WITHOUT_CLASSIFICATION,// noop  white 
Groovy,WITHOUT_CLASSIFICATION,/*      * Reclassify nodes in each list to new Map.  Because we are     * using power-of-two expansion the elements from each 0bin     * must either stay at same index or move to     * oldCapacity+index. We also eliminate unnecessary node     * creation by catching cases where old nodes can be reused     * because their next fields won't change. Statistically at     * the default threshold only about one-sixth of them need     * cloning. (The nodes they replace will be garbage     * collectible as soon as they are no longer referenced by any     * reader thread that may be in the midst of traversing table     * right now.)      */
Groovy,WITHOUT_CLASSIFICATION,//  Find largest index j with a[j] < a[j+1] 
Groovy,WITHOUT_CLASSIFICATION,//  2nd arg false below: though not usual allow setter with non-void return type 
Groovy,WITHOUT_CLASSIFICATION,//  The location in the buffer is chosen in a racy fashion as the increment   is not atomic with the insertion. This means that concurrent reads can   overlap and overwrite one another resulting in a lossy buffer. 
Groovy,WITHOUT_CLASSIFICATION,//  actual step can be +1 when desired step is -1 and direction is from high to low 
Groovy,WITHOUT_CLASSIFICATION,//  if this is not a generics placeholder first compare that types represent the same type 
Groovy,WITHOUT_CLASSIFICATION,//  aab -> baa   baab   baa 
Groovy,WITHOUT_CLASSIFICATION,//  lets test out the class verifier 
Groovy,WITHOUT_CLASSIFICATION,//  may use this visitor without the annotation being explicitly set 
Groovy,WITHOUT_CLASSIFICATION,// -- Internals only below this point 
Groovy,WITHOUT_CLASSIFICATION,/*  multiply vector v by matrix A transposed  */
Groovy,WITHOUT_CLASSIFICATION,/*  * <p>This AST transformer is responsible for modifying a source template into something which can be compiled as a * {@link groovy.text.markup.BaseTemplate} subclass.</p> * <p/> * <p>It performs the following operations:</p> * <p/> * <ul> <li>replace dynamic variables with <i>getModel().get(dynamicVariable)</i> calls</li> <li>optionally wrap * <i>getModel().get(...)</i> calls into <i>tryEscape</i> calls for automatic escaping</li> <li>replace <i>include * XXX:'...'</i> calls with the appropriate <i>includeXXXX</i> method calls</li> <li>replace <i>':tagName'()</i> calls * into <i>methodMissing('tagName' ...)</i> calls</li> </ul>  */
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Keenan Tims   modified by Michael Barker */
Groovy,WITHOUT_CLASSIFICATION,//  if all remaining exceptions are used in the stub we are good 
Groovy,WITHOUT_CLASSIFICATION,//  Read in size (number of Mappings) 
Groovy,WITHOUT_CLASSIFICATION,// / it seems attractive to want to do this for more cases but perhaps not all cases 
Groovy,WITHOUT_CLASSIFICATION,//     private Integer fastHashCodeCache = null; 
Groovy,WITHOUT_CLASSIFICATION,//  add static missing method dispatcher 
Groovy,WITHOUT_CLASSIFICATION,//  ignore errors which are related to unknown source locations   because they are likely related to generated code 
Groovy,WITHOUT_CLASSIFICATION,//  myMethod {... 
Groovy,WITHOUT_CLASSIFICATION,//  stores if implicit or explicit this is used. 
Groovy,WITHOUT_CLASSIFICATION,//  A."this" assumes a VariableExpression can be used for "this"   we correct that here into a ConstantExpression 
Groovy,WITHOUT_CLASSIFICATION,//  possibly an inner class (or inherited inner class) 
Groovy,WITHOUT_CLASSIFICATION,//  todo - If no comment before node then get comment from same node on parent class - ouch! 
Groovy,WITHOUT_CLASSIFICATION,//  modify the Java AST into a Groovy AST (just token types) 
Groovy,WITHOUT_CLASSIFICATION,//  if-else is here handled as a special version   of a boolean expression 
Groovy,WITHOUT_CLASSIFICATION,//  getTarget(var) can be null in buggy xform code e.g. Spock 
Groovy,WITHOUT_CLASSIFICATION,//  Clear hardrefs and gc() 
Groovy,WITHOUT_CLASSIFICATION,//  myMethod(ab) 
Groovy,WITHOUT_CLASSIFICATION,//  available variables on stack 
Groovy,WITHOUT_CLASSIFICATION,//  size() in the Collection interface returns an integer so ranges can have no more than Integer.MAX_VALUE elements 
Groovy,WITHOUT_CLASSIFICATION,//  we decided if we have a vanilla name starting with a lower case   letter that we will not try to resolve this name against .*   imports. Instead a full import is needed for these.   resolveAliasFromModule will do this check for us. This method   does also check the module contains a class in the same package   of this name. This check is not done for vanilla names starting 
Groovy,WITHOUT_CLASSIFICATION,//  close possibly open file handles from getting a sample for  
Groovy,WITHOUT_CLASSIFICATION,//  No size() method so let's just check a few keys we that should have been collected 
Groovy,WITHOUT_CLASSIFICATION,//    Prepare the response buffer content type _before_ getting the writer.   and set status code to ok 
Groovy,WITHOUT_CLASSIFICATION,//  declaration was replaced by assignment so we need to define the variable 
Groovy,WITHOUT_CLASSIFICATION,//  applied to "[" that marks a list   applied to "[" that marks a map   a complete GString 
Groovy,WITHOUT_CLASSIFICATION,//  process each node in turn 
Groovy,WITHOUT_CLASSIFICATION,//  if the annotation attribute has a default getCode() returns a ReturnStatement with the default value 
Groovy,WITHOUT_CLASSIFICATION,//  to extract the parameters. 
Groovy,WITHOUT_CLASSIFICATION,//  html output of AST 
Groovy,WITHOUT_CLASSIFICATION,//  this is only needed since the Groovy Build compiles *.groovy files after *.java files 
Groovy,WITHOUT_CLASSIFICATION,// LOGME? 
Groovy,WITHOUT_CLASSIFICATION,//  store it into tmp variable 
Groovy,WITHOUT_CLASSIFICATION,/*  duplicated with DateUtilExtensions.toCalendar() but we don't want modulkes to depend on one another  */
Groovy,WITHOUT_CLASSIFICATION,//  Copy the required nodes into a new list. 
Groovy,WITHOUT_CLASSIFICATION,//  only final modifier allowed 
Groovy,WITHOUT_CLASSIFICATION,//  replace call with an invoker helper call 
Groovy,WITHOUT_CLASSIFICATION,//  fall through 
Groovy,WITHOUT_CLASSIFICATION,//  Check and ignore empty statements 
Groovy,WITHOUT_CLASSIFICATION,//  save all current closures into global closures map 
Groovy,WITHOUT_CLASSIFICATION,//  works in a two pass sequence and we don't want to skip the second pass 
Groovy,WITHOUT_CLASSIFICATION,/*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Josh Goldfoot   modified by Isaac Gouy */
Groovy,WITHOUT_CLASSIFICATION,//  replace the existing code block with our new one 
Groovy,WITHOUT_CLASSIFICATION,//  closure within inner class 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ Object[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  this swaps the two child nodes see javadoc above for explanation of implementation 
Groovy,WITHOUT_CLASSIFICATION,//  we allow auto-coercion here 
Groovy,WITHOUT_CLASSIFICATION,//  end::bsf_apply[] 
Groovy,WITHOUT_CLASSIFICATION,// runTest("LittleClosureTest.groovy"); 
Groovy,WITHOUT_CLASSIFICATION,//  for primitives and their wrapper we use a fixed table here 
Groovy,WITHOUT_CLASSIFICATION,//         cache = Collections.synchronizedMap(new LRUProtectionStorage(maxCacheSize)); 
Groovy,WITHOUT_CLASSIFICATION,//  Return next permut by rotating elements [0 - position] one 'step' 
Groovy,WITHOUT_CLASSIFICATION,//  fall threw 
Groovy,WITHOUT_CLASSIFICATION,//  if necessary deallocate here 
Groovy,WITHOUT_CLASSIFICATION,//  Don't cache scripts 
Groovy,WITHOUT_CLASSIFICATION,//  type check call as if it was made on component type 
Groovy,WITHOUT_CLASSIFICATION,//  saving type of variables to restoring them after returning from block 
Groovy,WITHOUT_CLASSIFICATION,/*  ---------------- Eviction Support --------------  */
Groovy,WITHOUT_CLASSIFICATION,/*  The directory scanner  */
Groovy,WITHOUT_CLASSIFICATION,//                     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19 
Groovy,WITHOUT_CLASSIFICATION,//  \n 
Groovy,WITHOUT_CLASSIFICATION,//  store exception 
Groovy,WITHOUT_CLASSIFICATION,//  (SomeTrait.super).foo() --> SomeTrait$Helper.foo(this) 
Groovy,WITHOUT_CLASSIFICATION,//  Identify type of collection 
Groovy,WITHOUT_CLASSIFICATION,//  pop the first context 
Groovy,WITHOUT_CLASSIFICATION,// GROOVY-7151 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeMethod(java.lang.Object java.lang.String java.lang.Object[])      */
Groovy,WITHOUT_CLASSIFICATION,// SAM check 
Groovy,WITHOUT_CLASSIFICATION,//  replaced with AST transformations 
Groovy,WITHOUT_CLASSIFICATION,//  something slightly less cryptic than a NoSuchMethodError or an IncompatibleClassChangeError 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  By default Implement TableModel by forwarding all messages   to the model. 
Groovy,WITHOUT_CLASSIFICATION,//  second visit of node 
Groovy,WITHOUT_CLASSIFICATION,//  The variation in the pattern is isolated 
Groovy,WITHOUT_CLASSIFICATION,//  visitNullTreeLookahead     not used explicitly by parser. 
Groovy,WITHOUT_CLASSIFICATION,//  first direct access from within the class 
Groovy,WITHOUT_CLASSIFICATION,//  return types 
Groovy,WITHOUT_CLASSIFICATION,//  lookup in DGM methods too 
Groovy,WITHOUT_CLASSIFICATION,//  at this point the loading from a parent loader failed 
Groovy,WITHOUT_CLASSIFICATION,//  all are of type Object so generics are useless 
Groovy,WITHOUT_CLASSIFICATION,//  We can't use the same tactic as for intersection   since AbstractCollection only does a remove on the first   element it encounters. 
Groovy,WITHOUT_CLASSIFICATION,//  applied to an identifier that specifies 
Groovy,WITHOUT_CLASSIFICATION,//  visitDigit ...      never created/visited 
Groovy,WITHOUT_CLASSIFICATION,//  in that case we are facing a list constructor assigned to a def or object 
Groovy,WITHOUT_CLASSIFICATION,//  If source doesn't know how to get a reference to itself 
Groovy,WITHOUT_CLASSIFICATION,//  get the getter method 
Groovy,WITHOUT_CLASSIFICATION,//  meta.optimize -> can do fast path 
Groovy,WITHOUT_CLASSIFICATION,//  earlier output differs from input; we write to our local buffer 
Groovy,WITHOUT_CLASSIFICATION,//  VetoableASTTransformation will handle both @Bindable and @Vetoable 
Groovy,WITHOUT_CLASSIFICATION,//  package private is the only modifier left. It means  same package is allowed subclass not same class is 
Groovy,WITHOUT_CLASSIFICATION,//  this is an imperfect solution to determining if two methods are   equivalent for example String#compareTo(Object) and String#compareTo(String)   in that case Java marks the Object version as synthetic 
Groovy,WITHOUT_CLASSIFICATION,//  enum Foo(THESEARETHEY) 
Groovy,WITHOUT_CLASSIFICATION,//  equal in terms of an assignment in Java. That means according to Java widening rules or   a subclass interface superclass relation this case then handles also  
Groovy,WITHOUT_CLASSIFICATION,//  Optimization: skip invalid propertyNames 
Groovy,WITHOUT_CLASSIFICATION,//  NOTE: must be changed to "1 |" if constructor was vargs 
Groovy,WITHOUT_CLASSIFICATION,//  to the target methods. Such a method cannot be abstract or a bridge 
Groovy,WITHOUT_CLASSIFICATION,//  Trait SAM coercion generated proxy using a map to store the closure 
Groovy,WITHOUT_CLASSIFICATION,//   Handle release of Insert key to toggle overtype/insert mode    unless a modifier is active (eg Shift+Insert for paste or    Ctrl+Insert for Copy) 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------   code visit   ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  Have one backslash continue if next char is 'u' 
Groovy,WITHOUT_CLASSIFICATION,//  the name might be null if the method name is a GString for example 
Groovy,WITHOUT_CLASSIFICATION,//  means we're in middle of mlr so end is at end of mlr 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: methcall.javav 1.1 2004-05-23 07:14:27 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Collection class code is from my friend Phil Chu Thanks Phil! 
Groovy,WITHOUT_CLASSIFICATION,//  last check generic type information to ensure that inferred types are compatible 
Groovy,WITHOUT_CLASSIFICATION,//  last to leave turn out the lights: restore original streams 
Groovy,WITHOUT_CLASSIFICATION,//  make sure parameterTypes gets set 
Groovy,WITHOUT_CLASSIFICATION,/*  Have we set a next object?  */
Groovy,WITHOUT_CLASSIFICATION,//         }          return (Long) primitiveArrayPut(array idx newValue);      }        public static Float putAt(float[] array int idx Object newValue) { 
Groovy,WITHOUT_CLASSIFICATION,//  And add in the methods implemented in this class. 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ char[] ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  other guards here 
Groovy,WITHOUT_CLASSIFICATION,//  Unexpected node type: LABELED_STAT found when expecting type: an identifier   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  find the resolved inner class 
Groovy,WITHOUT_CLASSIFICATION,//  a method name can never be a VariableExpression so it must converted   to a ConstantExpression then. This is needed as the expression   method doesn't know we want a ConstantExpression instead of a   VariableExpression 
Groovy,WITHOUT_CLASSIFICATION,//  now adjust the state variables - any early returns won't have gotten here   but we need to check that the same status was observed by all paths 
Groovy,WITHOUT_CLASSIFICATION,//  Fallback for non-standard "Script" classes. 
Groovy,WITHOUT_CLASSIFICATION,// -------------------------------------------------------------------------                     
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6757 
Groovy,WITHOUT_CLASSIFICATION,//  else nothing to box 
Groovy,WITHOUT_CLASSIFICATION,//  TODO M12N eventually defer this until later when we have a full Groovy   environment and use normal Grape.grab() 
Groovy,WITHOUT_CLASSIFICATION,//  in order to compute the inferred types of the closure parameters we're using the following trick:   1. create a dummy MethodNode for which the return type is a class node for which the generic types are the types returned by the hint   2. call inferReturnTypeGenerics   3. fetch inferred types from the result of inferReturnTypeGenerics   In practice it could be done differently but it has the main advantage of reusing   existing code hence reducing the amount of code to debug in case of failure. 
Groovy,WITHOUT_CLASSIFICATION,//  treat it just like a script if it is one 
Groovy,WITHOUT_CLASSIFICATION,//  Only the non-cached type and packages should be cached 
Groovy,WITHOUT_CLASSIFICATION,//  workaround for GROOVY-5859: remove generic type info 
Groovy,WITHOUT_CLASSIFICATION,//  add catch any block to exception table 
Groovy,WITHOUT_CLASSIFICATION,//   } 
Groovy,WITHOUT_CLASSIFICATION,//  field undefined 
Groovy,WITHOUT_CLASSIFICATION,//  JDK 8 support for default methods in interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  todo: unary expressions (field++ field+= ...) 
Groovy,WITHOUT_CLASSIFICATION,//  ignore this happens with overlapping method definitions 
Groovy,WITHOUT_CLASSIFICATION,//  into information for the callsite 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6094 
Groovy,WITHOUT_CLASSIFICATION,//  get index of parts which are equal 
Groovy,WITHOUT_CLASSIFICATION,/*  non-ascii char range  */
Groovy,WITHOUT_CLASSIFICATION,//  placeholder aliases like Map<UV> -> Map<KV>                                      redirectBoundType = classNodePlaceholders.get(name); 
Groovy,WITHOUT_CLASSIFICATION,//  if original short meta class 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ int ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  then we use the method with the SAM parameter to get more information about the declaration 
Groovy,WITHOUT_CLASSIFICATION,//  visitClosureOp ...     token type CLOSABLE_BLOCK_OP never created/visited see CLOSABLE_BLOCK... 
Groovy,WITHOUT_CLASSIFICATION,//  in case of a lookup on Class we look for instance methods on Class   as well since in case of a static property access we have the class 
Groovy,WITHOUT_CLASSIFICATION,//  try some special cases first for efficiency 
Groovy,WITHOUT_CLASSIFICATION,//  and that class may have an invalid format we fail here if needed 
Groovy,WITHOUT_CLASSIFICATION,//  normal loading of expression 
Groovy,WITHOUT_CLASSIFICATION,//  look for one of these:     import static MyClass.prop [as otherProp] 
Groovy,WITHOUT_CLASSIFICATION,//  saying List<Integer> 
Groovy,WITHOUT_CLASSIFICATION,//  end of if/else 
Groovy,WITHOUT_CLASSIFICATION,//  {@literal tag} 
Groovy,WITHOUT_CLASSIFICATION,//  the continue statement is only allowed inside loops   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  if there is no missing return in the finally block and the block exists   there is nothing to do 
Groovy,WITHOUT_CLASSIFICATION,//  to leave a copy of the rightExpression value on the stack after the assignment. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getProperty(java.lang.String)     */
Groovy,WITHOUT_CLASSIFICATION,//  The null check is normally not required but done to prevent from NPEs 
Groovy,WITHOUT_CLASSIFICATION,//  metaClass still be valid 
Groovy,WITHOUT_CLASSIFICATION,//  still working implies classloader set coverage confirms this 
Groovy,WITHOUT_CLASSIFICATION,// find expected method name 
Groovy,WITHOUT_CLASSIFICATION,//  load receiver 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setErrorHandler(org.xml.sax.ErrorHandler)      */
Groovy,WITHOUT_CLASSIFICATION,//  Include the stubs in the Javac compilation 
Groovy,WITHOUT_CLASSIFICATION,//  we are at the end of the input data 
Groovy,WITHOUT_CLASSIFICATION,//  the closure map 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5063 
Groovy,WITHOUT_CLASSIFICATION,//  Nothing added since last delegate execution. No need to call the delegate this time. 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   void addPropertyChangeListener(listener) {       this$propertyChangeSupport.addPropertyChangeListener(listener) 
Groovy,WITHOUT_CLASSIFICATION,//  top level templates 
Groovy,WITHOUT_CLASSIFICATION,//  replace with compareEquals 
Groovy,WITHOUT_CLASSIFICATION,//  for methods with primitive types 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#startElement(java.lang.String java.lang.String java.lang.String org.xml.sax.Attributes)     */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5521   try to identify a getAt method 
Groovy,WITHOUT_CLASSIFICATION,//  when we obtain an interface the types represented by the interface   class node are not parameterized. This means that we must create a   new class node with the parameterized types that the current class node   has defined. 
Groovy,WITHOUT_CLASSIFICATION,// Check both hasResultSet and getMoreResults() because of differences in vendor behavior 
Groovy,WITHOUT_CLASSIFICATION,//  for static properties 
Groovy,WITHOUT_CLASSIFICATION,//  alternatively FieldNode timeTagField = SourceUnit.createFieldNode("public static final long __timeStamp = " + System.currentTimeMillis() + "L"); 
Groovy,WITHOUT_CLASSIFICATION,//  build the path stack info to compare 
Groovy,WITHOUT_CLASSIFICATION,//  when a column heading is clicked in the JTable. 
Groovy,WITHOUT_CLASSIFICATION,//  a three-bytes sequence was encountered 
Groovy,WITHOUT_CLASSIFICATION,//  if it's not the case we can assume the encoding is the default encoding of the system 
Groovy,WITHOUT_CLASSIFICATION,//  put the receiver inferred type so that the class writer knows that it will have to call a bridge method 
Groovy,WITHOUT_CLASSIFICATION,/*      * The following methods are needed for implementing the Map interface.     * They are mostly delegating the request to the provided Map.      */
Groovy,WITHOUT_CLASSIFICATION,//  return _result 
Groovy,WITHOUT_CLASSIFICATION,//  first we add a super() call for all expressions given in the  
Groovy,WITHOUT_CLASSIFICATION,// pop fb 
Groovy,WITHOUT_CLASSIFICATION,//  Get the URLConnection 
Groovy,WITHOUT_CLASSIFICATION,//  legacy misspelling 
Groovy,WITHOUT_CLASSIFICATION,//  create the base list of classes which have possible methods to be overloaded 
Groovy,WITHOUT_CLASSIFICATION,// Simple tests 
Groovy,WITHOUT_CLASSIFICATION,//  text might be null and indicates no replacement text 
Groovy,WITHOUT_CLASSIFICATION,//  add field 
Groovy,WITHOUT_CLASSIFICATION,// new Reduction(Tpken.EOF); 
Groovy,WITHOUT_CLASSIFICATION,//  loop through classes in tree 
Groovy,WITHOUT_CLASSIFICATION,//  constructors should not be treated as errors (they have no real meaning for interfaces anyway) 
Groovy,WITHOUT_CLASSIFICATION,//  this may happen if there's a setter of type boolean/String/Class and that we are using the property   notation AND that the RHS is not a boolean/String/Class 
Groovy,WITHOUT_CLASSIFICATION,//  check security manager 
Groovy,WITHOUT_CLASSIFICATION,//  normalise 
Groovy,WITHOUT_CLASSIFICATION,// GROOVY-4046   GROOVY-7954 
Groovy,WITHOUT_CLASSIFICATION,//  float 
Groovy,WITHOUT_CLASSIFICATION,//  adds an empty row 
Groovy,WITHOUT_CLASSIFICATION,//    foo instanceof MyType 
Groovy,WITHOUT_CLASSIFICATION,//  came from a trait 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.Closure#call(java.lang.Object)          */
Groovy,WITHOUT_CLASSIFICATION,//  -1 means a mismatch 
Groovy,WITHOUT_CLASSIFICATION,//  optional exception 
Groovy,WITHOUT_CLASSIFICATION,//  A buffer is chosen by the thread's id so that tasks are distributed in a   pseudo evenly manner. This helps avoid hot entries causing contention   due to other threads trying to append to the same buffer. 
Groovy,WITHOUT_CLASSIFICATION,//  do nothing here leave it to the normal resolving 
Groovy,WITHOUT_CLASSIFICATION,//  below not true for DGM#push and also co-variant return scenarios  && method.getReturnType().equals(m.getReturnType()) 
Groovy,WITHOUT_CLASSIFICATION,//  if the input stream is still null we've not found the extension 
Groovy,WITHOUT_CLASSIFICATION,//  metaClass is still valid 
Groovy,WITHOUT_CLASSIFICATION,//  can't check synchronized here as it doubles up with ACC_SUPER 
Groovy,WITHOUT_CLASSIFICATION,//  For performance reasons test against classNamePattern first 
Groovy,WITHOUT_CLASSIFICATION,//  type annotated with @DelegatesTo.Target 
Groovy,WITHOUT_CLASSIFICATION,//  let's set the modifiers on the field 
Groovy,WITHOUT_CLASSIFICATION,/*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/    contributed by Isaac Gouy */
Groovy,WITHOUT_CLASSIFICATION,//  not a problem the field helpers may be absent 
Groovy,WITHOUT_CLASSIFICATION,/*              * Keep logging if we're verbose. Else turn it off.              */
Groovy,WITHOUT_CLASSIFICATION,//  ... solve next 
Groovy,WITHOUT_CLASSIFICATION,//  types may be parameterized. If so we must ensure that generic type arguments   are made compatible 
Groovy,WITHOUT_CLASSIFICATION,//  dispatch to factories if it is not a literal method 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7330 
Groovy,WITHOUT_CLASSIFICATION,//  null == ignore (we have a better method already) 
Groovy,WITHOUT_CLASSIFICATION,//  commented out of groovy.g due to non determinisms  case MEMBER_POINTER_DEFAULT:      return defaultMethodPointerExpression(node); 
Groovy,WITHOUT_CLASSIFICATION,//  at this point should *always* stay empty 
Groovy,WITHOUT_CLASSIFICATION,//  replicate a little bit of AnnotationVisitor here   because we can't wait until later to do this 
Groovy,WITHOUT_CLASSIFICATION,//  does not apply on interfaces 
Groovy,WITHOUT_CLASSIFICATION,//     TODO: make this initialization able to set useReflection true    TODO: have some way of specifying another MetaClass Registry implementation   
Groovy,WITHOUT_CLASSIFICATION,//  If not specified we will return the narrowest possible   of Integer Long and BigInteger. 
Groovy,WITHOUT_CLASSIFICATION,//  general case for single method 
Groovy,WITHOUT_CLASSIFICATION,//  dangling comma 
Groovy,WITHOUT_CLASSIFICATION,//  legal cases 
Groovy,WITHOUT_CLASSIFICATION,//  Read in the threshold loadfactor and any hidden stuff 
Groovy,WITHOUT_CLASSIFICATION,//  reading the content of the file within a char buffer allow to keep the correct line endings 
Groovy,WITHOUT_CLASSIFICATION,//  Generate the loop body 
Groovy,WITHOUT_CLASSIFICATION,//  last chance lookup for classes within the current codebase 
Groovy,WITHOUT_CLASSIFICATION,//  note: LITERAL_def never created 
Groovy,WITHOUT_CLASSIFICATION,//  single declaration 
Groovy,WITHOUT_CLASSIFICATION,//  if some transformation decided to generate constructor then it probably knows who it does 
Groovy,WITHOUT_CLASSIFICATION,//    SYMBOLS 
Groovy,WITHOUT_CLASSIFICATION,//  copy generic type information if available 
Groovy,WITHOUT_CLASSIFICATION,//  not a primitive type. We must find a method which is called next 
Groovy,WITHOUT_CLASSIFICATION,//  isClosureCall() check verified earlier that a field exists 
Groovy,WITHOUT_CLASSIFICATION,// prefer explicit getter or setter over property if receiver is not 'this' 
Groovy,WITHOUT_CLASSIFICATION,//   Add to front of list 
Groovy,WITHOUT_CLASSIFICATION,//  getProperty 
Groovy,WITHOUT_CLASSIFICATION,//  we handle the property part as if it were not part of the property 
Groovy,WITHOUT_CLASSIFICATION,// helper.swapWithObject(ClassHelper.OBJECT_TYPE); 
Groovy,WITHOUT_CLASSIFICATION,//  default port to listen to 
Groovy,WITHOUT_CLASSIFICATION,//  We do not need to check instances of LowerCaseClass   to be a Class because unless there was an import for   for this we do not lookup these cases. This was a decision   made on the mailing list. To ensure we will not visit this   method again we set a NO_CLASS for this name 
Groovy,WITHOUT_CLASSIFICATION,//  now let's use the file name to determine the class name 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   turn setProperty on a Map to put on the Map itself 
Groovy,WITHOUT_CLASSIFICATION,//  array set: load sub call arraySet [] 
Groovy,WITHOUT_CLASSIFICATION,//  silent 
Groovy,WITHOUT_CLASSIFICATION,//  not the same device (would be "" on Linux/Unix) 
Groovy,WITHOUT_CLASSIFICATION,//  end ConsoleTextEditor.RedoAction 
Groovy,WITHOUT_CLASSIFICATION,//             Number n = (Number) newValue; 
Groovy,WITHOUT_CLASSIFICATION,//  explicitly labeled properties are already handled   don't transform final properties   don't transform static properties   VetoableASTTransformation will handle both @Bindable and @Vetoable 
Groovy,WITHOUT_CLASSIFICATION,//  ----------------------- override visit methods to provide contextual information --------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  this method was introduced as to prevent from a stack overflow described in GROOVY-5285 
Groovy,WITHOUT_CLASSIFICATION,//  to move this to a boundary class and then we wouldn't need this test 
Groovy,WITHOUT_CLASSIFICATION,//  this can happen if the receiver is Class<Foo> then   the actual receiver is Foo and declaringClass is Class 
Groovy,WITHOUT_CLASSIFICATION,//  avoid files which confuse us like ones with .. in path 
Groovy,WITHOUT_CLASSIFICATION,/*  the list might be empty   */
Groovy,WITHOUT_CLASSIFICATION,//  correct ls if we have \r\n 
Groovy,WITHOUT_CLASSIFICATION,//  original class causing bridge methods for methods in super class 
Groovy,WITHOUT_CLASSIFICATION,//  if original Byte meta class 
Groovy,WITHOUT_CLASSIFICATION,/*          * Bind the HTTP session object - if there is one.         * Note: we don't create one here!          */
Groovy,WITHOUT_CLASSIFICATION,//  check if the name is actually an aliased type name 
Groovy,WITHOUT_CLASSIFICATION,//  grab existing meta (usually adaptee but we may have nested use calls) 
Groovy,WITHOUT_CLASSIFICATION,//  closestClass and theType are not in a subtype relation we need   to check the distance to Object 
Groovy,WITHOUT_CLASSIFICATION,//  TODO we could support some default vals provided they were listed last 
Groovy,WITHOUT_CLASSIFICATION,//  Divisions may produce different results depending on operand types 
Groovy,WITHOUT_CLASSIFICATION,/* <JMenu> */
Groovy,WITHOUT_CLASSIFICATION,/* Long[11] */
Groovy,WITHOUT_CLASSIFICATION,//  Implementation methods  -------------------------------------------------------------------------                     
Groovy,WITHOUT_CLASSIFICATION,//  Quick way to get "1.0". 
Groovy,WITHOUT_CLASSIFICATION,//  vargs? 
Groovy,WITHOUT_CLASSIFICATION,//  it's an assignment 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)        * @see java.io.Writer#write(char[] int int)         */
Groovy,WITHOUT_CLASSIFICATION,//  code doesn't mention the removed param at this point okay to leave as is 
Groovy,WITHOUT_CLASSIFICATION,//  we may have to add additional elements here 
Groovy,WITHOUT_CLASSIFICATION,//  the class nodes are on different types   in this situation we must choose the correct execution path : either the bound   is an interface and we must find the implementing interface from the classnode   to compare their parameterized generics or the bound is a regular class and we   must compare the bound with a superclass 
Groovy,WITHOUT_CLASSIFICATION,//  if the matching offset is not the same as the end of the    previous match we have extra text not matched so set to  
Groovy,WITHOUT_CLASSIFICATION,//  we only need to check the variable name because the Groovy compiler   already fails if a variable with the same name already exists in the scope.   this means that a closure cannot shadow a class variable 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see java.lang.Object#hashCode()      */
Groovy,WITHOUT_CLASSIFICATION,// placeholder to assist in rotating vals 
Groovy,WITHOUT_CLASSIFICATION,//  fails after parser   empty ELIST 
Groovy,WITHOUT_CLASSIFICATION,//  The File from which we produce Readers. 
Groovy,WITHOUT_CLASSIFICATION,//  equal class with one maybe a primitive the later explicitCastArguments will solve this case 
Groovy,WITHOUT_CLASSIFICATION,//  invoke directly 
Groovy,WITHOUT_CLASSIFICATION,//  Uses annotation type declared in Java   instantiates annotation closure using pure Java APIs (no GDK)   triggers stub generation for class JavaCompatibility 
Groovy,WITHOUT_CLASSIFICATION,//  don't check synchronized here as it overlaps with ACC_SUPER 
Groovy,WITHOUT_CLASSIFICATION,//  resolve constructor parameter types 
Groovy,WITHOUT_CLASSIFICATION,//  =====================================================   STANDARD FONTS   ===================================================== 
Groovy,WITHOUT_CLASSIFICATION,//  let's do the catch nodes 
Groovy,WITHOUT_CLASSIFICATION,//  it's an instance; check if it's a Java one 
Groovy,WITHOUT_CLASSIFICATION,// --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  FooAdapter imports both api.Foo and lib.Foo using "lib.Foo as FooImpl" to disambiguate. 
Groovy,WITHOUT_CLASSIFICATION,//  dirs 
Groovy,WITHOUT_CLASSIFICATION,//  COMPARE_NOT_EQUAL            120   COMPARE_IDENTICAL            121    COMPARE_NOT_IDENTICAL        122   COMPARE_EQUAL                123   COMPARE_LESS_THAN            124   COMPARE_LESS_THAN_EQUAL      125   COMPARE_GREATER_THAN         126   COMPARE_GREATER_THAN_EQUAL   127 
Groovy,WITHOUT_CLASSIFICATION,//  do modified visit 
Groovy,WITHOUT_CLASSIFICATION,//             val.setValue(Boolean.TRUE);          } 
Groovy,WITHOUT_CLASSIFICATION,//  start with methods from the parent if any 
Groovy,WITHOUT_CLASSIFICATION,//  visitMlComment     multi-line comments are not created on the AST currently. 
Groovy,WITHOUT_CLASSIFICATION,//  no processing if existing constructors found unless forced or ImmutableBase in play 
Groovy,WITHOUT_CLASSIFICATION,//  Ensures not adding any regexp with capturing groups 
Groovy,WITHOUT_CLASSIFICATION,//  any further use of that variable can trigger uninitialized ot not final errors 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------- codecs for method return type signatures ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  import can be used only as top level element 
Groovy,WITHOUT_CLASSIFICATION,//  let's convert to an int 
Groovy,WITHOUT_CLASSIFICATION,//  only add guard to methods of the form: logVar.logMethod(params) 
Groovy,WITHOUT_CLASSIFICATION,//  initialize the lexer if necessary 
Groovy,WITHOUT_CLASSIFICATION,//  to aid explicitCastArguments we convert to the wrapper type to let is only unbox 
Groovy,WITHOUT_CLASSIFICATION,//  don't check volatile here as it overlaps with ACC_BRIDGE   additional modifiers not allowed for interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  cached class 
Groovy,WITHOUT_CLASSIFICATION,/* short[4] */
Groovy,WITHOUT_CLASSIFICATION,// clean up assertion recorder 
Groovy,WITHOUT_CLASSIFICATION,//    flush the response buffer. 
Groovy,WITHOUT_CLASSIFICATION,//  current scope 
Groovy,WITHOUT_CLASSIFICATION,//  make a public method if none exists otherwise try a private method with leading underscore 
Groovy,WITHOUT_CLASSIFICATION,/*  && !specialNamedArgCase */
Groovy,WITHOUT_CLASSIFICATION,//  method has already been visited by a static type checking visitor 
Groovy,WITHOUT_CLASSIFICATION,//  generate closure as public class to make sure it can be properly invoked by classes of the 
Groovy,WITHOUT_CLASSIFICATION,//  default case 
Groovy,WITHOUT_CLASSIFICATION,//  add static value():Object[][] method 
Groovy,WITHOUT_CLASSIFICATION,//  we need to resolve again! 
Groovy,WITHOUT_CLASSIFICATION,//  add the ability to parse scripts with a specified encoding 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   field 
Groovy,WITHOUT_CLASSIFICATION,//  anything   anything but EOF   ";" "\n" EOF   ";" "\n" EOF "}" 
Groovy,WITHOUT_CLASSIFICATION,//  dispatching to EmptyStatement will not call back visitor   must call our visitEmptyStatement explicitly 
Groovy,WITHOUT_CLASSIFICATION,//  identical types 
Groovy,WITHOUT_CLASSIFICATION,//  transformation has already been run on this class node   so we'll use a silent collector in order not to duplicate errors 
Groovy,WITHOUT_CLASSIFICATION,//  ignore as we are re-throwing the original cause 
Groovy,WITHOUT_CLASSIFICATION,//  if we don't have access to the system clipboard will throw   a security exception 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6357 : The JVM does not allow private modifier on inner classes: should be package private 
Groovy,WITHOUT_CLASSIFICATION,//  look for @Field 
Groovy,WITHOUT_CLASSIFICATION,//  if there is a property of that name then a field of that   name already exists which means this new field here should   be used instead of the field the property originally has. 
Groovy,WITHOUT_CLASSIFICATION,//  lets call the closures now 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: hello.javav 1.3 2007-06-20 03:32:39 bfulgham Exp $   http://shootout.alioth.debian.org/ 
Groovy,WITHOUT_CLASSIFICATION,/*  If the internal map was not create yet don't. We can chop the value w/o creating the internal map. */
Groovy,WITHOUT_CLASSIFICATION,//  always use the expando properties first 
Groovy,WITHOUT_CLASSIFICATION,//  first short circuit 
Groovy,WITHOUT_CLASSIFICATION,//  AsmClassGenerator may create "this" expressions that the type checker knows nothing about 
Groovy,WITHOUT_CLASSIFICATION,//  this will trigger the call to VMPlugin#configureClassNode(CompileUnitClassNode) 
Groovy,WITHOUT_CLASSIFICATION,//  PIECES 
Groovy,WITHOUT_CLASSIFICATION,//  access to a private field from a section of code that normally doesn't have access to it like a   closure or an inner class 
Groovy,WITHOUT_CLASSIFICATION,//  ignore it 
Groovy,WITHOUT_CLASSIFICATION,//  Preserve insertion order 
Groovy,WITHOUT_CLASSIFICATION,//  We use here the class cache cachedClasses to prevent   calls to ClassLoader#loadClass. Disabling this cache will   cause a major performance hit. 
Groovy,WITHOUT_CLASSIFICATION,/* isNested: */
Groovy,WITHOUT_CLASSIFICATION,//  wrap call in an IFNULL check 
Groovy,WITHOUT_CLASSIFICATION,//  int Integer 
Groovy,WITHOUT_CLASSIFICATION,//  only descend if we have annotations to look for 
Groovy,WITHOUT_CLASSIFICATION,//  Object fits all so simple dispatch rule here 
Groovy,WITHOUT_CLASSIFICATION,//  void   boolean   1 byte integer   2 byte integer   4 byte integer   8 byte integer   32 bit floating point number   64 bit floating point number   unicode character code 
Groovy,WITHOUT_CLASSIFICATION,//  this is a precompiled class! 
Groovy,WITHOUT_CLASSIFICATION,//  we match only on the number of arguments not anything else 
Groovy,WITHOUT_CLASSIFICATION,/*  7: float   */
Groovy,WITHOUT_CLASSIFICATION,//  let's call the collections constructor   passing in the list wrapper 
Groovy,WITHOUT_CLASSIFICATION,//  maybe possible to have this true in joint compilation mode 
Groovy,WITHOUT_CLASSIFICATION,//  create base createCallSiteArray method 
Groovy,WITHOUT_CLASSIFICATION,//  obsolete java syntax 
Groovy,WITHOUT_CLASSIFICATION,/*  discard first  */
Groovy,WITHOUT_CLASSIFICATION,//  make cached call for given method 
Groovy,WITHOUT_CLASSIFICATION,/*  ******** java.time.ZoneId extension methods ********  */
Groovy,WITHOUT_CLASSIFICATION,//  Precondition: accessorName.length() > prefixLength 
Groovy,WITHOUT_CLASSIFICATION,//  uh-oh we're in unicode country.... 
Groovy,WITHOUT_CLASSIFICATION,//  equality check is enough and faster than instanceof check no need to check superclasses since Boolean is final 
Groovy,WITHOUT_CLASSIFICATION,//  List<Foo> l = new List() is an example for incomplete generics type info 
Groovy,WITHOUT_CLASSIFICATION,//  find longhand since the annotation from earlier versions is now a meta annotation 
Groovy,WITHOUT_CLASSIFICATION,//  finally public and inherited 
Groovy,WITHOUT_CLASSIFICATION,//  it was not null and not boolean so call asBoolean 
Groovy,WITHOUT_CLASSIFICATION,//  ignore instantiation errors try to do main 
Groovy,WITHOUT_CLASSIFICATION,//  greater than a[j] to the right of a[j] 
Groovy,WITHOUT_CLASSIFICATION,//  remove @endMarker 
Groovy,WITHOUT_CLASSIFICATION,/* Method[] */
Groovy,WITHOUT_CLASSIFICATION,/*     *  when InnerClassVisitor adds this.this$0 = $p$n it adds it as a BlockStatement having that    *  ExpressionStatement     */
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    float  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,/*                              * GROOVY-3985: Remove the final modifier from $INIT method in this case                             * so that subclasses of enum generated for enum constants (aic) can provide                             * their own $INIT method                              */
Groovy,WITHOUT_CLASSIFICATION,//  can't access the field directly but there may be a getter 
Groovy,WITHOUT_CLASSIFICATION,//  return arg0.prop <=> arg1.prop; 
Groovy,WITHOUT_CLASSIFICATION,/*       * Check SecuritySupport to see if security is properly configured.  If not fail the first      * test that runs.  All remaining tests will run but not do any security checking.       */
Groovy,WITHOUT_CLASSIFICATION,//  addMethod will ignore attempts to override abstract or static methods with same signature on self 
Groovy,WITHOUT_CLASSIFICATION,//  fixed number of arguments && name is a real String and no GString 
Groovy,WITHOUT_CLASSIFICATION,//  This method should be called by CallSite only 
Groovy,WITHOUT_CLASSIFICATION,//  note: there is no coercion for boolean and char. Range matters precision doesn't 
Groovy,WITHOUT_CLASSIFICATION,//  nor the interfaces 
Groovy,WITHOUT_CLASSIFICATION,/*  GROOVY-8609  */
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   turn getProperty on a Map to get on the Map itself 
Groovy,WITHOUT_CLASSIFICATION,//  math methods used by indy 
Groovy,WITHOUT_CLASSIFICATION,//  register an attribute change notification listener with model mbean 
Groovy,WITHOUT_CLASSIFICATION,// start 
Groovy,WITHOUT_CLASSIFICATION,//  visitLiteralImplements     token type "implements" only used by parser never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,//  This fixes xform declaration expressions but not other synthetic fields which aren't set up correctly 
Groovy,WITHOUT_CLASSIFICATION,//  check non-braced single statement 
Groovy,WITHOUT_CLASSIFICATION,//  in the case that there is already a field we would   like to use that field instead of the default field 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.util.BuilderSupport#createNode(java.lang.Object java.util.Map java.lang.Object)      */
Groovy,WITHOUT_CLASSIFICATION,//  now check for closure override 
Groovy,WITHOUT_CLASSIFICATION,//  the vargs argument is missing so fill it with an empty array 
Groovy,WITHOUT_CLASSIFICATION,//  do nothing and fall back to the other version 
Groovy,WITHOUT_CLASSIFICATION,//  This solution is based on an absolute path 
Groovy,WITHOUT_CLASSIFICATION,//  remove "L" and ";" 
Groovy,WITHOUT_CLASSIFICATION,//  load main Closure 
Groovy,WITHOUT_CLASSIFICATION,//  then the array version should be preferred 
Groovy,WITHOUT_CLASSIFICATION,//  make sure to/from are swapped 
Groovy,WITHOUT_CLASSIFICATION,//  we need to create a curried closure version 
Groovy,WITHOUT_CLASSIFICATION,//  reset any out of bounds requests (again) 
Groovy,WITHOUT_CLASSIFICATION,//  do not return here and try all static star imports because currently we do not know which outer class the class to resolve is declared in 
Groovy,WITHOUT_CLASSIFICATION,//  --------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  return 
Groovy,WITHOUT_CLASSIFICATION,//  for arguments we need to visit closures *after* the method has been chosen 
Groovy,WITHOUT_CLASSIFICATION,//  prime the parser and reparse whole document 
Groovy,WITHOUT_CLASSIFICATION,//  phase operations for this transform class have already been added before so remove from current scan cycle 
Groovy,WITHOUT_CLASSIFICATION,//  if origByte and withoutCustomHandle 
Groovy,WITHOUT_CLASSIFICATION,//  helper to handle different stack based variables 
Groovy,WITHOUT_CLASSIFICATION,/*      * Constructor used by makeArray() if no real class is available      */
Groovy,WITHOUT_CLASSIFICATION,//  have to compile regexp first so that it will match 
Groovy,WITHOUT_CLASSIFICATION,//  check if a super class has @Vetoable annotations 
Groovy,WITHOUT_CLASSIFICATION,//  long x long 
Groovy,WITHOUT_CLASSIFICATION,//  The styled document the filter parses 
Groovy,WITHOUT_CLASSIFICATION,//  Discard all entries 
Groovy,WITHOUT_CLASSIFICATION,//  isCase methods  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  superclasses are on distinct hierarchy branches so we 
Groovy,WITHOUT_CLASSIFICATION,//  will handle :        * collection case where argument is an array        * array transformation (staticTargetType.isArray())        * constructor invocation 
Groovy,WITHOUT_CLASSIFICATION,//  if the sam type or closure type do not provide generics information 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see java.lang.Object#clone()      */
Groovy,WITHOUT_CLASSIFICATION,//  don't forget to tell the class about this default constructor. 
Groovy,WITHOUT_CLASSIFICATION,//  as charAt which is very expensive for large GStrings. 
Groovy,WITHOUT_CLASSIFICATION,/*  backslash  */
Groovy,WITHOUT_CLASSIFICATION,//  set up method listeners (such as attributeListener and Operation Listeners)   item -> [Map[methodListener:[target:"" tpe:"" callback:&Closure] ... ]] 
Groovy,WITHOUT_CLASSIFICATION,//  Do NOT trust the type of the property node! 
Groovy,WITHOUT_CLASSIFICATION,// return null; 
Groovy,WITHOUT_CLASSIFICATION,//  "Interfaces and Traits" section should show "Foo" as one of the implemented interfaces 
Groovy,WITHOUT_CLASSIFICATION,//   --------------------------------------------------------                Property handling super: set    -------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  visit condition leave boolean on stack 
Groovy,WITHOUT_CLASSIFICATION,//  Configuration data 
Groovy,WITHOUT_CLASSIFICATION,/*         currentKey and currentValue are set here to ensure that next()        returns normally if hasNext() returns true. This avoids        surprises especially when final element is removed during        traversal -- instead we just ignore the removal during        current traversal.         */
Groovy,WITHOUT_CLASSIFICATION,//  in order to avoid calls to castToType which is the dynamic behaviour we make sure that we call CHECKCAST instead   then replace the top operand type 
Groovy,WITHOUT_CLASSIFICATION,// nothing to really test here...just looking for debug that says it   used cache version 
Groovy,WITHOUT_CLASSIFICATION,//  so we can print a page number 
Groovy,WITHOUT_CLASSIFICATION,//  TimeZone is only hours and minutes--no seconds 
Groovy,WITHOUT_CLASSIFICATION,//  prepare call 
Groovy,WITHOUT_CLASSIFICATION,//     @Override 
Groovy,WITHOUT_CLASSIFICATION,//  Outer.this for any level of nesting 
Groovy,WITHOUT_CLASSIFICATION,//  remove methods which should not appear in the trait interface 
Groovy,WITHOUT_CLASSIFICATION,//  object type 
Groovy,WITHOUT_CLASSIFICATION,// puts ("key with quote" key); 
Groovy,WITHOUT_CLASSIFICATION,//  look into cache 
Groovy,WITHOUT_CLASSIFICATION,//  MetaClassImpl not designed for modification just return false 
Groovy,WITHOUT_CLASSIFICATION,//  add a super call 
Groovy,WITHOUT_CLASSIFICATION,//  finally if it's not UTF-8 nor US-ASCII let's assume the encoding is the default encoding 
Groovy,WITHOUT_CLASSIFICATION,//  found a \r or \n like on Mac or Unix   could also be Windows' \r\n 
Groovy,WITHOUT_CLASSIFICATION,//    Get the template source file handle. 
Groovy,WITHOUT_CLASSIFICATION,//    Requested script/template file has been target of    RequestDispatcher.include(). Its path is assembled from the relevant   javax.servlet.include.* request attributes and returned!   
Groovy,WITHOUT_CLASSIFICATION,// out.print("<" + t.getType() + ">"); 
Groovy,WITHOUT_CLASSIFICATION,//  generate a field node 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: matrix.javav 1.1 2004-05-23 07:14:27 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   modified to use a little less memory by Thomas Holenstein 
Groovy,WITHOUT_CLASSIFICATION,/*             areReversed() already does an implicit type compatibility check            based on DefaultTypeTransformation.compareToWithEqualityCheck() for mixed classes            but it is only invoked if reverse == null.            So Object Range has to perform those type checks for consistency even when not calling            compareToWithEqualityCheck() and ObjectRange has            to use the normalized value used in a successful comparison in            compareToWithEqualityCheck(). Currently that means Chars and single-char Strings            are evaluated as the char's charValue (an integer) when compared to numbers.            So '7'..'9' should produce ['7' '8' '9'] whereas ['7'..9] and [7..'9'] should produce [55 56 57].            if classes match or both numerical no checks possible / necessary         */
Groovy,WITHOUT_CLASSIFICATION,//  add a helper annotation indicating that it is a bridge method 
Groovy,WITHOUT_CLASSIFICATION,/*          * Bind form parameter key-value hash map.         *         * If there are multiple they are passed as an array.          */
Groovy,WITHOUT_CLASSIFICATION,//  this allows to override the commandline conf 
Groovy,WITHOUT_CLASSIFICATION,//  normal assignment 
Groovy,WITHOUT_CLASSIFICATION,//  TODO: support older parser attribute values as well 
Groovy,WITHOUT_CLASSIFICATION,// puts ("key" "#" + key + "#" value); 
Groovy,WITHOUT_CLASSIFICATION,/*              * Null cause?!              */
Groovy,WITHOUT_CLASSIFICATION,//  create MIN_VALUE and MAX_VALUE fields 
Groovy,WITHOUT_CLASSIFICATION,//  controller.isFastPath() -> fastPath 
Groovy,WITHOUT_CLASSIFICATION,//  Static methods only 
Groovy,WITHOUT_CLASSIFICATION,//  check if recompilation already happened. 
Groovy,WITHOUT_CLASSIFICATION,//  Regex 
Groovy,WITHOUT_CLASSIFICATION,//  evaluate parameters 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-xxxx 
Groovy,WITHOUT_CLASSIFICATION,//     private Integer canonicalHashCodeCache = null; 
Groovy,WITHOUT_CLASSIFICATION,// STRING          ( "a string"                           Pattern.compile("\"([^\"\\\\]*|\\\\[\"\\\\bfnrt\\/]|\\\\u[0-9a-fA-F]{4})*\"" Pattern.DOTALL)); 
Groovy,WITHOUT_CLASSIFICATION,//  Copied from org.apache.tools.ant.Task since we need to get a real thing before it gets nulled in DispatchUtils.execute 
Groovy,WITHOUT_CLASSIFICATION,// Number.class 
Groovy,WITHOUT_CLASSIFICATION,//  Use "double delta=Math.sqrt(Math.ulp(1.0))" with Java 1.5 or better 
Groovy,WITHOUT_CLASSIFICATION,//  no parent super class representing both types could be found   or both class nodes implement common interfaces which may have   been parameterized differently.   We must create a classnode for which the "superclass" is potentially parameterized   plus the interfaces 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setDTDHandler(org.xml.sax.DTDHandler)      */
Groovy,WITHOUT_CLASSIFICATION,/*              we will actually do                   (x < y) ? -1 : ((x == y) ? 0 : 1)          which is the essence of what the call with Number would do          this compiles to something along                        <x>              <y>              LCMP              IFGE L1              ICONST_M1              GOTO L2          L1              <x>              <y>              LCMP              IFNE L3              ICONST_0              GOTO L2          L3              ICONST_1          L2                    since the operators are already on the stack and we don't want          to load them again we will instead duplicate them. This will          require some pop actions in the branches!                        DUP4          (operands: L1L2L1L2)              LCMP                        IFGE L1       (operands: L1L2)              ICONST_M1     (operands: L1L2I)              GOTO L2          L1              -----         (operands: L1L2)              LCMP              IFNE L3       (operands: -)              ICONST_0      (operands: I)              GOTO L2          L3              - jump from L1 branch to here (operands: -)              ICONST_1      (operands: I)          L2            - if jump from GOTO L2 we have LLI but need only I          - if from L3 branch we get only I                    this means we have to pop of LL before loading -1                    since there is no DUP4 we have to do this:            DUP2_X1            POP2            DUP2_X1            DUP2_X1            POP2            DUP2_X1                   */
Groovy,WITHOUT_CLASSIFICATION,/*      * These runners were originally included directly in GroovyShell.     * Since they are part of core they are added directly to the     * GroovyRunnerRegistry rather than via a provider configuration     * file in META-INF/services. If any of these runners are moved     * out to a submodule then they should be registered using the     * provider configuration file (see groovy-testng).     *     * These are internal classes and not meant to be referenced     * outside of the GroovyRunnerRegistry.      */
Groovy,WITHOUT_CLASSIFICATION,//  For a special constructor call inside a constructor we don't need   any result object on the stack for outside the constructor we do.   to keep the stack height for the able we kept one object as dummy 
Groovy,WITHOUT_CLASSIFICATION,//  used _everywhere_  lets assume that the other specific   testcases include enough ident usage for now. 
Groovy,WITHOUT_CLASSIFICATION,//  should never happen as a file with no content   but with a BOM has at least one char 
Groovy,WITHOUT_CLASSIFICATION,//  so first we remove hidden generics 
Groovy,WITHOUT_CLASSIFICATION,//  handle different states for the implicit "this" 
Groovy,WITHOUT_CLASSIFICATION,//  filename or content of script 
Groovy,WITHOUT_CLASSIFICATION,/* double[15] */
Groovy,WITHOUT_CLASSIFICATION,//  a common super type exists all we have to do is to parameterize   it according to the types provided by the two class nodes 
Groovy,WITHOUT_CLASSIFICATION,//  half the default stream buffer size   double the default line length   End Of File 
Groovy,WITHOUT_CLASSIFICATION,//  Not a (get/set/is) method that contains a property name 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8562   when vexp has the same name as a property of the owner   the IMPLICIT_RECEIVER must be set in case it's the delegate 
Groovy,WITHOUT_CLASSIFICATION,//  close the ring: 
Groovy,WITHOUT_CLASSIFICATION,// <ARRAY_DECLARATOR>int</ARRAY_DECLARATOR> primes = new int(<ARRAY_DECLARATOR>5</ARRAY_DECLARATOR>) 
Groovy,WITHOUT_CLASSIFICATION,//  save copy for later 
Groovy,WITHOUT_CLASSIFICATION,//  create an empty arraylist 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-8881: cater for closures within closures - getThisObject is already outer class of all closures 
Groovy,WITHOUT_CLASSIFICATION,//  let's register the default methods 
Groovy,WITHOUT_CLASSIFICATION,//  each found connection must comply with already found connections 
Groovy,WITHOUT_CLASSIFICATION,//  want this synthetic constructor to show up in corbertura reports 
Groovy,WITHOUT_CLASSIFICATION,//  Attempts to evict entries from the map if it exceeds the maximum   capacity. If the eviction fails due to a concurrent removal of the   victim that removal may cancel out the addition that triggered this   eviction. The victim is eagerly unlinked before the removal task so   that if an eviction is still required then a new victim will be chosen   for removal. 
Groovy,WITHOUT_CLASSIFICATION,//  visit RHS first for expressions like a = b = 0 
Groovy,WITHOUT_CLASSIFICATION,/* Number[18] */
Groovy,WITHOUT_CLASSIFICATION,//  Reset start if new buffer 
Groovy,WITHOUT_CLASSIFICATION,//  "." is used to transfer compilation dependencies which will be   recollected later during compilation 
Groovy,WITHOUT_CLASSIFICATION,//  if a positive index is accessed not initialized so far   initialization up to that index takes place 
Groovy,WITHOUT_CLASSIFICATION,//  Seems wrong but otherwise some tests fail (e.g. TestingASTTransformsTest) 
Groovy,WITHOUT_CLASSIFICATION,// if s_i and t_i don't have have the same case 
Groovy,WITHOUT_CLASSIFICATION,//  styleMap then set the attributes of the matching string 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------    // SOURCE SAMPLING 
Groovy,WITHOUT_CLASSIFICATION,//  annotation to the method node 
Groovy,WITHOUT_CLASSIFICATION,//  all arguments were null 
Groovy,WITHOUT_CLASSIFICATION,/*  0: dummy   */
Groovy,WITHOUT_CLASSIFICATION,//  -1 because the varg part is optional 
Groovy,WITHOUT_CLASSIFICATION,//  test integers 
Groovy,WITHOUT_CLASSIFICATION,//  pop for "makeBlockRecorder(finallyStatement)" 
Groovy,WITHOUT_CLASSIFICATION,//  would happen if you have a raw Map type for example 
Groovy,WITHOUT_CLASSIFICATION,//  a ClassNode superclass for an interface is not   another interface but always Object. This implies that   "extends" for an interface is understood as "implements"   for a ClassNode. Therefore even if b doesn't implement   interface a a could "implement" other interfaces that b   implements too so we must create a list of matching interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  iterates through s   iterates through t 
Groovy,WITHOUT_CLASSIFICATION,//  check for a public/protected getter since JavaBean getters haven't been recognised as properties   at this point and we don't want private field access for that case which will be handled later 
Groovy,WITHOUT_CLASSIFICATION,//  not in java   not in java   not in java 
Groovy,WITHOUT_CLASSIFICATION,//  rotate down perm[0..prev] by one 
Groovy,WITHOUT_CLASSIFICATION,//  Note: old closure syntax using BOR is deprecated and also never creates/visits a BOR node 
Groovy,WITHOUT_CLASSIFICATION,//  lets check the parameter types match 
Groovy,WITHOUT_CLASSIFICATION,//  the default style of this lexer node 
Groovy,WITHOUT_CLASSIFICATION,//  if no invalid UTF-8 were encountered we can assume the encoding is UTF-8 
Groovy,WITHOUT_CLASSIFICATION,//  perhaps overkill but let compareTo be based on hashes for commutativity   return this.hashCode() <=> other.hashCode() 
Groovy,WITHOUT_CLASSIFICATION,//  ---------------------   feature: 'threadsafe' 
Groovy,WITHOUT_CLASSIFICATION,//  if we reach this point we have at least one parameter or return type that 
Groovy,WITHOUT_CLASSIFICATION,//  list containing finally blocks   such a block is created by synchronized or finally and 
Groovy,WITHOUT_CLASSIFICATION,//  now that a method has been chosen we are allowed to visit the closures 
Groovy,WITHOUT_CLASSIFICATION,//  long 
Groovy,WITHOUT_CLASSIFICATION,//         CheckClassAdapter.verify(new ClassReader(b) true new PrintWriter(System.err)); 
Groovy,WITHOUT_CLASSIFICATION,//  category method needs Thread check   cases:   (1) method is a category method       We need to check if the category in the current thread is still active.       Since we invalidate on leaving the category checking for it being       active directly is good enough.   (2) method is in use scope but not from category       Since entering/leaving a category will invalidate there is no need for any special check   (3) method is not in use scope /and not from category       Since entering/leaving a category will invalidate there is no need for any special check 
Groovy,WITHOUT_CLASSIFICATION,//  leaf nodes that haven't been coloured yet 
Groovy,WITHOUT_CLASSIFICATION,// increment acc if it hasn't been incremented in the current iteration 
Groovy,WITHOUT_CLASSIFICATION,//  if the call expression is a spread operator call then we must make sure that 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5566 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)         * @see groovy.lang.GroovyObject#getProperty(java.lang.String)          */
Groovy,WITHOUT_CLASSIFICATION,//  visit TripleDot not used in the AST 
Groovy,WITHOUT_CLASSIFICATION,// can't use treeset since the base classes are different 
Groovy,WITHOUT_CLASSIFICATION,//  verify component type but if we reach that point the only possibility is that the argument is   the last one of the call so we're in the cast of a vargs call   (otherwise we face a type checker bug) 
Groovy,WITHOUT_CLASSIFICATION,//  Handle String StringBuilder GString and other CharSequence implementations 
Groovy,WITHOUT_CLASSIFICATION,//  optimization path 
Groovy,WITHOUT_CLASSIFICATION,//  current class details 
Groovy,WITHOUT_CLASSIFICATION,//  we have to use doMethodInvoke here instead of simply invoke   because getMetaMethod may provide a method that can not be called   without further argument transformation which is done only in    doMethodInvoke 
Groovy,WITHOUT_CLASSIFICATION,//  this assumes LIST_CONSTRUCTOR set by PreJava2GroovyConvertor 
Groovy,WITHOUT_CLASSIFICATION,//  end::bsf_simple[] 
Groovy,WITHOUT_CLASSIFICATION,//  check package this class is defined in. The usage of ConstructedClassWithPackage here   means that the module package will not be involved when the   compiler tries to find an inner class. 
Groovy,WITHOUT_CLASSIFICATION,//  make sure Map#getAt() and List#getAt handled with the bracket syntax are properly compiled 
Groovy,WITHOUT_CLASSIFICATION,//  find first { 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   void firePropertyChange(String name Object oldValue Object newValue) {       this$propertyChangeSupport.firePropertyChange(name oldValue newValue) 
Groovy,WITHOUT_CLASSIFICATION,//  add node metadata for default parameters because they are erased by the Verifier 
Groovy,WITHOUT_CLASSIFICATION,//  Grab processing may have brought in new AST transforms into various phases process them as well 
Groovy,WITHOUT_CLASSIFICATION,//  These fields provide support to bound the map by a maximum capacity 
Groovy,WITHOUT_CLASSIFICATION,//  ... or more relaxed?   configuration = CompilerConfiguration.DEFAULT; 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5681 and GROOVY-5632 
Groovy,WITHOUT_CLASSIFICATION,//  all properties are also always fields 
Groovy,WITHOUT_CLASSIFICATION,//  make the class abstract also see Effective Java p.152 
Groovy,WITHOUT_CLASSIFICATION,//  generated by the compiler yet (generated by the Verifier) 
Groovy,WITHOUT_CLASSIFICATION,//  ++   ++   ++   + 
Groovy,WITHOUT_CLASSIFICATION,//  add default constructor to doc   name of class for the constructor 
Groovy,WITHOUT_CLASSIFICATION,//  this is the counterpart of addThisReference(). To non-static inner classes outer this should be 
Groovy,WITHOUT_CLASSIFICATION,//  A fast-path removal 
Groovy,WITHOUT_CLASSIFICATION,//  modify the Java AST into a Groovy AST 
Groovy,WITHOUT_CLASSIFICATION,//  primitive types must be boxed 
Groovy,WITHOUT_CLASSIFICATION,//  sort in a new list to prevent side effects 
Groovy,WITHOUT_CLASSIFICATION,//  we can't just remove from the update set   because we may be local or global the path knows 
Groovy,WITHOUT_CLASSIFICATION,//  empty 
Groovy,WITHOUT_CLASSIFICATION,//  If both values are null return 0 
Groovy,WITHOUT_CLASSIFICATION,//  save original streams 
Groovy,WITHOUT_CLASSIFICATION,//  don't make static accessors final 
Groovy,WITHOUT_CLASSIFICATION,//                     cacheStaticMethod(keymetaMethod); 
Groovy,WITHOUT_CLASSIFICATION,//  the value isn't use in the getOrPut call - see the EntryWithValue constructor above 
Groovy,WITHOUT_CLASSIFICATION,//  TODO 
Groovy,WITHOUT_CLASSIFICATION,// GROOVY-3711: The following call now results in a valid script class node so foo.Bar needs to get resolved. 
Groovy,WITHOUT_CLASSIFICATION,//  use primitives for efficiency 
Groovy,WITHOUT_CLASSIFICATION,//  variable is not on stack because we are   inside a nested Closure and this variable   was not used before   then load it from the Closure field 
Groovy,WITHOUT_CLASSIFICATION,//  we already know parameter length is bigger zero and last is a vargs   the excess arguments are all put in an array for the vargs call   so check against the component type 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.GroovyObject#setProperty(java.lang.String java.lang.Object)       */
Groovy,WITHOUT_CLASSIFICATION,//  0 means a direct match 
Groovy,WITHOUT_CLASSIFICATION,//    Recurse for inner classes 
Groovy,WITHOUT_CLASSIFICATION,//  replace all calls for super with the correct MOP method 
Groovy,WITHOUT_CLASSIFICATION,//  case of: def foo = new HashMap<>() 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------       custom meta class creation handle  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: nestedloop.javav 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  premature end of the object 
Groovy,WITHOUT_CLASSIFICATION,// runTest("ClosureMethodTest.groovy");  runTest("tree/VerboseTreeTest.groovy"); 
Groovy,WITHOUT_CLASSIFICATION,//  visit Unused "const" "do" "goto" - unsurprisingly these are unused by the AST. 
Groovy,WITHOUT_CLASSIFICATION,//  move from super class to interface; 
Groovy,WITHOUT_CLASSIFICATION,//                     storeType(pexp setterMethod.getParameters()[0].getType()); 
Groovy,WITHOUT_CLASSIFICATION,//  For querying ignore all errors   Warning indicates likely error   Warning indicates possible error   Warning indicates paranoia on the part of the compiler 
Groovy,WITHOUT_CLASSIFICATION,//  = assignment 
Groovy,WITHOUT_CLASSIFICATION,//  block to monitor for exceptions   catch block for a particular exception   block to always execute on exit of the try   statement to throw an exception   method modifier to declare thrown transactions   alternate throw for code invariants 
Groovy,WITHOUT_CLASSIFICATION,/*  Return only directories?  */
Groovy,WITHOUT_CLASSIFICATION,/*                 class B extends A {}                Animal foo(A o) {...}                Person foo(B i){...}                B  a = new B()                Person p = foo(b)              */
Groovy,WITHOUT_CLASSIFICATION,//  Read until the appropriate line number. 
Groovy,WITHOUT_CLASSIFICATION,//  this may happen when a variable declaration type is wider than the subsequent assignment values   for example :   def o = 1 // first an int   o = 'String' // then a string   o = new Object() // and eventually an object !   in that case the INFERRED_TYPE corresponds to the current inferred type while   DECLARATION_INFERRED_TYPE is the type which should be used for the initial type declaration 
Groovy,WITHOUT_CLASSIFICATION,//  Implementation note: By default Groovy uses soft references to store MetaClass   this insures the registry doesn't grow and get out of hand. By doing this we're   saying this this EMC will be a hard reference in the registry. As we're only   going have a small number of classes that have modified EMC this is ok 
Groovy,WITHOUT_CLASSIFICATION,//  ----------------------------------------------------   feature?: allow break/continue with value from loops? 
Groovy,WITHOUT_CLASSIFICATION,//    Factory access   
Groovy,WITHOUT_CLASSIFICATION,//  print the text with its own routines 
Groovy,WITHOUT_CLASSIFICATION,//  load array: load x and DUP [load sub call arrayGet load b call operation load sub call arraySet]  
Groovy,WITHOUT_CLASSIFICATION,//  arguments 
Groovy,WITHOUT_CLASSIFICATION,//  TODO: add vargs handling 
Groovy,WITHOUT_CLASSIFICATION,//  output differs from input; we write to our local buffer 
Groovy,WITHOUT_CLASSIFICATION,//  if the object expression is a closure shared variable we will have to perform a second pass 
Groovy,WITHOUT_CLASSIFICATION,//  let's create a ScriptReference to pass into the closure 
Groovy,WITHOUT_CLASSIFICATION,//  file.exists() might be case insensitive. Let's do   case sensitive match for the filename 
Groovy,WITHOUT_CLASSIFICATION,//  We don't allow a static context (e.g. a static method) to access   a non-static variable (e.g. a non-static field). 
Groovy,WITHOUT_CLASSIFICATION,//  ex: (char) 'c' 
Groovy,WITHOUT_CLASSIFICATION,//   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4   "1 9 9 4 - 1 1 - 0 5 T 0 8 : 1 5 : 3 0 - 0 5 : 0 0 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6921: We must force a call to getType in order to update closure shared variable whose   types are inferred thanks to closure parameter type inference 
Groovy,WITHOUT_CLASSIFICATION,//  to close sockets gracefully etc... 
Groovy,WITHOUT_CLASSIFICATION,//  only repaint the line numbers in the gutter when the document has changed   in case lines (hence line numbers) have been added or removed from the document 
Groovy,WITHOUT_CLASSIFICATION,//  pop for the variable 
Groovy,WITHOUT_CLASSIFICATION,//  a more specific interface exists in the list keep it 
Groovy,WITHOUT_CLASSIFICATION,//   PLUS        200    MINUS       201    MULTIPLY    202    DIV (203) but we don't want that one    INTDIV      204    MOD         203 
Groovy,WITHOUT_CLASSIFICATION,//  if we reach here we have an unhandled case  
Groovy,WITHOUT_CLASSIFICATION,//  capture ant's output so we can verify the effect of passing compilerarg to javac 
Groovy,WITHOUT_CLASSIFICATION,//  remove all old entries including the "." entry 
Groovy,WITHOUT_CLASSIFICATION,//  This test ensures that value != this If you ever change this ensure that value != this 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   executing the getter method 
Groovy,WITHOUT_CLASSIFICATION,//  there must be one continuation byte of the form 10xxxxxx   otherwise the following character is is not a valid UTF-8 construct 
Groovy,WITHOUT_CLASSIFICATION,//  pop if-then-else temporary type info 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: ackermann.javav 1.2 2005-05-13 16:24:17 igouy-guest Exp $   http://www.bagley.org/~doug/shootout/  
Groovy,WITHOUT_CLASSIFICATION,//  ignore the first token as we want n-1 parent dirs 
Groovy,WITHOUT_CLASSIFICATION,//  parameters = parameters of the constructor 
Groovy,WITHOUT_CLASSIFICATION,//  add ast transforms both by class names and classes which should result in an error  
Groovy,WITHOUT_CLASSIFICATION,//  anything will do as we only check size == 1 
Groovy,WITHOUT_CLASSIFICATION,//  see if instanceof applies 
Groovy,WITHOUT_CLASSIFICATION,// CHECKSTYLE.ON: VisibilityModifierCheck 
Groovy,WITHOUT_CLASSIFICATION,//  no this$ methods for non-private isThis=true   super$ method for non-private isThis=false 
Groovy,WITHOUT_CLASSIFICATION,//  parameterize a type by using all of the parameters only 
Groovy,WITHOUT_CLASSIFICATION,//  exception unwrapping for stackless exceptions 
Groovy,WITHOUT_CLASSIFICATION,//  ( ) [ ] { }   ( [ {   ) ] } 
Groovy,WITHOUT_CLASSIFICATION,//  there's a new line between { -> ... and the first statement 
Groovy,WITHOUT_CLASSIFICATION,//  the call is made on a collection type 
Groovy,WITHOUT_CLASSIFICATION,//  pseudo-random number generator 
Groovy,WITHOUT_CLASSIFICATION,/*      * Convert a non java class name to a java classname     * This is used to convert a script name to a name     * that can be used as a classname with the script is     * loaded in GroovyClassloader#load()     * The method simply replaces any invalid characters     * with "_".      */
Groovy,WITHOUT_CLASSIFICATION,//  varargs methods must not be preferred to methods without varargs   for example : 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.MetaClass#addNewStaticMethod(java.lang.reflect.Method)     */
Groovy,WITHOUT_CLASSIFICATION,//  $Id: spellcheck.javav 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------ float ------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  unsigned right shift 
Groovy,WITHOUT_CLASSIFICATION,//  store name of class away for use in constructor ident 
Groovy,WITHOUT_CLASSIFICATION,//  try to find a script from classpath*/ 
Groovy,WITHOUT_CLASSIFICATION,//  next_perm('1234' 2) -> '2314' 
Groovy,WITHOUT_CLASSIFICATION,//  iterator 
Groovy,WITHOUT_CLASSIFICATION,//  Perform an additional phase which has to be done *after* type checking 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setEntityResolver(org.xml.sax.EntityResolver)     */
Groovy,WITHOUT_CLASSIFICATION,//  start parsing at the compilationUnit rule 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)    * @see groovy.lang.GroovyObject#getProperty(java.lang.String)     */
Groovy,WITHOUT_CLASSIFICATION,//  check for an alias 
Groovy,WITHOUT_CLASSIFICATION,/*   */
Groovy,WITHOUT_CLASSIFICATION,//  visit is authorized because the classnode belongs to the same source unit 
Groovy,WITHOUT_CLASSIFICATION,//  b==null 
Groovy,WITHOUT_CLASSIFICATION,// } 
Groovy,WITHOUT_CLASSIFICATION,//  singleton 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    long  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  constant types 
Groovy,WITHOUT_CLASSIFICATION,/*  If the length is under and we are asking for the key then just look for the key. Don't build the map.  */
Groovy,WITHOUT_CLASSIFICATION,//  should be called on first build method only 
Groovy,WITHOUT_CLASSIFICATION,//  if a lower bound is declared then we must perform the same checks that for an upper bound   but with reversed arguments 
Groovy,WITHOUT_CLASSIFICATION,// class Foo {def bar()}  <-- this block   void f(String me) {}   list of expressions variable defs etc 
Groovy,WITHOUT_CLASSIFICATION,//  zero parameter closure e.g. { -> println 'no args' } 
Groovy,WITHOUT_CLASSIFICATION,//  index in the ref array 
Groovy,WITHOUT_CLASSIFICATION,//  we need to save the result 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                category handle 
Groovy,WITHOUT_CLASSIFICATION,//  ---------------------------------------------------------------   feature?: allow break/continue to labeled statement from loops? (is this even right syntax or parser bug???) 
Groovy,WITHOUT_CLASSIFICATION,//  if original char meta class 
Groovy,WITHOUT_CLASSIFICATION,//  normalize an empty or whitespace line to \n   or strip the indent for lines containing non-space characters 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#getProperty(java.lang.Object java.lang.String)      */
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   DESCRIPTIONS 
Groovy,WITHOUT_CLASSIFICATION,//  Groovy currently resolves this to last found so traverse in reverse order 
Groovy,WITHOUT_CLASSIFICATION,//  add the ancillary pieces 
Groovy,WITHOUT_CLASSIFICATION,//  a single match which should be returned 
Groovy,WITHOUT_CLASSIFICATION,//  If key apparently not there check to   make sure this was a valid read 
Groovy,WITHOUT_CLASSIFICATION,//  Handle the case where the exponential number ends without the actual exponent 
Groovy,WITHOUT_CLASSIFICATION,//  store value in array 
Groovy,WITHOUT_CLASSIFICATION,//  and finally we apply the generics information to the parameters and 
Groovy,WITHOUT_CLASSIFICATION,//  if a match is found the compiler will have already set up aic constructor to hav   an argument which isn't needed since we'll be accessing the field; we must undo it 
Groovy,WITHOUT_CLASSIFICATION,//  grab may have added more transformations through new URLs added to classpath so do one more scan 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-3110: It may be an inner enum defined by this class itself in which case it does not need to be   explicitly qualified by the currentClass name 
Groovy,WITHOUT_CLASSIFICATION,//  add "catch any" block to exception table for try part we do this   after the exception blocks because else this one would supersede 
Groovy,WITHOUT_CLASSIFICATION,//    Create new binding for the current request. 
Groovy,WITHOUT_CLASSIFICATION,// if we get here we just read in a back-slash from the source now figure out what to do with it 
Groovy,WITHOUT_CLASSIFICATION,//  Top level control structures  ------------------------------------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  owner should take care for us 
Groovy,WITHOUT_CLASSIFICATION,//  preempt resolve as info is partially available here (aliases and star imports won't match here) 
Groovy,WITHOUT_CLASSIFICATION,//  no optimization for BigDecimal yet  resultType = BigDecimal_TYPE; 
Groovy,WITHOUT_CLASSIFICATION,//  at least '<' is consumed ... read next chars. 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4272: repositioned it here from staticImport 
Groovy,WITHOUT_CLASSIFICATION,//  arguments.length>0 && !=null 
Groovy,WITHOUT_CLASSIFICATION,//  for each shared variable we add a reference and save it as field 
Groovy,WITHOUT_CLASSIFICATION,//  perform additional check on generics   ? extends toBeAssignedTo 
Groovy,WITHOUT_CLASSIFICATION,//  a two-bytes sequence was encountered 
Groovy,WITHOUT_CLASSIFICATION,//  Set up the scripting engine 
Groovy,WITHOUT_CLASSIFICATION,//  Used outside the for loop 
Groovy,WITHOUT_CLASSIFICATION,//  now lets try some methods on each item in the list 
Groovy,WITHOUT_CLASSIFICATION,//  this should probably be strenghtened when we support the A.super.foo() syntax 
Groovy,WITHOUT_CLASSIFICATION,//  end of catch 
Groovy,WITHOUT_CLASSIFICATION,//  can't have private and public methods of the same name so rename original 
Groovy,WITHOUT_CLASSIFICATION,//  any marker tha begins a GString   any matching marker that ends a GString   the ${ marker that starts a GString expression   the } marker that ends a GString expression 
Groovy,WITHOUT_CLASSIFICATION,//  a is an interface b is not 
Groovy,WITHOUT_CLASSIFICATION,//  if this operation has brought in more phase ops for ast transforms keep recording them 
Groovy,WITHOUT_CLASSIFICATION,//  will be static in an instance 
Groovy,WITHOUT_CLASSIFICATION,//  go upper level 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise the file would not be human readable 
Groovy,WITHOUT_CLASSIFICATION,//  in a loop where foo is a label. 
Groovy,WITHOUT_CLASSIFICATION,//  merge if and else values 
Groovy,WITHOUT_CLASSIFICATION,//  class loader for Groovy generated classes 
Groovy,WITHOUT_CLASSIFICATION,//  force no interfaces implemented 
Groovy,WITHOUT_CLASSIFICATION,//  load index 
Groovy,WITHOUT_CLASSIFICATION,//  last we could have the spec saying List<String> and a classnode saying List<Integer> so   we must check that generics are compatible. 
Groovy,WITHOUT_CLASSIFICATION,//  load object 
Groovy,WITHOUT_CLASSIFICATION,//  no transform needed 
Groovy,WITHOUT_CLASSIFICATION,//  suppress exception 
Groovy,WITHOUT_CLASSIFICATION,//  we depend on the method selection having done a good    job before already so the only case for this here is that   we have no argument for the array meaning params.length is   args.length+1. In that case we have to fill in an empty array 
Groovy,WITHOUT_CLASSIFICATION,//  add method:   void fireVetoableChange(String name Object oldValue Object newValue)      throws PropertyVetoException   {       this$vetoableChangeSupport.fireVetoableChange(name oldValue newValue) 
Groovy,WITHOUT_CLASSIFICATION,// remove duplicates 
Groovy,WITHOUT_CLASSIFICATION,//  First check whether it's already been loaded if so use it 
Groovy,WITHOUT_CLASSIFICATION,//  else fall through for EmptyRange 
Groovy,WITHOUT_CLASSIFICATION,//  add leading zero if the length of the string is one 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)      * @see groovy.lang.MetaClassImpl#invokeConstructor(java.lang.Object[])       */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7039 
Groovy,WITHOUT_CLASSIFICATION,/*      * Implementation notes     *     * GroovySystem stores a static reference to this instance so it is     * important to make it fast to create as possible. GroovyRunners are     * only used to run scripts that GroovyShell does not already know how     * to run so defer service loading until requested via the iterator or     * map access methods.     *     * The Map interface is for compatibility with the original definition     * of GroovySystem.RUNNER_REGISTRY. At some point it would probably     * make sense to dispense with associating a String key with a runner     * and provide register/unregister methods instead of the Map     * interface.      */
Groovy,WITHOUT_CLASSIFICATION,//  if "from" part is longer fill it up with ".." 
Groovy,WITHOUT_CLASSIFICATION,//  should we trap exceptions and do an each? 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see groovy.lang.MetaClass#getClassNode()      */
Groovy,WITHOUT_CLASSIFICATION,// InvokerHelper.runScript(scriptClass null); 
Groovy,WITHOUT_CLASSIFICATION,//  SAM coercion 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6750 and GROOVY-6808 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6270 
Groovy,WITHOUT_CLASSIFICATION,//  apart from current phase push new operations for every other phase in the master phase ops list 
Groovy,WITHOUT_CLASSIFICATION,//  we have for example a class name A are in class X   and there is a nested class A$X. we want to be able    to access that class directly so A becomes a valid   name in X. 
Groovy,WITHOUT_CLASSIFICATION,//  adapted from ClassWriter code 
Groovy,WITHOUT_CLASSIFICATION,//  this can happen for example when "null" is used in an assignment or a method parameter.   In that case instead of storing the virtual type we must "reset" type information   by determining the declaration type of the expression 
Groovy,WITHOUT_CLASSIFICATION,//  Add new class to help evict the last collected entry 
Groovy,WITHOUT_CLASSIFICATION,//  replace if whitespace was found 
Groovy,WITHOUT_CLASSIFICATION,//  generate a unique name for top-level Script classes 
Groovy,WITHOUT_CLASSIFICATION,//  reserved: a synthetic root for a CST 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------                    short  --------------------------------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  if a custom meta class creation handle is set 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getProperty(java.lang.String)      */
Groovy,WITHOUT_CLASSIFICATION,//  Throw earlier exception from parent loader if it exists otherwise create a new exception 
Groovy,WITHOUT_CLASSIFICATION,//  receiver expressions with side effects should not be visited twice avoid by using a temporary variable 
Groovy,WITHOUT_CLASSIFICATION,//  skip values with unknown source position 
Groovy,WITHOUT_CLASSIFICATION,//  expect a string key or already a closing curly brace 
Groovy,WITHOUT_CLASSIFICATION,// Note:  This method is NOT called if left AND right are both BigIntegers or BigDecimals because  those classes implement a method with a better exact match. 
Groovy,WITHOUT_CLASSIFICATION,//  no method found we need to replace 
Groovy,WITHOUT_CLASSIFICATION,// GROOVY-4497: don't visit super field if it is private 
Groovy,WITHOUT_CLASSIFICATION,//                 return cachedMethod;          }          return null; 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5561: if two files are compiled in the same source unit   and that one references the other the getters for properties have not been 
Groovy,WITHOUT_CLASSIFICATION,//    KEYWORDS: TYPE SYSTEM 
Groovy,WITHOUT_CLASSIFICATION,//  According to https://shipilev.net/blog/2016/arrays-wisdom-ancients/#_conclusion   toArray(new T[0]) seems faster safer and contractually cleaner and therefore should be the default choice now. 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise the file is in US-ASCII 
Groovy,WITHOUT_CLASSIFICATION,//  load groovy into "root.maven" classloader instead of "root" so that   groovy script can access Maven classes 
Groovy,WITHOUT_CLASSIFICATION,//  we must be careful because the property node may be of a wrong type:   if a class contains a getter and a setter of different types or   overloaded setters the type of the property node is arbitrary! 
Groovy,WITHOUT_CLASSIFICATION,//  "super" also requires special handling 
Groovy,WITHOUT_CLASSIFICATION,/* <Method[]> */
Groovy,WITHOUT_CLASSIFICATION,//  let's decide if this is a property invocation or a method call 
Groovy,WITHOUT_CLASSIFICATION,//  should NEVER reach here 
Groovy,WITHOUT_CLASSIFICATION,//  add may not have been processed yet 
Groovy,WITHOUT_CLASSIFICATION,//  Do nothing: We were not going to use it anyway. 
Groovy,WITHOUT_CLASSIFICATION,//  files to compile 
Groovy,WITHOUT_CLASSIFICATION,//  IF CRLF JUST KEEP LF 
Groovy,WITHOUT_CLASSIFICATION,//  visitStringch     String characters only used by lexer never visited/created directly 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   TYPES: NOTE THAT ORDERING AND VALUES ARE IMPORTANT TO LOCAL ROUTINES! 
Groovy,WITHOUT_CLASSIFICATION,/*  = null  */
Groovy,WITHOUT_CLASSIFICATION,//  used to mark a section of code as to be statically compiled   use to tell which method should be used in a binary expression   private bridge methods are methods used by an outer class to access an inner class method   private fields accessors are methods used by an inner class to access an outer class field   private fields mutators are methods used by an inner class to set an outer class field   callback for dynamic classes that contain statically compiled inner classes or methods   the type of the class which owns the property   for list.property expressions we need the inferred component type   if a receiver is the receiver of a dynamic property (for mixed mode compilation) 
Groovy,WITHOUT_CLASSIFICATION,//  may need rewrap 
Groovy,WITHOUT_CLASSIFICATION,//  IMPLICIT_RECEIVER is handled elsewhere   however other access needs to be fixed for private access 
Groovy,WITHOUT_CLASSIFICATION,//  reset the matcher and start parsing string 
Groovy,WITHOUT_CLASSIFICATION,//  backup input files with extension 
Groovy,WITHOUT_CLASSIFICATION,//  only guard the script class 
Groovy,WITHOUT_CLASSIFICATION,//  preconditions   no text to return   no text to return   buffer hasn't been filled yet 
Groovy,WITHOUT_CLASSIFICATION,//  we put the class already in output to avoid the most inner classes   will be used as first class later in the loader. The first class   there determines what GCL#parseClass for example will return so we 
Groovy,WITHOUT_CLASSIFICATION,//  Eat the following LF if any. 
Groovy,WITHOUT_CLASSIFICATION,// The overtype caret will simply be a horizontal line one pixel high   (once we determine where to paint it) 
Groovy,WITHOUT_CLASSIFICATION,// ---------------------------------------------------------------------------   SOURCE CREATION 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: hash2.javav 1.1 2004-05-23 05:50:10 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,/*  Iterate through the map and do the same thing. Make sure children and children of children are chopped.   */
Groovy,WITHOUT_CLASSIFICATION,//  expressions 
Groovy,WITHOUT_CLASSIFICATION,//  let's replace this assignment to a subscript operator with a   method call   e.g. x[5] = 10   -> (x [] 5) = 10   -> methodCall(x "putAt" [5 10]) 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5681: initial expressions should be visited too! 
Groovy,WITHOUT_CLASSIFICATION,//  if the script text is null i.e. the script content is invalid   use the name as cache key for the time being to trigger the validation by `groovy.lang.GroovyClassLoader.validate`   note: the script will not be cached due to the invalid script content         so it does not matter even if cache key is not the md5 value of script content 
Groovy,WITHOUT_CLASSIFICATION,// bind the two first parameters of the generated closure to this class and the sections list 
Groovy,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------------------   error due to missing method/field 
Groovy,WITHOUT_CLASSIFICATION,//  load this   load closure map   load wildcard 
Groovy,WITHOUT_CLASSIFICATION,// find the string section which precedes the row/col of the thrown exception 
Groovy,WITHOUT_CLASSIFICATION,//  we'll report those as errors later 
Groovy,WITHOUT_CLASSIFICATION,//  do -ve indexes based on actual args so can't accurately calculate type here   so work out minimal type params and vararg on end will allow for other possibilities 
Groovy,WITHOUT_CLASSIFICATION,//  for the property 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-6787: Don't override the original if the replacement placeholder doesn't respect the bounds   otherwise the original bounds are lost which can result in accepting an incompatible type as an   argument for example. 
Groovy,WITHOUT_CLASSIFICATION,//  Unary expressions 
Groovy,WITHOUT_CLASSIFICATION,//  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   Fastest version under 100 LOC. Contributed by Jon Harrop 2005 
Groovy,WITHOUT_CLASSIFICATION,//  def _result = HashCodeHelper.initHash() 
Groovy,WITHOUT_CLASSIFICATION,//  works fine in both languages   works fine in java; throws ClassCastException in groovy 
Groovy,WITHOUT_CLASSIFICATION,//  ------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  handle arrays on both sides as special case for efficiency 
Groovy,WITHOUT_CLASSIFICATION,// String purple = "7C308D"; 
Groovy,WITHOUT_CLASSIFICATION,/*  return element ij of infinite matrix A  */
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5150: primitive type constants will be initialized directly 
Groovy,WITHOUT_CLASSIFICATION,// standard metaclass check 
Groovy,WITHOUT_CLASSIFICATION,//  thread one: newInstance script foo 
Groovy,WITHOUT_CLASSIFICATION,//  Original method may be null for the case of private or static methods 
Groovy,WITHOUT_CLASSIFICATION,//  constructor helper   This method is used instead of calling the constructor as   calling the constructor may require a table with MetaClass   selecting the constructor for each enum value. So instead we   use this method to have a central point for constructor selection   and only one table. The whole construction is needed because    Reflection forbids access to the enum constructor.   code:   def $INIT(Object[] para) {    return this(*para)   } 
Groovy,WITHOUT_CLASSIFICATION,//  we allow null objects in the object stream 
Groovy,WITHOUT_CLASSIFICATION,//  Inner classes 
Groovy,WITHOUT_CLASSIFICATION,/*      * Set nextObject to the next object. If there are no more     * objects then return false. Otherwise return true.      */
Groovy,WITHOUT_CLASSIFICATION,//  Coerce the file URL to a File   See ClassNodeResolver.isSourceNewer for another method that replaces '|' with ':'.   WTF: Why is this done and where is it documented? 
Groovy,WITHOUT_CLASSIFICATION,//  inject message 
Groovy,WITHOUT_CLASSIFICATION,//  A normal merge. 
Groovy,WITHOUT_CLASSIFICATION,//  other modifiers 
Groovy,WITHOUT_CLASSIFICATION,//  remove 'public' when implied already if requested 
Groovy,WITHOUT_CLASSIFICATION,//  methods from GroovyType (todo: remove this horrible copy of SimpleGroovyType.java)      public GroovyAnnotationTypeDoc asAnnotationTypeDoc() {/*todo*/return null;}      public GroovyClassDoc asClassDoc() {/*todo*/ return null; }      public GroovyParameterizedType asParameterizedType() {/*todo*/return null;}      public GroovyTypeVariable asTypeVariable() {/*todo*/return null;}      public GroovyWildcardType asWildcardType() {/*todo*/return null;}      public String dimension() {/*todo*/ return null; } 
Groovy,WITHOUT_CLASSIFICATION,//  Clear all refs and gc() 
Groovy,WITHOUT_CLASSIFICATION,/* long[10] */
Groovy,WITHOUT_CLASSIFICATION,//  always use the expando properties 
Groovy,WITHOUT_CLASSIFICATION,//       P     Q     R     S     T     U     V     W 
Groovy,WITHOUT_CLASSIFICATION,//  registration already done or in process abort 
Groovy,WITHOUT_CLASSIFICATION,//  add in unimplemented abstract methods from the interfaces 
Groovy,WITHOUT_CLASSIFICATION,//  reserved in java and groovy   reserved in java and groovy 
Groovy,WITHOUT_CLASSIFICATION,//  value is a list. 
Groovy,WITHOUT_CLASSIFICATION,//  we use the type of the first parameter 
Groovy,WITHOUT_CLASSIFICATION,//  setProperty 
Groovy,WITHOUT_CLASSIFICATION,//  when resolving methodCall() or getProp() or setProp() 
Groovy,WITHOUT_CLASSIFICATION,//  if origFloat and withoutCustomHandle 
Groovy,WITHOUT_CLASSIFICATION,//  GroovyDocErrorReporter interface 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-5568 the property may be defined by DGM 
Groovy,WITHOUT_CLASSIFICATION,//  TODO handle local variables 
Groovy,WITHOUT_CLASSIFICATION,//  spread expressions 
Groovy,WITHOUT_CLASSIFICATION,//  will contain callSiteReceiverSwap.getType() 
Groovy,WITHOUT_CLASSIFICATION,//  Implementation of java.sql.getResultSet()   ------------------------------------------------------------ 
Groovy,WITHOUT_CLASSIFICATION,//  not through MOP to avoid infinite recursion 
Groovy,WITHOUT_CLASSIFICATION,//  calculate outer class which we need for this$0 
Groovy,WITHOUT_CLASSIFICATION,//  inject([:]) { ae {@code ->} a {@code <<} [(e.key): e.value.groupBy(tail)] } 
Groovy,WITHOUT_CLASSIFICATION,/*  The file names in the current FileSet scan  */
Groovy,WITHOUT_CLASSIFICATION,//  use binding to store? 
Groovy,WITHOUT_CLASSIFICATION,//  using getPNR() to ignore generics at this point   and a different binary expression not to pollute the AST 
Groovy,WITHOUT_CLASSIFICATION,//  0x30('0') - 0x39('9') 
Groovy,WITHOUT_CLASSIFICATION,//  map containing named labels of parenting blocks 
Groovy,WITHOUT_CLASSIFICATION,//  increment to next register double/long are using two places 
Groovy,WITHOUT_CLASSIFICATION,//  Just a guess that the pretty view will take 20 percent more than original. 
Groovy,WITHOUT_CLASSIFICATION,//  For consistency. 
Groovy,WITHOUT_CLASSIFICATION,//  |=   &=   ^=   ~ 
Groovy,WITHOUT_CLASSIFICATION,//    Build the AST 
Groovy,WITHOUT_CLASSIFICATION,//  if we are in an if/else branch keep track of assignment 
Groovy,WITHOUT_CLASSIFICATION,//  $Id: lists.javav 1.1 2004-05-23 07:12:55 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
Groovy,WITHOUT_CLASSIFICATION,//  only visited when calling super() without parentheses i.e. "super 99" is equivalent to "super(99)" 
Groovy,WITHOUT_CLASSIFICATION,//  scheme        = alpha *( alpha | digit | "+" | "-" | "." ) 
Groovy,WITHOUT_CLASSIFICATION,//  if left type is not a list but right type is a map then we're in the case of a groovy   constructor type : A a = [x:2 y:3]   In this case more checks can be performed 
Groovy,WITHOUT_CLASSIFICATION,//  identifies a function declaration   XXX br identifies a macro declaration   identifies a class declaration   identifies an interface declaration   identifies a mixin declaration 
Groovy,WITHOUT_CLASSIFICATION,//  $hash$code = _result 
Groovy,WITHOUT_CLASSIFICATION,//  assume we have a script (and it may have a @Field) 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)        * @see java.io.Writer#write(int)         */
Groovy,WITHOUT_CLASSIFICATION,//  object has default meta class so we need to replace it on demand 
Groovy,WITHOUT_CLASSIFICATION,//  BUG! exception in phase 'class generation' in source unit 'Script1.groovy'   SpreadExpression should not be visited here   fails after parser 
Groovy,WITHOUT_CLASSIFICATION,//  let's not add duplicate methods 
Groovy,WITHOUT_CLASSIFICATION,//  mangle resource name with the compiled pattern. 
Groovy,WITHOUT_CLASSIFICATION,//  ... solve puzzle 
Groovy,WITHOUT_CLASSIFICATION,//  the current implementation only checks for public modifier because Groovy used to allow   handles on classes even if they are package protected and not in the same package.   There are situations where we could make more fine grained checks but be careful of   potential breakage of existing code. 
Groovy,WITHOUT_CLASSIFICATION,//  to work with ant 1.6 
Groovy,WITHOUT_CLASSIFICATION,//  copy arguments for main class  
Groovy,WITHOUT_CLASSIFICATION,//  can take place) 
Groovy,WITHOUT_CLASSIFICATION,//  retrieve the content of the file using the provided encoding 
Groovy,WITHOUT_CLASSIFICATION,//  otherwise cleanup() will wipe out value 
Groovy,WITHOUT_CLASSIFICATION,//  Make sure we still have our entries sample a few 
Groovy,WITHOUT_CLASSIFICATION,//  while condition 
Groovy,WITHOUT_CLASSIFICATION,//  Then get the iterator and generate the loop control 
Groovy,WITHOUT_CLASSIFICATION,//  to be used in generics type must be boxed 
Groovy,WITHOUT_CLASSIFICATION,// swallow 
Groovy,WITHOUT_CLASSIFICATION,//  the outside context parts till now define placeholder we are not allowed to   generalize thus we save that for later use...   extension methods are special since they set the receiver as    first parameter. While we normally allow generalization for the first 
Groovy,WITHOUT_CLASSIFICATION,//  TypeChecked$TypeCheckingInfo can not be applied on constructors 
Groovy,WITHOUT_CLASSIFICATION,//  undo unwanted side-effect of verifier 
Groovy,WITHOUT_CLASSIFICATION,// AsmClassGenerator generator = new AsmClassGenerator(source context tracer sourceName); 
Groovy,WITHOUT_CLASSIFICATION,//  -----------------------   feature: static imports   ----------------------- 
Groovy,WITHOUT_CLASSIFICATION,//  uppercase to hide from jarjar 
Groovy,WITHOUT_CLASSIFICATION,//  put it in the list 
Groovy,WITHOUT_CLASSIFICATION,//  rcurried arguments are done lazily to allow normal method selection between overloaded alternatives 
Groovy,WITHOUT_CLASSIFICATION,//  we do here a null check because the params field might not have been set yet 
Groovy,WITHOUT_CLASSIFICATION,// correct to method level generics for the overriding method 
Groovy,WITHOUT_CLASSIFICATION,// A transposition and a casemodification 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-7909 A Helper class in same compilation unit may have not been created when referenced   Here create a symbol as a "placeholder" and it will be resolved later. 
Groovy,WITHOUT_CLASSIFICATION,//  SEE BELOW 
Groovy,WITHOUT_CLASSIFICATION,//  Entry was invalidated during deletion. But it could   have been re-inserted so we must re-traverse.   To avoid useless contention get lock to wait out modifications   before re-traversing. 
Groovy,WITHOUT_CLASSIFICATION,/*  (non-Javadoc)           * @see groovy.lang.GroovyObjectSupport#getProperty(java.lang.String)            */
Groovy,WITHOUT_CLASSIFICATION,//  we use a ClassExpression for transportation to EnumVisitor 
Groovy,WITHOUT_CLASSIFICATION,// deprecated                case GroovyTokenTypes.LITERAL_with:   (String)itr.next() 
Groovy,WITHOUT_CLASSIFICATION,//  hold flip_count result for each swap index 
Groovy,WITHOUT_CLASSIFICATION,//  Views 
Groovy,WITHOUT_CLASSIFICATION,//  def (key value) == list 
Groovy,WITHOUT_CLASSIFICATION,//  if a returned inferred type is available and no @TypeCheckingInfo is on node then add an 
Groovy,WITHOUT_CLASSIFICATION,/* char[6] */
Groovy,WITHOUT_CLASSIFICATION,//  merge onto end of previous GString to avoid an empty bridging value 
Groovy,WITHOUT_CLASSIFICATION,//  to keep the stack height we need to leave   one Object[] on the stack as last element. At the   same time we need the Object[] on top of the stack 
Groovy,WITHOUT_CLASSIFICATION,//  the inferred type here should be a list of what the subcall returns 
Groovy,WITHOUT_CLASSIFICATION,//  have first to find matching super class or interface 
Groovy,WITHOUT_CLASSIFICATION,//  GROOVY-4013: If it is an inner class tracking its dependencies doesn't really   serve any purpose and also interferes with the caching done to track dependencies 
Groovy,WITHOUT_CLASSIFICATION,//  there of course transformed parameter type and argument must fit 
Groovy,WITHOUT_CLASSIFICATION,//  _result = HashCodeHelper.updateHash(_result super.hashCode()) 
Groovy,WITHOUT_CLASSIFICATION,//  let's remove any non-MapEntryExpression instances   such as if the last expression is a ClosureExpression   so let's wrap the named method calls in a Map expression 

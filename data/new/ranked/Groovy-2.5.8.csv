1, Line, // TODO Jochen: move the findSpecial to a central place together with others to easy security configuration 
1, Line, //  todo: inner class nodes don't have an objectInitializers field available 
1, Line, //         currently char isn't found due to a bug, so go with Object 
1, Block, /* dummy receiver: */
1, Line, //  TODO check specified type is assignable from declared param type?   ClassNode type = getMemberClassValue(namedParam, "type"); 
1, Block, /*  todo these special cases should be special MetaClasses maybe  */
1, Line, //  @todo - refactor pulling generic parser interface up 
1, Line, //  hack to reformat other groovydoc block tags (@see, @return, @param, @throws, @author, @since) into html 
1, JavaDoc, /*  To swap two children of node t...     *     *<pre>     *   (t)     *    |     *    |     *   (a) -- (b)     *     * t.down = firstNode     * a.right = b     * b.right = null     *</pre>     * becomes     *<pre>     *   (t)     *    |     *    |     *   (b) -- (a)     *     * t.down = b     * a.right = null     * b.right = a     *</pre>     *     * todo - build API of basic tree mutations like this method.      */
1, Line, // TODO: in case of the array we could maybe make a partial check 
1, Line, //  TODO: maybe define a Throwable and use it here instead of Object 
1, Line, // TODO: change that to get the correct scope 
1, Block, /*  * @todo multi threaded compiling of the same class but with different roots * for compilation... T1 compiles A, which uses B, T2 compiles B... mark A and B * as parsed and then synchronize compilation. Problems: How to synchronize? * How to get error messages? *  */
1, Line, // workaround for Groovy-835 
1, Line, // There HAS to be a better way to do this! 
1, Line, //  Groovy allows more characters than Character.isValidJavaIdentifier() would allow   if we find a good way to encode special chars we could remove (some of) these checks 
1, Line, //  TODO: this might not do enough or too much   But it is a good start without spreading logic everywhere 
1, Line, //  hack warning! fragile! TODO find a better way 
1, JavaDoc, /*      * TODO: Should return the URI for this source, but we can't know what it is here.     *     * @return null      */
1, Line, //  TODO includes? excludes? 
1, Line, //  cast with explicit weaker generics for now to keep jdk6 happy, TODO: find better fix 
1, Line, // TODO: report multiple missing labels of the same name only once? 
1, Line, //  GROOVY-6337 HACK: in case newly created field is @Lazy 
1, Line, //  ignore   TODO should use a low priority logger 
1, Line, //  TODO the buffer is not read up to the end, but up to length - 6 
1, Line, //  FIXME no implementation?          SoftDoubleKeyMap.Entry val = (SoftDoubleKeyMap.Entry) assignableMap.getOrPut(klazz, aClass, null); 
1, Line, //  todo: this might not work correctly for absolute paths 
1, Line, // TODO: don't ignore inner static classes completely 
1, Line, //  TODO store this on root node? reset bodyText? 
1, Line, //  TODO use PackageNode instead here? 
1, Line, //  TODO: move somewhere else GROOVY-1874 
1, Line, //  TODO consider moving initcode to <clinit> and remaking field final 
1, Line, // TODO: inner classes mean a different this-type. This is ignored here! 
1, Line, //  this is only correct in this context here, normally   we would have to compile against compareTo if available   but since we don't compile here, this one is enough 
1, Line, //    FIXME: Use List<String> here, current version is not safe   
1, Line, //  temporary hack 
1, Line, //  todo windows?? 
1, Line, //    HACK: For now force all classes to compile, so we pick up stub changes 
1, Line, //  TODO instead of catching Object<T> here stop it from being placed into type in first place 
1, Line, //  TODO should we check package node doesn't already exist? conflict? 
1, Line, //  TODO: For GROOVY-2599 do we need something like below but it breaks other things              return (String) invokeMethod(arguments, "toString", EMPTY_ARGS); 
1, Line, //  TODO make EmptyExpression work   partially works but not if only thing in script   return EmptyExpression.INSTANCE; 
1, Line, //  todo - possibly check for line/col with values of 0 or less... 
1, Line, // TODO: this method should really return some kind of meta ClassNode   representing the combination of all bounds. The code here, just picks   something out to be able to proceed and is not actually correct 
1, Block, /*      * NOTE: as per the class javadoc, this class doesn't obey the normal equals/hashCode contract.     * The following field and method could assist some scenarios which required a similar sort of contract     * (but between equals and the custom canonicalHashCode). Currently commented out since we haven't     * found a real need. We will likely remove this commented out code if no usage is identified soon.      */
1, JavaDoc, /*      * Represents GenericsType name     * TODO In order to distinguish GenericsType with same name(See GROOVY-8409), we should add a property to keep the declaring class.     *     * fixing GROOVY-8409 steps:     * 1) change the signature of constructor GenericsTypeName to `GenericsTypeName(String name, ClassNode declaringClass)`     * 2) try to fix all compilation errors(if `GenericsType` has declaringClass property, the step would be a bit easy to fix...)     * 3) run all tests to see whether the change breaks anything     * 4) if all tests pass, congratulations! but if some tests are broken, try to debug and find why...     *     * We should find a way to set declaring class for `GenericsType` first, it can be completed at the resolving phase.      */
1, Line, // todo we should flag this when the path is created that this is a field not a prop...   try direct method... 
1, Line, // TODO: maybe implement the case localDistance==distance 
1, Line, //  major hack here...! 
1, Line, //  getTarget(var) can be null in buggy xform code, e.g. Spock <= 1.1   TODO consider removing fixVar once Spock 1.2 is released - replace with informational exception? 
1, Line, //  TODO: enforce stricter behavior?   given Map.Entry is an interface, we get a proxy which gives us lots   of flexibility but sometimes the error messages might be unexpected 
1, Line, // TODO: maybe do something here? 
1, Line, // TODO: more cases here 
1, Line, //  TODO refactor to retain richer type information rather than converting to String 
1, Line, //  FIXME: all labeled arguments should follow any unlabeled arguments 
1, Line, // @todo - is this useful? 
1, Line, //  @todo refactor this path 
1, Line, //    FIXME: For now just save the first error, should really roll a new message with all of the details   
1, Line, //  should we use a finer grained lock than this? 
1, Line, //  it's better to cache class instances by the source code   GCL will load the unique class instance for the same source code   and avoid occupying Permanent Area/Metaspace repeatedly 
1, Line, //  is method object correct type? 
1, Line, //  A little bit of paranoid checking here? Most drivers will throw BatchUpdateException perhaps? 
1, Line, //  ... fits badly ? 
1, Line, // TODO After 1.1 we should introspect the meta property and set editable to false if the property is read only 
1, Line, // TODO: replace with normal String, p not needed 
1, Line, //  @todo should try with just a node as the child 
1, Line, //  hack warning!   TODO handle , and ) when they occur within Strings 
1, Line, //  TODO: this method is very similar to StaticTypesCheckingSupport#extractGenericsConnections,   but operates on ClassNodes instead of GenericsType 
1, Line, // TODO: set correct type here   if setting type and a methodcall is the last expression in a method,   then the method will return null if the method itself is not void too!   (in bytecode after call: aconst_null, areturn) 
1, Line, //  TODO handle the owner and delegate cases better for nested scenarios and potentially remove the need for the implicit this case 
1, Line, // LOGME   do we ignore it, or fail? 
1, Line, //         "The class 'DodgyClass' has an incorrect modifier synchronized."; 
1, Line, //  we can't have a specialized version of call(Object...) because the dispatch logic in ClosureMetaClass   is too complex! 
1, Line, // TODO: implement 
1, Line, //  Don't do this in static initializer because we may never be needed.   TODO: Put this lineSeparator property somewhere everyone can use it. 
1, Block, /*      * NOTE: as per the class javadoc, this class doesn't obey the normal equals/hashCode contract.     * The following field and method could assist some scenarios which required a similar sort of contract     * (but between fastEquals and the custom fastHashCode). Currently commented out since we haven't     * found a real need. We will likely remove this commented out code if no usage is identified soon.      */
1, Line, //  this should always be the case, but adding a test is safer 
1, Line, //  TODO: not sure why but groovy.ui.view.BasicContentPane#buildOutputArea classDoc is null 
1, Line, //  todo: the check for isWildcard should be replaced with a more complete check 
1, Line, //  TODO: is it safe to remove this? What was the original intention? 
1, Line, //  TODO is this needed so we can click through on default values?      @Override 
1, Line, //  TODO implement below if/when needed 
1, Line, //  TODO expose this for stream based stripping? 
1, Line, //  RFC 2045 says that I'm allowed to take the presence of   these characters as evidence of data corruption   So I will   TODO: change this exception type 
1, Line, // todo: doesn't parse correctly...   assertEquals("class Foo<T super C> {T t}",pretty("class Foo<T super C> {T t}")); 
1, Line, //  todo : confirm that TYPE_LOWER_BOUNDS does not have multiple children 
1, Line, //  todo: handle vargs! 
1, Line, //  TODO: can STCV be made smarter to avoid this check? 
1, Line, // TODO: maybe use more specialized type here 
1, Line, //  TODO make this a method to be called from TupleConstructor xform, add check for 'defaults'? 
1, Line, //  normally we would do the following   handle = MethodHandles.dropArguments(handle,0,Class.class);   but because there is a bug in invokedynamic in all jdk7 versions    maybe use Unsafe.ensureClassInitialized 
1, Line, //  TODO this really should find "best" match or find all matches and complain about ambiguity if more than one   TODO handle getAt with more than one parameter   TODO handle default getAt methods on Java 8 interfaces 
1, Line, //  is method name correct? 
1, JavaDoc, /*      * Compiler configuration.     * <p>     * Used to specify the debug output to print stacktraces in case something fails.     * TODO: Could probably be reused to specify the encoding of the files to load or other properties.      */
1, Line, // TODO: the case of a NoClassDefFoundError needs a bit more research   a simple recompilation is not possible it seems. The current class   we are searching for is there, so we should mark that somehow.   Basically the missing class needs to be completely compiled before   we can again search for the current name. 
1, Line, //  TODO below will be deleted once we fix type checker to understand   readonly Map otherwise seen as Map<String, Serializable> 
1, Line, //  GROOVY-5814: Immutable is not compatible with @CompileStatic 
1, Line, //  todo: remove after putAt(Splice) gets deleted 
1, Line, // TODO in Groovy 2.0 use varargs? 
1, Line, //  TODO expose this for other usage scenarios, e.g. stream based stripping? 
1, Block, /*     A better set of more complete tests of everything below is on the way!     */
1, Line, //  todo - the visitor doesn't always take PrintStreams as constructor params!  Could be a more reusable implementation than this... 
1, Line, //  TODO: remove this visit 
1, Line, //  TODO we might wanna only try to resolve the name if we are   on the left hand side of an expression or before a dot? 
1, Line, //  TODO GroovyDoc doesn't parse this file as our java.g doesn't handle this JDK7 syntax 
1, Line, //  Convenience hack: try convert single-char strings to ints 
1, Line, //  not thread safe 
1, Line, //  TODO refactor PIPE to be BITWISE_OR 
1, Line, //  Implementation note - there are several ways for the Groovy compiler   to report an unexpected EOF. Perhaps this implementation misses some.   If you find another way, please add it. 
1, Line, //  Keep the same default source encoding with the one used by #parseClass(InputStream, String)   TODO should we use org.codehaus.groovy.control.CompilerConfiguration.DEFAULT_SOURCE_ENCODING instead? 
1, Line, //  TODO should we make ProxyGenerator singleton? 
1, Line, // TODO: this Object[] can be constant 
1, Block, /*  here is a different implementation that uses getProperties(). I have left         * it commented out because it returns a slightly different list of properties;         * i.e. it does not return privates. I don't know what dump() really should be doing,         * although IMO showing private fields is a no-no          */
1, Line, //  TODO also check for phase after sourceUnit.getPhase()? but will be ignored anyway?   TODO we should only copy those annotations with FIELD_TARGET but haven't visited annotations   and gathered target info at this phase, so we can't do this:   return annotation.isTargetAllowed(AnnotationNode.FIELD_TARGET);   instead just don't copy ourselves for now 
1, Line, // todo: these fail because regexp_literals are converted into string_literals on the antlr AST 
1, Line, //  TODO remove this once we support declarations in the while condition 
1, Line, //  TODO: have to think about how to optimize this! 
1, Line, //  TODO cache these?? 
1, Line, //  TODO find a way to inject any GroovyLexer/GroovyRecognizer 
1, JavaDoc, /*      * TODO(jwagenleitner): remove or fix in future release     *     * According to the spec getContentEncoding() returns the Content-Encoding     * HTTP Header which typically carries values such as 'gzip' or 'deflate'     * and is not the character set encoding. For compatibility in 2.4.x,     * this behavior is retained but should be removed or fixed (parse     * charset from Content-Type header) in future releases.     *     * see GROOVY-8056 and https://github.com/apache/groovy/pull/500      */
1, Line, //             //TODO: test if this is OK with new MOP, should be changed!              // we don't want the exception being unwrapped if it is a IllegalArgumentException              // but in the case it is for example a IllegalThreadStateException, we want the unwrapping              // from the runtime              //Note: the reason we want unwrapping sometimes and sometimes not is that the method              // invocation tries to invoke the method with and then reacts with type transformation              // if the invocation failed here. This is OK for IllegalArgumentException, but it is              // possible that a Reflector will be used to execute the call and then an Exception from inside              // the method is not wrapped in a InvocationTargetException and we will end here.              boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof org.codehaus.groovy.reflection.GeneratedMetaMethod;              return MetaClassHelper.createExceptionText("failed to invoke method: ", this, object, argumentArray, e, setReason);          } 
1, Line, //  TODO @Deprecated 
1, Line, //  should we throw invalid binding exception?  or fail quietly? 
1, Line, //  todo: is there anything to do with the module ??? 
1, Line, // TODO: we should consider calling this one directly for MetaClassImpl,        then we save the new method selection 
1, Line, //  todo will 'super' be allowed in non-parentheses method call styles? 
1, Line, // todo AntlrParserPlugin: Unexpected node type: '.' found when expecting type: an identifier   fails after parser 
1, Line, //                     TODO: should be better check for case when only diff in modifiers can be SYNTHETIC flag                      && method.getModifiers() == aMethod.getModifiers() 
1, Line, //  TODO: checking for isThisOrSuper is enough for AttributeExpression, but if this is moved into   visitAttributeOrProperty to handle attributes and properties equally, then the extended check should be done 
1, Line, // TODO: These are the arguments for -p and -i.  Why are we searching using Groovy script extensions?   Where is this documented? 
1, Line, //  TODO decide if we should support VOLATILE 
1, Line, //  the groovy.compiler.strictNames system property is experimental and may change default value or be removed in a future version of Groovy 
1, Line, //  TODO: delete this constant? 
1, Line, //  TODO track Deprecated usage and give a warning? 
1, Line, //  fail early with a direct message if possible') 
1, Line, //  Java2Groovy produces a slightly different tree structure (TODO fix converter or java.g instead?) 
1, Line, // TODO: maybe use a different bootstrap method since no arguments are needed here 
1, Block, /*          * TODO : Enable auto ".groovy" extension replacing here!         * http://cvs.groovy.codehaus.org/viewrep/groovy/groovy/groovy-core/src/main/groovy/servlet/GroovyServlet.java?r=1.10#l259          */
1, Line, //  TODO: spread safe should be handled inside 
1, Line, //  TODO: do we need to lock down things like: $ownClass 
1, Line, //  todo : are there other import types that can be specified? 
1, Line, //  TODO consider creating an element for this 
1, Line, //  try to get a better error message location based on the property 
1, Line, //  TODO: add more tests in here (is there a way to share snippets with SourcePrinterTest?) 
1, Line, // TODO: create a WriteOnlyException class? 
1, Line, //  TODO: if our code can never access inspect in this way, it would be better 
1, Line, //  TODO: investigate the trait exclusion a bit further, needed otherwise   CallMethodOfTraitInsideClosureAndClosureParamTypeInference fails saying   not static method can't be called from a static context 
1, Line, // TODO: need errors for write-only too! 
1, Line, // TODO: optimize: add guard based on type Closure 
1, Line, //  TODO fix 
1, Line, //  TODO remove? 
1, Line, //  todo: should this be directly handled by getPlainNodeReference? 
1, Line, // TODO: apply generics on parameter[0]?                                  storeType(pexp, setter.getParameters()[0].getType()); 
1, Line, // TODO: more than one lower bound for wildcards? 
1, Line, //  BUG! exception in phase 'conversion' in source unit 'Script1.groovy' null   fails after parser 
1, Line, //  TODO: Add methods like addMetaConstructor, addMetaAttribute, addMetaAnnotation etc. 
1, Line, //  todo: above is not quite the spacing I would expect, but good enough for now...   todo not yet implemented in parser: assertEquals("(new Outer()).super()", pretty("(new Outer()).super()")); 
1, Line, //  GROOVY-7316 : it is an apparently legal thing to allow this. It's not type safe, 
1, Line, //  TODO handle ACC_SYNTHETIC for enum method parameters? 
1, Line, //  TODO: change this exception type 
1, Line, //  by default use GrapeIvy  TODO META-INF/services resolver? 
1, Line, //  this is a limitation that must be removed in a future version   we cannot check generic type arguments if there are default parameters! 
1, Line, //  todo : type inference on maps and lists, if possible 
1, Line, //  HACK: JavaStubGenerator could have snuck in a constructor we don't want 
1, Line, // TODO: apply right generics here! 
1, Line, // TODO: get the type's of the expressions to specify the   list type to List<X> if possible. 
1, Line, //  TODO a better way to do this? 
1, Line, //  TODO make @CS lookup smarter so that we don't need both these maps 
1, Line, // TODO: that is just a quick prototype, not the real thing! 
1, Line, //  TODO IllegalArgumentException for marginChar.length() > 1 ? Or support String as marker? 
1, Line, // todo, the spacing here is... unusual 
1, Line, //  should we check interfaces as well?  if so at what level? 
1, Line, //  TODO add generics support so this can be used for @EAHC 
1, Line, //  since the calling code will push the type again, we better remove it here 
1, Line, //  cater for explicit href in e.g. @see, TODO: push this earlier? 
1, Line, // TODO: if rhs is VariableSlotLoader already, then skip crating a new one 
1, Line, //  todo: inner class nodes don't have a constructors field available 
1, Line, //  FRICKIN' HACK!!!!! For some reason, deleting a string at offset 0   does not get done properly, so first replace and remove after parsing 
1, Line, //  note: def not needed in parameter declarations, but it is valid  todo: is it ok to strip out 'def' from parameter declarations? 
1, Line, // TODO: get the type's of the expressions to specify the   map type to Map<X> if possible. 
1, Line, // todo spacing is odd, c.f. last space in class vs interface above 
1, Line, //  todo - 17 July 2006 - test fine, however this parses but causes error in AntlrParserPlugin   fails after parser 
1, Line, //  TODO expose this for stream based scenarios? 
1, Line, //  TODO This is the only area where this MetaClass needs to do some interception because Groovy's current   MetaClass uses hard coded references to the java.lang.reflect.Constructor class so you can't simply   inject Constructor like you can do properties, methods and fields. When Groovy's MetaClassImpl is   refactored we can fix this 
1, Line, //  TODO: is there a better way to do this? 
1, Line, //  TODO FIX if empty, AssertionWriter fails because source text is null 
1, Line, //  TODO this won't strictly be true when using list expansion in argument calls 
1, Line, //  should always be the case, but safe guard is better 
1, Line, // TODO: remove this method if possible by switchpoint usage 
1, Line, //  are we a local variable?   it should not be an explicitly "this" qualified method call   and the current class should have a possible method 
1, Line, //  TODO: move somewhere else 
1, Line, //  TODO: Shouldn't these extensions be kept elsewhere?  What about CompilerConfiguration?   This method probably shouldn't be in GroovyMain either. 
1, Block, /*  Should we make the following method private?  */
1, Line, // FIXME the warning message will NPE with what I have :( 
1, Line, //  TODO need returnType.qualifiedTypeName() here 
1, Line, // FIXME: do we really want this() to create a new object regardless   the position.. for example not as first statement in a constructor   this=first statement in constructor is handled by specialConstructorCallExpression 
1, Block, /*  *  todo: order methods alphabetically (implement compareTo enough?)  */
1, Line, //  todo: performance would be better if we created a StringBuilder 
1, Line, //  TODO remove dupe with SimpleGroovyType 
1, Line, // TODO: more finals? 
1, Line, //  ugly hack   type definition, i.e.   int[] x; 
1, Line, //  GROOVY-8914: pre-compiled classes lose synthetic boolean - TODO fix earlier as per GROOVY-4346 then remove extra check here 
1, Line, //  TODO: Should we have some unified function like PrintWriter.checkError()? 
1, Line, // TODO: check if this part is actually used 
1, Line, //  todo: above is not quite the spacing I would expect, but good enough for now... 
1, Line, //  TODO consider moving next two statements "up a level", i.e. have just one more widely invoked 
1, Line, //  TODO: this should go away once we have proper tags 
1, JavaDoc, /*  @todo we should check if we have the property with the metaClass instead of try/catch   */
1, Line, //  TODO shouldn't really be treating annotation fields as methods - remove this hack 
1, Line, //  TODO intern types?   TODO configureAST(...) 
1, Line, //  todo - inline open block is great, but it doesn't work as one would expect (yet). (c.f. with)   slist inside a method body (needed label to distinguish from a closure)   slist inside each case body... 
1, JavaDoc, /*              * TODO treble equal?             return binaryExpression(Types.COMPARE_IDENTICAL, node);             case ???:             return binaryExpression(Types.LOGICAL_AND_EQUAL, node);             case ???:             return binaryExpression(Types.LOGICAL_OR_EQUAL, node);              */
1, Line, //  FIXME:  What should we use as the base URI?   It is unlikely we get to this point with a relative URI since making a URL   from will make it absolute I think.  But lets handle the simple case of   using file paths and turning that into an absolute file URI.   So we will use the current working directory as the base. 
1, Line, // todo the following is legal Java, but pretty strange...?   fails after parser 
1, Line, //  TODO should this really be static???   cleared on build(), to be safe 
1, Line, //  TODO validate args? 
1, Line, // TODO Joche: replace with real implementation 
1, Line, //  Shall we allow this ? Using Boolean ctors is usually not what user wants... 
1, Line, //  GROOVY-8174: we'd like stricter checking here but many drivers currently in use just aren't consistent enough, so we log 
1, Line, //  Create one script per socket connection.   This is purposefully not caching the Script   so that the script source file can be changed on the fly,   as each connection is made to the server.  FIXME: Groovy has other mechanisms specifically for watching to see if source code changes.   We should probably be using that here.   See also the comment about the fact we recompile a script that can't change. 
1, Line, // todo test newlines inside strings somehow... 
1, Line, // TODO: maybe use more special type StringBuffer here 
1, Block, /*              * Other internal error. Perhaps syntax?!              */
1, Block, /*               Currently leaving BigInteger and BigDecimal in list but see:              http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6348370              Also, Color is not final so while not normally used with child              classes, it isn't strictly immutable. Use at your own risk.              This list can by extended by providing "known immutable" classes              via Immutable.knownImmutableClasses              */
1, Line, //  todo - incomplete, as body of do...while... should be executed at least once, which this doesn't provide. 
1, Line, //  we found multiple matching methods   this is a problem, because we can use only one   if it is a getter, then use the most general return   type to decide which method to use. If it is a setter 
1, Line, //  todo: replace with a real fast path unary expression helper when available 
1, Line, // TODO: if we would know exactly which paths require the exceptions        and which paths not, we can sometimes save this guard  
1, Line, // TODO (blackdrag): this if branch needs a rework. There should be no direct method calls be produced, the   handling of this/super could be much simplified (see visitAttributeExpression), the field accessibility check   could be moved directly into the search, which would also no longer require the GroovyBugError then   the outer class field access seems to be without any tests (if there are tests for that, then the code   here is dead code) 
1, Line, //  TODO don't allow override? 
1, Line, //  todo need process multi 
1, Line, //  does this operator make any sense? 
1, JavaDoc, /*  @todo we should use the real Josh Bloch algorithm here  */
1, Line, //  we have a duplicate class!   One possibility for this is, that we declared a script and a   class in the same file and named the class like the file 
1, Block, /*                      * todo there is no CompileUnit in scope so class name                     * checking won't work but that mostly affects the bytecode                     * generation rather than viewing the AST                      */
1, JavaDoc, /*  @todo maybe a double dispatch thing to handle new large numbers?  */
1, Line, // TODO: This logic mostly duplicates InvokerHelper.createScript.  They should probably be unified. 
1, JavaDoc, /*      * Should be called when descending into a loop that defines     * also a scope. Calls pushVariableScope and prepares labels     * for a loop structure. Creates a element for the state stack     * so pop has to be called later, TODO: @Deprecate      */
1, Line, //  TODO check that we reset everything here 
1, Line, //  TODO Jochen: replace with new MetaMethod 
1, Line, //  todo is ',' deprecated now?  assertEquals("assert b == true , 99", pretty("assert b==true,99")); 
1, Line, //   TODO: I (ait) don't know why these strange tricks needed and comment following as it effects some Grails tests 
1, Line, // TODO: implement int operations for this 
1, Line, //  TODO: should be able to remove the klazz field once 2.5 becomes the mainline release   Gradle has a cleanup mechanism in place to reflectively access this klazz field.   The klazz field is being kept for compatibility so as to not break builds that depend   on versions of Groovy after the field was changed to a WeakReference (classRef).  It   appears that Gradle only performs the cleanup when it detects a groovy version of 2.4.x,   so the klazz field and placeholder Sentinel class can likely be safely removed once   the release version bumps to 2.5 (or beyond).   See:   https://github.com/gradle/gradle/blob/711f64/subprojects/core/src/main/java/org/gradle/api/internal/classloading/LeakyOnJava7GroovySystemLoader.java#L74 
1, Line, //  todo suspicious spacing in the following assertion 
1, Line, // more than one matching method found --> ambiguous! 
1, Line, //         "The method 'java.lang.Object vo()' has an incorrect modifier volatile."; 
1, Line, // todo should the colon be postfixed to the label? 
1, Line, //  Bad enough to have side effects but worse if their behavior is wonky. 
1, Line, //  TODO could be made more efficient by using a reverse index 
1, Line, // TODO: Cater for comments? 
0, Line, // lines.add(new StringBuilder()); // dummy row for position [0] in the List 
0, Block, /*     * true if either \n or \r     */
0, Line, //  ex : (Character) 'c' 
0, Line, //  fallback to Map#get 
0, Line, //  use a comparator of one item or two 
0, Block, /*     The basic strategy is an optimistic-style scheme based on    the guarantee that the hash table and its lists are always    kept in a consistent enough state to be read without locking:    * Read operations first proceed without locking, by traversing the       apparently correct list of the apparently correct bin. If an       entry is found, but not invalidated (value field null), it is       returned. If not found, operations must recheck (after a memory       barrier) to make sure they are using both the right list and       the right table (which can change under re-sizes). If       invalidated, reads must acquire main update lock to wait out       the update, and then re-traverse.    * All list additions are at the front of each bin, making it easy       to check changes, and also fast to traverse.  Entry next       pointers are never assigned. Remove() builds new nodes when       necessary to preserve this.    * Remove() (also clear()) invalidates removed nodes to alert read       operations that they must wait out the full modifications.   */
0, Line, //  path for JavaStubGenerator 
0, Line, //  let's invoke the closure method 
0, Line, //  Load the file name list 
0, Line, //  structural match route 
0, Line, //  add property setter dispatcher 
0, Line, //  ClassLoader parentLoader = Thread.currentThread().getContextClassLoader(); 
0, Line, //  noop 
0, Line, //  adjust stack length 
0, Line, //  NOTE: it's important to do no lookup against script files   here since the GroovyClassLoader would 0create a new CompilationUnit 
0, Block, /*       * Execute the script represented by scriptStr using the supplied codebase.  If missingPermission      * is non-null, then this invocation expects an AccessControlException with missingPermission      * as the reason.  If missingPermission is null, the script is expected to execute successfully.       */
0, Line, //  and then apply the found information to refine the method level   information. This way the method level information slowly turns 
0, Line, // NOTE: we might return false here even if we found a class,        because  we want to give a possible script a chance to        recompile. This can only be done if the loader was not 
0, Line, //  check if we have \r\n like on Windows   if it's not \r\n we reset, otherwise, the \n is just consummed 
0, Line, //  Make sure we switch over to callback manager 
0, JavaDoc, /*      * Should be called when descending into a loop that does     * not define a scope. Creates a element for the state stack     * so pop has to be called later, TODO: @Deprecate      */
0, Block, /*                              * Here we just additionally tried to find another no-arg mixin method of the same name and register that as well, if found.                             * Safe to ignore a MethodSelectionException in this additional exercise. (GROOVY-4999)                              */
0, Line, //  add method:   PropertyChangeListener[] getPropertyChangeListeners() {     return this$propertyChangeSupport.getPropertyChangeListeners 
0, Line, //  visit SlComment()     never visited/created by parser 
0, Line, //                 throw new IllegalArgumentException("Arguments to method [respondsTo] must be of type java.lang.Class!"); 
0, Line, //  process args as input files 
0, Line, //  byte, char and short require an extra cast 
0, Line, //  the non-hidden ones. 
0, Line, //  otherwise, the file would not be human readable 
0, Line, // ---------------------------------------------------------------------------   WARNING LEVELS 
0, Line, //  receiver 
0, Line, //  after states can only be empty if try and catch statements all return in which case nothing to do 
0, Line, //  Message text   Data, when the message text is an I18N identifier 
0, Line, //  import is like  "import Foo" 
0, Line, //  may be we have C[k1:v1] -> should become (C)([k1:v1]) 
0, Line, //  disable the replacement whilst the closure is being executed 
0, Block, /*  (non-Javadoc)         * @see java.lang.Runnable#run()          */
0, Line, //  the current meta class 
0, Line, //  load this 
0, Line, //  now output 
0, Line, //  Locate the specific method based on the name and number of parameters 
0, Line, //  parameters 
0, Line, //  avoids too many errors 
0, Line, // else try a statically typed method or a GDK method 
0, Line, //  register MetaMethods 
0, Line, //  and add this interface to the list of implemented interfaces 
0, Line, // TODO check if this should not be change to iterator based call logic 
0, Line, //  Unknown type: ANNOTATION_DEF 
0, Line, // TODO: value as Annotation here! 
0, Line, //  Set it to HTML by default 
0, Line, //  The compilation unit global AST transformations are applied on   collected AST transformation names 
0, Line, //  generates --> next$Trait$Helper.method(this, arg1, arg2) 
0, Line, //  no resource found with the default locale, try without any locale 
0, Line, //  if the current call itself is with empty arg class array, no need to recurse with 'new Class[0]' 
0, Line, //  Call it immediately. 
0, Line, //  <1> 
0, Line, // "", 
0, Line, // and now use the string section to mangle the line numbers so that they refer to the 
0, Line, //    LITERALS 
0, Line, //  execute the assignment, this will leave the right side    (here the method call result) on the stack 
0, Line, //  remove from here and let the caller reposition it 
0, Line, //  if origInt and withoutCustomHandle 
0, Line, //  empty loop   - read all characters till the end of the reader   UnicodeEscapingReader has side effects of   filling the buffer 
0, Line, //  can't seem to do \n in one go with Java regex 
0, Line, //  a null element is found in the list, skip it because we'll use the other elements from the list 
0, Line, //  in case there is no "call" method on the closure, we can create a "fast invocation" paths   to avoid going through ClosureMetaClass by call(Object...) method 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setDTDHandler(org.xml.sax.DTDHandler)     */
0, Line, //  tag::java_method_selection_head[] 
0, Line, //  GROOVY-4043: Do this check up the hierarchy, if needed 
0, Line, //  load array on stack 
0, Block, /*  ******** java.time.OffsetDateTime extension methods ********  */
0, Line, //  if number of parameters does not match we have no match 
0, Line, //  targetType is abstract Collection fitting for HashSet or ArrayList 
0, Line, //  alternativeConfigureNode is used only to set the source position 
0, Block, /*  ******** java.time.ZonedDateTime extension methods ********  */
0, Line, //  now if we don't finish with a break we need to jump past   the next comparison 
0, Line, //  and object is Collection or array 
0, Line, //  Double, double 
0, Line, //  ------------------------------   bug: Qualified Exception Types   ------------------------------ 
0, Line, // Note:  This method is NOT called if number is a BigInteger or BigDecimal because 
0, Line, //  write-volatile 
0, Line, //  {@code tag} 
0, Line, //    Handle any callback that's been set 
0, Line, //  worked 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.Closure#call()          */
0, Line, //  rhs is ready to use reference, just put it in the field 
0, Line, //  if the type name was resolved before, we can try the successfully resolved packages first, which are much less and very likely successful to resolve.   As a result, we can avoid trying other default import packages and further resolving, which can improve the resolving performance to some extent. 
0, Line, //  delegate the get operation to the metaproperty 
0, Line, //  only case left is arguments.length == parameterTypes.length 
0, Line, //  TODO get normal resolving to set declaring class 
0, Block, /*      * A hashCode function that pairs with fastEquals, following the normal equals/hashCode contract.     *     * @return the calculated hash code      */
0, Line, //  set the delegate to FBS so the closure closes over the builder 
0, Line, //  value could not be placed on existing lines, so place it on new line(s) 
0, Line, //  2 = inner class case 
0, Line, // ---------------------------------------------------------------------------   TYPE COERSIONS 
0, Line, //  we ensure that hasNext has been called before    next is called 
0, Line, //  easier to massage here than in the grammar 
0, Line, // ---------------------------------------------                    boolean  --------------------------------------------- 
0, Line, //  set the args as they might have gotten Newify transformed GROOVY-3491 
0, Line, //  this is why shouldFail {} exists in Groovy tests 
0, Line, // This is an arbitrary value, picked as a reasonable choice for a rounding point 
0, Line, //  now, inner class node access to outer class fields 
0, Block, /* * The Computer Language Benchmarks Game* http://shootout.alioth.debian.org/** Based on contribution of Eckehard Berns* Based on code by Heiner Marxen* and the ATS version by Hongwei Xi* convert to Java by The Anh Tran */
0, Line, //  bind is idempotent, so no state checking 
0, Line, //     public GroovyTag[] tags(String arg0) {/*todo*/return null;} 
0, Line, //  this will overwrite a possible field property 
0, Line, //  calculate whole list in this case   recommend avoiding -ve's as this is obviously not as efficient 
0, Line, //  make the constructor call 
0, Line, //  If the range is of size 1, then we can use the existing 
0, Line, //  The following fields are only used internally; every occurrence of a user-defined expression of the same kind   has its own instance so as to preserve line information. Consequently, to test for such an expression, don't   compare against the field but call isXXXExpression() instead. 
0, Line, //  important for static compilation! 
0, Line, // mv = new org.objectweb.asm.util.TraceMethodVisitor(mv); 
0, Line, //    Fill slots with nulls, if necessary. 
0, Line, //  Note that this getBoolean access may well be synced... 
0, Line, //  hand crank it so we can add our own compiler configuration 
0, Line, //  TODO remove 
0, Line, //  this function will 'correctly' print first 30 permutations 
0, Line, //  verify if passing -Xlint in compilerarg had its effect 
0, Line, //  the original program used:   Hashtable ht = new Hashtable();   John Olsson points out that Hashtable is for synchronized access   and we should use instead: 
0, Block, /*          * TODO: Remove after JDK9 is the minimum JDK supported         *         * JDK9+ correctly accounts for the synthetic parameter and when it becomes         * the minimum version this method should no longer be required.          */
0, Line, //  push this operation to master list and then process it. 
0, Line, //  the number of arguments is correct, but if the last argument   is no array we have to wrap it in a array. If the last argument   is null, then we don't have to do anything 
0, Line, // ---------------------------------------------------------------------------   LOOP SIMPLIFICATION FOR SourceUnit OPERATIONS 
0, Line, //  not in java   actually: def z = /blah\s/ // not in java 
0, Line, //  prepare target newProxyInstance for fold to drop additional arguments needed by newConvertedClosure 
0, Line, //  assert 
0, Line, //  The double quote is only escaped if the value is for   an attribute and the builder is configured to output   attribute values inside double quotes. 
0, Line, //  The backing data store holding the key-value associations 
0, Line, //  this is saved in a field named this$0 
0, Line, //  let's check if it already implements an interface 
0, Line, //  create a shell 
0, Line, //  true part: load $t and cast to S 
0, Line, //  potentially skip empty varargs 
0, Line, //  dummy fields are only used to carry annotations if instance field 
0, Line, //  start try block, label needed for exception table 
0, Line, //  treat like a singleton list as per Java 
0, Line, //  primitive to primitive conversion. Those case are also solved by explicitCastArguments. 
0, Line, //  to finally see if the parameter and the argument fit together,   we use the provided information to transform the parameter 
0, Line, //  we should produce a clean placeholder ClassNode here 
0, JavaDoc, /*      * Intercepts a setXXX call     *     * @param object   The target object     * @param property The property to set     * @param newValue The new value      */
0, Block, /*  * The Computer Language Benchmarks Game * http://shootout.alioth.debian.org/ * * contributed by Anthony Donnefort * redone by Enotus 2010-11-20  */
0, Line, //  in case of the "in" operator, the receiver and the arguments are reversed   so we use the reversedExpression and get the target method from it 
0, Line, //  multiple assignment 
0, Line, // ---------------------------------------------                    int  --------------------------------------------- 
0, Line, //  restore original metadata 
0, Line, //  remove text and reselect the text 
0, Line, //  provide setter for CLI Builder purposes unless final 
0, Line, //  ------------------ double[] ------------------ 
0, Line, //  ------------------ byte[] ------------------ 
0, Line, //  ignore out-of-order write operations 
0, Line, // TODO: one day we could try return the previously registered Closure listener for easy removal 
0, Line, //  visit ShComment()    never visited/created by parser 
0, Line, //  Set up the script context 
0, Line, //  order matters here! 
0, Line, // package private and used only by the GroovyClassLoader. 
0, Line, //    Evaluate the template. 
0, Line, //  The InputStream from which we produce a Reader. 
0, Line, //  don't rewrite assertions with message 
0, Line, //  ensure VariableArguments are read, not stored 
0, Line, //  empty line 
0, Line, //  B=AtA         A multiplied by A transposed 
0, Line, //  try parent loader 
0, Line, //         mv = tmv; 
0, Line, //  handle back to beginning due to modulo incrementing 
0, Line, //  the arguments come in like [named_args?, args..., closure?]   so peel off a hashmap from the front, and a closure from the   end and presume that is what they meant, since there is   no way to distinguish node(a:b,c,d) {..} from   node([a:b],[c,d], {..}), i.e. the user can deliberately confuse   the builder and there is nothing we can really do to prevent   that 
0, Line, //  now let's try the classloader which loaded us 
0, Line, //  transform "a.x = b" into "def tmp = b; a.setX(tmp); tmp" 
0, Line, //  arg is not null and not assignment compatible 
0, Line, //  add the cell to the table 
0, Line, //  flag if the classes or its members are annotated 
0, Line, //  result on the stack, which we can remove now if inside a constructor. 
0, Line, //  because of type inferrence, we must perform an additional check if the right expression   is an empty list expression ([]). In that case and only in that case, the inferred type   will be wrong, so we will prefer the left type 
0, Line, //  if the receiver is "this" or "implicit this", then we must make sure that the compatible   methods are only static if we are in a static context   if we are not in a static context but the current receiver is a static class, we must   ensure that all methods are either static or declared by the current receiver or a superclass
0, Line, //  script-string-to-generated Class map 
0, Line, //             Number n = (Number) newValue;              newValue = Integer.valueOf(n.intValue());          }          array [normaliseIndex(idx,array.length)] = ((Integer)newValue).intValue();          return (Integer) newValue;      }        public static Long putAt(long[] array, int idx, Object newValue) { 
0, Line, //  internal helper method 
0, Block, /*  The size of the map.  */
0, Line, //  do not overwrite interface methods with instance methods   do not overwrite private methods   Note: private methods from parent classes are not shown here,   but when doing the multimethod connection step, we overwrite   methods of the parent class with methods of a subclass and   in that case we want to keep the private methods 
0, Line, //  groovify the fat Java-Like Groovy AST 
0, Line, //  fast path for getter/setters etc. 
0, Line, //  print nothing 
0, Line, //  ------------------ int[] ------------------ 
0, Line, //  diamond always matches 
0, Line, //  to be replaced with a proper test whether a return value should be used or not 
0, Line, // n*LOG(n) version 
0, Line, //  Boolean / boolean 
0, Line, //    Display our type, text, and (optional) meaning 
0, Line, //  add one to dist to be sure interfaces are preferred 
0, Line, //  jump if we don't want to continue 
0, Line, //  If the new script base class does not have a contextual constructor (g.l.Binding), then we won't either.   We have to do things this way (and rely on just default constructors) because the logic that generates 
0, Line, //  this should never happen 
0, Line, //  an extension method is found 
0, Line, //  check for null 
0, Line, //  note: ifeq tests for ==0, a boolean is 0 if it is false 
0, Line, //  find method call target 
0, Line, //  the generic method is valid, if available (!=null), if static or 
0, Line, //  create values() method 
0, Line, //  use propX when lazy, because lazy is only allowed on fields/properties 
0, Line, //       X     Y     Z     [     \     ]     ^     _ 
0, Line, //  unchecked assignment within ternary/elvis   examples:   List<A> list = existingAs ?: []   in that case, the inferred type of the RHS is the type of the RHS   "completed" with generics type information available in the LHS 
0, Line, //  the method call... usually simply Object in operandStack 
0, Line, //  add method: void removeVetoableChangeListener(name, listener) 
0, Line, //  current label for break 
0, Line, //  create lexer 
0, Line, //  if emptyBody == true, then we generate an empty body instead throwing error on unimplemented methods 
0, Line, //  tag::java_method_selection_body[]   ...   <1>   <2>   <3>   end::java_method_selection_body[] 
0, Block, /*  multiply vector v by matrix A  */
0, Line, //  mark all methods as visited. We can't do this in visitMethod because the type checker 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.GroovyObject#getMetaClass()      */
0, Line, //  there must be four continuation bytes of the form 10xxxxxx,   otherwise the following character is is not a valid UTF-8 construct 
0, Line, //  needs all package names   needs all packages / class names   needs all packages 
0, Line, //  ignore methods already in owner 
0, Line, //  look for full match or match excluding package 
0, Line, //  remove the temporary variable to keep the 
0, Line, //  For statement contains unexpected tokens. Possible attempt to use unsupported Java-style for loop.   fails after parser 
0, Line, //  let's try getting the property on the second object 
0, Line, //  receiver   messageName 
0, Line, //  must write under lock 
0, Line, //  ignore. In case of some exception, release info is not available 
0, Line, //    KEYWORDS: RESERVED 
0, Line, //  does a getter exists ? 
0, Line, //  Object[] vs Object 
0, Line, //  literals 
0, Line, //  ------------------ long[] ------------------ 
0, Line, //  xml namespace is always defined 
0, Line, //  this part should never be reached! 
0, Line, //    Get the output stream writer from the binding. 
0, Line, //  from == to and step == 0, nothing to do, so return 
0, JavaDoc, /*      * If the byte has the form 1110xxx, then it's the first byte of a three-bytes sequence character.     *     * @param b a byte.     * @return true if it's the first byte of a three-bytes sequence.      */
0, Line, //  no-arg closure   same number of arguments   implicit it   vargs 
0, Line, //  Use a doPrivileged here as many different properties need to be   read, and the policy shouldn't have to list them all. 
0, Line, //  look to see if per-field handlers will catch this one... 
0, Line, //         printUpdatingTabLevel(t,visit,"with (",null,") ");      } 
0, Line, //  the try finally case 
0, Line, //      introspect 
0, Line, //  GROOVY-6357 : Following Java's behavior for protected modifier on inner classes: should be public 
0, Line, //    Build the specified type or, if no type was specified, the   smallest type in which the number will fit. 
0, Line, //  The phase in which the failures occurred 
0, Line, //  both converter and reverseConverter must be set or not 
0, Line, //  look for one of these:     import static SomeClass.someProp [as otherName] 
0, Line, // SPG modified to reflect DefaultGroovyMethod name change and expected result from 
0, Line, //  $Id: heapsort.java,v 1.1 2004-05-23 06:37:41 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Block, /*          * Create groovy assertion style error message for template error. Example:         *         * Error parsing expression on line 71 column 15, message: no such property jboss for for class DUMMY         * templatedata${jboss}templateddatatemplateddata         *             ^------^         *                 |         *           syntax error          */
0, Line, //  All objects pending cleanup 
0, Line, //  because compiler clients are free to choose any GroovyClassLoader for   resolving ClassNodeS such as annotatedType, we have to compare by name,   and cannot cast the return value to GroovyASTTransformationClass 
0, Line, //  duplicate int arguments 
0, Line, //  "DefaultPackage" for 'default package' path, rather than null... 
0, Line, //  this loop builds a name from right to left each name part   separated by "." 
0, Line, // deprecated 
0, Line, //  Outer.this in a special constructor call 
0, Line, //  fails after parser   fails after parser 
0, Line, //  set real fixed generics for extension methods 
0, Line, //  BigDecimal conversion is done by using the double value 
0, Line, // just for uniformity 
0, Line, //  we have to declare the namespace - choose a tag   If the namespace has been declared in the GPath expression use that tag 
0, Line, //  visit AST xforms 
0, Line, //    Get the class and calculate its filesystem name   
0, Line, //  in case there's nothing else, invoke the object's own invokeMethod() 
0, Line, //  check for propertyMissing provided through a category 
0, Line, //  copy annotations from field to dummy field 
0, Line, //  let's use the field expression if it's available 
0, Line, // mv.visitInsn(NOP); 
0, Line, //  passed as the first argument implicitly. 
0, Line, //  -------------------------------   different Variable based checks   ------------------------------- 
0, Line, //  first test special cases 
0, Line, //  Wrong list -- must restart traversal at new first 
0, Line, //  +   -   *   /   \   %   **   ** 
0, Line, //  short 
0, Line, //  package-private for use in testing to avoid calling ServiceLoader.load 
0, Line, //  need to remove double quotes in string literals 
0, Line, //  cast to prevent incorrect @since 1.7 warning 
0, Line, //  append classpath if not already defined 
0, Line, //  if the provided classnode is a subclass of the upper bound   then check that the generic types supplied by the class node are compatible with   this generics specification   for example, we could have the spec saying List<String> but provided classnode 
0, Line, //  if this class is not an instance of Script, it's a full-blown class   then simply return that class 
0, Line, //       H     I J K     L     M N     O 
0, Line, //  todo : corner case 
0, Line, // slow Path 
0, Line, //  We don't want to lose anything, so log it 
0, Line, //  clear properties to avoid generation of methods 
0, Line, //  fallback to the compiler classloader 
0, Line, // Statement printStatement = createPrintlnStatement(new VariableExpression("str")); 
0, Line, //  tag::jsr223_basic[] 
0, Line, //  any explicit false for enabled disables functionality   this allows, for example, configscript to set all   classes to true and one class to be explicitly disabled 
0, Line, //  first pass, collect nodes 
0, Line, //         @Override 
0, Line, //  a type inference has been made on a variable whose type was defined in an instanceof block   we erase available information with the new type 
0, Line, //  we are done if we are now in the declaring class 
0, Line, // interfaces have no constructors, but this code expects one,  so create a dummy and don't add it to the class node 
0, Line, //  test for JDK9 JIGSAW 
0, Line, //  $Id: fibo.java,v 1.3 2005-04-25 19:01:38 igouy-guest Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  getMap() already loaded using a null classloader 
0, Line, //  Same as AnnotationClosureCompatibilityTest except that annotation closure's   declared type is a bound parameterized type (affects stub generation) 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getEntityResolver()     */
0, Line, //  we need to keep the -1 to track the mismatch, a +1   by any means could let it look like a direct match   we want to add one, because there is an interface between   the interface we search for and the interface we are in. 
0, Line, //  if left expression is a closure shared variable, a second pass should be done 
0, Line, //  let's apply the method to each item in the collection 
0, Line, //  throws FileNotFoundException, IllegalArgumentException {   throws FileNotFoundException, IllegalArgumentException { 
0, Line, //  remember non-source/non-repeatable annos (auto collecting of Repeatable annotations is handled elsewhere) 
0, Line, //       '     a     b     c     d     e     f     g 
0, Line, //  Test subclass of GroovyObjectSupport 
0, Block, /*      * Constructor used by makeArray() if a real class is available      */
0, Line, //  if we are a number literal then let's just parse it   as the negation operator on MIN_INT causes rounding to a long 
0, Block, /*  (non-Javadoc)           * @see groovy.lang.GroovyObjectSupport#setProperty(java.lang.String, java.lang.Object)            */
0, Line, //    Keywords 
0, Line, //  this line should be useless, but well, just in case 
0, Line, //  message string 
0, Line, //  last label by default which is added first by APP 
0, Block, /*     * Expands the properties inside the given string to it's values.     */
0, Line, //  1 param meta method 
0, Line, //  now do the business      
0, Line, //  don't generate stubs for private classes, as they are only visible in the same file 
0, Line, //  GROOVY-6240 
0, Line, //  start 
0, Line, //  If no scheme is specified for the repository root,   then turn it into a URI relative to that of the source file. 
0, Line, // ---------------------------------------------------------------------------   TYPE HIERARCHIES 
0, Line, //  a MME was ensued here stating no 't.start()' was available 
0, Line, //  simple check on being subclass 
0, Line, //  @todo - remove classic references from the TCK 
0, Line, //  but it is allowed... 
0, Line, //  The phase in which the failures occurred   The *Unit object this exception wraps 
0, Line, //  for additional options to be passed to javac. 
0, Line, // (element.getReturnType() == Void.class || element.getReturnType() == Void.TYPE) && 
0, Line, //  nothing to do in that case 
0, Line, //  store array 
0, Line, //  wrap arguments into an array 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClassRegistry.MetaClassCreationHandle#create(java.lang.Class, groovy.lang.MetaClassRegistry)      */
0, Line, //  visitAt() ...     token type 'AT' should never be visited, as annotation definitions and usage, and     direct field access should have all moved this token out of the way. No test needed. 
0, Line, //  High surrogate 
0, Line, //  let's compare their generics type 
0, Line, //  ------------------ short[] ------------------ 
0, Line, //  The notification queue and listener 
0, Block, /*  This is an optional short-cut; at each recursive call,        check to see if the elements in this subset are already        ordered.  If so, no further comparisons are needed; the        sub-array can just be copied.  The array must be copied rather        than assigned otherwise sister calls in the recursion might        get out of sync.  When the number of elements is three they        are partitioned so that the first set, [low, mid), has one        element and and the second, [mid, high), has two. We skip the        optimisation when the number of elements is three or less as        the first compare in the normal merge will produce the same        sequence of steps. This optimisation seems to be worthwhile        for partially ordered lists but some analysis is needed to        find out how the performance drops to Nlog(N) as the initial        order diminishes - it may drop very quickly.   */
0, Line, //  package local 
0, Block, /*  5: byte    */
0, Line, //  a decimal number 
0, Line, //  if argument null, take the static type 
0, Line, //  handle catch body 
0, Line, //  anything that prevents (X) from being a cast 
0, Line, //  not in Java Doclet API 
0, Line, //  and prevents from infinite loops 
0, Line, //  edit input files in place 
0, Line, //  since it is possible that the callsite uses some generics as well,  
0, Line, //  to avoid double initialization in case of several constructors 
0, Line, //  not using groups, so return the nth   occurrence of the pattern 
0, Line, //  return is OK in closures in object initializers 
0, Line, //  =====================================================   UNDO/REDO NAMES   ===================================================== 
0, Line, //  The calls to DefaultMetaClassInfo.setPrimitiveMeta and sdyn.setBoolean need to be   ordered. Even though metaClassInfo is thread-safe, it is included in the block   so the meta classes are added to the queue in the same order. 
0, Line, //  clean local vars added during visit of closure 
0, Line, //  Only look at things we can actually call 
0, Line, //  todo: replace this simple idea of default class name 
0, Line, //  trying to guess the concrete list type and create a new instance from it 
0, Line, //  Destructive! 
0, Line, //  TODO: replace with stream-based version 
0, Line, //  empty quote '' 
0, Line, //  create a local variable to hold the old value from the getter 
0, Line, //  we cannot just wrap in a List as we support primitive type arrays 
0, Line, //  check but determine no -ve consequences first 
0, Block, /* || param == Byte.TYPE */
0, Line, //  load the array 
0, Line, // fieldValue,  //br  all the sudden that one cannot init the field here. init is done in static initializer and instance initializer. 
0, Line, //  single quotation mark 
0, Line, //   
0, Line, //  since we added an anonymous inner class we should also   add the dispatcher methods 
0, Line, //  add one parameter for each expression in the   constructor call 
0, Line, //  compare Li1 and Li2 for equality 
0, Line, //  is this property already accounted for? 
0, Line, //  visitExponent ...     token type EXPONENT only used by lexer, never visited/created 
0, Line, //  for b/c with Java return an int if we can 
0, Line, // we use the lookAhead to make sure that a template file ending in say "abcdef\\"  will give a result of "abcdef\\" even though we have special handling for \\ 
0, Line, //  myMethod(a,b) {... 
0, Line, //  we need to handle only assignment to arrays combined with an operation   special here. e.g x[a] += b 
0, Line, //  while anything inside a static initializer block is appended   we don't want to append in the case we have a initialization   expression of a static field. In that case we want to add   before the other statements 
0, Line, //  test int[] 
0, Line, //  if left is Enum and right is String or GString we do valueOf 
0, Line, //  stack size = 1 
0, Line, //  add marker in the bytecode to show source-bytecode relationship 
0, Line, //  Global classes 
0, Line, //  Weighted selection from alphabet 
0, Line, //  false part: load y and cast to S 
0, Line, //  Normalise negative indices. 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getErrorHandler()      */
0, Line, //  add field: 
0, Line, //  and class as property 
0, Line, //  the interface beeing added is more specific than the one in the list, replace it 
0, Line, //  Mock methods used for testing  ------------------------------------------------------------------------- 
0, Line, //  -----------------------   feature: Native Methods 
0, Line, //  check whether thread context loader can "see" Groovy Script class 
0, Line, //  Notify the listener only if the entry was evicted 
0, Line, //  create loader and execute main class 
0, Line, //  java tab policy action 
0, Line, //  FIXME 
0, Line, //  if call is spread safe, replace it with a for in loop 
0, Line, //  handle back to beginning due to modulo decrementing 
0, Line, //  array get: load sub, call arrayGet [load b, call operation, load sub, call arraySet] 
0, Line, //  do not overwrite final 
0, Line, //  execute method   this will load the callsite and the receiver normally in the wrong   order since the receiver is already present, but before the callsite   Therefore we use callSiteReceiverSwap to correct the order.    After this call the JVM operand stack will contain the result of 
0, Block, /*  (non-Javadoc)    * @see java.io.Writer#flush()     */
0, Line, //  These two properties are used when no ExpandoMetaClassCreationHandle is present 
0, Line, //  create statementBody 
0, Line, //  Add an entries to force ReferenceManager.removeStaleEntries 
0, Line, //  assigned later by init()   may be changed by init()   may be changed by init() 
0, Line, //  let's evaluate the RHS and store the result 
0, Line, //  appends buffer 
0, Line, // ----------------------------------------------------------------------   special cases 
0, Line, //  double x double 
0, Line, //  visitLiteralInterface     token type "interface" only used by parser, never visited/created directly 
0, Line, //  tag::jsr223_imports[] 
0, Line, //  Redirect script output to context writer, if out var is not already provided 
0, Line, //  we don't use property exists there because findMethod is called on super clases recursively 
0, Line, //  def _result = new StringBuilder() 
0, Line, //  the name is a type so remove it from the scoping   as it is only a classvariable, it is only in   referencedClassVariables, but must be removed   for each parentscope too 
0, Line, //  fails after parser 
0, Line, //  load every field 
0, Line, //  ignore methods from GroovyObject 
0, Line, //  Write out keys and values (alternating) 
0, Line, //  isCase 
0, Block, /*  ******** java.time.temporal.Temporal extension methods ********  */
0, Line, //  -------------------------------------------------- 
0, Line, //  so we store the type on stack 
0, Line, //    Build the specified type or default to BigDecimal 
0, Line, //  GROOVY-3543: visit the declaration expressions so that declaration variables get added on the varStack 
0, Line, //  br experiment with local var table so debuggers can retrieve variable names  AsmClassGenerator.CREATE_DEBUG_INFO) { 
0, Block, /*  End universal methods.  */
0, Line, //  add given statements for explicitly declared static fields just after enum-special fields   are found - the $VALUES binary expression marks the end of such fields. 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.MetaClass#initialize()     */
0, Line, //  a  abb   abb -> bba   bbabb   bba 
0, Line, //  done will only be true if we ran out of data without seeing the match character 
0, Line, //  same for the catch parts 
0, Line, //  we should implement the field helper interface too 
0, Line, //  here we don't care if the method exists or not we assume the   developer is responsible and wants to override methods where necessary 
0, Line, //  various helpers in order to avoid a potential very big class 
0, Line, //  @interface Foo{ int bar()... 
0, Line, //  return true if a property is found 
0, Line, //  == 
0, Line, //  no over-runs... 
0, Line, //       0     1     2     3     4     5     6     7 
0, Line, //  expressions = constructor call arguments 
0, Line, // we opt for not doing anthing here...we just do not get context if  this happens 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getErrorHandler()     */
0, Line, //  add method:   void addVetoableChangeListener(listener) {       this$vetoableChangeSupport.addVetoableChangeListener(listener) 
0, Line, //  The eviction support 
0, Line, //  Conversions in which all decimal digits are known to be good. 
0, Line, // ---------------------------------------------                    int[]  --------------------------------------------- 
0, Line, //  called with null 
0, Line, //  declare and initialize 
0, Line, //  Chances are this is a Float or a Big.   With Float we're extending binary precision and that gets ugly in decimal.   If we used Float.doubleValue() on 0.1f we get 0.10000000149011612.   Note that this is different than casting '(double) 0.1f' which will do the   binary extension just like in Java.   With Bigs and other unknowns, this is likely to be the same. 
0, Line, //  we need to add "this" to access unknown methods/properties 
0, Line, //  visit lcurly()     token type LCURLY only used inside parser, never visited/created 
0, Line, //  second pass, call visit on all of the collected nodes 
0, Line, //  Iterator interface  ------------------------------------------------------------------------- 
0, Line, //  usually in new, i.e.   def y = new int[5]; 
0, Line, //  these two are never reached in bytecode and only there    to avoid verifyerrors and compiler infrastructure hazzle 
0, Line, //  because source position seems to be more reliable for statements   than for expressions, we get the source text for the whole statement 
0, Line, //    Implementation of the TableModelListener interface,   
0, Block, /*          * GROOVY-3339 - do nothing - so that numbers don't get replaced by cached constants in closure classes          */
0, Line, //   --------------------------------------------------------                normal GroovyObject field handling : get    -------------------------------------------------------- 
0, Line, //  only accepts AssertStatementS so that better error messages can be produced 
0, Line, //  count trailing whitespace characters 
0, Line, // ---------------------------------------------------------------------------   LOOP SIMPLIFICATION FOR PRIMARY ClassNode OPERATIONS 
0, Block, /*  ---------------- Builder --------------  */
0, Block, /*          * We use the following Binding instance so that global variable lookup         * will be done in the current ScriptContext instance.          */
0, Line, //  on an assignment everything that can be done by a GroovyCast is allowed 
0, Line, //  both candidate method and receiver have generic information so a check is possible 
0, Line, //  No need to check the arguments against an array constructor: it just needs to exist. The array is   created through coercion or by specifying its dimension(s), anyway, and would not match an   arbitrary number of parameters. 
0, Line, //  FIX_JDK9 remove this exemption for JDK9 
0, Line, //   make sure we are adding to correct list 
0, Line, //  ----------------------------- inner classes -------------------------------------- 
0, Line, //  lazily initialized factory 
0, Block, /*  ******** java.time.OffsetTime extension methods ********  */
0, Line, // TraceClassVisitor tracer = new TraceClassVisitor(visitor, new PrintWriter(System.err,true)); 
0, Line, //  we do not resolve a vanilla name starting with a lower case letter   try to resolve against a default import, because we know that the 
0, Line, //  The warning level, for filtering 
0, Line, //  compileStack.containsVariable(name) means to ask if the variable is already declared   compileStack.getScope().isReferencedClassVariable(name) means to ask if the variable is a field   If it is no field and is not yet declared, then it is either a closure shared variable or   an already declared variable. 
0, Line, //  also for custom Number implementations 
0, Line, //  identifiers 
0, Line, // ---------------------------------------------------------------------------   NODE IDENTIFICATION AND MEANING 
0, Line, //  try inner classes 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#setAttribute(java.lang.Object, java.lang.String, java.lang.Object)      */
0, Line, //  This method only exists as a workaround for GROOVY-6094 
0, Line, //  This shouldn't happen, but this is the same default used by   BufferedWriter on a security exception. 
0, Line, //  to avoid default initialization 
0, Block, /*      * A NumberRange's canonicalHashCode is based on hashCode values of the discrete items it represents.     * When two NumberRange's are equal they will have the same canonicalHashCode value.     * Numerical values which Groovy deems equal have the same hashCode during this calculation.     * So currently (0..3).equals(0.0..3.0) yet they have different hashCode values. This breaks     * the normal equals/hashCode contract which is a weakness in Groovy's '==' operator. However     * the contract isn't broken between equals and canonicalHashCode.     *     * @return the hashCode value      */
0, Line, //  Always set the "args" property, regardless of what path we take in the code. 
0, Line, //  we have to handle an enum constant with a class overriding   a method in which case we need to configure the inner class 
0, Line, //  if multiple values are associated with the same column, only   render the value which was recorded last (i.e. the value   corresponding to the outermost expression) 
0, Line, //  inside defineTarget 
0, Line, //  if the stream can't be opened, let's keep the old reference 
0, Line, //  skip DGM methods on an interface if the class already has the method   but don't skip for GroovyObject-related methods as it breaks things :-( 
0, Line, //  we could always escape if we wanted to. 
0, Line, //  visit right side first to avoid the usage of a   variable before its declaration 
0, Line, //  GROOVY-5044 
0, Line, //  check needed as @Test(attr = {"elem"}) passes through the parser 
0, Line, //  CallSite is normally not showing up on the    operandStack, so we place a dummy here with same 
0, Line, //  setup two threads to try a deadlock 
0, Block, /*  ******** java.time.Instant extension methods ********  */
0, Line, //  xgetAt() that takes an integer index. 
0, Line, //  not normally set for non-major types but appropriate for a script 
0, Line, //  ex: (Date)null 
0, Line, //  starting position in document 
0, Line, //  some short circuit cases for efficiency 
0, Line, //  TRICK: we add at the beginning so when we find for remove or get we always have the last one 
0, Line, // Class.class,  MetaClass.class,  Iterator.class,  GeneratedClosure.class,  GeneratedLambda.class,  GroovyObjectSupport.class 
0, Line, //  add property getter dispatcher 
0, Line, //  GROOVY-7322   static method call in trait? 
0, Line, //  dispatching to EmptyStatement will not call back visitor,    must call our visitEmptyStatement explicitly 
0, Line, //  CONSTRUCTORS 
0, Block, /*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Isaac Gouy */
0, Line, //  Switched over to Map so need to clear array references 
0, Line, //  static imports 
0, Line, //  we could rely on the first parameter name ($static$self) but that information is not   guaranteed to be always present 
0, Line, //  we use the idle manager, so let us use the reference counter   we change the manager once the threshold is reached. There is   a small chance that the value will go beyond Integer.MAX_VALUE   so we check for values below 0 too. If threshold is low, then   this is unlikely to happen. If threshold is high, then we    have all negative values as fall back 
0, Line, //    Last sanity check.   
0, Line, //  load return value 
0, Line, //  check interfaces at this level first 
0, Line, //  check if a super class has @Bindable annotations 
0, Line, // can't cache the script because the context may be different.  but don't bother loading parsing the class again 
0, Line, //  specifies the interfaces implemented by a class   specifies the base class/interface for a new one   method variable points to the current instance   method variable points to the base instance   type comparator   deprecated; identifies a property   used to create a new instance of a class 
0, Line, // ----------------------------------------------------------------------   generic set method  ---------------------------------------------------------------------- 
0, Line, //  unwrap the Object[] and make transformations if needed   that means, to duplicate the Object[], make a cast with possible   unboxing and then swap it with the Object[] for each parameter 
0, Line, //  TraitClass 
0, Line, //  visitLiteralElse ...     token type "else" only used by parser, never visited/created directly 
0, Line, //  since 2.4, we can also register precompiled type checking extensions which are not scripts 
0, Line, //  load normal receiver as first argument 
0, Line, //  no arg method 
0, Line, //  multiple assignment check 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getDTDHandler()      */
0, Line, //  res== null means it got collected 
0, Line, //  add returns to try and catch blocks 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#characters(char[], int, int)     */
0, Block, /*     * This method tries to read subsequent buffers from the reader using a mark     */
0, Line, //  we want to remove the BOM windows adds from a file if the encoding is UTF-8   in other cases we depend on the charsets  
0, Line, //  check module node imports aliases   the while loop enables a check for inner classes which are not fully imported, 
0, Line, //  in normal case we don't need to do script lookups 
0, Line, //  Get first hex digit 
0, Line, //  if the super class is another non-static inner class in the same outer class hierarchy, implicit this   needs to be passed 
0, Block, /*  ******** java.time.LocalDateTime extension methods ********  */
0, Line, //  end::jsr223_invocable[] 
0, Line, //  supports Map style newInstance method 
0, Line, //  scan source directories and dest directory to build up   compile lists 
0, Line, //  private final Comparator this$<property>Comparator = new <type>$<property>Comparator(); 
0, Line, //  parameter order is build(CompilePhase, boolean, String) 
0, Line, // Integer/Integer division. 
0, Line, //  check for a generic get method provided through a category 
0, Line, //  declare the variable even if there was an error to allow more checks 
0, Line, //  try to find a declaration of a variable 
0, Line, // no inspection unchecked 
0, Line, //  used for closure return type inference 
0, Line, //  package private class, public method   see GROOVY-6962 
0, Line, //  inner class case 
0, Line, //  import is like "import foo.Bar" 
0, Line, //  if no method was found, try to find a closure defined as a field of the class and run it 
0, Line, //  implicit it 
0, Line, //  determine appropriate class loader to serve as parent loader 
0, Line, //  keep Object[] on stack 
0, Line, //  For generic input streams, provide a catch-all codebase of GroovyScript   Security for these classes can be administered via policy grants with   a codebase of file:groovy.script 
0, Block, /*              *  if it is static final but not accessed inside a static constructor, or,             *  if it is an instance final but not accessed inside a instance constructor, it is an error              */
0, Line, //  compile Java and clean up 
0, Line, // ---------------------------------------------------------------------------   PHASE HANDLING 
0, Line, //  null means no implicit "it" 
0, Line, //  ==================================================   ClipBoard   ================================================== 
0, Line, //  the actual type identified by the lexer   an interpretation applied to the token after the fact 
0, Line, //  itself in the list of receivers already; 
0, Line, //  todo: reliable way to call the transformer  parentNode.visit(trn); 
0, Block, /* Integer[9] */
0, Line, //  to not record the underlying MapExpression twice,   we disable the assertion tracker   see https://issues.apache.org/jira/browse/GROOVY-3421 
0, Line, // throws FileNotFoundException, IllegalArgumentException { 
0, Line, //  lets call the function 
0, Line, //  invoke through reflection to eliminate mandatory JUnit 4 jar dependency 
0, Line, //  e.g int.getClass() 
0, Line, //  Non-null iff this scope corresponds to a class, as opposed to a method, "if" statement,   block statement, etc. 
0, Line, //  global closures map - this is used to simulate a single 
0, Line, //  Get the existing code block 
0, Line, //  else fall thru.. 
0, Line, //  template storage   source file dirs 
0, Line, // receivers.add(new Receiver<String>(CLOSURE_TYPE, path + "owner")); 
0, Line, //  class[]. All of that but the closure must be provided here   
0, Line, //  An implicitly created variable, such as a variable in a script that's doesn't have an explicit   declaration, or the "it" argument to a closure. 
0, Line, //  GROOVY-5568, we would be facing a DGM call, but instead of foo.getText(), have foo.text 
0, Line, // Clean up all recursive references to File objects 
0, Line, //  a class consisting of a vanilla name can never be   a static inner class, because at least one dot is   required for this. Example: foo.bar -> foo$bar 
0, Line, //  special case for numbers, improve type checking as we can expect ++ and -- to return the same type 
0, Line, //  makes this more of an integration test than a unit test... 
0, Line, // , 
0, Line, // ---------------------------------------------------------------------------   GENERAL SUPPORT ROUTINES 
0, Line, //  guards for receiver and parameter 
0, Line, //  GROOVY-9136 -- object expression should not overlap source range of property; property stands in for original varibale expression 
0, Block, /*                          * the code is (meta class is stored in 1):                         * this.metaClass = <1>                          */
0, Line, //            \t    \n                \r 
0, Line, //  import is like "import foo.*" 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.Buildable#build(groovy.lang.GroovyObject)      */
0, Line, //  remove RHS value from operand stack 
0, Line, //  safe value here to avoid multiple reads with possibly   differing values due to concurrency 
0, Line, //  and then start our checks with the receiver 
0, Line, //  one class is void, the other is not 
0, Line, //  we use this NOP to have a valid jump target for the various labels 
0, Line, //  indirect import checks   if set to true, then security rules on imports will also be applied on classnodes. 
0, Line, //  try groovy file 
0, Line, //  Get the script path from the request - include aware (GROOVY-815) 
0, Line, //  assume a <p> paragraph tag signifies end of sentence 
0, Block, /*     * This method reads without a buffer.    * It returns too many empty lines if \r\n combinations    * are used. Nothing can be done because we can't push    * back the character we have just read.     */
0, Block, /*         * Try to locate the resource and return an opened connection to it.         */
0, Line, //  do not create forwarder for private methods   see GROOVY-7213 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#endDocument()     */
0, Line, //  lets clear the static bit 
0, Block, /*  (non-Javadoc)    * @see groovy.text.TemplateEngine#createTemplate(java.io.Reader)     */
0, Line, //  if script has both loose statements as well as main(), then main() is ignored 
0, Line, //  don't worry if it's not a ListExpression, or AnnotationConstant, etc.   the rest of GroovyC will flag it as a syntax error later, so we don't   need to raise the error ourselves 
0, Block, /*  (non-Javadoc)           * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String, java.lang.Object)            */
0, Line, //  Place some values on the ReferenceQueue 
0, Line, //  byte 
0, Line, //  call like this(..)/super(..) after the first statement, which shouldn't be allowed. GROOVY-2836 
0, Line, // CHECKSTYLE.OFF: ConstantNameCheck - special case with a reusable exception 
0, Line, //  The XML namespace is always defined 
0, Line, //  We have private methods for that name, so remove the   multimethods. That is the same as in our index for   super, so just copy the list from there. It is not   possible to use a pointer here, because the methods   in the index for super are replaced later by MOP   methods like super$5$foo 
0, Line, //  method and than that to make the connections to the SAM type generics 
0, Line, //  never persist the MetaClass 
0, Line, //  we must check that such a method exists on the LUB 
0, Line, //  remove the normalized ending line ending if it was not present 
0, Line, //  register the mgr with object name "bsf" 
0, Line, // noinspection InfiniteLoopStatement 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setProperty(java.lang.String, java.lang.Object)     */
0, Block, /* BigDecimal[17] */
0, Line, //  force final class, remove interface, annotation, enum and abstract modifiers 
0, Line, //  now look for any stray getters that may be used to define a property 
0, Line, //  GROOVY-7783 use Sets for O(1) performance for contains 
0, Line, //  produce result 
0, Line, //  The Foo parameter type should link to lib/Foo.html, not api/Foo.html. 
0, Line, //  this avoids going through the parent classloaders/bootstrap 
0, Line, //  for maps, replace map.foo with map.get('foo') 
0, Line, //  second visit 
0, Line, //  Map.Entry Ops  
0, Block, /* &&            !(expression.isImplicitThis() && controller.isInClosure())  */
0, Line, //  GROOVY-9199 
0, Line, //  check types are compatible for assignment 
0, Line, //  "this" for static methods is the Class instance 
0, Line, //  lets avoid class loading 
0, Line, //  we are interested in the longest path only 
0, Line, //  let's strip off everything after the last '.' 
0, Line, //  call the existing block, which will presumably set the value properly 
0, Line, //  Swallow multiple 'u's 
0, Line, //  wrap in a stringOf { ... } closure call 
0, Line, //  $idx = 0 
0, Line, //  private implementation methods  ------------------------------------------------------------------------- 
0, Line, //  (like @BaseScript) that could change this.  But this is cautious and anticipates possible compiler changes. 
0, Line, //  operands are on the stack already 
0, Line, //  correct receiver for inner class   we assume the receiver is an instance of the declaring class of the    candidate method, but findMethod returns also outer class methods   for that receiver. For now we skip receiver based checks in that case 
0, Line, //  and those are not hierarchical we can't use them for making an absolute URI. 
0, Line, // ---------------------------------------------------------------------------   OUTPUT 
0, Line, //  couldn't find compiler - try to find tools.jar   based on java.home setting 
0, Line, //  INNER CLASSES 
0, Line, //                 int value; 
0, Line, //  Simple setter 
0, Line, //  first we calculate all arguments, that are for sure not part   of vargs.  Since the minimum for arguments is noVargsLength   we can safely iterate to this point 
0, Line, //  GroovyCodeVisitor interface  ------------------------------------------------------------------------- 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getEntityResolver()      */
0, Line, //  One-time-fill inner classes lookup map 
0, Line, //         return values()[ordinal]      } 
0, Line, //  ignore all other types 
0, Line, //  value is a regular expression. 
0, Line, //  no jump, so -1, need to pop off surplus LL 
0, Line, //  Delegated XMLReader methods  ------------------------------------------------------------------------ 
0, Line, //  when we get something other than -1, we know which regexp   matched; the 0 group is the complete expression of the    matcher, which would always return a hit based on the above 
0, Line, //  verify static imports 
0, Line, //  optimize char initialization 
0, Line, //  Allow macro methods to return null as an indicator that they didn't match a method call 
0, Block, /*      * The cached canonical hashCode (once calculated)      */
0, Line, //  switch does not have a continue label. use its parent's for continue 
0, Line, //  try classes under compilation 
0, Line, //  expressions will leave a value on stack, statements not   so expressions need to pop the alibi null 
0, Line, //  we may have to box the argument! 
0, Line, //  ignore the return of the call 
0, Line, //  instance at the end of the stream 
0, Line, // ----------------------------------------------------------------------   getter 
0, Line, //  skip if the property type is unknown (this seems to be the case if the   property descriptor is based on a setX() method that has two parameters,   which is not a valid property) 
0, Line, //  Allow security managers to prevent system property access 
0, Line, // load "this" 
0, Line, //  would this branch ever be true? 
0, Line, //  def $toStringFirst = true 
0, Line, //  Get verbosity hint. 
0, Line, //  NOTE: timeStamp constants shouldn't belong to Verifier but kept here   for binary compatibility 
0, Line, //         assertEquals("println([$x, x, y])", pretty("println([$x, x, y])")); // fails after parser // not in java      } 
0, Line, //  correcting declaring class for extension methods: 
0, Line, //  GROOVY-5202   there might be a non public listener of some kind   we skip that here 
0, Line, //   --------------------------------------------------------                         methods for this 
0, Line, //  should only get here with size = 2 when inner class constructor 
0, Line, //  add a more informative name 
0, Line, // call asBoolean 
0, Line, //  0x41('a') - 0x46('f') 
0, Line, //  TODO: correct generics for when receiver is to be skipped 
0, Line, //  $Id: ary.java,v 1.1 2004-05-22 07:27:00 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  ------------------------------   feature: Enum Definitions 
0, Line, //  under certain restrictive environments, loading certain classes may be forbidden   and could yield a ClassNotFoundException (Google App Engine) 
0, Line, //  ---------------------------------------------------------------------   The Great Computer Language Shootout   http://shootout.alioth.debian.org/     Code based on / inspired by existing, relevant Shootout submissions     Contributed by Anthony Borla   --------------------------------------------------------------------- 
0, Line, //  Put tail end of permutation after jth position in increasing order 
0, Line, //  if original Integer[] meta class 
0, Line, //  add thisPara to this(...) 
0, Line, //  used to handle exceptions in catches and regularly visited finals 
0, Line, //  collect every variable expression used in the loop body 
0, Block, /*  ******** java.time.DayOfWeek extension methods ********  */
0, Line, //  same class in same source 
0, Line, //  if there are any joint compilation options set stubDir if not set 
0, Line, //  repeat test with subclass 
0, Line, //  protected final PropertyChangeSupport this$propertyChangeSupport = new java.beans.PropertyChangeSupport(this) 
0, Line, //  check for a category method named like a setter 
0, Line, //  replace statement code 
0, Line, //  unused 
0, Line, //  (next, result) = [ result, next+result ]   -->   def tmp1 = result   def tmp2 = next+result   next = tmp1   result = tmp2 
0, Line, //  to our list 
0, Line, //  LITERAL, this, true, false, null   SIMPLE_EXPRESSION, and various molecules 
0, Line, //  dummy methods 
0, Block, /*              * Iterate over the classpath provided to groovyc, and add any missing path             * entries to the AntClassLoader.  This is a workaround, since for some reason             * 'directory' classpath entries were not added to the AntClassLoader' classpath.              */
0, Line, // ---------------------------------------------------------------------------   FACTORIES 
0, Line, //  jth character of t   ith character of s   cost 
0, Line, //  don't bind if we are half set up, quietly stop 
0, Line, //  return the length of the list 
0, Line, // in Groovy2.0 use valueOf 
0, Line, //  Compute min capacity for expectedMaxSize given a load factor of 3/4 
0, Line, // puts ("key", key); 
0, Line, //  let's register the builder as the delegate 
0, Line, //   --------------------------------------------------------                normal constructor invocation (via new) 
0, Line, // SPG don't use divide since BigInteger implements directly  and we want to dispatch through DefaultGroovyMethods to get a BigDecimal result 
0, Line, //  declares the package scope   declares an external class   used in import statements to create an alias 
0, Line, // spread expressions 
0, Line, //  or a member of a class used in a 'with' 
0, Line, //  for backwards compatibility 
0, Line, //  wrong column information 
0, Line, //  visit rparen()     token type RPAREN only used inside parser, never visited/created 
0, Line, //  codehaus reference implementation usage 
0, Line, //  which are common 
0, Line, //  Special handling for file:// protocol, as getLastModified() often reports   incorrect results (-1) 
0, Line, //  correct argumentArray's length 
0, Block, /*  ******** java.time.temporal.TemporalAmount extension methods ********  */
0, Line, //         key = key.indexOf('.') > -1 ? InvokerHelper.inspect(key) : key; 
0, Line, //  sender only for call sites 
0, Line, //  the following code will basically do this:  Map<String, Object> m = Collections.singletonMap(method.getName(), arg);  return ProxyGenerator.INSTANCE.              instantiateAggregateFromBaseClass(m, parameter);   TO_GENERATED_PROXY is a handle (Object,Object,ProxyGenerator,Class)GroovyObject   where the second object is the input closure, everything else   needs to be provide and is in remaining order: method name,    ProxyGenerator.INSTANCE and parameter 
0, Line, //  note: BigInteger and BigDecimal are also imported by default 
0, Line, //  coerce is not needed 
0, Line, //  type is being compiled so it will implement GroovyObject later 
0, Line, //  matching method, remove abstract status and use the same body 
0, Line, //  path length of 1 indicates that probably is 'default package' i.e. "/" 
0, Line, //  still no methods found, test if delegate or owner are GroovyObjects   and invoke the method on them if so. 
0, Line, //  the type of a variable declaration 
0, Line, //  asking isResolved here allows to check if a primitive   type name like "int" was used to make t. In such a case   we have nothing left to do. 
0, Line, //  Object<T> 
0, Line, // ------------------------------------------------------------------------- 
0, Line, //  slot length. 
0, Line, //  translate the graphics origin upwards so the area of the page we   want to print is in the origin; the clipping region auto set 
0, Line, //  -------------------- Helper classes ------------------------- 
0, Line, //  !! from here on args[0] is always not null !! 
0, Line, //  validate with list of strings 
0, Line, // compare 
0, Line, //         TraceMethodVisitor tmv = new TraceMethodVisitor(mv); 
0, Line, //  def baos = new ByteArrayOutputStream() 
0, Line, //  parse the document 
0, Line, //  if origLong and withoutCustomHandle 
0, Block, /*  ******** java.time.Month extension methods ********  */
0, Line, //  Do not use URL.equals.  It uses the network to resolve names and compares ip addresses!   That is a violation of RFC and just plain evil.   http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html   http://docs.oracle.com/javase/7/docs/api/java/net/URL.html#equals(java.lang.Object)   "Since hosts comparison requires name resolution, this operation is a blocking operation.   Note: The defined behavior for equals is known to be inconsistent with virtual hosting in HTTP." 
0, Line, //  we already visited the sub expression 
0, Line, //  Another Thread may be using an instance of this class   (for the first time) requiring a ClassInfo lock and   classloading which would require a lock on classCache.   The following locks on ClassInfo and to avoid deadlock   should not be done with a classCache lock. 
0, Line, //   Single node on list 
0, Line, //                 throw ScriptBytecodeAdapter.unwrap(gre);              }          }      } 
0, Line, //  bind include method 
0, Line, //  visit cases 
0, Line, //  initialize hints 
0, Line, //  $Id: objinst.java,v 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Collection class code is from my friend Phil Chu, Thanks Phil! 
0, Line, //  state flag 
0, Line, //  write only property 
0, Line, //  don't inherit static methods except our own 
0, Line, //  add the fireVetoableChange method call 
0, Line, //  'pretty printer' output of AST 
0, Line, //  we exclude the finally block from the exception table   here to avoid double visiting of finally statements 
0, Line, //  GROOVY-4237, the original variable should always appear   in the variable index, otherwise some programs get into   trouble. So we define a dummy variable for the packaging   phase and let it end right away before the normal   reference will be used 
0, Line, //  user has specified a type, prefer it over the inferred type 
0, Block, /*              we will actually do                   (x < y) ? -1 : ((x == y) ? 0 : 1)          which is the essence of what the call with Integers would do          this compiles to something along                        <x>              <y>              IF_ICMPGE L1              ICONST_M1              GOTO L2          L1              <x>              <y>              IF_ICMPNE L3              ICONST_0              GOTO L2          L3              ICONST_1          L2                    since the operators are already on the stack and we don't want          to load them again, we will instead duplicate them. This will          require some pop actions in the branches!                        DUP2          (operands: IIII)               IF_ICMPGE L1  (operands: II)              ICONST_M1     (operands: III)              GOTO L2          L1              -----         (operands: II)              IF_ICMPNE L3  (operands: -)              ICONST_0      (operands: I)              GOTO L2          L3              - jump from L1 branch to here (operands: -)              ICONST_1      (operands: I)          L2            - if jump from GOTO L2 we have III, but need only I          - if from L3 branch we get only I                    this means we have to pop of II before loading -1                   */
0, Line, //  end::jsr223_init[] 
0, Line, //  check that there's no star import blacklist 
0, Block, /*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/    contributed by Paul Lofte */
0, Line, //  let's try the thread context class loader first   let's try to use the system class loader 
0, Line, //  unchecked assignment   examples:   List<A> list = []   List<A> list = new LinkedList()   Iterable<A> list = new LinkedList() 
0, Block, /*  We are making a bet that not all chars will be unicode.  */
0, Line, //  first pass, just check for absence of annotations of interest 
0, Line, //  class level templates 
0, Line, //  otherwise, earliest position in line not part of mlr 
0, Line, // noinspection unchecked 
0, Line, //  Make a copy so destructive operations will not affect the caller 
0, Block, /*  ******** java.time.LocalTime extension methods ********  */
0, Line, //  normal path 
0, Line, //  first element == '1' ? 
0, Line, //  there will be a default hash map constructor added later 
0, Line, //  at the end we remove the Object[]   the vargs case simply the last swap so no pop is needed 
0, Line, //  first visit   visit expression 
0, Line, //  get the index of where we can start to look for an exit:   i.e. after the end of the length of the segment, when we find    that text in question already is set properly, we can stop   parsing 
0, Line, //  GROOVY-5985 
0, Line, //  if one superclass is derived (or equals) another 
0, Line, //  The following fields are only used internally; every occurrence of a user-defined expression of the same kind   has its own instance so as to preserve line information. Consequently, to test for such an expression, don't 
0, Block, /*  (non-Javadoc)    * @see java.io.Writer#close()     */
0, Line, //  the class property stops resolving, dynamic property names too 
0, Line, //  local inner classes do not specify the outer class name 
0, Line, //  let's try setting the property on the first object 
0, Line, //  map*.property syntax   only "key" and "value" are allowed 
0, Line, //  ACC_SYNTHETIC isn't used here, use it as a special flag 
0, Line, //  integer 
0, Line, //  start all Threads 
0, Line, //  The stream/writer to which to output 
0, Line, //  Uncomment if at some point this method can be called before parameterTypes initialized   getParameterTypes(); 
0, Line, //  if declaration does not provide generics, there is no connection to make  
0, JavaDoc, /*      * Get info about usual Java public fields incl. constants.     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
0, Line, //  Ultimately, methods can be available in the closure map which are not defined by the superclass 
0, Line, //  
0, Block, /*  add a map item value.  */
0, Line, // success |= isValidAttribute(xform, anno, ""); 
0, Line, // TODO: move to Verifier 
0, Line, //  conservative coding 
0, Line, //  assume @tag signifies end of sentence 
0, Line, //  should always be the case   this should always be the case, but adding a test is safer 
0, Block, /*          * Never forget super.init()!          */
0, Line, //  first extension will be the one set explicitly on <groovyc> 
0, Line, //  we did for example find T=String and now check against   T=Object, which fails the first compatibleConnection check   but since T=Object works for both, the second one will pass   and we need to change the type for T to the more general one 
0, Line, //     public GroovySourcePosition position() {/*todo*/return null;}      public GroovySeeTag[] seeTags() {/*todo*/return null;} 
0, Line, //  currently just for empty literals, not for e.g. Collections.emptyList() at present 
0, Line, //  TODO move logic here into resolve 
0, Block, /*       Find the entry, then         1. Set value field to null, to force get() to retry        2. Rebuild the list without this entry.           All entries following removed node can stay in list, but           all preceding ones need to be cloned.  Traversals rely           on this strategy to ensure that elements will not be          repeated during iteration.     */
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeConstructor(java.lang.Object[])      */
0, Line, // reset() and skip over last linesep 
0, Line, //  when resolving getProp() or setProp() 
0, Line, //  a dynamic variable is either an undeclared variable 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getDTDHandler()     */
0, Line, //  do in privileged block since we may be looking at private stuff 
0, Line, //  we put the old dependencies into local cache so createCompilationUnit   can pick it up. We put that entry under the name "." 
0, Line, //  means we can't get to system clipboard, so create app level one 
0, Line, //  set the script source position 
0, Line, //  workaround for GROOVY-6095 
0, Line, //  The overall AST for this CompilationUnit.   The classes generated during classgen. 
0, Line, //  To make a connection to the SAM class we use that new information   to replace the generics in the SAM type parameter of the target 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#setProperty(java.lang.Object, java.lang.String, java.lang.Object)      */
0, Line, //  dquote-tab-dquote 
0, Line, //  Copy stream to stream 
0, Line, //  default statement can be grouped with previous case 
0, JavaDoc, /*      * Worker method for the {@link #escapeJavaScript(String)} method.     *     * @param str String to escape values in, may be null     * @param escapeSingleQuotes escapes single quotes if <code>true</code>     * @param escapeForwardSlash TODO     * @return the escaped string      */
0, Line, //  Write out number of buckets 
0, Line, //  Used to store the real access modifiers for inner classes 
0, Line, //  naive 
0, Line, //  command line arguments could not be parsed 
0, Block, /*              * Resource not found.              */
0, Line, //  let's create a dynamic proxy 
0, Line, //  potentially add default constructor to class docs (but not interfaces) 
0, Line, // guard checks 
0, Line, //  then let's use the current working directory, since the repo can be relative to that. 
0, Block, /* final */
0, Line, //  test non-integer number 
0, Line, //  println helper methods 
0, Line, //  we need to transform variable expressions that go to a delegate   to a property expression, as ACG would lose the information in   processClassVariable before it reaches any makeCall, that could handle it 
0, Line, //  check next level of interfaces 
0, Line, // throws NumberFormatException 
0, Line, // ---------------------------------------------------------------------------   TEXTS 
0, Line, //  no rename so delete and add 
0, Line, //  all arguments are object, so test only if argument number is correct 
0, Line, //  try to resolve a public static inner class' name 
0, Line, //  set it to -1 for starters so parameterTypes will always get a type 
0, Line, //  v.Bv /(v.v)   eigenvalue of v 
0, Line, //  if constructor call is not in outer class, don't pass 'this' implicitly. Return. 
0, Line, //  No instances, static methods only 
0, Line, //   --------------------------------------------------------                Property handling super: get    -------------------------------------------------------- 
0, Line, //  Optional configuration data 
0, Line, //  TODO account for default params giving multiple signatures 
0, Block, /*     * Methods on Integer to implement 1.week, 4.days etc.     */
0, Line, //  assignment for subscript 
0, Block, /*  ---------------- Concurrent Map Support --------------  */
0, Line, //  if right expression is a ClosureExpression, store parameter type information 
0, Line, //  if namedArgs.containsKey(propertyName) setProperty(propertyName, namedArgs.get(propertyName)); 
0, Line, //  this is used to store the goals for a "break foo" call 
0, Line, //  testForIterator() covered by testForCondition() 
0, Line, //  we should now check if the import is in the star imports 
0, Line, // These are the costs for the various edit operations  they are used by the two DamerauLevenshtein implementations 
0, Line, //  ------------------------------------------------------------------------------------------   Below, you will find various helper methods aimed at simplifying algorithms for subclasses   ------------------------------------------------------------------------------------------ 
0, Line, //  Performance detail:   not using get(fromIndex), get(toIndex) in the following to avoid stepping over elements twice 
0, Line, //  ignore, will try lazy reference 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.GroovyObject#setProperty(java.lang.String, java.lang.Object)          */
0, Line, //  use Iterator.hasNext() to check for available inner classes 
0, Line, //  and understandability of this solution over more complex but efficient alternatives) 
0, Line, //  Interchange a[j] and a[k] 
0, Line, //  Properties   ---------------------------------------------------------------------- 
0, Line, //  Find index k such that a[k] is smallest integer 
0, Line, //  Look at the super classes 
0, Line, //   BITWISE_OR / PIPE   340    BITWISE_AND         341    BIWISE_XOR          342 
0, Line, //  force check of modifier conflicts 
0, Line, //  in theory, there can only be one annotation of that type 
0, Line, //  the break statement is only allowed inside loops or switches   fails after parser 
0, Line, //  TODO GROOVY-5011 handle case of @Override on a property 
0, Line, //  package private 
0, Line, //  on the stack 
0, Line, //  Allow the msg to be a Throwable, and handle it properly if no cause is given 
0, Line, //  if java did atomic blocks, this would be one 
0, Block, /*  package private  */
0, Line, //  then we're in the weird case of a \ at the end of the   string, let's output it anyway. 
0, Line, // ---------------------------------------------                    double  --------------------------------------------- 
0, Line, //  constructor call expression 
0, Line, //  give a chance to type checker extensions to throw errors based on information gathered afterwards 
0, Line, //  Classloader for global and local transforms 
0, Line, //  lets try invoke the method on the real String 
0, Line, //  look into the module node if there is a class with that name 
0, Line, //  let us save that value for the return 
0, Line, //  In order to divide tasks 'equally' for many threads, permut generation   strategy is different than that of original single thread. 
0, Line, //  no MOP methods if not a child of GroovyObject 
0, Line, //     public GroovyTypeVariable[] typeParameters() {/*todo*/return null;} // not supported in groovy      public GroovyParamTag[] typeParamTags() {/*todo*/return null;} // not supported in groovy 
0, Line, //       * final GroovyCastException 
0, Line, //  group 1: tag name, group 2: tag body 
0, Line, //  cannot infer, return list type 
0, Line, //  (it might have been UTF-7, but this encoding is usually internally used only by mail systems) 
0, Line, //  ex: short s = (short) 0 
0, Line, //  start on either side of the removed text 
0, Line, //  case D   penalty for vargs 
0, Line, //  startColumns.get(i) is the first non-empty column of lines.get(i) 
0, Line, //  if a byte has its most significant bit set, the file is in UTF-8 or in the default encoding 
0, Line, //  create a new temporary element in the if-then-else type info 
0, Line, //  we already had a match so we don't make a direct call at all 
0, Line, //  we replace '.' only in the className part   with '$' to find an inner class. The case that   the package is really a class is handled elsewhere 
0, Block, /*  The current length of the map.  */
0, Line, //  helpful error 
0, Line, //  $Id: moments.java,v 1.1 2004-11-23 08:08:44 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  type spec for generics 
0, Line, //  test if one class inherits from the other 
0, Line, //  e.g. x[a] += b   to avoid loading x and a twice we transform the expression to use   ExpressionAsVariableSlot   -> subscript=a, receiver=x, receiver[subscript]+b, =, receiver[subscript]   -> subscript=a, receiver=x, receiver#getAt(subscript)#plus(b), =, receiver#putAt(subscript)   -> subscript=a, receiver=x, receiver#putAt(subscript, receiver#getAt(subscript)#plus(b))   the result of x[a] += b is x[a]+b, thus:   -> subscript=a, receiver=x, receiver#putAt(subscript, ret=receiver#getAt(subscript)#plus(b)), ret 
0, Line, //  joint compilation parameters 
0, Line, //  it's important to use a stable sort here, otherwise   renderValues() will skip the wrong values 
0, Line, //  check varged 
0, Line, //  case C&D, we use baseType to calculate and set it   to the value we need according to case C and D   case C 
0, Line, //  tag::bsf_simple[] 
0, Line, //  now rhs is completely done and we need only to store. In a[1]++ this    would be a.getAt(1).next() for the rhs, "lhs" code is a.putAt(1, rhs) 
0, Line, //  used to store type information on class nodes   in flow analysis, represents the type of the declaration node lhs   used to store inferred return type for methods and closures   used to store closure argument types on a variable expression   used to tell that a property expression refers to a readonly property   used to store the default expression for a parameter   used to store the MethodNode a MethodCallExpression should target   used to store the delegation strategy and delegate type of a closure when declared with @DelegatesTo   if the receiver is implicit but not "this", store the name of the receiver (delegate or owner)   set of private fields that are accessed from closures or inner classes   set of private fields that are set from closures or inner classes   set of private methods that are accessed from closures or inner classes   call recognized by a type checking extension as a dynamic method call   used to store the list of MOP methods that still have to be generated 
0, Line, //  top is not primitive so unbox   leave that BH#doCast later 
0, Line, //  @interface Foo...   1 & 2   1 | 2   1 >>> 2   1 ^ 2   class Foo...   private Foo() {...    3/4   foo.bar   enum Foo...   a >= b   a > b   interface Foo...   myMethod(name:"Jez")   foo:x=1                           true && false   a <= b   foo as Bar 
0, Line, //  Ignore parent delegation and just try to load locally 
0, Line, //  must invalidate all to force concurrent get's to wait and then retry 
0, Line, //  get lock type 
0, Line, //  power asserts 
0, Line, //  bug where the increment was not executed when hitting non-executed if branch 
0, Line, //  ... print result 
0, Line, //  assume gradle syntax   see: http://www.gradle.org/latest/docs/userguide/dependency_management.html#sec:how_to_declare_your_dependencies 
0, Line, //  tag::jsr223_variables[] 
0, Line, //    Prep the generator machinery 
0, Line, //  add Grape.grab(excludeArgs, [group:group, module:module, version:version, classifier:classifier])   or Grape.grab([group:group, module:module, version:version, classifier:classifier]) 
0, Line, //  Step through ClassDocs and tie up loose ends 
0, Block, /* Constructor[] */
0, Block, /*  (non-Javadoc)      * @see groovy.lang.MetaBeanProperty#getGetter()       */
0, Line, //  let's fast calculate the size 
0, Line, //  we have to have handle DelcarationExpressions special, since their    entry should be outside the optimization path, we have to do that of   course only if we are actually going to do two different paths,    otherwise it is not needed     there are several cases to be considered now.   (1) no fast path possible, so just do super   (2) fast path possible, and at path split point (meaning not in        fast path and not in slow path). Here we have to extract the        Declaration and replace by an assignment   (3) fast path possible and in slow or fastPath. Nothing to do here.     the only case we need to handle is then (2). 
0, Line, //  node and any subclass resolving will then take place elsewhere 
0, Line, //  calculate whole list in this case   recommend avoiding -ve's as this is not as efficient 
0, Line, //  found a leaf 
0, Line, //  default 
0, Block, /*    * This class performs a best-effort bounding of a ConcurrentHashMap using a   * page-replacement algorithm to determine which entries to evict when the   * capacity is exceeded.   *   * The page replacement algorithm's data structures are kept eventually   * consistent with the map. An update to the map and recording of reads may   * not be immediately reflected on the algorithm's data structures. These   * structures are guarded by a lock and operations are applied in batches to   * avoid lock contention. The penalty of applying the batches is spread across   * threads so that the amortized cost is slightly higher than performing just   * the ConcurrentHashMap operation.   *   * A memento of the reads and writes that were performed on the map are   * recorded in buffers. These buffers are drained at the first opportunity   * after a write or when the read buffer exceeds a threshold size. The reads   * are recorded in a lossy buffer, allowing the reordering operations to be   * discarded if the draining process cannot keep up. Due to the concurrent   * nature of the read and write operations a strict policy ordering is not   * possible, but is observably strict when single threaded.   *   * Due to a lack of a strict ordering guarantee, a task can be executed   * out-of-order, such as a removal followed by its addition. The state of the   * entry is encoded within the value's weight.   *   * Alive: The entry is in both the hash-table and the page replacement policy.   * This is represented by a positive weight.   *   * Retired: The entry is not in the hash-table and is pending removal from the   * page replacement policy. This is represented by a negative weight.   *   * Dead: The entry is not in the hash-table and is not in the page replacement   * policy. This is represented by a weight of zero.   *   * The Least Recently Used page replacement algorithm was chosen due to its   * simplicity, high hit rate, and ability to be implemented with O(1) time   * complexity.    */
0, Line, //  -> 
0, Line, //  cache   once per documentation set   cache   once per package   cache   once per class 
0, Line, //  ---------------------------------------------------- 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#startDocument()     */
0, Line, //  throw null pointer exception if key null 
0, Line, // empty the reference queue 
0, Line, // ---------------------------------------------------------------------------   PROCESSING 
0, Line, //  middle element is condition, lower half is init, higher half is increment 
0, Line, //  expected 
0, Line, //   --------------------------------------------------------                         methods for super 
0, Line, //  must be called for break/continue/return 
0, Line, //  strip off trailing attributes 
0, Line, //    TYPE CLASSES 
0, Line, //  let's assume its a collection of 1 
0, Line, //  look for one of these:     import static MyClass.* 
0, Line, //  true when inside a task so special ant.target handling occurs just at top level 
0, Line, //  add the firePropertyChange method call 
0, Line, //  if the property expression is an attribute expression (o.@attr), then 
0, Line, //  the following code will basically do this:   return Proxy.newProxyInstance(          arg.getClass().getClassLoader(),          new Class[]{parameter},          new ConvertedClosure((Closure) arg));   TO_REFLECTIVE_PROXY will do that for us, though   input is the closure, the method name, the class loader and the  
0, Line, //  visitLetter ...     token type LETTER only used by lexer, never visited/created 
0, Line, // creates the collection to look for values. 
0, Line, // we have to keep 3 rows instead of the 2 used in Levenshtein 
0, Line, //  exclusive   multi-line strings are always placed on new lines 
0, Line, //  wrap arguments from call site in Object[] 
0, Line, //     exprNode = node.getNextSibling();  } 
0, Line, //  load array index: sub=a [load x, DUP, load sub, call arrayGet, load b, call operation, load sub, call arraySet] 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setProperty(java.lang.String, java.lang.Object)      */
0, Line, //  use Class.forName instead of new Dummy() to allow separate compilation 
0, Line, //  assume we got a true reference to the object 
0, Line, //  should never reach here! 
0, Line, //  {   }   [   ]   (   ) 
0, Line, //  observable interface 
0, Line, //  annotations 
0, Line, //  check first parameters 
0, Line, //  20 steps of the power method 
0, Line, //  is different in its specified form. That means we have to create a bridge method! 
0, Line, //  when resolving prop reference 
0, Line, //  implementation of methods 
0, Line, //  store copy in temporary variable 
0, Line, //  append to right side of Li2 (reversing list) 
0, Line, //  Direct instantiation of classes without imports will therefore also fail if this option is enabled 
0, Line, //  pass 
0, Line, //  true == replace 
0, Line, //  we do not do our name mangling to find an inner class   if the type is a ConstructedClassWithPackage, because in this case we   are resolving the name at a different place already 
0, Line, //  this shouldn't happen, since we are Cloneable 
0, Line, //  little bit of hackery to avoid Groovy dependency in this file 
0, Line, //  this   constructor arg n is the closure map 
0, Line, //  constructor calls with this() and super() 
0, Line, //  generic meta method invocation path 
0, Line, //  check for a category method named like a getter 
0, Line, //  if right is array, map or collection we try invoking the 
0, Line, //  search for the file and if it exists don't try to use URIs ... 
0, Line, //  varg call 
0, Line, // reload saved value 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String)     */
0, Line, //  ignore, the no arg constructor might not exist. 
0, Line, // do nothing 
0, Line, //  return statement added after visitConstructorOrMethod finished... we can not count these auto-generated return statements(GROOVY-7753), see `typeCheckingContext.pushEnclosingReturnStatement` 
0, Line, //   --------------------------------------------------------                normal Property handling : get    -------------------------------------------------------- 
0, Line, //  Implementation methods  ------------------------------------------------------------------------- 
0, Line, //  not in java 
0, Line, //  Have to call fireTestStared/fireTestFinished via reflection as they unfortunately have protected access in Project 
0, Line, //  If they want to use a name other than than "run", then make the change. 
0, Line, // the below is a quirk, we do this so that every non-string-section is prefixed by  the same number of characters (the others have "out<<\"\"\"${"), this allows us to  figure out the exception row and column later on 
0, Block, /* DIV */
0, Line, //  search for nested class 
0, Line, //  package level templates 
0, Line, //  set the offset to start where we left off 
0, Line, //  LCONST_0, LCONST_1 
0, Line, //  disabled until checked with fraz  new CompilationUnit(configuration, null, createGroovyClassLoaderWithExpectations(configuration)); 
0, Line, //  FloatingPointMath wins according to promotion Matrix 
0, Line, // if they share case check for substitution 
0, Line, //  convert byte into unsigned hex string 
0, Line, //  compare a list longer than the range 
0, Line, // ---------------------------------------------------------------------------   TOKEN INITIALIZATION AND SUCH 
0, Line, //  inference 
0, Line, //  if it is an anonymous inner class, don't generate the stub code for it. 
0, Block, /*  ---------------- Serialization Support --------------  */
0, Line, //  2 is for inner class case 
0, Line, //  check nested type parameters 
0, Line, //  GroovyClassVisitor interface 
0, Line, //  this program modified from:     http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html   Timing Trials, or, the Trials of Timing: Experiments with Scripting   and User-Interface Languages</a> by Brian W. Kernighan and   Christopher J. Van Wyk. 
0, Line, //  Set in safe defaults 
0, Line, //  starting with number will never reach a non-number, same for string 
0, Line, //  rotate all value arrays upwards(older rows get a higher index) 
0, Line, //  wrapper creation methods 
0, Line, //  $Id: sieve.java,v 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  UncheckedThrow allows throwing checked exceptions without declaring a throws 
0, Line, //  patch needed here too, but we need a test case to trip it first 
0, Line, //  Do not use HashMap 
0, Line, //  stash declared variable in case we do subsequent visits after we   change to assignment only 
0, Line, //  load this   load closure map   load method name 
0, Line, //  this is a closure.call() call 
0, Line, //  also don't bother with guard if we have "simple" method args 
0, Line, //  Convert long to int for IFEQ comparison using LCMP 
0, Line, //  if original long meta class 
0, Line, //  Don't create statement in subclass constructors to avoid throw in constructors 
0, Line, //  unary plus, unary minus, bitwise negation 
0, Line, // prevent NPE if in .war 
0, Line, //  store inferred type on CCE 
0, Line, //  obtain the snippet from the buffer within specified bounds 
0, Line, //       x     y     z 
0, Line, //  load return value && correct operand stack stack 
0, Line, //  default for inner classes 
0, Line, //  for binary compatibility only 
0, Line, //         }          return (Float) primitiveArrayPut(array, idx, newValue);      }        public static Double putAt(double[] array, int idx, Object newValue) { 
0, Line, //  Postfix expressions 
0, Line, //  add method:   VetoableChangeListener[] getVetoableChangeListeners(String name) {     return this$vetoableChangeSupport.getVetoableChangeListeners(name) 
0, Line, //  it is super(..) since this(..) is already covered 
0, Line, //  check the exception for a nested compilation exception 
0, Line, //  --   --   --   - (negation) 
0, Line, //   --------------------------------------------------------                normal GroovyObject Property handling : get    -------------------------------------------------------- 
0, Line, //  GROOVY-6123 
0, Line, //  pop for "makeBlockRecorder(catches)" 
0, Line, //  test if vanilla name is current class name 
0, Block, /*  oldM  */
0, Line, //  null signals the value shouldn't be rendered 
0, Line, //  we don't need the closure any longer, so remove it 
0, Line, //  The apostrophe is only escaped if the value is for an   attribute, as opposed to element content, and if the   builder is configured to surround attribute values with   single quotes. 
0, Line, //  In order to keep binary compatibility 
0, Line, //  loop through methods in class 
0, Line, //  given ScriptContext. If available, call it. 
0, Line, //  add method:   PropertyChangeListener[] getPropertyChangeListeners(String name) {     return this$propertyChangeSupport.getPropertyChangeListeners(name) 
0, Line, //  class through the receiver 
0, Block, /*  (non-Javadoc)      * @see groovy.lang.MetaBeanProperty#getSetter()       */
0, Block, /* ignore */
0, Line, //  not a script, try running through run method but properties will not be available 
0, Line, //  Otherwise try the older method based on the constructor's call expression 
0, Line, //  JDK 9 and above correctly report 4   assertEquals(3, ctor.getParameterAnnotations().length); //[],[@Anno1,@Anno2],[@Anno2] 
0, Line, //  workaround for generated code in enums which use .next() returning a Number 
0, Line, //  ----------------------------------------------------   deprecate in parser?: 'continue' allowed in closures 
0, Line, //  if it is not static and we do no static access 
0, Block, /*  double quote  */
0, Line, //  try finding a delegate that has that method... we start from   outside building a stack and try each delegate 
0, Line, //  Reuse trailing consecutive sequence of all same bit 
0, Line, //  $Id: sumcol.java,v 1.5 2007-06-20 03:32:39 bfulgham Exp $   http://www.bagley.org/~doug/shootout/  
0, Line, //  method name to DSL name 
0, Line, //  assume "is" or "[gs]et" 
0, Line, //  LITERAL, "(", "{"   things the expression parser should cross lines for in it doesn't have to 
0, Block, /*              * Class files generated for inner classes have an INNERCLASS             * reference to self. The top level class access modifiers for             * an inner class will not accurately reflect their access. For             * example, top-level access modifiers for private inner classes             * are package-private, protected inner classes are public, and             * the static modifier is not included. So the INNERCLASS self             * reference is used to capture the correct modifiers.             *             * Must compare against the fully qualified name because there may             * be other INNERCLASS references to same named nested classes from             * other classes.             *             * Example:             *             *   public final class org/foo/Groovy8632$Builder extends org/foo/Groovy8632Abstract$Builder  {             *     public final static INNERCLASS org/foo/Groovy8632$Builder org/foo/Groovy8632 Builder             *     public static abstract INNERCLASS org/foo/Groovy8632Abstract$Builder org/foo/Groovy8632Abstract Builder              */
0, Line, //  push expression string onto stack 
0, Line, //  for expressions like foo = { ... }   we know that the RHS type is a closure   but we must check if the binary expression is an assignment   because we need to check if a setter uses @DelegatesTo 
0, Block, /*                  * If it is a statement for an explicitly declared static field inside an enum, store its                 * reference. For enums, they need to be handled differently as such init statements should                 * come after the enum values have been initialized inside <clinit> block. GROOVY-3161.                  */
0, Line, //  These fields provide support for notifying a listener. 
0, Line, //  we do not add one for super classes, only for interfaces 
0, Line, // new ErrorReporter( e, false ).write( new PrintWriter(writer) ); 
0, Line, //  are we using groups?   yes, so return the specified group as list 
0, Line, //  probably facing a type mismatch 
0, Line, //  compensate for closure's time 
0, Line, //  check direct interfaces (GROOVY-7149) 
0, Line, //  visitLiteralDef ...     token type "def" only used by parser, never visited/created directly 
0, Line, //    Check to see if the requested script/template source file has been the   target of a RequestDispatcher.include(). 
0, Line, //  this method mimics EMC behavior 
0, Line, //  cast argument to parameter class, inclusive unboxing 
0, Line, //  wrong line information 
0, Line, //  valid method branch 
0, Line, //  internal field 
0, Line, //  we need to know the class we want to start 
0, Line, //  thus for each argument, we try to find the connected generics first 
0, Line, // set type as indicator for Java2GroovyConvertor to turn into LIST_CONSTRUCTOR 
0, Line, //  we have two interfaces, but none inherits from the other 
0, Line, //  This will pick up incorrect sibling node if 'node' is a plain 'return'   
0, Line, //  assume properties contain paths 
0, Block, /*          * GROOVY-4524: The following is not needed anymore as an ant Project already by default has inputhandler         * set to DefaultInputHandler. And if it is again set here, it mistakenly overrides the custom input handler         * if set using -inputhandler switch.           */
0, Line, //  keeping 3 bits for additional information such as vargs 
0, Line, //  most outer class is now element 0 
0, Line, //    Recurse to display the children. 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.GroovyObject#setProperty(java.lang.String, java.lang.Object)     */
0, Line, //  swallow for strict security managers, module systems, android or others,   but try one-by-one to get the allowed ones at least 
0, Line, //  obsolete? 
0, Line, //   --------------------------------------------------------                normal field handling : set    -------------------------------------------------------- 
0, Line, //    KEYWORDS: CONTROL STRUCTURES 
0, Line, //  todo - allow locale to be passed in 
0, Line, //  do nothing, but clear the value recorder 
0, Line, //  a similar method exists, we need a super bridge   trait$super$foo(Class currentTrait, ...) 
0, Line, //     public GroovyThrowsTag[] throwsTags() {/*todo*/return null;}      public GroovyTypeVariable[] typeParameters() {/*todo*/return null;}      public GroovyParamTag[] typeParamTags() {/*todo*/return null;} 
0, Line, //  Output the attribute name, 
0, Line, //  given that we might have a grandParent... 
0, Line, //  warning - do...while... ignored 
0, Line, //         return values()[ordinal]       } 
0, Line, //  it could just be a class, so let's wrap it in a Script   wrapper; though the bindings will be ignored 
0, Line, //  method name 
0, Line, //  a==null 
0, Line, //  throws FileNotFoundException, IllegalArgumentException { 
0, Line, //  there must be three continuation bytes of the form 10xxxxxx,   otherwise the following character is is not a valid UTF-8 construct 
0, Line, //  primitive types should be ignored as they will result in another failure 
0, Line, //  skip private super methods 
0, Line, //  type of quotes are currently configured. 
0, Line, //  !   ||   && 
0, Line, //  rebind if we were bound 
0, Line, //  if the number of parameters does not match we have    a vargs usage     case A: arguments.length<parameters.length             In this case arguments.length is always equal to           noVargsLength because only the last parameter           might be a optional vargs parameter             VArgs penalty: 1l     case B: arguments.length>parameters.length             In this case all arguments with a index bigger than           paramMinus1 are part of the vargs, so a            distance calculation needs to be done against            parameters[noVargsLength].getComponentType()             VArgs penalty: 2l+arguments.length-parameters.length     case C: arguments.length==parameters.length &&            isAssignableFrom( parameters[noVargsLength],                             arguments[noVargsLength] )             In this case we have no vargs, so calculate directly             VArgs penalty: 0l     case D: arguments.length==parameters.length &&            !isAssignableFrom( parameters[noVargsLength],                              arguments[noVargsLength] )             In this case we have a vargs case again, we need            to calculate arguments[noVargsLength] against           parameters[noVargsLength].getComponentType             VArgs penalty: 2l             This gives: VArgs_penalty(C)<VArgs_penalty(A)                       VArgs_penalty(A)<VArgs_penalty(D)                       VArgs_penalty(D)<VArgs_penalty(B) 
0, Line, //  If the first param is def or a Map, named args might not work as expected so we add a hard-coded map constructor in this case   we don't do it for LinkedHashMap for now (would lead to duplicate signature)   or if there is only one Map property (for backwards compatibility) 
0, Line, //     public final Object callGetProperty (Object receiver) throws Throwable {          return acceptGetProperty(receiver).getProperty(receiver);      } 
0, Line, //  this boolean is used through setHandled(boolean) 
0, Line, //  Keep a hardref so we can test get later 
0, Line, //  not in java   not in java 
0, Line, //  Output the attribute value within quotes. Use whichever 
0, Line, //  Expressions  ------------------------------------------------------------------------- 
0, Line, //  Method in base script that will contain the script body code. 
0, Line, //  only overwrite if we find something more specific 
0, Line, //  check for recursive generic typedef, like in   <T extends Comparable<? super T>> 
0, Line, //  if a this appears as parameter here, then it should be   not static, unless we are in a static method. But since    ACG#visitVariableExpression does the opposite for this case, we   push here an explicit this. This should not have any negative effect   sine visiting a method call or property with implicit this will push   a new value for this again. 
0, Line, //  load rhs 
0, Line, // DO NOTHING 
0, Line, //  ------------------ short ------------------ 
0, Line, //  some constants for modifiers 
0, Block, /*  The current index into the file name array  */
0, Line, //  check bounds: unbounded wildcard (aka "?") is universal substitute 
0, Line, //  additional constructor not used directly but exercises inspection code 
0, Line, // noinspection ThrowableInstanceNeverThrown 
0, Line, //  to be run in PrivilegedAction! 
0, Line, //  Apply all pending writes 
0, Line, //  Jsr parser 
0, Block, /*  redirect().isPrimaryNode &&  */
0, Line, //  only used for star imports 
0, Line, //  By default forward all events to all the listeners. 
0, Block, /* Float[14] */
0, Line, //  def (key, value) == array.toList() 
0, Line, //  we are the top of the tree 
0, Line, //  determine direct result 
0, Line, //  do you want full stack traces in script exceptions? 
0, Line, //  ignore, was probably a dynamic property 
0, Line, //  rhs is normal value, set the value in the Reference 
0, Line, //     public static Boolean putAt(boolean[] array, int idx, Boolean newValue) {          return (Boolean) primitiveArrayPut(array, idx, newValue);      }        public static Byte putAt(byte[] array, int idx, Object newValue) { 
0, Line, //  let's try invoke the constructor with the list as arguments   such as for creating a Dimension, Point, Color etc. 
0, Line, //  Do not allow this class to be instantiated 
0, Line, //  let's treat the script as a Test 
0, Line, //  already added 
0, Line, //  a==b 
0, Block, /*  (non-Javadoc)      * @see groovy.lang.GroovyObject#setMetaClass(groovy.lang.MetaClass)       */
0, Line, //  ------------------------------   feature: Annotation Definition   ------------------------------ 
0, Line, // none of the interfaces here match, so continue with super class 
0, Line, //  2 way relationship for visible classes:   add reference to classes inside this package   add reference to this package inside classes 
0, Line, //  don't use the ClassHelper here! 
0, Line, //    OPERATORS AND OTHER MARKERS 
0, Line, //  INSTANCE VARIABLES 
0, Line, //  let's recreate the parser each time as it tends to keep around state 
0, Line, //  --------------------------------------------   end of delegate to the type checking context   -------------------------------------------- 
0, Line, //  closures are always dynamic   propertyExpressions will handle the error a bit differently 
0, Line, //  set a DEFAULT precision if otherwise non-terminating 
0, Line, //  just like modifiers but for package/enum declarations 
0, Line, //  A callback for use during classgen()   A callback for use during compile() 
0, Line, //   Implement overtype mode by selecting the character at the current    caret position 
0, Line, //  the left operand is determining the result of the operation 
0, Line, //  ignore for factories that don't support this 
0, Line, //  check for all pieces, if we don't have the triad quit silently 
0, Line, //  do a little bit of pre-work since Groovy compiler hasn't added property accessors yet 
0, Line, //  the text of the token   the source line on which the token begins   the source column on which the token begins 
0, Line, //  null is always false 
0, Line, //  not null if if the ClassNode is an array 
0, Line, //  check for reference to method, closure, for loop, try with, or catch block parameter from a non-nested closure 
0, Line, //  { def tmp = new Foo(); tmp.x = 1; tmp.y = 2; return tmp }() 
0, Line, //  now repeat the same for each parameter given in the ClosureExpression 
0, Line, //  load b and convert to boolean 
0, Line, //  if after normalizing both are numbers, assume intended range was numbers 
0, Line, //  Skip Synthetic methods inserted by JDK 1.5 compilers and later 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.Closure#asWritable()          */
0, Line, //  add non-abstract methods; abstract methods covered from trait interface 
0, Line, // ---------------------------------------------------------------------------   REPORTING ROUTINES 
0, Line, //  All objects should have been collected 
0, Line, //  will need the extra for isNaN call if required 
0, Line, //  method body should be: 
0, Line, //  "."-"<<"   cast, ternary, and closure expression   new, this, super, instanceof, true, false, null   LITERAL   "[" 
0, Line, //  if the class not is an inner class node, there are chances that the call to super is already added   so we must ensure not to add it twice (see GROOVY-4471) 
0, Block, /* jes this may be rewritten to use the new getProperties() stuff         * but the original pulls out private variables, whereas getProperties()         * does not. What's the real use of dump() here?          */
0, Line, //  need to call here here because we used the static target type   it won't be done otherwise because handle.type() == callSite.type() 
0, Line, // -----------------------------------------------------------------------   SPECIAL CASES 
0, Line, //  ctors are not considered static ! 
0, Line, //  retry as an intermediate update may have replaced the value with   an equal instance that has a different reference identity 
0, Line, //  GROOVY-8233 skip static properties for traits since they don't make the interface 
0, Block, /*          * we have a name foo.bar and an import foo.foo. This means foo.bar is possibly         * foo.foo.bar rather than foo.bar. This means to cut at the dot in foo.bar and         * foo for import          */
0, Line, //  import checks that stack is not empty  
0, JavaDoc, /*      * Guess the encoding of the provided buffer.     * If Byte Order Markers are encountered at the beginning of the buffer, we immediately     * return the charset implied by this BOM. Otherwise, the file would not be a human     * readable text file.     * <p>     * If there is no BOM, this method tries to discern whether the file is UTF-8 or not.     * If it is not UTF-8, we assume the encoding is the default system encoding     * (of course, it might be any 8-bit charset, but usually, an 8-bit charset is the default one).     * <p>     * It is possible to discern UTF-8 thanks to the pattern of characters with a multi-byte sequence.     * <pre>     * UCS-4 range (hex.)        UTF-8 octet sequence (binary)     * 0000 0000-0000 007F       0xxxxxxx     * 0000 0080-0000 07FF       110xxxxx 10xxxxxx     * 0000 0800-0000 FFFF       1110xxxx 10xxxxxx 10xxxxxx     * 0001 0000-001F FFFF       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 0020 0000-03FF FFFF       111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 0400 0000-7FFF FFFF       1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * </pre>     * With UTF-8, 0xFE and 0xFF never appear.     *     * @return the Charset recognized.      */
0, Line, //  stack size = 2   array index, stack size = 3   primitive types must be boxed 
0, Line, //  Arrays.copyOfRange only since JDK 1.6 
0, Line, //  return value of assignment 
0, Line, //  ------------------ boolean[] ------------------ 
0, Block, /*          * Synchronization is avoided here for performance reasons since         * this method is called frequently from callsite locations. For         * a typical case when no Categories are in use the initialized         * value of 0 will be correctly read. For cases where multiple         * Threads are using Categories it is possible that a stale         * non-zero value may be read but in that case the ThreadLocal         * check will produce the correct result. When the current Thread         * is using Categories, it would have incremented the counter         * so whatever version of the value it observes here should be         * non-zero and good enough for the purposes of this quick exit         * check.          */
0, Line, //  not required for stub generation 
0, Line, //  visitBlock() ...     token type BLOCK never created/visited, see CLOSABLE_BLOCK etc... 
0, Line, //  The bounds on the declared type are at least as good as the ones on an unbounded wildcard, since it has   none! 
0, Line, // ----------------------------------------------------------------------   special cases  ---------------------------------------------------------------------- 
0, Line, //  we have two methods, so no SAM 
0, Line, //  Was neither already loaded nor compiling, so compile and add to cache. 
0, Line, //  we look at the closure later in detail, so skip it here 
0, Line, //  special path for boxed boolean 
0, Line, // accept(cv); 
0, Line, //  downgrade to readlock before releasing just in case 
0, Line, //  check uri and for legacy cases just check prefix name (not recommended) 
0, Line, //  track the end of the matching string  
0, Line, //  fallback to the source unit classloader 
0, Block, /*  (non-Javadoc)        * @see java.io.Writer#flush()         */
0, Line, //  to the corresponding parameters of the SAM type method 
0, Line, //  to match property name 
0, Line, //  The set of child nodes   Used for completion marking by some parts of the parser 
0, Block, /*      * Implementation note:     *   This has to be an inner class!     *     * Reason:     *   Closure.this.call will call the outer call method, but     * with the inner class as executing object. This means any     * invokeMethod or getProperty call will be called on this     * inner class instead of the outer!      */
0, Line, //  delete contained files 
0, Line, //  look in the namespaces whose declaration has already been emitted 
0, Line, //  start catch block, label needed for exception table 
0, Line, //  call flags and the constructor number 
0, Line, //  ... find shapes that fit 
0, Line, //  GROOVY-6183 
0, Line, //  validate with one string 
0, Line, //  value = this.prop <=> other.prop; 
0, Line, // ----------------------------------------------------------------------   handling of static 
0, Line, // if it's not setter, get the type info of the return type of the get* method 
0, Block, /*  All \r\n sequences are treated as a single \n. By doing this we         * produce the same output as the GStringTemplateEngine. Otherwise, some         * of our output is on a newline when it should not be.         *         * Instead of using a pushback reader, we just keep a private instance         * variable 'lastRead'.          */
0, Line, //  change the arguments for an uncurried call 
0, Line, //  ignore veto exceptions, just let the binding fail like a validation does 
0, Line, //  Fallback for non-standard base "script" classes with no context (Binding) constructor. 
0, Line, //  we add a package if there is none yet and the module has one. But we   do not add that if the type is a ConstructedClassWithPackage. The code in ConstructedClassWithPackage   hasPackageName() will return true if ConstructedClassWithPackage#className has no dots.   but since the prefix may have them and the code there does ignore that 
0, Line, //  It might annotate an annotation, e.g. jqwik @Property 
0, Line, //  handle constant meta class and category changes 
0, Line, //  to match JSR-295 
0, Line, //  if original boolean meta class 
0, Line, //  normal type transformation  
0, Line, //  for MetaClassImpl we try to pick meta method, 
0, Line, //  store type information 
0, Line, //  make the first fetch lazy too 
0, Line, //  add the super call 
0, Line, //  Swallow exception - does not exist locally 
0, Line, //  look at the interfaces, there's a chance that a method is not implemented and we should not hide the   error from the compiler 
0, Line, //    call the closure corresponding to the tag 
0, Line, //  if not null this instance is handled as proxy 
0, Line, //  let's add a getter & setter 
0, Line, // ---------------------------------------------------------------------------   CONSTRUCTION AND SUCH 
0, Line, //  possible loss of precision 
0, Line, //  execute dependencies (if any) 
0, Block, /*  (non-Javadoc)    * @see java.io.Writer#write(char[], int, int)     */
0, Line, //  instead of using the SubList backed by the parent list, a new ArrayList instance is used 
0, Line, //  visitBigSuffix() ...     token type BIG_SUFFIX never created/visited, NUM_BIG_INT, NUM_BIG_DECIMAL instead...     
0, Line, //  now handle primitive types 
0, Line, //  We don't try to analyse which statement within the try block might have thrown an exception.   We make a crude assumption that anywhere from none to all of the statements might have been executed.   Run visitor for both scenarios so the eager checks will be performed for either of these cases. 
0, Line, //       h i     j     k     l     m     n     o 
0, Line, //  if recompilation fails, we want cls==null 
0, Line, //  log4j api is inconsistent, so trace requires special handling 
0, Block, /*  (non-Javadoc)         * @see java.lang.Object#hashCode()          */
0, Block, /* Object[19] */
0, Line, //  we make a dummy return for label ranges that reach here 
0, Line, //  all of the below 1900 series 
0, Line, // trying to determine the base class of the collections  special case for Numbers 
0, Block, /*      * Parse the Groovy code contained in the GroovyCodeSource as a privileged operation (i.e. do not     * require the code source to have specific compile time permissions) and return the resulting class.      */
0, Line, //  set parent afterwards 
0, Block, /*                  * fix for GROOVY-2284                 * seems like AntClassLoader doesn't check if the file                 * may not exist in the classpath yet                  */
0, Line, //  integer   decimal 
0, Line, //  add a document listener, to hint whether the line number gutter has to be repainted   when the number of lines changes 
0, Line, // find the type of the field; if it's a setter, need to get the type of the params 
0, Line, //  Ignore 
0, Line, //  also allows abstract or static self methods to be selected for overriding but they are ignored later 
0, Line, //  compare lists that are the same size but contain different elements 
0, Line, //  symbol/keyword type -> text   text -> symbol/keyword type   valid keywords 
0, Block, /*          * If verbose, log the parameter values.          */
0, Line, //  Imported classes 
0, Line, //  only guard this particular class 
0, JavaDoc, /*      * Get info about Properties (Java and Groovy alike).     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
0, Line, //  now do the business 
0, Line, //  no class found, there should have been an exception before now 
0, Line, //  check if values have been passed for all annotation attributes that don't have defaults 
0, Line, //  in this case we need two "this" in between and the Object[]   at the bottom of the stack as well as on top for our invokeSpecial   So we do DUP_X1, DUP2_X1, POP       Object[],this -DUP_X1-> this,Object[],this       this,Object[],this -DUP2_X1-> Object[],this,this,Object[],this       Object[],this,this,Object[],this -POP->  Object[],this,this,Object[] 
0, Line, //  for typical user math when a non-terminating result would otherwise occur. 
0, Line, //  =, +=, etc.   ==, ===, >, <, etc.   +, -, / *, %, plus the LOGICAL_OPERATORS   ||, &&, !   .., ...   =~, etc.   ., ->   |, &, <<, >>, >>>, ^, ~ 
0, Line, //  index of the last variable on stack 
0, Line, //  this test depends deeply on the String.next implementation   009.next is 00:, not 010 
0, Line, //         dup_x1:     ---           dup_x2:     aab  -> baab          dup2_x1:    abb  -> bbabb          dup2_x2:    aabb -> bbaabb          b = top element, a = element under b          top element at right   aa   aabb   aabb -> bbaa   bbaabb   bbaa 
0, Line, //  we only need one of these that can be reused over and over. 
0, Line, //  we cannot a target for the constructor call, since we cannot easily   check the meta class of the other class   setMethodTarget(call, "<init>", call.getArguments(), false); 
0, Line, //  expect a colon between the key and value pair 
0, Line, //  Instantiate all beans. 
0, Line, // ---------------------------------------------------------------------------   LEXING SUPPORT 
0, Line, //  if we added a package 
0, Line, //  add method dispatcher 
0, Line, //  goto finally start 
0, Line, //  here we box and unbox to get the goal type 
0, Line, //  this.x = ... shouldn't use a setter if in the same class 
0, Line, //  -------------------------------------   delegate to the type checking context   ------------------------------------- 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClassImpl#initialize()      */
0, Line, //  avoid using a narrowed type if the method is defined on object because it can interfere   with delegate type inference in static compilation mode and trigger a ClassCastException 
0, Block, /*          * Hook for extra processing, e.g. GSP tag element!          */
0, Line, //  Controls behavior of classgen() and other routines.   Set true after the first configure() operation 
0, Line, //  helper method for getAt and putAt 
0, Line, //  otherwise make up a new tag and check it has not been used before 
0, Line, //  Wrong list or interference 
0, Line, //  workaround for map-style checks putting setter info on wrong AST nodes 
0, Line, //  Discard all pending reads 
0, Line, //  check that first item is now SIZE 
0, Line, //  xxx br defmacro 
0, Line, //  if original float meta class 
0, Line, //  handle unicode 
0, Line, //  Lazily initialize the single instance of the HandleMetaClass metaClass 
0, Line, //  first visit of node 
0, Block, /*          * Handle normal element like <html> ... </html>.          */
0, Line, //  in a temporary variable 
0, Line, //  arguments to the script 
0, Block, /*  * The Computer Language Benchmarks Game * http://shootout.alioth.debian.org/ * * Contributed by Oleg Mazurov, June 2010 *  */
0, Block, /*      * this method is called for local variables shared between scopes.     * These variables must not have init values because these would     * then in later steps be used to create multiple versions of the     * same method, in this case the constructor. A closure should not     * have more than one constructor!      */
0, JavaDoc, /*      * Get all properties including JavaBean pseudo properties matching JavaBean getter or setter conventions.     *     * @param type the ClassNode     * @param includeSuperProperties whether to include super properties     * @param includeStatic whether to include static properties     * @param includePseudoGetters whether to include JavaBean pseudo (getXXX/isYYY) properties with no corresponding field     * @param includePseudoSetters whether to include JavaBean pseudo (setXXX) properties with no corresponding field     * @param superFirst are properties gathered first from parent classes     * @return the list of found property nodes      */
0, Line, // partial match 
0, Line, //  The CSTNode that indicates the location to which the message applies 
0, Line, //  tag::bsf_variable_passing[] 
0, Line, //  defaults 
0, Block, /*     * Methods on Integer to implement 1.month, 4.years etc.     */
0, Line, //  we cannot infer anything, thus we simply return the provided samUsage 
0, Line, //  not a change, don't fire it 
0, Line, //  no-op 
0, Line, //  RFC2396   scheme        = alpha *( alpha | digit | "+" | "-" | "." ) 
0, Line, //  in primopts we convert to the left type for supported binary operations 
0, Line, //  let's check if it already uses a mixin 
0, Line, // public static final Expression EMPTY_ARRAY = new PropertyExpression(new ClassExpression(ArgumentListExpression.class.getName()), "EMPTY_ARRAY"); 
0, Line, //  must be call to this(...) 
0, Line, //  remove problem meta characters returns 
0, Line, //  create a valid (empty) test suite on disk 
0, Line, //  add to super call 
0, Line, //  clazz!=null when resolved 
0, Line, //  -   :   ;   ? 
0, Line, //  Introspection failure...   May happen in Android 
0, Line, //  You defined a method without body. Try adding a body, or declare it abstract   fails after parser 
0, Line, //  check if the placeholder corresponds to the placeholder of the first parameter 
0, Block, /*  2: long    */
0, Line, //  Object is superclass of arrays but no generics involved 
0, Line, //  Check this class loader 
0, Line, //  will replace these with nullish values 
0, Line, //  it's really just a field 
0, Line, //  finish and cleanup 
0, Line, //  If we didn't find anything, report on all the exceptions that occurred. 
0, Line, //  could be a closure field 
0, Line, // For testing only 
0, Line, //  extract implemented interfaces before "going up" 
0, Line, // Prepare for each security test.  First, check to see if groovy.lib can be determined via  a call to checkSecurity().  If not, fail() the first test.  Establish a security manager  and make the GroovyClassLoader the initiating class loader (ala GroovyShell) to compile AND  invoke the test scripts.  This handles cases where multiple .groovy scripts are involved in a  test case: a.groovy depends on b.groovy; a.groovy is parsed (and in the process the gcl  loads b.groovy via findClass).  Note that b.groovy is only available in the groovy class loader.  See 
0, Line, //    Template not cached or the source file changed - compile new template!   
0, Line, //  in case a "flow type" is found, it is preferred to use it instead of   the declaration type 
0, Line, //  node==null means a compilation error prevented   groovy from building an ast 
0, Line, //  rhs is normal value, set normal value 
0, Line, //  do nothing 
0, Line, //  we already know the lengths are equal 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeStaticMethod(java.lang.Object, java.lang.String, java.lang.Object[])      */
0, Line, //  br should get a "native" property match first. getProperty includes such fall-back logic 
0, Line, //  it is possible to use a getter 
0, Line, //  this name contains @name we need to return name 
0, Line, //  modifier and block type   modifier and block type 
0, Line, //  Compiler configuration, used to set the encodings of the scripts/classes 
0, Line, //  is next line needed at all? 
0, Line, //  if we are in a class and no variable is declared until   now, then we can break the loop, because we are allowed   to declare a variable of the same name as a class member 
0, Line, //  we may inline a var!=null check instead of calling a helper method iff   (1) the class doesn't define an asBoolean method (already tested)   (2) no subclass defines an asBoolean method   For (2), we check that we are in one of those cases   (a) a final class   (b) a private inner class without subclass 
0, Line, //  _result = HashCodeHelper.updateHash(_result, getProperty()) // plus self-reference checking 
0, Line, //  case B   we give our a vargs penalty for each exceeding argument and iterate   by using parameters[noVargsLength].getComponentType()   penalty for vargs 
0, Line, //  Unknown type: "threadsafe"   fails after parser 
0, Line, //  allow Diamond for non-AIC cases from CCE 
0, Line, //  and the closure after them 
0, Line, //  end::bsf_access[] 
0, Line, //  otherwise or if method doesn't exist we make call via POJO meta class 
0, Line, // <param-value></param-value> is prohibited 
0, Line, //  todo (iterate) 
0, Block, /*  explicit  */
0, Line, //  map containing named labels of current block 
0, Line, //  Method has been optimized to reach a target of 325 bytecode size, making it JIT'able 
0, Line, //  sum all the meetings 
0, Line, // @todo -- 
0, Line, //  let's try use the cache to find the method 
0, Line, //  wait for all threads to complete 
0, Line, //  Test class implementing GroovyObject 
0, Line, //  lazy create for edge-case efficiency 
0, Line, //  ------------------ float[] ------------------ 
0, Line, //  Only attempt to render our self if our super-class is resolved, else wait for it 
0, Line, //  Do nothing. 
0, Line, //  assume we have a script 
0, Line, //  we create separate method lists just to be able to print out   a nice error message to the user   a method is accessible if it is static, or if we are not in a static context and it is   declared by the current receiver or a superclass 
0, Line, //  and the getters and setters 
0, Line, //  check module static imports (for static inner classes) 
0, Line, //   --------------------------------------------------------                normal Property handling : set    -------------------------------------------------------- 
0, Line, //  added to track the enclosing method for local inner classes 
0, Line, //  JDK 1.6 has changed the implementation to do a   String.valueOf(x) rather than call print(x).   Probably to improve performance by doing the conversion outside the lock.   This will do the same thing for us, and we don't have to have access to the lock. 
0, Line, //  unreachable statement 
0, Line, //  add method:   boolean removeVetoableChangeListener(listener) {      return this$vetoableChangeSupport.removeVetoableChangeListener(listener); 
0, Line, // Subclasses implement according to the type promotion hierarchy rules 
0, Block, /*  * The Great Computer Language Shootout * http://shootout.alioth.debian.org/ * * contributed by James McIlree  */
0, Line, //  start on the string that was inserted 
0, Line, //  make sure that no values are ever placed on empty line   + 1: no whitespace required between end of value and "|" 
0, Line, //  this code is in an extra method to avoid   lazy initialization issues 
0, Line, // ---------------------------------------------------------------------------   EXTERNAL CALLBACKS 
0, Line, //  falling back to pre 2.1.9 selection algorithm   in practice this branch will only be reached if the class calling this code is a Groovy class   compiled with an earlier version of the Groovy compiler 
0, Line, //  copy annotations 
0, Line, //       p     q     r     s     t     u     v     w 
0, Block, /*     * create a subset of the original dataset     */
0, Line, //  we stop now, otherwise we must check the parent class 
0, Line, //  tokens from Types 
0, Line, //  prepare call site 
0, Line, //  anything can be assigned to an Object, String, Boolean 
0, Line, //  add method:   void addPropertyChangeListener(name, listener) {       this$propertyChangeSupport.addPropertyChangeListener(name, listener) 
0, Line, //  consume the first double quote starting the string 
0, Line, //  resolve scope (for closures) 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.helpers.DefaultHandler#startPrefixMapping(java.lang.String, java.lang.String)     */
0, Line, //  visitLiteralPackage     token type "package" only used by parser, never visited/created directly 
0, Block, /*  (non-Javadoc)    * @see java.io.Writer#write(int)     */
0, Line, //  TODO we could one day store the Antlr AST on the Groovy AST   node.setCSTNode(ast); 
0, Line, //  $idx++ 
0, Line, //  static init 
0, Line, //  must replace backslashes first, as the other replacements add backslashes not to be escaped 
0, Line, //  If class name is looked up below, additional types will be used in error message 
0, JavaDoc, /*      * Get info about usual Java instance and class Methods as well as Constructors.     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
0, Line, //  direct read 
0, Line, //  is this a file on disk 
0, Line, //  only false when this classNode is constructed from a class 
0, Line, // correct SAM type for generics  sam = applyGenericsContext(placeholders, sam); 
0, Line, //  we're using node metadata here in order to fix GROOVY-6094   without breaking external APIs 
0, Line, //  TODO remove dup with SimpleGroovyClassDoc 
0, Line, //  if we have to delegate to another object, generate the appropriate delegate field 
0, Line, //  GROOVY-5580, it is still possible that we're calling a superinterface property 
0, Line, //  for thread safety, grab local copy 
0, Line, //  if the current generics spec is a wildcard spec or a placeholder spec   then we must check upper and lower bounds 
0, Line, //  here, we want to point to a method named "doCall" instead of "call"   but we don't want to replace the original call site name, otherwise   we loose the fact that the original method name was "call" so instead   we will point to a metamethod called "doCall"   see GROOVY-5806 for details 
0, Line, //  for consistency with AsmClassGenerator. see AsmClassGenerator.visitBooleanExpression. 
0, Line, //  We need @InheritConstructors from parent classes processed first   so force that order here. The transformation is benign on an already   processed node so processing twice in any order won't matter bar   a very small time penalty. 
0, Line, //  GROOVY-5150 
0, Block, /*  = 0 */
0, Line, //  avoid re-triggering 
0, Line, //  add "this$0" field init 
0, Line, //  generate bytecode 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setEntityResolver(org.xml.sax.EntityResolver)      */
0, Line, //  ------------------------------   feature: classic Java for loop   ------------------------------ 
0, Line, //  fastPathBlocked -> slow path 
0, Line, //  we skip bridge methods implemented in current class already 
0, Line, //  visitLiteralEnum ...     token type "enum" only used by parser, never visited/created directly 
0, Line, //    KEYWORDS: SPECIAL VALUES 
0, Line, // skip contents, because of dynamic scope 
0, Line, //  trigger the call to VMPlugin#configureClassNode(CompileUnit,ClassNode) 
0, Line, //  add property getter 
0, Line, //   --------------------------------------------------------                normal GroovyObject Property handling : set    -------------------------------------------------------- 
0, JavaDoc, /*      * Get all properties including JavaBean pseudo properties matching getter conventions.     *     * @param type the ClassNode     * @param includeSuperProperties whether to include super properties     * @param includeStatic whether to include static properties     * @param includePseudoGetters whether to include JavaBean pseudo (getXXX/isYYY) properties with no corresponding field     * @return the list of found property nodes      */
0, Line, //  Ranges 
0, Line, //  and that should link to api/Foo.html, not to lib/Foo.html. 
0, Line, //  and collect the name of the methods for which delegation is active 
0, Line, //  GROOVY-5570: if a closure shared variable is a primitive type, it must be boxed 
0, Line, //  check cast not necessary because Object never evolves   and it prevents a potential ClassCastException if the delegate of a closure   is changed in a statically compiled closure 
0, Block, /*          * Test cache for a valid template bound to the key.          */
0, Line, // noinspection UnnecessaryContinue 
0, Line, //  automatically split each line using the splitpattern 
0, Line, //  int sum(int x) should be preferred to int sum(int x, int... y) 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String, java.lang.Object)          */
0, Line, //  Statements  ------------------------------------------------------------------------- 
0, Line, // if the error was thrown on the same row as where the last string section 
0, Line, //  add special handling of getDelegate() and getOwner() 
0, Line, //  not in JavaDoc API 
0, Line, //  Else try to render some arguments 
0, Line, //  code to negate the primitive boolean 
0, Line, //  name too short? 
0, Line, //  added to avoid hash collision attack 
0, Line, //  retrieve the proper style from groupNum of the groupList and 
0, Line, //  Class<TraitClass> 
0, Line, //  (3) there is more than one argument for the vargs array 
0, Line, //  Exit early if we run out of data 
0, Line, // either a map or a collection 
0, Line, //  simply return the values of the metaproperty map as a List 
0, Line, //  drop dummy receiver 
0, Line, //  meaning that we reached the top of the object hierarchy 
0, Line, //  Traits order *must* be preserved   See GROOVY-7285 
0, Line, //  in case of this(...) let the other constructor do the init 
0, Line, // space between classdef and objblock 
0, Line, //  GROOVY-8728 make idempotent   remove default expression and store it as node metadata 
0, Line, //  Use a new class loader by default for each class so each class can be independently garbage collected 
0, Line, //  inner classes created while generating bytecode 
0, Line, //  let's try setting the property on the second object 
0, Line, //  couldn't access files 
0, Line, //  if it implements Runnable, try to instantiate it 
0, Line, //  An entry may be scheduled for reordering despite having been removed.   This can occur when the entry was concurrently read while a writer was   removing it. If the entry is no longer linked then it does not need to   be processed. 
0, Line, //   --------------------------------------------------------         special constructor invocation (via this/super)    -------------------------------------------------------- 
0, Block, /*              * If the current value is a node, recurse into that node.              */
0, Line, // exception table writing 
0, JavaDoc, /*      * Get info about instance and class Methods that are dynamically added through Groovy.     *     * @return Array of StringArrays that can be indexed with the MEMBER_xxx_IDX constants      */
0, Line, //  extract joint options, some get pushed up... 
0, Line, //  temporarily store the delegation strategy and the delegate type 
0, Line, //  iterate through the rows and add each one to the layout... 
0, Line, //  already registered 
0, Line, //  we have to handle here different cases in which we do no   transformations. We depend on our method selection to have   selected only a compatible method, that means for a null   argument we don't have to do anything. Same of course is if   the argument is an instance of the parameter type. We also   exclude boxing, since the MethodHandles will do that part   already for us. Another case is the conversion of a primitive   to another primitive or of the wrappers, or a combination of    these. This is also handled already. What is left is the    GString conversion and the number conversions. 
0, Line, //  loop body 
0, Line, //  The exception source of the message, if any 
0, Line, //  this used to be synchronized, but we also used to remove the   metaclass.  Since adding the metaclass is now a side effect, we   don't need to ensure the meta-class won't be observed and don't   need to hide the side effect. 
0, Line, //  vim: set ts=4 ft=java 
0, Line, //  if origShort and withoutCustomHandle 
0, Line, //  value is on stack 
0, Line, // load spread expressions as array 
0, Line, //  handle instanceof cases 
0, Line, //  raw type usage is always allowed 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#getMethods()      */
0, Line, //  wrap the standard MetaClass with the delegate 
0, Line, //  invert the map, is now one to many 
0, Line, //  CONSTANTS 
0, Line, //  goto finally part 
0, Line, //  allows a closure to be used to configure Statement objects before its use 
0, Line, //  anything text and not a keyword 
0, Line, //  Causes the invalid escape to be skipped 
0, Line, //  ClassLoaders should only be created inside a doPrivileged block in case   this method is invoked by code that does not have security permissions. 
0, Block, /*  ******** java.time.temporal.TemporalAccessor extension methods ********  */
0, Line, //  return false if cannot do fast path and if are already on the path 
0, Line, //  unbox 
0, Line, //  IMPLEMENTATION NOTE:   classpath must be the first argument, so that the `startGroovy(.bat)` script   can extract it and the JVM can be started with the classpath already correctly set.   This saves us from having to fork a new JVM process with the classpath set from the processed arguments. 
0, Line, //  means we're in middle of mlr, so start at beginning of mlr 
0, Line, //  for efficiency set maxRows (adjusted for the first offset rows we are going to skip the cursor over) 
0, Line, //  don't take blank lines into account for calculating the indent 
0, Line, //  Set the RHS to '= URI.create("string for this URI")'.   That may throw an IllegalArgumentExpression wrapping the URISyntaxException. 
0, Line, //  fast/slow path generation 
0, Line, //  lets register the builder as the delegate 
0, Line, //  if the right hand side is a boolean expression, we need to autobox 
0, Line, //  make copy & set type 
0, Line, //  merge if/else branches 
0, Line, //  it happens with @interface methods 
0, Line, //  merge maps 
0, Line, //  Define null less than everything. 
0, Line, //  Remove some refs so GC will work in order to test multiple iterating threads   removing collected references 
0, Line, //  append super if needed 
0, Line, //  perform some early param checking for non-vararg case 
0, Line, //  $Id: except.java,v 1.1 2004-05-23 04:36:29 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Collection class code is from my friend Phil Chu, Thanks Phil! 
0, Line, //  duplicate arguments 
0, Line, //  ------------------ long ------------------ 
0, Line, //  handle receiver 
0, Line, //  safe to return null here because then we'll get the default provider 
0, Line, //  parse the child regexps, if any, within a matched block 
0, Block, /*  ******** java.time.Period extension methods ********  */
0, Line, //  fact. We check here for ConstructedClassWithPackage. 
0, Line, // we don't need a template.clone here as curry calls clone under the hood 
0, Line, //  let's brute-force calculate the size by iterating start to end 
0, Line, //  perform visit 
0, Line, //   this.$delegate$closure$methodName.call(new Object[] { method arguments }) 
0, Line, //  Look for closure valued variable in the  
0, Line, //  create previous() method, code:      Day previous() {          int ordinal = ordinal().previous() 
0, Line, //  this super class stuff is for Java 1.4 support only   it isn't needed on a 5.0 VM 
0, Line, //  in case of a precompiled class, the outerclass is unknown 
0, Line, //             int result = 17;              result = result * 31 + (reverse ? 1 : 0);              result = result * 31 + (inclusive ? 1 : 0); 
0, Block, /* float[13] */
0, Line, //  test list 
0, Line, //  method call with default arguments 
0, Line, //  if the object is a Class, call a static method from that class 
0, Line, //  add method:   VetoableChangeListener[] getVetoableChangeListeners() {     return this$vetoableChangeSupport.getVetoableChangeListeners 
0, Line, //  Nothing should be done when no elements need protection against eviction 
0, Line, // out.print("</" + t.getType() + ">"); 
0, Line, //  on a special call, there's no object on stack 
0, Line, //         LinkedList<DeclarationExpression> declarations = new LinkedList<DeclarationExpression>(); 
0, Line, //  noSuchMethod(method, object, arguments); 
0, Line, //  remove annotations 
0, Line, //  The exception on which to report   If true, stack traces are always output 
0, Line, //  given an offset, return the mlr it resides in 
0, Line, //    GSTRING TOKENS 
0, Line, //  store target method 
0, Line, //  load arguments 
0, Line, //  add no-arg constructor 
0, Line, //         List<FieldNode> fields = getFields(transform, anno, buildee); 
0, Line, //  uncached constants. 
0, Line, //  only used on rare occasions, e.g. the '(' in this snippet...   @Foo  (  a=1, b=2, c=3) 
0, Line, //  method invocation 
0, Line, //  don't log the password 
0, Line, //  if we lazily create default values, use 'null' as placeholder 
0, Line, //  copy arguments that are not a varg 
0, Line, //  the document buffer and segment 
0, Line, //  direct method call paths 
0, Line, //  add fields 
0, Line, //  let's make the constructor 
0, Line, //  identifiers, primitive types   identifiers, primitive types except void 
0, Line, //  default packages do not contain classes like these 
0, Line, //  things like com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl   do implement Element, NodeList and Node. But here we prefer element,   so we force the usage of Element. Without this DOMCategoryTest may fail   in strange ways 
0, Line, //  resolve property types 
0, Line, // could be more efficient by compiling expressions in advance. 
0, Line, // There may be more than 1 failure:  iterate to ensure that they all match the missingPermission. 
0, Line, //  we drop the receiver, which might be a Class (invocation on Class)   or it might be an object (static method invocation on instance)   Object.class handles both cases at once 
0, Line, //    Store Access   
0, Line, //  create a list of integers (Li1) from 1 to SIZE 
0, Line, //  let's pass along any other modifiers we need 
0, Line, //  cached data 
0, Line, //  Scheduler will run foerever 
0, Line, //  currently not looking for PropertyExpression: dealt with at runtime using ReadOnlyPropertyException 
0, Line, //  look if really compare 
0, Line, //  another case we want to check here is if we are in a   nested class A$B$C and want to access B without   qualifying it by A.B. A alone will work, since that   is the qualified (minus package) name of that class   anyway.  
0, Line, //  set super class and generics info   "enum X" -> class X extends Enum<X> 
0, Line, //  May happen on JDK8 and below. We add elements to the front of the array to account for the synthetic params:   - for an inner class we expect one param to account for the synthetic outer reference   - for an enum we expect two params to account for the synthetic name and ordinal 
0, Block, /* Character[7] */
0, Block, /*      * If a main method is provided by user, account for it under run() as scripts generate their own 'main' so they can run.        */
0, Line, //  TODO: dk: make FileNameFinder injectable 
0, Line, //   --------------------------------------------------------                    unboxing methods    -------------------------------------------------------- 
0, Line, //  now let's look up the name via JMX to check 
0, Line, //  can safely use '/' because Windows understands '/' as separator 
0, Line, //  look in the namespaces who will be declared at the next element 
0, Block, /*  *     * load a message on the stack and remove it right away. Good for put a mark in the generated bytecode for debugging purpose.     *     * @param msg      */
0, Line, //  use this to synchronize access for the lazy init 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getFeature(java.lang.String)      */
0, Line, //   **********************************************************************************    **********************************************************************************    **************          methods not covered by the new MOP          **************    **********************************************************************************    ********************************************************************************** 
0, Line, // This is also the cost for a insert 
0, Line, //  GROOVY-7307 
0, Line, //  ensure leading '|' is removed 
0, Line, //  ------------------ double ------------------ 
0, Line, //  GROOVY-7822 use Set for O(1) performance for contains 
0, Line, //  type conversions 
0, Line, //  protected means same class or same package, or subclass 
0, Line, //  end::jsr223_imports[] 
0, Line, //  VariableExpressions will stop resolving 
0, Line, //  swallow for strict security managers, module systems, android or others 
0, Line, //  check that the provided classnode is a subclass of all provided upper bounds 
0, Line, //  get the setter method 
0, Block, /*          * Log some debug information for https://issues.apache.org/jira/browse/GROOVY-861          */
0, Line, //  $idx<$len? 
0, Line, //  The pattern used to split the current line 
0, Line, //  fall through, getErrorReporter().failIfErrors() will trigger 
0, Line, //  br for setting on the LocalVariableTable in the class file   these fields should probably go to jvm Operand class 
0, Line, //  Take a permut array, continuously flipping until first element is '1' 
0, Block, /*  ******** java.time.MonthDay extension methods ********  */
0, Line, //  Special handling is done for floating point types in order to   handle checking for 0 or NaN values. 
0, Line, //  not in java   not in java   equiv to f() // not in java 
0, Line, //  do the same again for an inner inner class 
0, Line, //  either index >= size or the normalised index is negative 
0, Line, //  eliminate static 
0, Line, // add this parameter to node 
0, Line, //  parser bug 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getFeature(java.lang.String)     */
0, Line, //  cleanup 
0, Line, //  skip the final modifier if it's present 
0, Line, //  there is nothing to be done. 
0, Line, //  Otherwise let's trust the source to know where it is from.   And actually InputStreamReaderSource doesn't know what to do and so returns null. 
0, Line, //  place holder to avoid problems with empty catch blocks 
0, Line, //  --------------------------------------------------   bugs?: spread expressions in closures and GStrings 
0, Line, //  let's find a main method 
0, Line, // keep field 
0, Line, //  for lists, replace list.foo with:   def result = new ArrayList(list.size()) 
0, Line, //  restore dummy collector target 
0, Line, //  reference type 
0, Line, //  all Blocks do know the label, so use all finally blocks 
0, Line, //  otherwise, find the default constructor 
0, Line, //  Implementation methods 
0, Line, //  include original line/col info and source code on the mindmap output 
0, Line, //  have to lookup registered beans 
0, Line, //  <2> 
0, Line, //  GROOVY-8943 
0, Line, //  subsequent bounds if present can be interfaces 
0, Line, //  the next items require conversion to int when initializing 
0, Line, //  if that main method exist, invoke it 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.GroovyObject#setMetaClass(groovy.lang.MetaClass)     */
0, Line, //  scope != null means aic, we don't handle that here 
0, Block, /*      * Methods to allow Date Duration arithmetic      */
0, Line, //  filter out DGM beans 
0, Line, //  give value through or unbox 
0, Line, //  Set up a new array of indexes with the right number of elements   for the new data model. 
0, Line, //  ------------------------------------------------   deprecate in parser?: 'break' allowed in methods 
0, Line, //  backslash   line feed   carriage return   tab   form feed 
0, Line, //  don't delegate to putAll since we want case handling from put 
0, Line, //     public static Boolean negate(Boolean left) {          return Boolean.valueOf(!left.booleanValue());      } 
0, Line, //  returns the default charset rather than US-ASCII if the enforce8Bit flag is set. 
0, Line, //  the description of the property 
0, Line, //  port to listen on when processing sockets 
0, Line, //  setMetaClass 
0, Line, // resolve class names at the end of adding all files to the tree 
0, Block, /*  (non-Javadoc)     * @see java.lang.Object#equals(java.lang.Object)      */
0, Line, //  initialize the segment with the complete document so the segment doesn't   have an underlying gap in the buffer 
0, Line, //  getMetaClass 
0, Line, //   --------------------------------------------------------                normal method invocation 
0, Line, //  can't check synchronized here as it doubles up with ACC_SUPER  private static final String EXPECTED_SYNCHRONIZED_CLASS_ERROR_MESSAGE = 
0, Line, //  reverse Li1 
0, Line, //  save name before redirect 
0, Line, //  indexes into strings s and t 
0, Line, //  if original double meta class 
0, Line, //  we are not in a tuple, so boxing might be missing for   this single argument call 
0, Line, //  static star imports 
0, Line, //  incompatible assignment 
0, Line, //  GROOVY-5207 So that Closures can see newly added fields   (not super efficient for a very large class with many @Fields but we chose simplicity 
0, Line, //  Used to keep a hard reference to the References so they are not collected 
0, Block, /*  ignore  */
0, Line, //  use name of class for constructor from the class definition 
0, Line, //  receiver   we operate on GroovyObject if possible 
0, Line, //  This could be changed to support some hash of the parameter types, etc.   but should distinguish between reordered params while allowing normal   type coercions to be honored 
0, Line, //  using a comparator of parameters 
0, Line, //  Read in number of buckets and allocate the bucket array; 
0, Line, //  use a temporary variable for the arraylist in which the results of the spread call will be stored 
0, Line, //  new line, so reset unicode escapes 
0, Line, //  a five-bytes sequence was encountered 
0, Line, //  } 
0, Line, //  treat as simple type - probably a String 
0, Block, /*  We need to chop up this child container.  */
0, Line, // check for an alias 
0, Line, //  ignore, leave property expression in place and we'll report later 
0, Block, /*  ******** java.time.Year extension methods ********  */
0, Block, /*      * According to section 6.4.1 of the JavaBeans spec this is legal, but not     * good practice.  We need to test what can be done not what should be done      */
0, Line, //  we are probably looking for a property of the class 
0, Line, //  $Id: prodcons.java,v 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Producer-Consumer Example by Bill Lear   Adapted from http://java.sun.com/docs/books/tutorial/essential/threads 
0, Line, // GROOVY-3712 - if it's an MOP method, it's an error as they aren't supposed to exist before ACG is invoked 
0, Line, //  in this case we need one "this", so a SWAP will exchange   "this" and Object[], a DUP_X1 will then copy the Object[]  / to the last place in the stack:       Object[],this -SWAP-> this,Object[]       this,Object[] -DUP_X1-> Object[],this,Object[] 
0, Line, //  false part: load false expression and cast to S 
0, Block, /*          * Bind the default variables.          */
0, Line, //  Run the script 
0, Line, //  CLASS METHODS 
0, Line, //  let's check if one of the operands is the null constant 
0, Line, //  our last action in the above loop was to rotate vals, so vals[1] now 
0, Line, //  if in unicode, then we're reading unicode   values in somehow 
0, Block, /*      * searches for \n or \r     * Returns -1 if not found.      */
0, Line, //  need to abbreviate this comment for the summary 
0, Line, //  so we really need to rewrap 
0, Line, //  retry if wrong list or lost race against concurrent remove 
0, Line, //  anything other than PropertyExpressions or 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.Closure#getDelegate()          */
0, Line, //  every element was the null constant 
0, Line, //  [1,2,3].each {foo(it)}  <-- Closure 
0, Line, //     public int canonicalHashCode() { 
0, Line, //  ensure invariant from <= to 
0, Line, //  remove the new tags we had to define for this element 
0, Line, //  Cache closure call methods 
0, Line, //  variable already declared 
0, Line, //    SPECIAL (CALCULATED) MEANINGS 
0, Line, //  always return if the parent loader was successful 
0, Line, //  skip if there is no such annotation 
0, Line, //  We lied about our CodeSource and that makes URLClassLoader unhappy. 
0, Line, //  iterate from the inner most to the outer and check for classes   this check will ignore a .class property, for Example Integer.class will be   a PropertyExpression with the ClassExpression of Integer as objectExpression 
0, Line, //  Add a penalty against boxing or unboxing, to get a resolution similar to JLS 15.12.2   (http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.2). 
0, Line, //  stack: closure 
0, Line, //  Add parameter names to the MethodVisitor (jdk8+ only) 
0, Line, //   --------------------------------------------------------                       Closures    -------------------------------------------------------- 
0, Block, /*              *  GROOVY-4009: when a normal variable is simply being used, there is no need to try to              *  resolve its type. Variable type resolve should proceed only if the variable is being declared.               */
0, Line, //  try to find a target 
0, Line, //  last parameters wrapped in an array 
0, Line, //  IGNORE 
0, Line, //   --------------------------------------------------------                  static normal method invocation 
0, Line, //  deprecated 
0, Line, //  getInitialExpression above will be null if not in same source unit   so instead set within (static) initializer 
0, Line, //  update max_flip foreach flipping position 
0, Line, //  prefer super method if it matches better 
0, Line, //  tag::precompiled_java_extension[] 
0, Line, //  import is like "import static foo.Bar.method"   packageName is really class name in this case 
0, Line, //  reset any out of bounds requests 
0, Line, //  call() 
0, Line, //  goto after all-catching block 
0, Line, //  tag::bsf_access[] 
0, Line, //             return createGetPropertySite(receiver).getProperty(receiver); 
0, Line, //  if the bound is not using generics, there's nothing to compare with 
0, Line, //  non thread-safe iterator 
0, Line, //  this block does not get a source position, because we don't 
0, Line, //  and we want to recompile if needed. 
0, Line, //  with a lower case letter anymore 
0, Line, //  check if maybe dependency was recompiled, but this one here not 
0, Line, //  if node text is found to be "super"/"this" when a method call is being processed, it is a  
0, Line, //  effort to get more logging in case a dependency of a class is loaded   although it shouldn't have 
0, Line, //  apply configuration customizers if any 
0, Line, //  if the classnode we compare to is a generics placeholder (like <E>) then we   only need to check that the names are equal 
0, Line, //  bind redirect method 
0, Line, //  GROOVY-6061 
0, Line, //  imports 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.Writable#writeTo(java.io.Writer)          */
0, Line, //  index for the next variable on stack 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#getAttribute(java.lang.Object, java.lang.String)      */
0, Line, //  replace call to <init>(Map) or <init>(this, Map)   with a call to <init>() or <init>(this) + appropriate setters   for example, foo(x:1, y:2) is replaced with: 
0, Line, //  cast argument to parameter class, inclusive unboxing   for methods with primitive types 
0, Line, //  if null, test if wildcard exists 
0, Line, //  GROOVY-8819 
0, Line, //  $Id: random.java,v 1.2 2004-08-14 08:19:19 bfulgham Exp $   http://shootout.alioth.debian.org/     Brent Fulgham:  Changed to use 32-bit integers (like the C   version), based on a suggestion by Yonik Seeley. 
0, Line, //    This element is preceded by CDATA if keepIgnorableWhitespace is false (the default setting) and   it's not whitespace add it to the body   Note that, according to the XML spec, we should preserve the CDATA if it's all whitespace   but for the sort of work I'm doing ignoring the whitespace is preferable   
0, Line, //  since indy does not give us the runtime types   we produce first a dummy call site, which then changes the target to one,   that does the method selection including the direct call to the   real method. 
0, Line, //  Note: old closure syntax using LOR is deprecated, and also never creates/visits a LOR node 
0, Line, //  unpack argument from Object[] 
0, Line, //  other cases don't need storing, so nothing to be done for them 
0, Line, //  recur 
0, Line, //  counter used to generate unique global Script class names 
0, Line, //  a keyword should be ok 
0, Line, //  If weighted values are used, then the pending operations will adjust   the size to reflect the correct weight 
0, Line, // CHECKSTYLE.ON: ConstantNameCheck 
0, Line, //             String s = (String) newValue; 
0, Line, //  remove middle of large bits of text 
0, Line, //  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change, the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere.   WARNING: This code does not expect a class that has a static            inner class in DEFAULT_IMPORTS 
0, Line, //  visitComma ...     token type COMMA never created/visited,     see TYPE_ARGUMENTS, ANNOTATION, many others ... 
0, Line, //  fail dirty, no checks 
0, Line, //  just check length, MOP will match it up 
0, Line, //   --------------------------------------------------------                    boxing methods    -------------------------------------------------------- 
0, Line, // ----------------------------------------------------------------------   generic get method  ---------------------------------------------------------------------- 
0, Line, //  visit rbrack()     token type RBRACK only used inside parser, never visited/created 
0, Block, /*  The Great Computer Language Shootout http://shootout.alioth.debian.org/ contributed by Java novice Jarkko Miettinen modified ~3 lines of the original C#-version by Isaac Gouy  */
0, Line, //  generated proxy using a map to store the closure 
0, Line, //  It's normally safe to ignore exceptions during cleanup but here if there is   a closed statement in the cache, the cache is possibly corrupted, hence log   at slightly elevated level than similar cases. 
0, Line, //  run through all our current properties and create MetaProperty objects 
0, Line, //         getState().clear(); 
0, Line, //  use 1000000 as offset to avoid conflicts with names from the GroovyShell 
0, Line, //         SoftDoubleKeyMap.Entry val = (SoftDoubleKeyMap.Entry) assignableMap.getOrPut(klazz, aClass, null); 
0, Block, /*     public static final int LEFT_SHIFT_EQUAL            = 285;   // <<=    public static final int RIGHT_SHIFT_EQUAL           = 286;   // >>=    public static final int RIGHT_SHIFT_UNSIGNED_EQUAL  = 287;   // >>>=    public static final int BITWISE_OR_EQUAL            = 350;   // |=    public static final int BITWISE_AND_EQUAL           = 351;   // &=    public static final int BITWISE_XOR_EQUAL           = 352;   // ^=    public static final int BITWISE_NEGATION            = REGEX_PATTERN;    // ~     */
0, Line, //  get the name of the pane (or user name) and the time for the header 
0, Line, //  check if the next block is over the max allowed 
0, Line, //  only want to do this once per node... 
0, Line, //  javax.script.Compilable methods  
0, Line, // assert 
0, Line, //  baos.withObjectOutputStream{ it.writeObject(this) } 
0, Line, //  resolve constant-looking expressions statically (do here as they get transformed away later) 
0, Line, //  overall used variables for a method/constructor 
0, Line, //             val.setValue(Boolean.valueOf(klazz.isAssignableFrom(aClass)));          }          return ((Boolean)val.getValue()).booleanValue(); 
0, Block, /* ignore. */
0, Line, //  add getter/setter even though setter not strictly needed for final fields 
0, Line, //  do nothing by default 
0, Line, //  First we try to get as much information about the declaration 
0, Line, //  on Windows, "\r\n" is a new line. 
0, Line, //  no checks on the sun.reflect classes for reflection speed-up   in particular ConstructorAccessorImpl, MethodAccessorImpl, FieldAccessorImpl and SerializationConstructorAccessorImpl   which are generated at runtime by the JDK 
0, Line, //  for GroovyClassLoader instance 
0, Line, //  find out the number of gaps to fill with null/the default value 
0, Line, //  cheat and borrow first param for result as we don't use it anyway 
0, Line, //  now delete directory itself 
0, Block, /*  package-private for use in builders  */
0, Block, /*  for later class resolution  */
0, Block, /*  = 0  */
0, Line, //  falls-back on default encoding 
0, Line, //  ... parse command line arguments 
0, Line, //  change statement to do assignment only 
0, Line, //  GROOVY-4415 / GROOVY-4645: check that there's no abstract method which corresponds to this one 
0, Line, //  write hex string to writer 
0, Line, //    Ensure the path is ready for the file 
0, Block, /*  Don't eat EOL chars in sections - as they are valid instruction separators.                 * See https://issues.apache.org/jira/browse/GROOVY-980                  */
0, Line, //  local is kept as hard reference to avoid garbage collection 
0, Line, //  From Hacker's Delight, Chapter 3, Harry S. Warren Jr. 
0, Line, //  insert at beginning so we have the classloader set up before the class is called 
0, Line, //  first check normal number of parameters 
0, Line, //  a proxy is supposed to be a concrete class, so it cannot extend an interface.   If the provided superclass is an interface, then we replace the superclass with Object 
0, Line, // TODO: other cases 
0, Line, //  generate a new method 
0, Line, //  Same as "0.0". 
0, Block, /* int[8] */
0, Line, //  only print out if we are being used for template generation 
0, Line, //  compare against the field but call isXXXExpression() instead. 
0, Line, //  {@link processing hack} 
0, Line, //  The String from which we produce Readers. 
0, JavaDoc, /*      * Intercepts a getXXX call and returns a result. The result is replaced by the     * real value if doGet() return false     *     * @param object   The target object     * @param property The property to get     * @return A value supplied by the interceptor      */
0, Line, //  next we get the block parameter types and set the generics   information just like before 
0, Line, //  advance to first entry 
0, Line, //  Read the keys and values, and put the mappings in the table 
0, Line, //  already handling verbose but pass on too 
0, Line, //  we have C[*:map] -> should become (C) map 
0, Line, //  start finally 
0, Line, //     Visibility field() default Visibility.UNDEFINED; 
0, Line, //  at least '$' is consumed ... read next chars. 
0, Line, //  log(" = " + made); 
0, Line, //  Opening of files and such   Lexing, parsing, and AST building   CST to AST conversion   AST semantic analysis and elucidation   AST completion   Class generation, phase 1   Class generation, phase 2   Output of class to disk   Cleanup   Synonym for full compilation 
0, Line, // ---------------------------------------------------------------------------   STRING CONVERSION 
0, Line, //  attempt builder resolution 
0, Line, //  as groovy AST doesn't expect to have them 
0, Line, //  if the meta class call fails we may still want to fall back to call   GroovyObject#invokeMethod if the receiver is a GroovyObject 
0, Line, //  keys to list of invocation times and before and after 
0, Line, //  GROOVY-4035  
0, Line, //  falls through 
0, Line, //  If the namespace has been used in the parse document use that tag 
0, Line, //  GROOVY-5961 
0, Line, //  targetTypes String, Enum and Class are handled    by the compiler already 
0, Line, //  see: http://ant.apache.org/ivy/history/latest-milestone/textual.html 
0, Line, //  top might be primitive, target is not   so let invocation writer box if needed and do groovy cast otherwise 
0, Line, //  Coerce the file URL to a File 
0, Line, //  visitEof ...     token type EOF never visited/created 
0, Line, //  is one of the arguments a closure? 
0, Line, //  Early return to avoid macro context and arguments creation 
0, Block, /*  (non-Javadoc)      * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String, java.lang.Object)       */
0, Line, // ---------------------------------------------                    char  --------------------------------------------- 
0, Line, //  Parse the script, generate the class, and invoke the main method.  This is a little looser than 
0, Line, //  parameter, in case of an extension method we must not.  
0, Line, //         }          return (Byte) primitiveArrayPut(array, idx, newValue);      }        public static Character putAt(char[] array, int idx, Object newValue) { 
0, Line, //  3 operands, the array, the index and the value! 
0, Block, /*         Start off at the apparently correct bin.  If entry is found, we       need to check after a barrier anyway.  If not found, we need a       barrier to check if we are actually in right bin. So either       way, we encounter only one barrier unless we need to retry.       And we only need to fully synchronize if there have been       concurrent modifications.     */
0, Line, //  so we can create the curried closure 
0, Line, //  Source file encoding 
0, Line, //  remove local variable 
0, Line, //  !=   ===   !==   ==   <   <=   >   >=   <=> 
0, Line, //  in groovy, methods and classes are assumed public, unless informed otherwise 
0, Line, //  Because we can not rely on 3rd party library(excluding antlr, asm), we have to implement our own utils such as the `inverse` method...   Actually `BiMap` of Guava and `BidiMap` of commons-collections are both suitable for this scenario. 
0, Line, //  annotation closure; replaced with this specific class literal to cover the   case where annotation type uses Class<? extends Closure> for the closure's type 
0, Line, //                     element = new MetaBeanProperty(mp.getName(), mp.getType(), mp.getGetter(), null);                  } 
0, Line, // toURI().toURL() will encode, but toURL() will not. 
0, Line, //  GROOVY-4973: Range made-up of from: Integer and to: Long should have 'from' promoted to type Long. 
0, Line, //    Then set in the element. 
0, Line, //  if left type is not a list but right type is a list, then we're in the case of a groovy   constructor type : Dimension d = [100,200]   In that case, more checks can be performed 
0, Block, /* !isAttributeExpression &&  */
0, Line, //  validate with closures 
0, Line, //  GROOVY-5150 : Initialize value with a dummy constant so that Java cross compiles correctly 
0, Line, //  ex: Comparable<Integer> <=> Comparable<? super T> 
0, Line, //  mark a ml run 
0, Line, //    Sort the parameters out 
0, Line, //  ... try piece in puzzle 
0, Line, //  VARBINARY() and other methods were assumed to be Constructors, make sure they aren't anymore... 
0, Line, // LOGME 
0, Line, //  FF   FE 
0, Line, //  superCallArguments = arguments for the super call == the constructor call arguments 
0, Block, /*  The next File object we'll iterate over  */
0, Line, //  visitLiteralClass ...     token type "class" only used by parser, never visited/created directly 
0, Line, //  we need later an array to store the curried   closures, so we create it here and ave it 
0, Block, /*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Mark C. Lewis */
0, Line, //  Indexes to retrieve field and method information 
0, Line, //  both have generics 
0, Line, //  could be changed into do..while, but then   we might create an additional StringBuilder 
0, Line, //  then we use the remaining information to refine the given generics 
0, Line, //  ")", ","   "]", ","   "implements", "throws", "{", ","   identifier, "[", "." 
0, Line, //  making this false helps find matches 
0, Line, //  different parsing without leading keyword 
0, Line, //  add curried versions 
0, Line, //  the following fields are closures executed in event-based methods 
0, Line, //  create array initialization methods 
0, Line, //  result 
0, Line, //  found a source, compile it if newer 
0, Line, //  ok, found one static method 
0, Line, //  don't worry about the bind state, if the binding   is completed we will bind in rebuild 
0, Line, //  jth object of t 
0, Line, //  if the method was not found in the current scope (the script's methods)   let's try to see if there's a method closure with the same name in the binding 
0, Line, //  create exception variable and store the exception 
0, Line, //  generic array to array conversion 
0, Line, //  form as it is closure shared 
0, Line, //  Since we use the data: scheme for StringReaderSources (which are fairly common) 
0, Line, //  template declaring its expected types from model directly   modelTypes = {    List<String> items    ...   } 
0, Line, //  not java, try groovy instead :-) 
0, Line, //     public GroovySerialFieldTag[] serialFieldTags() {/*todo*/return null;} 
0, Line, //  built in namespace   pseudo namespace for markup keywords 
0, Line, //  we maybe can't fix a synthetic field 
0, Line, //  prepare fields 
0, Line, //  the start and end indices of a match in the Matcher looking 
0, Line, //  get array element 
0, Line, //  primitive type 
0, Line, //  exception was thrown or we get wrong class 
0, Line, //  it's a script 
0, Line, //  if the match was multiline, which we'll know if they span   multiple paragraph elements, the mark it (this list was cleaned 
0, Line, //  there must be five continuation bytes of the form 10xxxxxx,   otherwise the following character is is not a valid UTF-8 construct 
0, Line, // TODO: use pre-generated Object[] 
0, Line, //  subsequent steps will bomb out but try to give some more friendly information first 
0, Line, //  here we handle a.b++ and a++ 
0, Line, // StyleConstants. 
0, Line, //  visitOneNl     new lines are used by parser, but are not created on the AST,     they can be implied by the source code line/column information 
0, Line, //    Level helpers   
0, Line, //  GROOVY-3726: clear volatile, transient modifiers so that they don't get applied to methods 
0, Line, //  both classes do not represent interfaces 
0, Line, //  expect just one scope to be set on the way in but now also set higher levels of visibility 
0, Line, //  add property setter 
0, Line, //  if there is a user-defined methodNode, add compiler error msg and continue 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.GroovyObject#invokeMethod(java.lang.String, java.lang.Object)     */
0, Line, //  end::jsr223_variables[] 
0, Line, // params.length < args.length   we depend on the method selection having done a good    job before already, so the only case for this here is, that   all trailing arguments belong into the vargs array 
0, Line, //  we're using a copy here because new extensions can be added during the "setup" phase 
0, Line, //                 declarations.add((DeclarationExpression) expr); 
0, Line, //  a six-bytes sequence was encountered 
0, Line, //  printModifiers(out, constructorNode.getModifiers()); 
0, Line, //  We don't copy DGM methods to superclasses' indexes   The reason we can do that is particular set of DGM methods in use,   if at some point we will define DGM method for some Groovy class or   for a class derived from such, we will need to revise this condition.   It saves us a lot of space and some noticeable time 
0, Line, //  in the script 
0, Block, /*                  *  GROOVY-4585                 *  Handle backslash characters.                  */
0, Line, //  end::bsf_variable_passing[] 
0, Line, //  char c = (char) ... 
0, Line, // ---------------------------------------------------------------------------   FACTORY METHODS 
0, Line, //  skip values() method and valueOf(String) 
0, Line, //  on the inner class node itself, private/protected are not allowed 
0, Line, //  if we reach this point, this means the interface is new 
0, Line, //  standard chooser for cases if it is not a single method and if it is   not the standard closure. 
0, Line, //  we are not at the end of the buffer 
0, Line, //  load receiver if not static invocation   todo: fix inner class case 
0, Line, // TODO: add support for super here too 
0, Line, //  verify component type 
0, Line, //  for methodMissing, first parameter should be String type - to allow overriding of this method without   type String explicitly specified for first parameter (missing method name) - GROOVY-2951 
0, Line, //  for each method defined in the class, generate the appropriate delegation bytecode 
0, Line, //  tag::bsf_apply[] 
0, Line, //  value can be an object, an array, a number, string, boolean or null values 
0, Line, //  to reach path which is equal to both paths 
0, Line, //  Template not cached or the source file changed - compile new template! 
0, Line, //  none if the direct interfaces match, but we must check "upper" in the hierarchy 
0, Line, //  create valueOf 
0, Line, //   --------------------------------------------------------                     exception handling 
0, Line, //  new let's strip everything up to and including the path separators 
0, Block, /* BigInteger[12] */
0, Line, //  Singleton 
0, Line, //  TODO read mixins 
0, Line, //  which is a really nice way of seeing the AST, folding nodes etc 
0, Line, //  T extends Object should just be printed as T 
0, Line, //  DO NOTHING 
0, Line, // extract the field name 
0, Line, //  Script.class, 
0, Line, //  look for one of these:     import static MyClass.setProp [as setOtherProp]     import static MyClass.getProp [as getOtherProp] 
0, Line, //  ignore methods, that are not abstract and from Object 
0, Line, //  some methods to avoid binary incompatibility - don't gain us a lot but gives the user 
0, Line, //  nothing to do 
0, Line, // restoring line breaks is important b/c of lack of semicolons 
0, Line, //  translate offsets to lines 
0, Line, //  stop at super and this 
0, Line, //  simple (for now) decision on java or groovy   java 
0, Line, //  add namedValues 
0, Line, //  we trick ourselves here 
0, Line, //  ignore, the constructor that takes a Collection as an argument may not exist 
0, Line, //  Invoke each task in the right order 
0, Line, //  A.super.foo = ... 
0, Line, //  now the finally only case but only if no catches 
0, Line, //  object already has per instance meta class 
0, Line, //  Get the current context classloader and save it on the stack 
0, Line, //  perform additional type checking on arguments 
0, Line, // ---------------------------------------------------------------------------   TOKEN FACTORIES 
0, Line, //  full match 
0, Line, //  check if a getAt method can be found on the receiver 
0, Line, //  Boolean based methods  ------------------------------------------------------------------------- 
0, Line, //  prefer class if no recompilation 
0, Line, //  Those member should stay protected so that subclasses may use different   cache keys as the ones used by this implementation 
0, Line, //  static alias only for inner classes and must be at end of chain 
0, Line, //  ranges don't contain other ranges 
0, Line, //  second, we must ensure that this method MUST be statically checked   for example, in a mixed mode where only some methods are statically checked   we must not visit a method which used dynamic dispatch.   We do not check for an annotation because some other AST transformations 
0, Line, //  ----------------------- 
0, Line, //  GROOVY-7300 
0, Line, //  continue normal tree walking 
0, Line, //  a negative index will count backwards from the last column. 
0, Line, //  if string length is odd then throw exception 
0, Line, //  case of +=, -=, /=, ... 
0, Line, //  jump to test the condition again 
0, Line, // this means we have received a double backslash sequence  if this is followed by ${ or <% we output one backslash  and interpret the following sequences with groovy, if followed by anything  else we output the two backslashes and continue as usual  
0, Line, //  it's a static extension method 
0, Line, //  For use by verify(). 
0, Line, //  this may happen under Windows because getResource is case insensitive under that OS! 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.Closure#getParameterTypes()          */
0, Line, // LOGME ignore the failure 
0, Line, //  perhaps it's a meta-annotation, e.g. jqwik @Example is annotated with @Property 
0, Line, //  The scheduler for cooperative Multithreading 
0, Line, //  or if there is already a @MapConstructor annotation 
0, Line, //  new value is already on stack, so nothing to do here 
0, Line, //  should never happen 
0, Line, //  then it is the common super type 
0, Line, //  add missing method dispatcher 
0, Line, //  statements 
0, Line, //   PLUS        200    MINUS       201    MULTIPLY    202    DIV         203    INTDIV      204    MOD         203 
0, Line, //  wrap up 
0, Line, //  If set, a reader on the current source file   The last line read from the current source file   The last line number read 
0, Line, //  let's add a typesafe call method 
0, Line, //  constructor 
0, Line, //  visitEmptyStat ...     token type EMPTY_STAT obsolete and should be removed, never visited/created 
0, Line, //  Cannot add static compilation of init method because of GROOVY-7217, see example 2 of test case  AnnotationNode an = new AnnotationNode(TraitComposer.COMPILESTATIC_CLASSNODE);  initializer.addAnnotation(an);  cNode.addTransform(StaticCompileTransformation.class, an); 
0, Line, //  SAM = single public abstract method   if the class is not abstract there is no abstract method 
0, Line, //  This handles byte, short, char and int 
0, Line, // ---------------------------------------------------------------------------   CONSTRUCTION AND DATA ACCESS 
0, Line, //   --------------------------------------------------------                       type conversion    -------------------------------------------------------- 
0, Line, //  the owner of the property 
0, Line, //  create constructor with a nested class as the first parameter, creating one if necessary 
0, Line, //  tabs with spaces (I hate tabs) 
0, Line, //  ret contains the type specs, what we now need is the type spec for the   current class. To get that we first apply the type parameters to the   current class and then use the type names of the current class to reset   the map. Example:     class A<V,W,X>{}     class B<T extends Number> extends A<T,Long,String> {}   first we have:    T->Number   we apply it to A<T,Long,String> -> A<Number,Long,String>   resulting in:     V->Number,W->Long,X->String 
0, Line, //  try to find a static one 
0, Line, //  Low surrogate 
0, Line, //  the following fields are only used internally; there are no user-defined expressions of the same kind 
0, Line, //  super class causing bridge methods for abstract methods in original class 
0, Line, //  assume underscore variables are for the wrapper script 
0, Line, //  Void.TYPE,   Closure.class,   GString.class,   List.class,   Map.class,   Range.class,  Pattern.class, 
0, Line, //  That means if the current class is not an InnerClassNode 
0, Line, //  FileScanner is a Groovy utility 
0, Line, //  |   ||   |   &   ^ 
0, Line, //  call the script global function of the given name 
0, Line, //  in master list of other phases and keep processing them for this phase. 
0, Line, //  Return flipping times 
0, Line, //  can't check volatile here as it doubles up with bridge 
0, Line, //  to select the constructor we need also the number of   available constructors and the class we want to make 
0, Line, //  use last one if we stored a character 
0, Line, //  For compatibility, ignore exceptions from getInputStream() call 
0, Block, /*  unhandled types from from org.codehaus.groovy.syntax.Types    public static final int LOGICAL_OR                  = 162;   // ||    public static final int LOGICAL_AND                 = 164;   // &&    public static final int DIVIDE                      = 203;   // /    public static final int STAR_STAR                   = 206;   // **    public static final int POWER                       = STAR_STAR;   //        public static final int PLUS_EQUAL                  = 210;   // +=    public static final int MINUS_EQUAL                 = 211;   // -=    public static final int MULTIPLY_EQUAL              = 212;   // *=    public static final int DIVIDE_EQUAL                = 213;   // /=    public static final int INTDIV_EQUAL                = 214;   // \=    public static final int MOD_EQUAL                   = 215;   // %=    public static final int POWER_EQUAL                 = 216;   // **=    public static final int PLUS_PLUS                   = 250;   // ++    public static final int PREFIX_PLUS_PLUS            = 251;   // ++    public static final int POSTFIX_PLUS_PLUS           = 252;   // ++    public static final int PREFIX_PLUS                 = 253;   // +    public static final int MINUS_MINUS                 = 260;   // --    public static final int PREFIX_MINUS_MINUS          = 261;   // --    public static final int POSTFIX_MINUS_MINUS         = 262;   // --    public static final int PREFIX_MINUS                = 263;   // - (negation) */
0, Line, //  print warnings if any 
0, Line, //  also takes care of both \ and / depending on the host compiling environment 
0, Line, //         Script script = new GroovyShell().parse(new File("src/test/groovy/xml/dom/NamespaceDOMTest.groovy"));  //        GroovyObject object = compile("src/test/groovy/xml/dom/NamespaceDOMTest.groovy");          script.invokeMethod("testXsdSchemaWithBuilderHavingAutoPrefix", null);      } 
0, Line, //             int hashCode = 1; 
0, Block, /*          * If no specific super class has been found and type fallback is an interface, check if all arg classes          * implement it. If yes, then that interface is the common type across arguments.          */
0, Line, //  GROOVY-9049: EncodingGroovyMethods.digest() truncates hashes over 128 bits starting with 0's 
0, Block, /*  (non-Javadoc)         * @see java.lang.Object#clone()          */
0, Line, //  bind forward method 
0, Line, //  wait for the threads to finish 
0, Line, //  initialize resolver 
0, Line, //  let custom factories be resolved first 
0, Line, // toString == pattern 
0, Line, //  Unexpected node type: a numeric literal found when expecting type: an identifier   fails after parser 
0, Line, //  first visit 
0, Line, //  no default value 
0, Block, /*      * Classes but not interfaces should have ACC_SUPER set     * See http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.6-300-D.2-5     * for what flags are allowed depending on the fact we are writing the inner class table     * or the class itself      */
0, Line, //  Construct a simplistic key to support overloaded operations on the MBean. 
0, Line, //         final Class[] argClasses = MetaClassHelper.convertToTypeArray(arguments);            unwrap(arguments); 
0, Line, //  chain secondary exception 
0, Line, //  we are at the first name part. This is the right most part.   If this part is in lower case, then we do not need a class   check. other parts of the property expression will be tested   by a different method call to this method, so foo.Bar.bar   can still be resolved to the class foo.Bar and the static   field bar. 
0, Line, //  another instanceOf_not was before, no need store vars 
0, Line, //  AST transformations state data 
0, Block, /*  duplicated with DateUtilExtensions utility method but we don't want the modules to depend on one another  */
0, Line, //  For statement contains unexpected tokens. Possible attempt to use unsupported Java-style for loop. 
0, Line, //  should not use a static variable because of possible changes to node metadata   which would be visible to other compilation units 
0, Line, //  this should never ever happen while writing to a StringBuilderWriter 
0, Line, //  GROOVY-4004: Clear the methods from the outer class so that they don't get duplicated in inner ones 
0, Line, //  important for GROOVY-4344 
0, Line, //  a 0-length type argument list means we face the diamond operator 
0, Line, //  next entry to return   current slot 
0, Line, //  GROOVY-5114 : if we have to choose between two methods   foo(Object[]) and foo(Object) and that the argument is an array type 
0, Block, /*  = false  */
0, Line, //  ignore the missing method exception   as it means no end() method is present 
0, Line, //  Find either next array element or end of array while ignoring comments 
0, Line, //  We need to guarantee that any existing reads of old Map can   proceed. So we cannot yet null out each bin. 
0, Line, //  GROOVY-6590: wrap primitive types 
0, Line, //  if there are no groovy statements between the enclosing Groovy tags   then read groovy statements in from a text file using the src attribute 
0, Line, //  we must use the redirect node, otherwise InnerClassNode would not have the "correct" type 
0, Line, // WE USE THIS AS REUSABLE         
0, Line, //  force Object super class 
0, Line, //  define "owning" task as wrapper to avoid having tasks added to the target   but it needs to be an UnknownElement and no access is available from   task to its original UnknownElement  
0, Line, //  simulate "Hello ${user}!" 
0, Line, //  loop end 
0, Line, //  execute fold: 
0, Line, //  visitLiteralExtends     token type "extends" only used by parser, never visited/created directly 
0, Line, //  invokes the super class constructor 
0, Line, // todo: this should parse... assertEquals("private static <T> void foo(List<T> list){}", pretty("private static <T> void foo(List<T> list){}")); 
0, Line, //  no exception info for Groovy MetaMethods 
0, Line, //  so the only possible return type is Object 
0, Line, //  visit rcurly()     token type RCURLY only used inside parser, never visited/created 
0, Line, //  The AST node metadata has the flag that indicates that this method is a script body.   It may also be carrying data for other AST transforms. 
0, Line, //  with the receiver type of the with method 
0, Line, // GROOVY-4508 
0, Line, //  if assignment succeeds but result type is not a subtype of original type, then we are in a special cast handling   and we must update the result type 
0, Line, //  this case always succeeds the result is a Matcher 
0, Line, //  first, collect closure shared variables and reinitialize types 
0, Line, //  Groovy runtime without circumventing JVM access checks (see CachedMethod for example). 
0, Block, /* boolean[0] */
0, Line, //  cache no-arg constructor 
0, Line, //  abort if explicit false found 
0, Line, //  for x[a] += b we have the structure:     x = left(left(binExp))), b = right(binExp), a = right(left(binExp)))   for array set we need these values on stack: array, index, right    for array get we need these values on stack: array, index   to eval the expression we need x[a] = x[a]+b   -> arraySet(x,a, x[a]+b)    -> arraySet(x,a, arrayGet(x,a,b))   --> x,a, x,a, b as operands   --> load x, load a, DUP2, call arrayGet, load b, call operation,call arraySet   since we cannot DUP2 here easily we will save the subscript and DUP x   --> sub=a, load x, DUP, load sub, call arrayGet, load b, call operation, load sub, call arraySet 
0, Line, // ----------------------------------------------------------------------   executing the getter method  ---------------------------------------------------------------------- 
0, Line, //  load Expressions 
0, Line, //  calculate 
0, Line, //  getResourceConnection() opening the inputstream, let's ensure all streams are closed 
0, Line, //  check if no superclass is defined 
0, Line, //  FE   FF 
0, Line, // the below being true indicates that we had an unterminated ${ or <% sequence and  the column is thus meaningless, we reset it to where the %{ or <% starts to at 
0, Block, /*  will do  */
0, Line, //  retain legacy field (will be given lower precedence than above) 
0, Line, //  no element, so use emptyDefault 
0, Line, //  let's see if we get a deadlock 
0, Line, //  into something that can exist in the callsite context 
0, Line, //  if left expression is a closure shared variable, we should check it twice   see GROOVY-5874 
0, Line, //  let's look for methods with 1 argument which matches the type of the   arguments 
0, Block, /*          *  Damage must be overridden whenever the paint method is overridden         *  (The damaged area is the area the caret is painted in. We must         *  consider the area for the default caret and this caret)          */
0, Line, //  The original code converted to decimal string this way: 
0, Line, //  For a placeholder, a type based on the generics type is used for the compatibility check, to match on   the actual bounds and not the name of the placeholder. 
0, Line, //  handle interfaces 
0, Line, //  if there isn't any argument, we can make invocation faster using the cached constructor 
0, Block, /*  if the map is null, then we create it.  */
0, Line, //  declared beans should just be available 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.MetaClass#getProperties()     */
0, Line, //  the method which has been chosen is supposed to be a call on delegate or owner   so we store the information so that the static compiler may reuse it 
0, Line, //  tag::jsr223_init[] 
0, Line, //  determine composite result 
0, Block, /*       * Parse the script contained in the GroovyCodeSource as a privileged operation (i.e. do not      * require the code source to have specific compile time permissions).  If the class produced is a      * TestCase, run the test in a suite and evaluate against the missingPermission.      * Otherwise, run the class as a groovy script and evaluate against the missingPermission.       */
0, Line, //  visitFloatSuffix ... never visited/created see NUM_DOUBLE or NUM_FLOAT instead 
0, Line, //             CachedMethod cachedMethod = methods[i]; 
0, Line, //  set other optimizations options to false here 
0, Line, //  visit receiver 
0, Block, /*  ******** java.time.Duration extension methods ********  */
0, Line, //  workaround for GROOVY-6834: accessing a parameter which is not yet seen in scope 
0, Line, //  to keep stack height put a null on stack 
0, Line, //  if expr is of READONLY_PROPERTY_RETURN type, then it means we are on a missing property 
0, Line, //  null indicates a static method which may still need generics correction 
0, Line, //  in case of null safe invocation, it is possible that what was supposed to be a primitive type   becomes the "null" constant, so we need to recheck 
0, Line, //  if you are compiling the script because the JVM isn't executing the main method. 
0, Line, //  GROOVY-6771 
0, Line, //  we have two options:   (1) embed initExpr within holder class but redirect field access/method calls to declaring class members   (2) keep initExpr within a declaring class method that is only called by the holder class   currently we have gone with (2) for simplicity with only a slight memory footprint increase in the declaring class 
0, Line, //  in the future the target will be wider than annotations, but for now it is just on annotations 
0, Block, /*  dist binary layout:    * 0-20: interface    * 21-22: primitive dist    * 23-43: object dist    * 44-48: vargs penalty     */
0, Line, //  Must now be three more hex digits 
0, Line, //  empty text 
0, Line, //  helpful error? 
0, Line, //  load this   load delegate   using InvokerHelper to allow potential intercepted calls 
0, Line, //  multi-assignment 
0, Line, //               CompileThread.addMethod(this);          } 
0, Line, //  end ConsoleTextEditor.PrintAction 
0, Line, //  override exists in the weaved class itself 
0, Line, //  not a primitive type, so call booleanUnbox 
0, Block, /*  *** Not used, yet. See comments in getScriptUri(HttpServletRequest). ***     * Servlet API include key name: request_uri      */
0, Line, //  chop off the single quotes at start and end 
0, Line, //  GROOVY-2156 
0, Line, //  return bais.withObjectInputStream(getClass().classLoader){ (<type>) it.readObject() } 
0, Line, //  defaults to left 
0, Line, //  and we can't find it 
0, Line, //  Compute the appropriate capacity 
0, Line, //  a default value exists, we can skip this param 
0, Line, // GROOVY-4285 
0, Line, // cv.visitMethodInsn(INVOKESPECIAL, innerClassinternalName, "<init>", prototype + ")V"); 
0, Line, //  all parameters of a method 
0, Line, // check the script is currently valid before starting a server against the script 
0, Line, //  GroovyObject interface 
0, Line, //  testForInit() covered by testForCondition() 
0, Line, //         }      } 
0, Line, //  we load the array and create a list from it 
0, Line, //  but visible as the surrounding class is imported and the inner class is public/protected static 
0, Line, //  adjust for multiple levels of nesting if needed 
0, Line, //  append ending SQL after last param. 
0, Line, //  if something has been evicted, do a clean-up 
0, Block, /*                  * GROOVY-3161: initialize statements for explicitly declared static fields                 * inside an enum should come after enum values are initialized                  */
0, Block, /*  less than space is a control char  */
0, Line, // ----------------------------------------------------------------------   listener method 
0, Line, //  add all classpaths that compilation unit sees 
0, Line, //    Requested script/template file has not been the target of a    RequestDispatcher.include(). Reconstruct its path from the request's   getServletPath() and getPathInfo() results. 
0, Line, //       (     )     *     +     ,     -     .     / 
0, Block, /*          * Some drivers (Oracle classes12.zip) have difficulty resolving data         * type if setObject(null). We will modify the query to pass 'null', 'is         * null', and 'is not null'          */
0, Line, //  if original Integer meta class 
0, Line, //  gather and sort all unvisited AST nodes 
0, Line, //  current label for continue 
0, Line, //  avoid different case keys being added by explicit remove 
0, Line, //  GROOVY-8090 handle generics varargs, e.g. `U x = ...; Arrays.asList(x)`   we should connect the type of vararg(e.g. T is the type of T...) to the argument type 
0, Line, //  true && false   a < b   this.&foo()    4 % 3   1 - 1   foo?.bar 
0, Line, //  core access scope modifiers 
0, Line, //  we know here that from!=to, so a distance of 0 is never valid   get primitive type indexes 
0, Line, //  if origBoolean and withoutCustomHandle 
0, Line, //  if the file is in UTF-8, high order bytes must have a certain value, in order to be valid 
0, Line, //  package-level visibility for testing purposes (just usage/errors at this stage) 
0, Line, //  BigInteger conversion is done by using the string representation 
0, Line, //  ignore, we'll throw e1 
0, Line, //  in case we are not in a constructor we have an additional   object on the stack, the result of our constructor call   which we want to keep, so we swap with the dummy object and   do normal removal of it. In the end, the call result will be   on the stack then 
0, Line, //  consume argument 
0, Line, //  Will store already created indents. 
0, Line, //  change path representation to something more system independent. 
0, Line, //  br using l2 as the 2nd param seems create the right table entry 
0, Line, //  Simple getter 
0, Line, //  handle different states for being on the left hand side 
0, Line, //  Check for a single minus now, rather than finding out later during lazy parsing. 
0, Line, //  check whether closure shared variables refer to params with default values (GROOVY-5632) 
0, Line, //  ex : def foos = ['a','b','c'] 
0, Line, //  call(Object) 
0, Line, //  set owner null here, it will be updated by addField 
0, Line, //  GROOVY-6112 : also copy acceptable Groovy transforms 
0, Line, //  Style names 
0, Line, //  Indexes to retrieve Class Property information 
0, Line, //  another special case here, where the bound is a "virtual" type   we must then check the superclass and the interfaces 
0, Line, //  int on stack 
0, Line, // site 
0, Block, /* Short[5] */
0, Line, //  end of file   the unknown token 
0, Line, //  no jump, so -1, need to pop off surplus II 
0, Line, //     public GroovyParamTag[] paramTags() {/*todo*/return null;} 
0, Line, //  <<=   >>=   >>>= 
0, Line, //  extract the generics from the return type 
0, Block, /*      further operations to be handled here maybe:    a / b a.div(b) (if one is double, return double, otherwise BD)    a[b]    a.getAt(b)    a[b] = c    a.putAt(b, c)     */
0, Line, //  possible getter/setter? 
0, Line, //  boolean getter 
0, Line, //  swallow and do as if no method is available 
0, Line, //  no array so wrap it 
0, Line, //  ||=   &&= 
0, Block, /*  KeyStroke keyStroke =  */
0, Line, //     public final Object callGetProperty (Object receiver) throws Throwable { 
0, Line, //  GROOVY-1262 
0, Block, /*          * Handle empty elements like '<br/>', '<img/> or '<hr noshade="noshade"/>.          */
0, Line, //  special guards for receiver 
0, Line, //  check if there's a potential better match 
0, Line, //  Set the context classloader back to what it was.  AccessController.doPrivileged(new DoSetContext(currentClassLoader)); 
0, Line, //  recurse on them 
0, Line, //  Do not use HashSet 
0, Line, //  Copy the column values into a list of a list. 
0, Line, //  ... generate list 
0, Line, //  let's try getting the property on the first object 
0, Line, //  look first for field with encoded modifier information 
0, Line, //  any of those otherwise 
0, Line, //  or Class typed variable 
0, Line, // noinspection GroovyConditionalCanBeElvis 
0, Line, //  The rewrite we do is causing some troubles with type checking, which will   not be able to perform closure parameter type inference   so we store the replacement, which will be done *after* type checking. 
0, Line, //  check for local synthetics 
0, Line, //  visitNls     new lines are used by parser, but are not created on the AST,     they can be implied by the source code line/column information 
0, Line, //  reflective proxy generation, since we need a ConvertedClosure but have only a normal Closure, we need to create that wrapper object as well 
0, Line, //  since there is no saving 
0, Line, // isSetter 
0, Line, //  remove surplus values 
0, Line, //  Initialise with the identity mapping. 
0, Line, //  In case of getting a ConstructedClassWithPackage here we do not do checks for partial   matches with imported classes. The ConstructedClassWithPackage is already a constructed 
0, Line, //  try to continue even in case of error 
0, Line, //  translate the graphics object back to reality in the y dimension 
0, Line, //  visitColon ...     token type COLON never created/visited, see LABELED_STAT, FOR_IN_ITERABLE,      ASSERT, CASE, QUESTION, MAP_CONSTRUCTOR, LABELED_ARG, SPREAD_MAP_ARG 
0, Line, //  there are three case for vargs   (1) varg part is left out (there's one less argument than there are parameters)   (2) last argument is put in the vargs array 
0, Line, // The calls below require access to user.dir - allow here since getName() and getCodeSource() are 
0, Line, //  @DelegatesTo.Target Obj foo 
0, Line, //  no need to keep any of those on the operand stack   after this expression is processed, the operand stack 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.MetaClass#addNewInstanceMethod(java.lang.reflect.Method)     */
0, Block, /*  The values stored in the map.  */
0, Block, /*  (non-Javadoc)        * @see java.io.Writer#close()         */
0, Block, /*  The iterator over the FileSet objects  */
0, Line, //  iterate over all interfaces to check if any corresponds to the bound we are   comparing to 
0, Line, //  todo : other cases 
0, Line, //  may happen if generic type is Foo<T extends Foo> and classnode is Foo -> Foo 
0, Line, //         assertEquals("with (myObject) {x = 1}", pretty("with(myObject) {x = 1}")); // fails after parser // not in java      } 
0, Line, //  visit init 
0, Line, //  else IGNORE 
0, Line, //  normalise index again to get positive index 
0, Line, //  found an existing static method that is going to conflict with interface 
0, Line, //  ignore, taken care of in debug 
0, Line, //  do not mix Class<Foo> with Foo 
0, Line, //  now work on the buffer(s) 
0, Line, //  ------------------------------   class visit   ------------------------------ 
0, Line, //  magic number, much greater than current number of java tokens 
0, Line, //  could be security, io, etc.  Ignore it.   End result is as if .exists() returned null 
0, Line, //             System.err.println("e.getMessage() = " + e.getMessage()); 
0, Line, //  make sure a new list is returned each time 
0, Line, //  invokes the specified method/function on the given object. 
0, Line, //  TODO : Parse pattern compile flags (literal names). 
0, Line, //  stores the current binary expression. This is used when assignments are made with a null object, for type 
0, Line, //  enforce yield, so we have something to interrupt 
0, Line, //  the following code will basically do this:   Map<String,Closure> impl = Collections.singletonMap(method.getName(),arg);   return ProxyGenerator.INSTANCE.instantiateAggregate(impl,Collections.singletonList(clazz));   TO_SAMTRAIT_PROXY is a handle (Object,Object,ProxyGenerator,Class)GroovyObject   where the second object is the input closure, everything else   needs to be provide and is in remaining order: method name,   ProxyGenerator.INSTANCE and singletonList(parameter) 
0, Line, //  case A   we give a penalty for vargs, since we have no direct   match for the last argument 
0, Line, //  let's create a new expression 
0, Block, /*                 * We override the MetaClass of this script object so that we can                * forward calls to global closures (of previous or future "eval" calls)                * This gives the illusion of working on the same "global" scope.                 */
0, Line, //  to do this we first bind the values to #setBeanProperties 
0, Line, //  reuse the full list of fields 
0, Line, //  the casese true and null for a match are through, the   remaining case is false and that means adding the method 
0, Line, //  @Blue(foo=123)   a = b   a &= b   a |= b   a >>>= b   a ^= b   a <=> b   a /= b   a == b   a -= b   a %= b   a != b   a += b   a =~ b   a ==~ b   a <<= b   a >>= b   a *= b   x **= 3 
0, Line, //  class only used to store setter information when an expression of type 
0, Block, /*      * Cached unmodifiable List used for iteration. Any method that mutates     * the runnerMap must set to null to invalidate the cache. Volatile is     * used because reads for DCL are faster than a lock/unlock.     * The values are cached in order to speed up iteration and avoid     * allocation of new collections on each call to the iterator.      */
0, Line, //  a.x = foo or x=foo is found and that it corresponds to a setter call 
0, Line, //  check if constructor call expression makes use of the diamond operator 
0, Block, /* , ElementType.IMPORT */
0, Line, //  we have handle that takes no arguments to create the bean,    we have to use its return value to call #setBeanProperties with it   and the meta class. 
0, Line, //  8k 
0, Line, //  change (receiver,callsite) to (callsite,receiver) 
0, Line, //  They'll get empty args since none exist in the context. 
0, Line, //  Primitive type array methods  ------------------------------------------------------------------------- 
0, Line, //  Closure 
0, Line, //  If there are no bounds, the generic type is basically Object, and everything is compatible. 
0, Block, /*  FALL THROUGH  */
0, Line, //  override standard engine with caching one 
0, Line, //  does not specify ast transform class names or classes 
0, Line, //  At this point we know that we have a match for pname. This may   mean, that name[pname.length()..<-1] is a static inner class.   For this the rest of the name does not need any dots in its name.   It is either completely a inner static class or it is not.   Since we do not want to have useless lookups we create the name   completely and use a ConstructedClassWithPackage to prevent lookups against the package. 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#getMetaMethods()      */
0, Line, //  parent will care about when children perform 
0, Line, //  <<   >>   >>> 
0, Line, //  Simplify common case of {expr} to expr. 
0, Line, //  we have here different generics contexts we have to deal with.   There is firstly the context given through the class, and the method.   The method context may hide generics given through the class, but use  
0, Line, //  here we must check if the right number is short enough to fit in the left type 
0, Line, //  treat the case Ant is run through Maven, and 
0, JavaDoc, /*      * Worker method for the {@link #escapeJavaScript(String)} method.     *      * @param out writer to receive the escaped string     * @param str String to escape values in, may be null     * @param escapeSingleQuote escapes single quotes if <code>true</code>     * @param escapeForwardSlash TODO     * @throws IOException if an IOException occurs      */
0, Line, // ---------------------------------------------------------------------------   ACTIONS 
0, Line, //  boolean->boolean, Boolean->boolean, boolean->Boolean   is handled by compiler   that leaves (T)Z and (T)Boolean, where T is the static type   but runtime type of T might be Boolean 
0, Line, //      that case is handled above already when params and args have the same length 
0, Line, //  TODO: pass printstream(s) down through process 
0, Line, //  verify imports 
0, Block, /*  The Computer Language Benchmarks Game   http://shootout.alioth.debian.org/   contributed by Stefan Krause   slightly modified by Chad Whipkey */
0, Line, //  handle body 
0, Line, //  GROOVY-6521: must set strategy to DELEGATE_FIRST, otherwise writing   books = 'foo' in a template would store 'books' in the binding of the template script itself ("script")   instead of storing it in the delegate, which is a Binding too 
0, Line, //  we need to remove the leading "{" and trailing "}" 
0, Line, //  parsing 
0, Line, //  GROOVY-7812(#1): Static inner classes cannot be accessed from other files when running by 'groovy' command   if the type to resolve is an inner class and it is in an outer class which is not resolved,   we set the resolved type to a placeholder class node, i.e. a ConstructedOuterNestedClass instance 
0, Line, //  create unit vector 
0, Line, //  We need to get the input stream and close it to force the open   file descriptor to be released. Otherwise, we will reach the limit   for number of files open at one time. 
0, Line, //  these are packages in the call stack that are only part of the groovy MOP 
0, Line, //  apply the verifier to have the property nodes generated 
0, Line, // Void.class, 
0, Line, //  Quick method for scalars. 
0, Line, //  safe is not necessary here because "super" is always not null   but keeping the flag would trigger a VerifyError (see GROOVY-6045) 
0, Line, //  launch threads, each one instantiating the scriptClass and running   it numIter times 
0, Line, // TODO: set sender class 
0, Line, //  add inferred type information 
0, Block, /*  3: double  */
0, Line, //  Unexpected node type: '.' found when expecting type: an identifier   fails after parser 
0, Line, //  check that a setter also exists 
0, Line, //  add static property missing setter dispatcher 
0, Line, //    SPECIAL TOKENS 
0, Line, //  methods from GroovyClassDoc 
0, Line, //  mop methods are helper for this and super calls and do direct calls 
0, Line, //  start a block catching any Exception 
0, Line, //  assume closures have only 1 constructor, of the form (Object, Reference*) 
0, Line, //  Multiply by 127 (quickly, via shifts), and mix in some high   bits to help guard against bunching of codes that are   consecutive or equally spaced. 
0, Line, //  false is default, so something to do only in true case 
0, Line, //  unicode now contains the four hex digits   which represents our unicode character 
0, Line, //  visit semi()    SEMI only used inside parser, never visited/created (see visitForCondition(), visitForIterator()) 
0, Line, //  8K 
0, Line, //  Clone all remaining nodes 
0, Line, //  length of s   length of t 
0, Line, //  TODO: set sender class 
0, Line, //  GROOVY-6021 
0, Line, //  this is a corner case, you should not   compare two class nodes if one of them is null 
0, Line, //  set the properties  noinspection unchecked 
0, Line, //         }          return (Double) primitiveArrayPut(array, idx, newValue);      } 
0, Line, //  all arg classes implement interface fallback, so use that as the array component type 
0, Line, //  --> results in XOR 
0, Line, //  args will be replaced 
0, Line, //  --------------------- 
0, Line, //  The mapping only affects the contents of the data rows.   Pass all requests to these rows through the mapping array: "indexes". 
0, Line, //  generic fallback to castToType 
0, Line, //  remove each individual item from left side of Li2 and 
0, Line, //    Create the file and write out the data 
0, Line, //  allow any internal number that is not a floating point one 
0, Line, //  reading the content of the file within a char buffer   allow to keep the correct line endings 
0, Line, //  since Groovy 2.2, it is possible to use FQCN for type checking extension scripts 
0, Line, //  static inner classes don't need this$0 
0, Line, //         }          return (Short) primitiveArrayPut(array, idx, newValue);      }        public static Integer putAt(int[] array, int idx, Object newValue) { 
0, Line, //  GROOVY-7333: filter out Object 
0, Block, /* byte[2] */
0, Line, //  If the source is already open and is passed the line we   want, close it. 
0, Line, //  nothing else to do here 
0, Line, // remove the leading / as we are trying with a leading / now 
0, Line, //     private MethodVisitor mv; 
0, Line, //  same class is always allowed access 
0, Line, //  recalculate in case we have already done some stripping 
0, Line, //  visitForEachClause ...      FOR_EACH_CLAUSE obsolete and should be removed, never visited/created 
0, Line, //  will take care of the rest 
0, Line, //  check upper bound(s) 
0, Line, // expect to get the elementType 
0, Line, //  GROOVY-8002: propagate position to (possibly new) method expression 
0, Block, /*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Jarkko Miettinen */
0, Line, //  cost 
0, Line, //  let's create a default 'it' parameter 
0, Line, //  we are in a case of a type inference failure, probably because code was generated   it is better to avoid using this 
0, Line, //  Check for each property 
0, Line, //  first, fetch the constructor taking String[] as parameter 
0, Line, // mv.visitInsn(ACONST_NULL);  stack.replace(OBJECT_TYPE); 
0, Line, //  do call only for final classes and primitive types 
0, Line, //  store last row update count for executeUpdate, executeInsert and execute 
0, Line, // String pcsFieldName = "this$propertyChangeSupport"; 
0, Line, //  clean the tree by ensuring multi line styles are reset in area   of parsing 
0, Line, //  res stores the first found abstract method 
0, Line, //  ... initialise 
0, Line, // extract the place holders 
0, Line, //  the cached hasNext call value 
0, Line, //  Could be null if there are no errors 
0, Line, //  Check parent classloader, keep the exception for future use 
0, Block, /*                  * Handle raw new line characters.                  */
0, Block, /*              The _only_ special escaping this template engine allows is to escape the sequences:             ${ and <% and potential slashes in front of these. Escaping in any other sections of the             source string is ignored. The following is a source -> result mapping of a few values, assume a             binding of [alice: 'rabbit'].             Note: we don't do java escaping of slashes in the below             example, i.e. the source string is what you would see in a text editor when looking at your template             file:              source string     result             'bob'            -> 'bob'             '\bob'           -> '\bob'             '\\bob'          -> '\\bob'             '${alice}'       -> 'rabbit'             '\${alice}'      -> '${alice}'             '\\${alice}'     -> '\rabbit'             '\\$bob'         -> '\\$bob'             '\\'             -> '\\'             '\\\'             -> '\\\'             '%<= alice %>'   -> 'rabbit'             '\%<= alice %>'  -> '%<= alice %>'              */
0, Block, /*  8: bool    */
0, Line, //             char c = s.charAt(0); 
0, Line, // ---------------------------------------------------------------------------   TYPE SUGAR 
0, Line, //  receivers 
0, Line, //     public int fastHashCode() { 
0, Line, //  otherwise, latest position in line not part of mlr 
0, Line, //  load the exception and rethrow it 
0, Line, //  but add empty body for setter for legacy compatibility 
0, Line, //  GROOVY-7783 use Set for O(1) performance for contains 
0, Block, /*  The Computer Language Shootouthttp://shootout.alioth.debian.org/contributed by Alkis Evlogimenos */
0, Line, //  returns from a closure or method   if   else   do loop   while loop   for loop 
0, Line, //  set all the actions 
0, Line, //  boolean truth   boolean false   missing instance 
0, Block, /*          * Bind request header key-value hash map.          */
0, Line, //  Maybe this type belongs in the same package as the node that is doing the   static import. In that case, the package may not have been explicitly specified.   Try with the node's package too. If still not found, revert to original type name. 
0, Line, //  add the first/last element being always the default value 
0, Line, //  end position in document 
0, Line, //  the returned node is DummyNode<Param1, Param2, Param3, ...) 
0, Line, //  copy annotations from field to legacy dummy field 
0, Line, //  add method: void removePropertyChangeListener(name, listener) 
0, Line, //  compare a list shorter than the range 
0, Line, //  fall through and let the URL be null 
0, Line, //  use evaluate to pass in the BSF variables 
0, Line, //             addError("Annotation " + MY_TYPE_NAME + " member 'value' should be a class literal.", value);              return;          } 
0, Line, //  everything in this package 
0, Line, //  end::jsr223_basic[] 
0, Line, //  command pattern implementation classes  ------------------------------------------------------------------------- 
0, Line, //  Li3 must now be empty 
0, Line, //  Temporary file - delete on exit, create (assured unique name). 
0, Line, //  maybe we are looking for a setter ? 
0, Line, //  package-privates 
0, Line, //  create switch targets 
0, Line, //  a high order bit was encountered, thus the encoding is not US-ASCII   it may be either an 8-bit encoding or UTF-8 
0, Line, // throw a runtime exception if conversion would be out-of-range for the type. 
0, Line, //  Here we instantiate objects representing MetaMethods for DGM methods.   Calls for such meta methods done without reflection, so more effectively. 
0, Line, //  And now the real init work... 
0, Line, //  first find the state defining the label. That is the state   directly after the state not knowing this label. If no state   in the list knows that label, then the defining state is the   current state. 
0, Line, //  fall back to some defaults 
0, Line, //  when resolving prop or field reference 
0, Line, //  the number of arguments is too big, wrap all exceeding elements   in an array, but keep the old elements that are no vargs 
0, Line, //  look into the compile unit if there is a class with that name 
0, Line, //  if alignment target is a wildcard type   then we must make best effort to return a parameterized   wildcard 
0, Line, //  visit arguments as array index 
0, Line, //  skip 
0, Line, //  visit RegexpCtorEnd   visit RegexpLiteral   visit RegexpSymbol      token types REGEXP_CTOR_END, REGEXP_LITERAL, REGEXP_SYMBOL only used inside lexer 
0, Line, //  Methods from GroovyDoc 
0, Line, //  StackOverflow prevention 
0, Line, //  start threads   wait for them to complete 
0, Line, //  register with server 
0, Line, //  last resort look in the category 
0, Line, //  use the generics information from the Closure to further specify the type 
0, Line, //  message 
0, Line, //  GROOVY-6903: May happen in some special environment, like under Android, due   to classloading issues 
0, Line, //  not found  
0, Line, //  dynamic properties 
0, Line, //   --------------------------------------------------------                field handling super: get    -------------------------------------------------------- 
0, Line, // Check for transposition 
0, Line, //  modelled very closely on the commons lang StringUtils replaceEach method 
0, Line, //  remove place holder underscore before starting 
0, Line, // todo        assertEquals("myMethod(int i = 0; i++; i < 10)", pretty("myMethod(int i=0;i++;i<10)")); // not in java 
0, Block, /*          * Creates a new instance of LexerNode           */
0, Line, //  visit body 
0, Line, //  remove all multiples of prime: i 
0, Line, //  Not a macro call 
0, Line, //  first parameters as usual 
0, Line, //  only print parenthesis if is not of form def x = new int[5] 
0, Line, //  Binary expressions 
0, Line, //  invoke overridden toString closure method 
0, Line, //  Expect a comma for an upcoming value   or a closing bracket for the end of the array 
0, Line, //  invoke overridden equals closure method 
0, Line, //  This is an arbitrary value, picked as a reasonable choice for a precision 
0, Line, // ---------------------------------------------------------------------- 
0, Line, //  fill it up path with parts which were not equal 
0, Line, //  potentially allow Collection coercion for a constructor 
0, Line, //  <2, because foo() is same as foo(null) 
0, Block, /* todo */
0, Line, //  When the outer class is resolved, all inner classes are resolved too 
0, Line, //             name = "java/lang/Object";          } 
0, Line, //  Prepare a list to contain the auto-generated column   values, and then fetch them from the statement. 
0, Line, //  initialize the PRINT_PANE (need this so that wrapping 
0, Line, //  do not generate bytecode for private methods 
0, Line, //  any bare string data 
0, Line, //  need to visit even if we only look for a setters for compatibility 
0, Line, //  remove and replace the delete action to another spot so ctrl H later   on is strictly for showing the find & replace dialog 
0, Line, //  ignore the missing method exception   as it means no begin() method is present 
0, Line, //  metaClass is invalid 
0, Line, //  Below are registered as module extension classes              DateUtilExtensions.class,              DateTimeStaticExtensions.class,              DateTimeExtensions.class,              SqlExtensions.class,              SwingGroovyMethods.class,              XmlGroovyMethods.class,              NioGroovyMethods.class 
0, Line, //  Catch any statements not followed by ; 
0, Line, //  Let the thread exit. 
0, Line, //  '7', '8', '9', ':', ';' 
0, Line, //  automatically output the result of each script 
0, Line, // All args have to be boxed since argumentTypes is always boxed 
0, Line, //  range may still be reversed, this value is ignored for inclusive-aware ranges 
0, Line, //  AIC are already done, doing them here again will lead to wrong scopes 
0, Line, //  fall through and attempt other search strategies 
0, Line, //  output AST in format suitable for opening in http://freemind.sourceforge.net   which is a really nice way of seeing the AST, folding nodes etc   uppercase to hide from jarjar 
0, Line, //  working variables 
0, Line, //  the supplied AST was null 
0, Line, //  defines the first variable index usable after 
0, Line, //  for compatibility with the legacy proxy generator, we should throw an UnsupportedOperationException   instead of an AbtractMethodException 
0, Line, //  This is a home-grown implementation which we have not had time   to research - it may perform poorly in some circumstances. It   requires twice the space of an in-place algorithm and makes   NlogN assignments shuttling the values between the two   arrays. The number of compares appears to vary between N-1 and   NlogN depending on the initial order but the main reason for 
0, Line, //  (a=1; a<10; a++)   a,b,c   a,b,c   <String, Object>   "foo${bar}wibble"   class Foo<T extends F>   class Foo<T>   class Foo<T extends F> 
0, Line, //   -------------------------------------------------------- 
0, Line, //    NOTE: This piece of code is heavily inspired by Apaches Jasper2!      http://cvs.apache.org/viewcvs.cgi/jakarta-tomcat-jasper/jasper2/ \          src/share/org/apache/jasper/servlet/JspServlet.java?view=markup     Why doesn't it use request.getRequestURI() or INC_REQUEST_URI?   
0, Line, //  no explicit locale in the template path or resource not found   fallback to the default configuration locale 
0, Line, //  There is no-where else to put this.   Add a mouse listener to the Table to trigger a table sort 
0, Line, //  br to leave a copy of rvalue on the stack. see also isPopRequired() 
0, Line, //         Class[] argClasses = MetaClassHelper.convertToTypeArray(arguments); 
0, Line, //  stack: closure,type,type,closure 
0, Line, //  ternary operator 
0, Line, //  fall back to creation 
0, Line, //    Strip off any type specifier and convert it to lower   case, if present. 
0, Line, //  def bais = new ByteArrayInputStream(baos.toByteArray()) 
0, Block, /*       * Execute the groovy script contained in file.  If missingPermission      * is non-null, then this invocation expects an AccessControlException with missingPermission      * as the reason.  If missingPermission is null, the script is expected to execute successfully.       */
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setErrorHandler(org.xml.sax.ErrorHandler)     */
0, Line, //  int value = 0; 
0, Block, /*  fix for GROOVY-5809  */
0, Line, //  only show the file name and its extension like javac does in its stacktraces rather than the full path 
0, Line, // object.invokeMethod("testInject", null); 
0, Line, //  can't check volatile here as it doubles up with bridge  private static final String EXPECTED_VOLATILE_METHOD_ERROR_MESSAGE = 
0, Block, /*  (non-Javadoc)      * @see groovy.lang.GroovyObject#getMetaClass()       */
0, Line, //  integer overflow cases 
0, Line, //  process sockets 
0, Line, //                 // can't access the field directly but there may be a getter                  mp = null;              } 
0, Line, //  private bridge methods already added 
0, Line, //  no interface in common 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)     */
0, Line, //  add static property missing getter dispatcher 
0, Line, //  prefer primitive type over boxed type 
0, Block, /* | ACC_STATIC */
0, Line, //  Helper methods  ------------------------------------------------------------------------- 
0, Line, //  the document segment 
0, Line, //  we use a map in addition to the internal caching mechanism of Groovy because the latter   will always read from the URL even if it's cached 
0, Line, //  for binary compatibility only, don't use or override this 
0, Line, //  Map to store cached classes 
0, Line, //  fallback 
0, Line, //  normal mode with different paths   important is to not to have a fastpathblock here,   otherwise the per expression statement improvement    is impossible 
0, JavaDoc, /*  * TODO share some code with {@link org.codehaus.groovy.transform.stc.StaticTypeCheckingSupport.ExtensionMethodCache} * * @since 2.5.0  */
0, Block, /*         The use of volatile for value field ensures that       we can detect status changes without synchronization.       The other fields are never changed, and are       marked as final.      */
0, Line, //      sp     !     "     #     $     %     &     ' 
0, Line, //  add a new invoke 
0, Line, // There is not requirement to escape solidus so we will not.                          case '/':                              _buffer[_location] = '\\';                              _location ++;                              _buffer[_location] =  '/';                              _location ++;                              break; 
0, Line, //  array access 
0, Line, // file does not exist! 
0, Line, //  we can get actual parameters directly 
0, Line, //  visit increment 
0, Line, //  Create a dummy ModuleNode to represent a failed parse - in case a later phase attempts to use the ast 
0, Line, // import is like "import Foo as Bar" 
0, Line, //  sort interfaces so that we may ensure a deterministic behaviour in case of   ambiguous fields (class implementing two interfaces using the same field) 
0, Line, // ended, fix column value 
0, Line, //  $Id: echo.java,v 1.1 2004-05-22 07:57:50 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   author: Dirus@programmer.net 
0, Line, //  A fast-path containment check 
0, Line, //  2.5.3 and above gets from annotation attribute otherwise self 
0, Line, // runTest("tree/NestedClosureBugTest.groovy"); 
0, Line, //  This class provides a doubly-linked list that is optimized for the virtual   machine. The first and last elements are manipulated instead of a slightly   more convenient sentinel element to avoid the insertion of null checks with   NullPointerException throws in the byte code. The links to a removed   element are cleared to help a generational garbage collector if the   discarded elements inhabit more than one generation. 
0, Line, //    Temp code to ignore wrapped parameters   The New MOP will deal with these properly   
0, Line, //  maybe we can infer the component type 
0, Line, // ClassLoader currentClassLoader = thread.getContextClassLoader(); 
0, Line, //  check if we can create a URL from that URI 
0, Line, //  $len = array.length 
0, Block, /*  The Ant project  */
0, Line, //  no comparison possible 
0, Line, //  Unknown type: ENUM_DEF   fails after parser 
0, Line, //  left hand side of an assignment : map['foo'] = ... 
0, Line, //  The URL from which we produce Readers. 
0, Line, //  *very* defensive... 
0, Line, //  this map is used to ensure that two errors are not reported on the same line/column 
0, Line, //  13! won't fit into int 
0, Line, //  Declare the loop counter. 
0, Line, //  check for star imports (import static pkg.Outer.*) matching static inner classes 
0, Line, //  load "this" 
0, JavaDoc, /*      * Get the Class Properties of the object under inspection.     *     * @return String array to be indexed by the CLASS_xxx_IDX constants      */
0, Line, //  as anything can be assigned to a String, Class or boolean, return the left type instead 
0, Line, //  record the transforms found in the first scan, so that in the 2nd scan, phase operations  
0, Line, //  Write out size (number of Mappings) 
0, Line, //  case length ==0 handled already   we have now two cases,   the argument is wrapped in the vargs array or   the argument is an array that can be used for the vargs part directly   we test only the wrapping part, since the non wrapping is done already 
0, Line, //  add empty default constructor 
0, Line, //  can happen for compiler rewritten code, where type information is missing 
0, Line, //  just a dummy for later 
0, Line, //  in case if verifier visited the call already 
0, Line, // should be SQLFeatureNotSupportedException instead once we move to Java 1.6 
0, Line, //  throw original 
0, Block, /* <MenuElement> */
0, Line, // All nulls have to be wrapped so that they can be compared 
0, Line, //  ++, !, etc.   ++, etc.   +, -, =, etc.   +, -   prefix +, prefix - 
0, Line, //  pick best fit 
0, Line, //  remove the boolean from the operand stack tracker 
0, Line, //  trait defined in same source unit 
0, Line, //  Increment the count for each non/java src we found 
0, Line, //  define setter/getter helper methods (setter added even for final fields for legacy compatibility) 
0, Line, //                 return effective.getProperty(receiver); 
0, Line, //  load argument i 
0, Line, //  now let's load the various parameters we're passing   we start at index 2 because the first variable we pass   is the owner instance and at this point it is already 
0, Block, /*  4: char    */
0, Line, //  x?:y is equal to x?x:y, which evals to         var t=x; boolean(t)?t:y   first we load x, dup it, convert the dupped to boolean, then    jump depending on the value. For true we are done, for false we   have to load y, thus we first remove x and then load y.    But since x and y may have different stack lengths, this cannot work   Thus we have to have to do the following:   Be X the type of x, Y the type of y and S the common supertype of    X and Y, then we have to see x?:y as          var t=x;boolean(t)?S(t):S(y)   so we load x, dup it, store the value in a local variable (t), then    do boolean conversion. In the true part load t and cast it to S,    in the false part load y and cast y to S  
0, Line, //  because the class may be generated even if a error was found 
0, Block, /*  (non-Javadoc)         * @see java.lang.Object#equals(java.lang.Object)          */
0, Line, //  meta class match receiver 
0, Line, //  Check to support wild card classpath 
0, Line, //  We use BufferedWriter rather than System.getProperty because   it has the security manager rigamarole to deal with the possible exception. 
0, Line, //  load x, dup it, store one in $t and cast the remaining one to boolean 
0, Line, //  you can't parameterize a non-generified type 
0, Line, //  Expect a comma for an upcoming key/value pair   or a closing curly brace for the end of the object 
0, Line, //  left is a float/double and right is a BigDecimal 
0, Line, // Ignored here, just used for exiting the read loop. Yeah I know we don't like  empty catch blocks or expected behavior trowing exceptions, but this just cleaned out the code  _so_ much that I thought it worth it...this once -Matias Bjarland 20100126 
0, Block, /*  We are covering our bet with a safety net.                      otherwise we would have to have 5x buffer                      allocated for control chars  */
0, Block, /*  (non-Javadoc)      * @see groovy.lang.GroovyObject#getProperty(java.lang.String)       */
0, Line, //             // TODO              String importTextWithSlashesInsteadOfDots = extractImportPath(t); 
0, Line, // ---------------------------------------------           GlobalMetaClassVersioning 
0, Line, //  check if there are appropriate class or method annotations   that suggest we have a JUnit 4 test 
0, Line, // + " declared by " + annotation.getClassNode().getName(), 
0, Line, //  initialize and load (recursive call), result ignored 
0, Line, //  path through ScriptBytecodeAdapter 
0, Block, /*  (non-Javadoc)     * @see java.lang.Runnable#run()      */
0, Line, //  _result = HashCodeHelper.updateHash(_result, field) // plus self-reference checking 
0, Line, //  owner first   owner first means we start with the outer most owner that is not a generated closure   this owner is equal to the this object, so we check that one first. 
0, Line, //  set log to consume traces by default, end user can override later 
0, Line, //  Number based methods  ------------------------------------------------------------------------- 
0, Line, //  it's no real property but a property of the component 
0, Line, //  register the new class with the compile unit 
0, Line, //  we should not visit embedded closures recursively 
0, Line, //  GROOVY-6219 
0, Line, //  skip hidden and read-only props 
0, Line, // else if there's a statically typed method or a GDK method 
0, Line, //  set child first 
0, Line, //  Java and JavaScript  -------------------------------------------------------------------------- 
0, Line, // append nothing -> delete ';' 
0, Line, //  adjust typing for explicit math methods which have special handling - operator variants handled elsewhere 
0, JavaDoc, /*      * If the byte has the form 10xxxxx, then it's a continuation byte of a multiple byte character;     *     * @param b a byte.     * @return true if it's a continuation char.      */
0, Line, //  maybe we have C[k1:v1, k2:v2] -> should become (C)([k1:v1, k2:v2]) 
0, Line, //  one of the objects is at the top of the hierarchy 
0, Line, //  make call 
0, Line, //  remove all static, private and package private methods 
0, Line, //  add method:   void addVetoableChangeListener(name, listener) {       this$vetoableChangeSupport.addVetoableChangeListener(name, listener) 
0, Line, //  skip built-in properties 
0, Line, //  first can be class or interface 
0, Line, //  .   ..   ... 
0, Line, //  GROOVY-5890 
0, Line, //  also check interfaces in case we have interfaces with nested classes 
0, Line, //  The SourceUnits from which this unit is built   Summary of each SourceUnit   Summary of each SourceUnit   Summary of each Class   Names for each SourceUnit in sources. 
0, Line, // ---- additional 
0, Line, //  should we throw a validation failed exception?  or fail quietly? 
0, Line, //  lib.Foo is imported later that api.Foo, so groovydoc tries to resolve to lib.Foo first. 
0, Line, //  if we finished before hitting the end of the checkpoint from   no mroe matches, then set ensure the text is reset to the   defaultStyle 
0, Line, //  exception blocks list 
0, Line, //  public|protected 
0, Line, //  Decided against syntax exception since this is not a syntax error.   The down side is we lose line number information for the offending   @Grab annotation. 
0, Line, //  ignore 
0, Line, //  get the new value to emit in the event 
0, Line, //  give precedence to methods of self (but not abstract or static superclass methods) 
0, Line, //  indexes into arrays s and t 
0, Line, //     public GroovyAnnotationTypeDoc asAnnotationTypeDoc() {/*todo*/          return null;      }        public GroovyClassDoc asClassDoc() {/*todo*/          return null;      }        public GroovyParameterizedType asParameterizedType() {/*todo*/          return null;      }        public GroovyTypeVariable asTypeVariable() {/*todo*/          return null;      }        public GroovyWildcardType asWildcardType() {/*todo*/          return null;      }        public String dimension() {/*todo*/          return null;      } 
0, Line, //  currently temporary variables in use 
0, Line, //  visit lbrack()     token type LBRACK only used inside parser, never visited/created 
0, Line, //  INSTANCE METHODS 
0, Line, //  get same description but with paths relative to root 
0, Line, //  print the methods from traits 
0, Block, /* Double[16] */
0, Line, // ---------------------------------------------                    byte  --------------------------------------------- 
0, Line, //  visit WS - only used by lexer 
0, Line, //  let's try load it from the classpath 
0, Line, //  look for quick exit 
0, Line, //  check if param part of control structure - but not if inside instanceof 
0, Line, //  not a valid import type, do not modify the code 
0, Block, /*  * The Great Computer Language Shootout  * http://shootout.alioth.debian.org/ *  * modified by Mehmet D. AKIN *  */
0, Block, /*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Tony Seebregts   modified by  */
0, Line, //  return new Foo(new ShellContext(args)).run() 
0, Line, //     public GroovyTag[] firstSentenceTags() {/*todo*/return null;}      public GroovyTag[] inlineTags() {/*todo*/return null;} 
0, Line, //  Map interface 
0, Line, //  can't remember the exact Josh Bloch algorithm and I've not got the book handy   but its something like this IIRC 
0, Line, //  DO NOT USE isStatic variable here! 
0, Line, //  this is just a simple set field handling static and non-static, but not Closure and inner classes 
0, Block, /*  ******** java.time.ZoneOffset extension methods ********  */
0, Line, //  slightly strange as subsequent visit is done after closing visit 
0, Line, //  exits a loop or block   restarts a loop on the next iteration   switch block   item in a switch block   catch-all item in a switch block 
0, Line, //  GROOVY-6706: Sometimes an NPE is thrown here.   The reason is that our transform is getting called more than once sometimes.   
0, Line, //  GROOVY-5585 
0, Line, //  replace all calls for this with the correct MOP method 
0, Line, //  char as left expression 
0, Line, //  finally block to clean assertion recorder 
0, Line, //  = 
0, Line, //  expr?foo:bar 
0, Line, //  rewrite it so that it can be statically compiled 
0, Line, //  lets check that the argument types are valid 
0, Line, //  a.k.a. "variable arity parameter" in the JLS 
0, Line, // least give the user a sporting chance 
0, Line, //  global functions namespace  
0, Line, // ---------------------------------------------------------------------------   MEMBER ACCESS 
0, Line, //  handle an escaped value 
0, Block, /*  1: int     */
0, Line, //  remove contexts created after we started 
0, Line, // classes, interfaces, class/instance vars and methods 
0, Line, //  ---- 
0, Line, //  int x int 
0, Line, //  test Integer[] 
0, Line, //  bean-style constructor 
0, Line, //         Expression value = node.getMember("value"); 
0, Line, // ---------------------------------------------------------------------------   OPERATIONS 
0, Line, //  GROOVY-9035 supply a "no-op" CompilationCustomizer if none found to make DSL friendly for empty case 
0, Line, //  ELSE keep original char   and pushback the one we just read 
0, Line, //  Manually wire beans together. 
0, Line, //  create next() method, code:       Day next() {          int ordinal = ordinal().next() 
0, Line, //  build the pieces 
0, Line, //  we assume arity related errors are already handled here. 
0, Line, //  declaration visibility   declaration visibility   declaration visibility 
0, Line, //  support list[1..-1] 
0, Line, //  GROOVY-4922: Due to a numbering scheme change, we must find the super$X$method which exists   with the highest number. If we don't, no method may be found, leading to a stack overflow 
0, Line, //  handle conversion to boolean 
0, Line, //  if left type is array, we should check the right component types 
0, Line, //  ------------------ byte ------------------ 
0, Line, //  potentially add a no-arg constructor too 
0, Line, //  Print the length 1 & 2 counts. We know the offsets of the tasks, so we can cheat. 
0, Line, //             result = 31 * result + (compileTimeClassNode != null ? compileTimeClassNode.hashCode() : 0); 
0, Line, //  any number can be assigned to a big decimal 
0, Line, //  call for checking if method is still valid 
0, Line, //  build up the metaproperties based on the public fields, property descriptors, 
0, Line, //  assume must be static class field or enum value or class that Java can resolve 
0, Line, //  create a new array for the vargs and copy them 
0, Line, //  ex: LUB type 
0, Line, // usualy name has text 
0, Line, //  guard every class and method defined in this script 
0, Block, /*  The Computer Language Benchmarks Game http://shootout.alioth.debian.org/ contributed by James McIlree  */
0, Line, //  GROOVY-8531: Fail to resolve type defined in super class written in Java 
0, Line, //  if set to true the name getGenericsTypes consists 
0, Line, //  Provide access to engine context, if context var is not already provided 
0, Line, //    It's not the greatest of design that the interface allows this, but it   is a tradeoff with convenience, and the convenience is more important. 
0, Line, //  snapshot of table   current slot    current node of slot   key for current node   value for current node   last node returned by next 
0, Line, //  instanceof applies, stash away the type, reusing key used elsewhere 
0, Line, //  only visit the expression 
0, Line, //  actually has the most recent cost counts 
0, Block, /* @ClosureParams(value=FromString.class, options="?,Integer") */
0, Line, //  visitDollar ...     token type DOLLAR never created/visited, see SCOPE_ESCAPE instead 
0, Line, //  force <clinit> 
0, Line, //  unwrap to the real exception 
0, Line, // n*n version 
0, Line, //  retry with raw types 
0, Line, //  According to http://michaelscharf.blogspot.jp/2006/11/javaneturlequals-and-hashcode-make.html, use java.net.URI instead. 
0, Line, //  meta class check with boolean holder 
0, Line, // LOGME   ignore it, likely failing because we are faking out properties   such as a call to Math.min(int, BindPathSnooper) 
0, Line, //  used to ensure that hasNext has been called 
0, Line, //  load property name 
0, Line, //  remove the result of the method call 
0, Line, //  now try with flow type instead of declaration type 
0, Line, //  3 from JMock 
0, Line, //  the context we compare with in the end is the one of the callsite   so far we specified the context of the method declaration only 
0, Line, //  and mark as ambiguous if needed 
0, Line, //  Since normalizing did not help, use original values at user's risk 
0, Line, //  straight xstream output of AST 
0, Line, //  test default imports 
0, Line, //  cache first element, avoid swapping perm[0] and perm[k] 
0, Line, //  at this point the receiver will be already on the stack 
0, Line, // isCase 
0, Line, //  we may have to add a check and remove this part of the code 
0, Line, //  using it here is that, unlike qsort, it is stable. 
0, Line, //  strings must be equal except for the last character 
0, Line, //  skip the LF in CR LF 
0, Line, //  ------------------ char ------------------ 
0, Line, //  Not loaded, try to load it 
0, Line, //  we need this method as trick to guarantee correct method selection 
0, Line, //  check that direct access is allowed 
0, Line, //  write "this" 
0, Line, //  add methods declared by DGM for interfaces 
0, Line, //  next & previous 
0, Line, //  else go to object case 
0, Line, //  detect namespace declared on the added node like xmlns:foo="http:/foo" 
0, Line, //  ContentHandler interface  ------------------------------------------------------------------------- 
0, Line, //  GROOVY-4833 : annotations that are not Groovy transforms should be transferred to the generated field 
0, Line, //  Now this is a bit unusual 
0, Line, //  implicit closure coercion in action! 
0, Line, //  should be limited to the current SourceUnit or propagated to the whole CompilationUnit 
0, Line, //  instantiate a runnable and run it 
0, Line, //  end::precompiled_java_extension[] 
0, Line, //  equal class, nothing to do 
0, Line, //  if left and right are primitives or numbers allow 
0, Line, //  throws FileNotFoundException { 
0, Line, //  get encoding 
0, Line, //  we remove it here, because addProperty will add it   again and we want to avoid it showing up multiple   times in the fields list. 
0, Line, //  we have something like A.B.this, and need to make it   into this.this$0.this$0, where this.this$0 returns   A.B and this.this$0.this$0 return A. 
0, Line, //  if we still haven't found the file, point back to the originally specified filename 
0, Line, //  create a shell   register the mgr with object name "bsf" 
0, Line, //  cleanup temporary variables 
0, Line, //  applied to class names   applied to interface names   applied to mixin names   applied to method names   applied to property names   applied to method/closure parameter names 
0, Line, //  ignore trait methods which have a default implementation 
0, Line, //  we are calling an outer class method 
0, Line, // IGNORED_PACKAGES.add("java.lang.reflect"); 
0, Line, //  create and add the undo/redo manager 
0, Line, //  a four-bytes sequence was encountered 
0, Block, /*  The Computer Language Shootout   http://shootout.alioth.debian.org/   benchmark implementation (not optimized)   JRE 1.5 only   contributed by Josh Goldfoot  */
0, Line, //  tag::jsr223_invocable[] 
0, Line, //  fetch all the nodes in this AST into a List 
0, Line, //  have to remove 1 because of the GOTO 
0, Line, //  GROOVY-7363: There can be multiple matches for a getter returning a generic parameter type, due to   the generation of a bridge method. The real getter is really the non-bridge, non-synthetic one as it   has the most specific and exact return type of the two. Picking the bridge method results in loss of   type information, as it down-casts the return type to the lower bound of the generic parameter. 
0, Line, //  Check for nulls 
0, Line, //    Nested task adapters   
0, Line, //  if the file has a Byte Order Marker, we can assume the file is in UTF-xx 
0, Line, //  push new node on stack 
0, Line, //  when resolving the outer class later, we set the resolved type of ConstructedOuterNestedClass instance to the actual inner class node(SEE GROOVY-7812(#2)) 
0, Line, //  ignore result 
0, Line, //  we print the error, but we don't stop with an exception here   since it is more comfortable this way for development 
0, Line, //  add the undo actions 
0, Block, /* <Constructor[]> */
0, Line, //  since there can be field init statements that depend on method/property dispatching   that uses this$0, it needs to bubble up before the super call itself (GROOVY-4471) 
0, Line, //  class, interface, mixin   public, private, abstract, etc. 
0, Line, //  and to differentiate from static fields otherwise 
0, Line, //  check that the node doesn't belong to the list of declared constructors 
0, Line, //  fall back to cast 
0, Line, //  it is idiotic story but if config map doesn't allow null values (like Hashtable)   we can't do too much 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeMethod(java.lang.Object, java.lang.String, java.lang.Object)      */
0, Line, //  GROOVY-5940 
0, Line, //  add methods 
0, Line, //  but that's protected and unavailable to us. 
0, Line, //  other primitives 
0, Line, //  GROOVY-8272 support inherited static methods 
0, Line, // nothing 
0, Line, //  ignore, too bad so sad they don't follow conventions, we'll just leave the listener attached 
0, Line, //  start on the text that was replaced 
0, Line, //  if enum constants have been used, check if they are all valid 
0, Line, //  GROOVY-6849: prefer extension methods in case of ambiguity 
0, Line, //  if convenience hack did not make classes match,   throw exception when starting with known class, and thus "from" cannot be advanced over "to".   Note if start is an unusual Object, it could have a next() method   that yields a Number or String to close the range 
0, Line, //  should we verify the property is valid? 
0, Line, //  this *is* verbose! ;) 
0, Block, /*  Holds the actual map that will be lazily created.  */
0, Line, //  adjust the first statement if it's a super call 
0, Line, //  If the first thing is an value, then we need a dummy empty string in front of it so that when we   toString it they come out in the correct order. 
0, Line, //  to be used in generics, type must be boxed   to be used in generics, type must be boxed 
0, Line, //  this is used to store the goals for a "continue foo" call 
0, Line, //  break once idx goes to -1 or for case of empty string once   we get to the end to avoid JDK library bug (see GROOVY-5858) 
0, Block, /*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Alexei Svitkine */
0, Line, //  stack: closure,curriedClosure 
0, Line, //  imagine we have: list*.foo = 100   then the assignment must be checked against [100], not 100 
0, Line, //  $Id: wc.java,v 1.2 2004-06-20 08:39:47 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   with help from Dirus@programmer.net 
0, Line, //  Use our privileged access in order to prevent checks lower in the call stack.  Otherwise we would have   to grant access to IDE unit test runners and unit test libs.  We only care about testing the call stack   higher upstream from this point of execution. 
0, Line, //  null check because of http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4803836 
0, Line, //  unimplemented abstract methods from interfaces 
0, Line, //   Potentially throws Exception. 
0, Line, //  reset last 
0, Block, /*  * Test classes extracted and adapted from the AssertJ project.  */
0, Line, //  not in java   empty regexp_literal should be treated as single line comment // not in java 
0, Line, //  since we have B and want to get A we start with the most    outer class, put them together and then see if that does   already exist. In case of B from within A$B we are done    after the first step already. In case of for example   A.B.C.D.E.F and accessing E from F we test A$E=failed,    A$B$E=failed, A$B$C$E=fail, A$B$C$D$E=success 
0, Line, //    KEYWORDS: PRIMITIVE TYPES 
0, Line, //  default to Number class in exception details, else use the specified Number subtype. 
0, Line, //  look for one of these:     import static SomeClass.method [as otherName] 
0, Line, //  racy, multiple threads may set cachedValues but rather have that than take a write lock 
0, Line, //    Strip off the sign, if present 
0, Line, //  invokeMethod 
0, Line, //  Define false < true 
0, Line, //     public MethodVisitor getMethodVisitor() {          return mv;      } 
0, Line, //  assume the first param is the delegate by default 
0, Line, //  check if it's a property 
0, Line, //  Check if the annotation target is correct, unless it's the target annotating an annotation definition   defining on which target elements the annotation applies 
0, Line, //  standard closure (2 methods because "it" is with default null) 
0, Line, //  cleanup stack 
0, Line, //  ------------------------   feature: type parameters 
0, Block, /*      * Wrap an existing setter.      */
0, Line, // CHECKSTYLE.OFF: VisibilityModifierCheck - special case, direct access for performance 
0, Line, //  That's what you get for "1.0". 
0, Line, //  remove all the * from beginning of lines 
0, Line, //  fall back after method change 
0, Line, // unbox primitives 
0, Line, //  emulate named params constructor 
0, Line, //  whenever a method using a closure as argument (typically, "with") is detected, this list is updated 
0, Line, //  let's ignore exception and return the original object   as the caller has more context to be able to throw a more   meaningful exception (but stash to get message later) 
0, Line, //  mutate the tree when in Javaland 
0, Line, // accept_FirstChild_v_SecondChild_v(t); 
0, Line, //                         value = next.stripTrailingZeros().hashCode();                      }                  }                  hashCode = 31 * hashCode + value;              }              canonicalHashCodeCache = hashCode;          }          return canonicalHashCodeCache;      } 
0, Line, //  ensure exact matches are preferred over vargs 
0, Line, // The number 8 below represents the number of characters in the header of a non-string-section such as  <% ... %>. A section like this is represented in the target script as:  out<<"""......."""  12345678 
0, Line, //  for call result 
0, Line, //  we want this exception exposed. 
0, Block, /*              *  this happens             *  *    when groovyc calls FileSystemCompiler in forked mode, or             *  *    when FileSystemCompiler is run from the command line directly, or             *  *    when groovy was not started using groovyc or FileSystemCompiler either              */
0, Line, //  invoke via metaclass 
0, Line, //  map the nodes to Groovy types 
0, Line, // regexpr 
0, Line, //  still not method here, so see if there is an invokeMethod method up the hierarchy 
0, Line, //  should the open block provide final information we apply that 
0, Line, //  fall back for parameterless constructor 
0, Line, //  got here to property not found, look for getProperty or setProperty overrides 
0, Line, //  now the optional exception expression 
0, Line, //  multiple declaration 
0, Line, //  test ranges 
0, Line, //  meta class match receiver   metaClass still be valid 
0, Line, //  stores if on left-hand-side during compilation 
0, Line, //  We'll be silent here.   If the URI scheme is unknown or not hierarchical, then we just can't help them and shouldn't cause any trouble either.   addError("Attribute \"root\" has value '" + root + "' which can't be turned into a valid URI relative to it's source '" + getSourceUnit().getName() + "' @" + node.getClassNode().getNameWithoutPackage() + " annotations", node); 
0, Line, //  copy the list to Li2 (not by individual items) 
0, Line, //  memorize current assignment context 
0, Line, //  if we have a BinaryExpression, let us check if it is with   subscription 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.Closure#setDelegate(java.lang.Object)          */
0, Line, //  true part: load x and cast to S 
0, Line, //  store the type of parameter and block type as meta information 
0, Line, // those classes implement a method with a better exact match. 
0, Line, //  store value into array 
0, Line, //  invoke overridden hashCode closure method 
0, Line, //  Method invocation tests  ------------------------------------------------------------------------- 
0, Line, // sb.append(", siblings=").append(siblings); 
0, Line, //  let's assume it's a collection of 1 
0, Line, //                     } 
0, Line, // ---------------------------------------------------------------------------   INITIALIZATION AND SUCH 
0, Line, //  we should infer the type of the exception from the expression 
0, Line, //  For ' and " we only escape if needed. As far as XML is concerned, 
0, Line, //   --------------------------------------------------------                normal field handling : get    -------------------------------------------------------- 
0, Line, //  the method represents the operation type only, and we must add an assignment 
0, Line, //  lets run the script 
0, Line, //  try to find the cached value again 
0, Line, //  We could jump through some hoops to have GroovyShell make our script name, but that seems unwarranted.   If we *did* jump through that hoop then we should probably change the run loop to not recompile   the script on every iteration since the script text can't change (the reason for the recompilation). 
0, Line, //  add flags 
0, Line, //  GROOVY-6373: references to 'log' field are normally already FieldNodes by now, so revisit scoping 
0, Line, //  of 1 element describing the name of the placeholder 
0, Line, //  vargs need special attention and transformation though 
0, Line, // ---------------------------------------------------------------------------   PARSING SUPPORT 
0, Line, //  if <0, probably an AST transform or internal code (like generated metaclass field, ...) 
0, Line, //  if this an Array, then add the special read-only "length" property 
0, Line, //  No need to print 'def' if we already have some modifiers 
0, Line, //  use linked hash set so order is preserved 
0, Line, //  assume completely blank line signifies end of sentence 
0, Line, //  Prefix expressions 
0, Line, //  protected implementation methods - extension points for subclasses  ------------------------------------------------------------------------- 
0, Line, //  protected static VetoableChangeSupport this$vetoableChangeSupport = new java.beans.VetoableChangeSupport(this) 
0, Line, //  copy default one, may override later 
0, Line, //  read only property 
0, Line, //  we need to cheat using the type 
0, Line, //  we are first, save the streams 
0, Line, //  GROOVY-4548: temp fix to stop CCE until proper support is added 
0, Block, /* Byte[3] */
0, Line, //  If last element is not being removed shift the last element into this slot 
0, Line, //  look for possible legacy fields (trait compiled pre 2.4.8) 
0, Line, //  add it to the class 
0, Line, //  prevents the proxy from being abstract 
0, Line, //  return the completed node 
0, Line, //  Li2 must now be empty   remove each individual item from right side of Li3 and 
0, Line, //  reading the content of the file within a byte buffer 
0, Line, //  GROOVY-8868 don't want an empty body to cause the constructor to be deleted later 
0, Line, //  as in Target.execute() 
0, Line, //    because of reverse iteration use ArrayList 
0, Line, //  32767 is the command line length limit on Windows 
0, Line, //  removes one Object[] leaves the int containing the 
0, Line, //  "case", "default", "}"   "case", "default" 
0, Line, //  void f(String ... others) {} 
0, Line, //  then resolve receivers from method arguments 
0, Line, //  RFC2396 
0, Line, //       8     9     :     ;     <     =     >     ? 
0, Line, //  now mutate (groovify) the ast into groovy 
0, Line, //  stack clean 
0, Line, //  just in case remove carriage returns 
0, Line, //  cast to Object to test routing through equals(Object) 
0, Line, //  perform regular type conversion 
0, Line, //  try matching against 'prefix:localname' 
0, Line, //  now create the MetaProperty object 
0, Line, //  resolve method return types and parameter types 
0, Line, // ----------------------------------------------------------------------   Unwrap wrapped values fo now - the new MOP will handle them properly 
0, Line, //  double   no possible loose here 
0, Line, //  fail fast! if we got a malformed URL the Classloader has to tell it 
0, Line, //  check for stray labeled arguments: 
0, Line, //    Add the sign back, if necessary 
0, Line, // Check for transposition, somewhat more complex now since we have to check for case 
0, Block, /*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/    contributed by Isaac Gouy  */
0, Line, //  each interface may have one or more "extends", so we must find those 
0, Line, //  We can compare here by length, because pname is always   a substring of name, so same length means they are equal. 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)      */
0, Line, //  we have a call to super here, so we need to add   our code after that 
0, Line, //     def optionals = [[0, 1], [0, 1], [0, 1], [0, 1]].combinations{ a, b, c, d ->              (a ? hex('80') : 0) + (b ? hex('10') : 0) + (c ? hex('8') : 0) + (d ? hex('2') : hex('1'))      }.sort() 
0, Line, //  match URIs but not Windows filenames, e.g.: http://cnn.com but not C:\xxx\file.ext 
0, Line, // throw new NullPointerException("Cannot invoke method " + methodName + "() on null object"); 
0, Line, //  create our own local copy of the closure 
0, Block, /*  multiply vector v by matrix A and then by matrix A transposed  */
0, Line, //  and remove the final modifier from classNode to allow the sub class 
0, Line, // operandStack.box(); 
0, Line, // todo push through InvokerHelper.asList? 
0, Line, //  make sure we keep primitive types 
0, JavaDoc, /*      * If the byte has the form 110xxxx, then it's the first byte of a two-bytes sequence character.     *     * @param b a byte.     * @return true if it's the first byte of a two-bytes sequence.      */
0, Line, //  if right is a constant, then we optimize only if it makes   a block complete, so we set a maybe 
0, Line, //  ------------------------------   helper methods  ------------------------------ 
0, Line, //  ------------------------ 
0, Line, //  the constructors for our script class have already run. 
0, Line, //    Run the generation and create the class (if required) 
0, Line, //  choose the distance to Object if a parameter is null   this will mean that Object is preferred over a more   specific type 
0, Line, //  visit Vocab - only used by Lexer 
0, Line, //  This is a good point to call t.setSnippet(),   but it bulks up the AST too much for production code. 
0, Block, /*  field and declaration we don't return false  */
0, Line, //  star imports 
0, Line, //  there might be annotations not present in the classpath   e.g. java.lang.Synthetic (http://forge.ow2.org/tracker/?aid=307392&group_id=23&atid=100023&func=detail)   so skip them 
0, Line, //  place holder for "empty" synchronized blocks, for example   if there is only a break/continue. 
0, Line, //  GROOVY-5620: Spread safe/Null safe operator on LHS is not supported 
0, Line, //  load argument array 
0, Line, //  constructor call is in static context and the inner class is non-static - 1st arg is supposed to be    passed as enclosing "this" instance   
0, Line, // ----------------------------------------------------------------------   setter 
0, Line, //  Comment Summary using first sentence (Locale sensitive) 
0, Line, //  for the redirect 
0, Line, //  if rightExpression is null and leftExpression is not a primitive type, it's ok 
0, Line, //  TODO allow string quoting delimiter to be specified, e.g. ' vs " 
0, Line, //  now iterate over the map of property descriptors and generate   MetaBeanProperty objects 
0, Block, /*  ******** java.time.LocalDate extension methods ********  */
0, Line, //  Use setUp/tearDown to avoid mucking with system properties for other tests... 
0, Line, //  Constructor is actually "FooAdapter(FooImpl foo)",   but it should show "Foo" as the link text, not "FooImpl". 
0, Line, //  enable recompilation? 
0, Line, //                     element = new MetaBeanProperty(mp.getName(), mp.getType(), null, mp.getSetter());                  } 
0, Line, //  In a method call with SAM coercion the inference is to be   understood as a two phase process. We have the normal method call   to the target method with the closure argument and we have the   SAM method that will be called inside the normal target method.   To infer correctly we have to "simulate" this process. We know the   call to the closure will be done through the SAM type, so the SAM   type generics deliver information about the Closure. At the same   time the SAM class is used in the target method parameter,   providing a connection from the SAM type and the target method   declaration class. 
0, Line, //  items.inject([]){ ss, h -> ss.collect { it + [h] }  + ss + [[h]] } 
0, Line, // ---------------------------------------------------------------------------   OPERATOR PRECEDENCE 
0, Line, //  right expression is the subscript expression   we store the result of the subscription on the stack 
0, Line, //  0 is the key, 1 is the value 
0, Line, //  for example, LHS is List<ConcreteClass> and RHS is List<T> where T is a placeholder 
0, Line, //  alreadyVisitedMethods prevents from visiting the same method multiple times 
0, Line, //  try to find a method for the operation 
0, Line, //  javax.script.Invokable methods. 
0, Line, //  we use a hard index instead of incrementing the _i variable due to previous 
0, Line, //  ... find next position 
0, Line, //    KEYWORDS: (PRIMARILY) CLASS/METHOD DECLARATION MODIFIERS 
0, Line, //  check to see if an external file is needed 
0, Line, //  CLASS VARIABLES 
0, Line, //  GROOVY-6344 
0, Line, //    Determine radix (default is 10). 
0, Line, //  true if it's a static method 
0, Line, //  left classloading very simple in light of potential changes needed for jdk9   that means you might need @GrabConfig(systemClassLoader=true) if getting json via grab              ClassLoader rootLoader = DefaultGroovyMethods.getRootLoader(loader); 
0, Line, //  tear stuff down, even if we are half built 
0, Line, //  if you have a Bar class with a static foo property, and this:     import static Bar.foo as baz   then this constructor (not normal usage of statics):     new Bar(baz:1)   will become:     new Bar(foo:1) 
0, Line, //  check if it's a trait 
0, Line, //    TYPE GROUPS (OPERATIONS SUPPORT) 
0, Line, // skip : 
0, Line, // puts ("key", key, "value", value); 
0, Line, //  fields and properties 
0, Line, //  method call receivers are :     - possible "with" receivers     - the actual receiver as found in the method call expression     - any of the potential receivers found in the instanceof temporary table   in that order 
0, Line, //  ------------------ boolean ------------------ 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.Writable#writeTo(java.io.Writer)     */
0, Line, //  GROOVY-5939 
0, Line, //  if constructor call is not in static context, return 
0, Line, // all entries are guaranteed to be EntryWithValue. Value can only be null if computeValue returns null 
0, Line, //                     value = 0; 
0, Line, //  "unable to resolve class" error can be thrown already, no need to `addError`, so just return 
0, Line, //  todo precompile regex 
0, Line, //  The class is not in the tree being documented 
0, Line, //  not in a closure or within an inner class 
0, Line, //  visitLiteralImport     token type "import" only used by parser, never visited/created directly 
0, Block, /*  InvocationHandler implementation.  */
0, Line, //  (JLS §9.1.1.1). Such a class file must not have its ACC_FINAL, ACC_SUPER or ACC_ENUM flags set. 
0, Line, //  setter 
0, Line, //  if size is >1, then the method was overwritten or something, we ignore that   if it is an error, we have to test it at another place. But size==0 is   an error, because it means that no such attribute exists. 
0, Line, //  If we fail, then exit with an error so scripting frameworks can catch it. 
0, Line, //  $Id: strcat.java,v 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Pelle Nilsson suggested we also illustrate StringBuffer   since it is the preferred method for concatenating    strings in Java 
0, Line, //  we may need to pass in some other constructors 
0, Line, //  don't rewrite assertions w/o source text 
0, Line, //  This may deadlock so run in a separate thread 
0, Line, //  We limit the inner class lookups here by using ConstructedClassWithPackage.   This way only the name will change, the packagePrefix will   not be included in the lookup. The case where the   packagePrefix is really a class is handled elsewhere. 
0, JavaDoc, /*      * Compute factorial (TODO: expose this)     *     * @param n the input integer     * @return the factorial for n      */
0, Line, //  init declarations 
0, Line, //  in that case, the inferred type of the binary expression is the type of the RHS   "completed" with generics type information available in the LHS 
0, Line, //  applied to the optional "(" that marks a call to a method   applied to "(" that marks a type cast   applied to "{" that marks a block   applied to "{" that marks a closure   applied to a statement label   applied to "?" that marks a ternary expression   applied to "{" that marks an array initializer 
0, Line, //  complete rhs: load b, call operation [load sub, call arraySet] 
0, Block, /*  ******** java.time.YearMonth extension methods ********  */
0, Line, //  precompiled trait 
0, Line, //  java (special name used for testing) 
0, Line, // this.project.setInputHandler(new DefaultInputHandler()); 
0, Line, //       the instance defining the class. 
0, Line, //  an integer number 
0, Line, //  we have C[] if the list is empty -> should be an array then! 
0, Line, //  objects are equal 
0, Line, //  Regular expression pattern used to identify words ending in 'y' preceded by a consonant 
0, Block, /*          * Grab the servlet context.          */
0, Line, //  totally empty in the case of [:] 
0, JavaDoc, /*      * If the byte has the form 1110xxx, then it's the first byte of a six-bytes sequence character.     *     * @param b a byte.     * @return true if it's the first byte of a six-bytes sequence.      */
0, Line, //  skip non-Strings, e.g. Integer 
0, Line, //  rotate down perm[0..r] by one 
0, Line, // do nothing              
0, Block, /*      * To make sure the MethodCallExpression is visited and we do not test against     * the default value of isImplicitThis      */
0, Line, //   --------------------------------------------------------                field handling super: set    -------------------------------------------------------- 
0, Line, //  a groovy instance (including builder, closure, ...) 
0, Line, //  factory type may be references as fully qualified, an import, or an alias  default package 
0, Line, //  we need special code for arrays to store the result (like for a[1]++) 
0, Line, //  Funky rule so that names like 'pNAME' will still work. 
0, Line, //  pull them out of package node but treat them like they were on class node 
0, Line, //         }          return (Character) primitiveArrayPut(array, idx, newValue);      }        public static Short putAt(short[] array, int idx, Object newValue) { 
0, Line, //             fastHashCodeCache = result;          }          return fastHashCodeCache;      } 
0, Line, //  GROOVY-7812(#2): Static inner classes cannot be accessed from other files when running by 'groovy' command 
0, Line, //  above in parseDocument()) 
0, Line, //                 return mp.getProperty(object); 
0, Line, //  It was no primitive type, so next we see if the name,   which is a vanilla name, starts with a lower case letter.   In that case we change it to a LowerCaseClass to let the   compiler skip the resolving at several places in this class. 
0, Line, //  message name 
0, Line, //    Create a reader on the source and run the parser. 
0, Block, /*  (non-Javadoc)           * @see groovy.lang.MetaMethod#invoke(java.lang.Object, java.lang.Object[])            */
0, Line, //  ant's <javac> supports nested <compilerarg value=""> elements (there can be multiple of them) 
0, Line, //  since the object does not have a valid compareTo method   we compare using the hashcodes. null cases are handled by   DefaultTypeTransformation.compareTo   This is not exactly a mathematical valid approach, since we compare object   that cannot be compared. To avoid strange side effects we do a pseudo order   using hashcodes, but without equality. Since then an x and y with the same   hashcodes will behave different depending on if we compare x with y or   x with y, the result might be unstable as well. Setting x and y to equal   may mean the removal of x or y in a sorting operation, which we don't want. 
0, Line, //  1 + 1   [1..<10]   [1..10]   a << b   foo*.bar   a >> b   a * b   or    import foo.*   x ** 3   trait Foo... 
0, Line, //  Methods from Comparable 
0, Line, //  we always adds meta methods to class itself 
0, Block, /*             since there is no DUP4 we have to do this:            DUP2_X1            POP2            DUP2_X1            DUP2_X1            POP2            DUP2_X1                    */
0, Line, //  After normalisation, 'from' may be greater than 'to'. In that   case, we need to reverse them and make sure the range's 'reverse'   property is correct.   TODO We should probably use DefaultGroovyMethodsSupport.subListBorders(), 
0, Line, // nothing else possible 
0, Line, //  validate date format pattern 
0, Line, //                         // workaround on pre-Java8 for http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6480539                          value = BigDecimal.ZERO.hashCode(); 
0, Line, //  <class_name>( 
0, Line, // for typical user math. 
0, Line, //  Setup the configuration data 
0, Line, //  TODO use pList and fList 
0, Line, //  TODO use it or lose it 
0, Block, /*  We copy all returned values from the getValue call in casean optimised model is reusing one object to return many values.The Number subclasses in the JDK are immutable and so will not be used inthis way but other subclasses of Number might want to do this to savespace and avoid unnecessary heap allocation. */
0, Line, //  ContentHandler interface 
0, Line, //  we need to add parameters 
0, Line, //  Properties  ------------------------------------------------------------------------- 
0, Line, // appropriate line in the source template data 
0, Line, //  import is like "import static foo.Bar.*"   packageName is actually a className in this case 
0, Line, //  minimum of cell to the left+1, to the top+1, diagonally left and up +cost 
0, Line, //    Run the Verifier on the outer class 
0, Line, //  this program is modified from:     http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html   Timing Trials, or, the Trials of Timing: Experiments with Scripting   and User-Interface Languages</a> by Brian W. Kernighan and   Christopher J. Van Wyk. 
0, Line, //  copy statements from static and instance init blocks 
0, Line, //  with transform detection alone these phases are inaccessible, so don't add it 
0, Line, //  let's assign all the parameter fields from the outer context 
0, Line, //  def _result = super.clone() as cNode 
0, Line, // ignore 
0, Line, // load insertion index 
0, Line, //  If the line source is closed, try to open it. 
0, Block, /*  never true for batchSize of 0  */
0, Line, //  Typically, Android can throw ClassNotFoundException 
0, Line, //  we already know there are at least params.length elements in both arrays 
0, Line, //  really, this should never happen, it's evidence of corruption if it does 
0, Line, //  GroovyClassLoader should be able to find classes compiled from java sources 
0, Line, //  attempt resolution on all types, so don't short-circuit and stop if we've previously failed 
0, Line, //  all arguments are Object but last, which is a vargs argument, that   will fit all, so just test if the number of argument is equal or   more than the parameters we have. 
0, Line, //  {@code processing hack} 
0, Line, //  br: the old logic seems to add static to all def f().... in a script, which makes enclosing   inner classes (including closures) in a def function difficult. Comment it out. 
0, Line, //  any keyword   any symbol   strings, numbers, identifiers   integers and decimals   "+", "-"   true, false, null   true, false   void, byte, short, int, etc.   any PRIMITIVE_TYPE except void   do, while, etc.   const, goto, etc.   keywords that can appear as identifiers   any of the SYNTH types 
0, Line, //  assertFailed called static with 2 arguments  
0, Line, //  first, we must check the 'with' context 
0, Line, //  set assertionTracker to null to deactivate AssertionWriter#record calls 
0, Line, //  we only do check abstract classes (including enums), no interfaces or non-abstract classes 
0, Block, /*      * The cached fast hashCode (once calculated)      */
0, Line, //  init table 
0, Line, //  choose an arbitrary method to display an error message 
0, Line, //  GROOVY-7876: when comparing for equality we try to only call compareTo when an assignable   relationship holds but with a container/holder class and because of erasure, we might still end   up with the prospect of a ClassCastException which we want to ignore but only if testing equality 
0, Line, //    one of the BAND tokens is actually replaced by TYPE_UPPER_BOUNDS (e.g. class Foo<T extends C & I> {T t} ) 
0, Line, //  execute Method 
0, Line, //  Write out the threshold, loadfactor, and any hidden stuff 
0, Line, //  create a temporary variable to store the constructed object 
0, Line, //  if origChar and withoutCustomHandle 
0, Line, //  No elements match GPath expression - do nothing 
0, Line, //  ClassHelper.classes minus interfaces, abstract classes, and classes with private ctors 
0, Line, //  ret starts with the original type specs, now add gts for the current method if any 
0, Line, //  ignore interception and missing method fallback 
0, Line, //  declare a static variable to be able to continue the check 
0, Line, //  direct access is allowed if we are in the same class as the declaring class   or we are in an inner class 
0, Line, //  can be replaced with a direct constructor call 
0, Line, //  GROOVY-5802 IAE for missing properties with classes that extend List 
0, Line, //  it might directly annotate a class, e.g. Specification in Spock 2 
0, Line, //  GROOVY-6099: restore assignment info as before the if branch 
0, Line, //  add method:   boolean removePropertyChangeListener(listener) {      return this$propertyChangeSupport.removePropertyChangeListener(listener); 
0, Block, /*      * Load a possibly filtered path. Filters are defined     * by using the * wildcard like in any shell.      */
0, Line, //  since Java has no Closures... 
0, Line, //  every other subsequent visit use an escaping $ 
0, Line, //  create method void <setter>(<type> fieldName) 
0, Line, //  GROOVY-7647 
0, Line, //  the verifier created the field and the setter/getter methods, so here is   not really something to do 
0, Line, //  @Lazy not meaningful with primitive so convert to wrapper if needed 
0, Line, //  8K at a time 
0, Line, //  output AST in format suitable for opening in http://freemind.sourceforge.net 
0, Block, /* Boolean[1] */
0, Line, //  Unexpected node type: TYPE_PARAMETERS found when expecting type: OBJBLOCK   fails after parser 
0, Line, //  ensure we try to unbox null to cause a runtime NPE in case we assign    null to a primitive typed variable, even if it is used only in boxed  
0, Line, //  $Id: hash.java,v 1.1 2004-05-23 05:06:51 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  e.g. BinaryOperator extends BiFunction, BinaryOperator contains no abstract method, but it is really a SAM 
0, Line, //  LEFT_SHIFT               280   RIGHT_SHIFT              281   RIGHT_SHIFT_UNSIGNED     282 
0, Line, //  for compound assignment "x op= y" find type as if it was "x = (x op y)" 
0, Line, //  fail fast! if we got a malformed URI the Classloader has to tell it 
0, Line, // the below params are:    _p - parent class, for handling exceptions    _s - sections, string sections list    _b - binding map    out - out stream  the three first parameters will be curried in as we move along 
0, Line, //  the URI has a false format, so lets try it with files ... 
0, Line, //  load configuration file 
0, Line, //  ab -> ba 
0, Line, //  GROOVY-6970 choose between equivalent interface methods 
0, Line, //  end::java_method_selection_head[] 
0, Line, //  The data store and its maximum capacity 
0, Line, //    RELEVANT WHITESPACE 
0, Block, /*  The keys  stored in the map.  */
0, Line, //  A script's contextual constructor should call it's super class' contextual constructor, if it has one.   In practice this will always be true because currently this visitor is run before the AST transformations 
0, Line, //  have here to ensure it won't be the inner class 
0, Line, //  heuristic size to pre-alocate stringbuffers for collections of items 
0, Line, //  TODO: GROOVY-6561: GroovyMain got the name this way: script.substring(script.lastIndexOf("/") + 1) 
0, Block, /*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Josh Goldfoot   based on the Nice entry by Isaac Guoy */
0, Block, /*  (non-Javadoc)         * @see groovy.lang.MetaMethod#getName()          */
0, Line, //  method body missing   declaration cannot be overridden   a native code entry point   property should not be persisted   compiler should never cache property 
0, Line, //       @     A     B     C     D     E     F     G 
0, Line, //  GROOVY-3311: pre-defined constants added by groovy compiler for numbers/characters should be   initialized first so that code dependent on it does not see their values as empty 
0, Line, //  we are facing a self referencing type ! 
0, Line, //  there must be two continuation bytes of the form 10xxxxxx,   otherwise the following character is is not a valid UTF-8 construct 
0, Line, //  return type 
0, Line, //  Select a constructor from our class, or super-class which is legal to call,   then write out an invoke w/nulls using casts to avoid ambiguous crapo 
0, Line, //  Handle other Number implementations 
0, Line, //  the return type of the SAM method exactly corresponds to the inferred return type 
0, Line, //  no need for 'def' if in a parameter list 
0, Line, //  block = init code for the constructor we produce 
0, Line, //  integer overflow 
0, Line, //  nothing to really test here...just looking for debug that says it   used cache version 
0, Line, //  todo: more cases 
0, Line, //    To support delta compilations, we always restart   the compiler.  The individual passes are responsible   for not reprocessing old code. 
0, Line, // load normal arguments as array 
0, Line, //  if no byte with an high order bit set, the encoding is US-ASCII 
0, JavaDoc, /*      * TODO: remove optimization of this.foo -> this.@foo     *      */
0, Line, //  Expand enough to hold at least n elements without resizing.   We can only resize table by factor of two at a time.   It is faster to rehash with fewer elements, so do it now. 
0, Line, //  =~   ==~   ~ 
0, Line, //  create values field 
0, Line, //  we need no security check for getting the system class   loader since if we do the invoker has a null loader,   in which case no security check will be done 
0, Line, //  at this point the receiver will be already on the stack.   in a[1]++ the method will be "++" aka "next" and the receiver a[1] 
0, Line, //  use default expression 
0, Line, //         ASMifierClassVisitor.main(new String[]{"target/classes/org/codehaus/groovy/runtime/callsite/PogoMetaMethodSite.class"});          ASMifierClassVisitor.main(new String[]{"target/test-classes/spectralnorm.class"});          ASMifierClassVisitor.main(new String[]{"target/test-classes/groovy/bugs/CustomMetaClassTest.class"}); 
0, Line, //  check module node import packages 
0, Line, //  we won't get here if we are a PrintWriter 
0, Line, //  constructors are not distinguished from methods in java ast 
0, Line, //  cut original string in tabstop-length pieces 
0, Line, //  GROOVY-6099: First element of the list may be null, if no assignment was made before the branch 
0, Line, //  stack: closure, type   for a constructor call we need the type two times 
0, Line, //  we compile b?x:y as         boolean(b)?S(x):S(y), S = common super type of x,y   so we load b, do boolean conversion.    In the true part load x and cast it to S,    in the false part load y and cast y to S  
0, Block, /*  6: short   */
0, Line, //  anything other than 0 
0, Line, //  run the script numIter times 
0, Line, //  return result list 
0, Block, /*  checks if all needed classes are compiled before generating the bytecode  */
0, Line, //  call closure 
0, Line, //  check direct match 
0, Line, //  the call on 
0, Line, //  throw new IOException(file.getAbsolutePath()); 
0, Line, //  +=   -=   *=   /=   \=   %=   **= 
0, Line, // when we get exceptions from the parseXXX methods in the main loop, we might try to  re-finish a section 
0, Line, //  Lazily initialized and loaded, should be accessed internally using getMap() 
0, Line, //  includes another Groovy template   includes raw content, escaped before rendering 
0, Line, //  fallback option as ClassLoader#findResource() is protected 
0, Block, /*  if it has been chopped then you have to return.  */
0, Line, //  now let's visit the contents of the class 
0, Line, //  can be added for only for new transforms that have come in  
0, Line, //  append to right side of Li3 (preserving order) 
0, Line, //  fill all gaps 
0, Line, //  method is in current class, nothing to be done 
0, Line, //  warning: treating Java chars as "String" in Groovy 
0, Line, // noop  white 
0, Block, /*      * Reclassify nodes in each list to new Map.  Because we are     * using power-of-two expansion, the elements from each 0bin     * must either stay at same index, or move to     * oldCapacity+index. We also eliminate unnecessary node     * creation by catching cases where old nodes can be reused     * because their next fields won't change. Statistically, at     * the default threshold, only about one-sixth of them need     * cloning. (The nodes they replace will be garbage     * collectible as soon as they are no longer referenced by any     * reader thread that may be in the midst of traversing table     * right now.)      */
0, Line, //  Find largest index j with a[j] < a[j+1] 
0, Line, //  2nd arg false below: though not usual, allow setter with non-void return type 
0, Line, //  The location in the buffer is chosen in a racy fashion as the increment   is not atomic with the insertion. This means that concurrent reads can   overlap and overwrite one another, resulting in a lossy buffer. 
0, Line, //  actual step, can be +1 when desired step is -1 and direction is from high to low 
0, Line, //  if this is not a generics placeholder, first compare that types represent the same type 
0, Line, //  aab -> baa   baab   baa 
0, Line, //  lets test out the class verifier 
0, Line, //  may use this visitor without the annotation being explicitly set 
0, Line, // -- Internals only below this point 
0, Block, /*  multiply vector v by matrix A transposed  */
0, JavaDoc, /*  * <p>This AST transformer is responsible for modifying a source template into something which can be compiled as a * {@link groovy.text.markup.BaseTemplate} subclass.</p> * <p/> * <p>It performs the following operations:</p> * <p/> * <ul> <li>replace dynamic variables with <i>getModel().get(dynamicVariable)</i> calls</li> <li>optionally wrap * <i>getModel().get(...)</i> calls into <i>tryEscape</i> calls for automatic escaping</li> <li>replace <i>include * XXX:'...'</i> calls with the appropriate <i>includeXXXX</i> method calls</li> <li>replace <i>':tagName'()</i> calls * into <i>methodMissing('tagName', ...)</i> calls</li> </ul>  */
0, Block, /*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Keenan Tims   modified by Michael Barker */
0, Line, //  if all remaining exceptions are used in the stub we are good 
0, Line, //  Read in size (number of Mappings) 
0, Line, // / it seems attractive to want to do this for more cases but perhaps not all cases 
0, Line, //     private Integer fastHashCodeCache = null; 
0, Line, //  add static missing method dispatcher 
0, Line, //  ignore errors which are related to unknown source locations   because they are likely related to generated code 
0, Line, //  myMethod {... 
0, Line, //  stores if implicit or explicit this is used. 
0, Line, //  A."this" assumes a VariableExpression can be used for "this"   we correct that here into a ConstantExpression 
0, Line, //  possibly an inner class (or inherited inner class) 
0, Line, //  todo - If no comment before node, then get comment from same node on parent class - ouch! 
0, Line, //  modify the Java AST into a Groovy AST (just token types) 
0, Line, //  if-else is here handled as a special version   of a boolean expression 
0, Line, //  getTarget(var) can be null in buggy xform code, e.g. Spock 
0, Line, //  Clear hardrefs and gc() 
0, Line, //  myMethod(a,b) 
0, Line, //  available variables on stack 
0, Line, //  size() in the Collection interface returns an integer, so ranges can have no more than Integer.MAX_VALUE elements 
0, Line, //  we decided if we have a vanilla name starting with a lower case   letter that we will not try to resolve this name against .*   imports. Instead a full import is needed for these.   resolveAliasFromModule will do this check for us. This method   does also check the module contains a class in the same package   of this name. This check is not done for vanilla names starting 
0, Line, //  close possibly open file handles from getting a sample for  
0, Line, //  No size() method, so let's just check a few keys we that should have been collected 
0, Line, //    Prepare the response buffer content type _before_ getting the writer.   and set status code to ok 
0, Line, //  declaration was replaced by assignment so we need to define the variable 
0, Line, //  applied to "[" that marks a list   applied to "[" that marks a map   a complete GString 
0, Line, //  process each node in turn 
0, Line, //  if the annotation attribute has a default, getCode() returns a ReturnStatement with the default value 
0, Line, //  to extract the parameters. 
0, Line, //  html output of AST 
0, Line, //  this is only needed since the Groovy Build compiles *.groovy files after *.java files 
0, Line, // LOGME? 
0, Line, //  store it into tmp variable 
0, Block, /*  duplicated with DateUtilExtensions.toCalendar() but we don't want modulkes to depend on one another  */
0, Line, //  Copy the required nodes into a new list. 
0, Line, //  only final modifier allowed 
0, Line, //  replace call with an invoker helper call 
0, Line, //  fall through 
0, Line, //  Check and ignore empty statements 
0, Line, //  save all current closures into global closures map 
0, Line, //  works in a two pass sequence and we don't want to skip the second pass 
0, Block, /*  The Computer Language Shootout   http://shootout.alioth.debian.org/   contributed by Josh Goldfoot   modified by Isaac Gouy */
0, Line, //  replace the existing code block with our new one 
0, Line, //  closure within inner class 
0, Line, //  ------------------ Object[] ------------------ 
0, Line, //  this swaps the two child nodes, see javadoc above for explanation of implementation 
0, Line, //  we allow auto-coercion here 
0, Line, //  end::bsf_apply[] 
0, Line, // runTest("LittleClosureTest.groovy"); 
0, Line, //  for primitives and their wrapper we use a fixed table here 
0, Line, //         cache = Collections.synchronizedMap(new LRUProtectionStorage(maxCacheSize)); 
0, Line, //  Return next permut, by rotating elements [0 - position] one 'step' 
0, Line, //  fall threw 
0, Line, //  if necessary deallocate here 
0, Line, //  Don't cache scripts 
0, Line, //  type check call as if it was made on component type 
0, Line, //  saving type of variables to restoring them after returning from block 
0, Block, /*  ---------------- Eviction Support --------------  */
0, Block, /*  The directory scanner  */
0, Line, //                     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19 
0, Line, //  \n 
0, Line, //  store exception 
0, Line, //  (SomeTrait.super).foo() --> SomeTrait$Helper.foo(this) 
0, Line, //  Identify type of collection 
0, Line, //  pop the first context 
0, Line, // GROOVY-7151 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[])      */
0, Line, // SAM check 
0, Line, //  replaced with AST transformations 
0, Line, //  something slightly less cryptic than a NoSuchMethodError or an IncompatibleClassChangeError 
0, Line, //  ------------------------------------------------ 
0, Line, //  By default, Implement TableModel by forwarding all messages   to the model. 
0, Line, //  second visit of node 
0, Line, //  The variation in the pattern is isolated 
0, Line, //  visitNullTreeLookahead     not used explicitly by parser. 
0, Line, //  first, direct access from within the class 
0, Line, //  return types 
0, Line, //  lookup in DGM methods too 
0, Line, //  at this point the loading from a parent loader failed 
0, Line, //  all are of type Object, so generics are useless 
0, Line, //  We can't use the same tactic as for intersection   since AbstractCollection only does a remove on the first   element it encounters. 
0, Line, //  applied to an identifier that specifies 
0, Line, //  visitDigit ...      never created/visited 
0, Line, //  in that case, we are facing a list constructor assigned to a def or object 
0, Line, //  If source doesn't know how to get a reference to itself, 
0, Line, //  get the getter method 
0, Line, //  meta.optimize -> can do fast path 
0, Line, //  earlier output differs from input; we write to our local buffer 
0, Line, //  VetoableASTTransformation will handle both @Bindable and @Vetoable 
0, Line, //  package private is the only modifier left. It means  same package is allowed, subclass not, same class is 
0, Line, //  this is an imperfect solution to determining if two methods are   equivalent, for example String#compareTo(Object) and String#compareTo(String)   in that case, Java marks the Object version as synthetic 
0, Line, //  enum Foo(THESE,ARE,THEY) 
0, Line, //  equal in terms of an assignment in Java. That means according to Java widening rules, or   a subclass, interface, superclass relation, this case then handles also  
0, Line, //  Optimization: skip invalid propertyNames 
0, Line, //  NOTE: must be changed to "1 |" if constructor was vargs 
0, Line, //  to the target methods. Such a method cannot be abstract or a bridge 
0, Line, //  Trait SAM coercion generated proxy using a map to store the closure 
0, Line, //   Handle release of Insert key to toggle overtype/insert mode    unless a modifier is active (eg Shift+Insert for paste or    Ctrl+Insert for Copy) 
0, Line, //  ------------------------------   code visit   ------------------------------ 
0, Line, //  Have one backslash, continue if next char is 'u' 
0, Line, //  the name might be null if the method name is a GString for example 
0, Line, //  means we're in middle of mlr, so end is at end of mlr 
0, Line, //  $Id: methcall.java,v 1.1 2004-05-23 07:14:27 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   Collection class code is from my friend Phil Chu, Thanks Phil! 
0, Line, //  last, check generic type information to ensure that inferred types are compatible 
0, Line, //  last to leave, turn out the lights: restore original streams 
0, Line, //  make sure parameterTypes gets set 
0, Block, /*  Have we set a next object?  */
0, Line, //         }          return (Long) primitiveArrayPut(array, idx, newValue);      }        public static Float putAt(float[] array, int idx, Object newValue) { 
0, Line, //  And add in the methods implemented in this class. 
0, Line, //  ------------------ char[] ------------------ 
0, Line, //  other guards here 
0, Line, //  Unexpected node type: LABELED_STAT found when expecting type: an identifier   fails after parser 
0, Line, //  find the resolved inner class 
0, Line, //  a method name can never be a VariableExpression, so it must converted   to a ConstantExpression then. This is needed as the expression   method doesn't know we want a ConstantExpression instead of a   VariableExpression 
0, Line, //  now adjust the state variables - any early returns won't have gotten here   but we need to check that the same status was observed by all paths 
0, Line, //  Fallback for non-standard "Script" classes. 
0, Line, // -------------------------------------------------------------------------                     
0, Line, //  GROOVY-6757 
0, Line, //  else nothing to box 
0, Line, //  TODO M12N eventually defer this until later when we have a full Groovy   environment and use normal Grape.grab() 
0, Line, //  in order to compute the inferred types of the closure parameters, we're using the following trick:   1. create a dummy MethodNode for which the return type is a class node for which the generic types are the types returned by the hint   2. call inferReturnTypeGenerics   3. fetch inferred types from the result of inferReturnTypeGenerics   In practice, it could be done differently but it has the main advantage of reusing   existing code, hence reducing the amount of code to debug in case of failure. 
0, Line, //  treat it just like a script if it is one 
0, Line, //  Only the non-cached type and packages should be cached 
0, Line, //  workaround for GROOVY-5859: remove generic type info 
0, Line, //  add catch any block to exception table 
0, Line, //   } 
0, Line, //  field undefined 
0, Line, //  JDK 8 support for default methods in interfaces 
0, Line, //  todo: unary expressions (field++, field+=, ...) 
0, Line, //  ignore, this happens with overlapping method definitions 
0, Line, //  into information for the callsite 
0, Line, //  GROOVY-6094 
0, Line, //  get index of parts which are equal 
0, Block, /*  non-ascii char range  */
0, Line, //  placeholder aliases, like Map<U,V> -> Map<K,V>                                      redirectBoundType = classNodePlaceholders.get(name); 
0, Line, //  if original short meta class 
0, Line, //  ------------------ int ------------------ 
0, Line, //  then we use the method with the SAM parameter to get more information about the declaration 
0, Line, //  visitClosureOp ...     token type CLOSABLE_BLOCK_OP never created/visited, see CLOSABLE_BLOCK... 
0, Line, //  in case of a lookup on Class we look for instance methods on Class   as well, since in case of a static property access we have the class 
0, Line, //  try some special cases first for efficiency 
0, Line, //  and that class may have an invalid format we fail here if needed 
0, Line, //  normal loading of expression 
0, Line, //  look for one of these:     import static MyClass.prop [as otherProp] 
0, Line, //  saying List<Integer> 
0, Line, //  end of if/else 
0, Line, //  {@literal tag} 
0, Line, //  the continue statement is only allowed inside loops   fails after parser 
0, Line, //  if there is no missing return in the finally block and the block exists   there is nothing to do 
0, Line, //  to leave a copy of the rightExpression value on the stack after the assignment. 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#getProperty(java.lang.String)     */
0, Line, //  The null check is normally not required but done to prevent from NPEs 
0, Line, //  metaClass still be valid 
0, Line, //  still working implies classloader set, coverage confirms this 
0, Line, // find expected method name 
0, Line, //  load receiver 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setErrorHandler(org.xml.sax.ErrorHandler)      */
0, Line, //  Include the stubs in the Javac compilation 
0, Line, //  we are at the end of the input data 
0, Line, //  the closure map 
0, Line, //  GROOVY-5063 
0, Line, //  Nothing added since last delegate execution. No need to call the delegate this time. 
0, Line, //  add method:   void addPropertyChangeListener(listener) {       this$propertyChangeSupport.addPropertyChangeListener(listener) 
0, Line, //  top level templates 
0, Line, //  replace with compareEquals 
0, Line, //  for methods with primitive types 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)     */
0, Line, //  GROOVY-5521   try to identify a getAt method 
0, Line, //  when we obtain an interface, the types represented by the interface   class node are not parameterized. This means that we must create a   new class node with the parameterized types that the current class node   has defined. 
0, Line, // Check both hasResultSet and getMoreResults() because of differences in vendor behavior 
0, Line, //  for static properties 
0, Line, //  alternatively, FieldNode timeTagField = SourceUnit.createFieldNode("public static final long __timeStamp = " + System.currentTimeMillis() + "L"); 
0, Line, //  build the path stack info to compare 
0, Line, //  when a column heading is clicked in the JTable. 
0, Line, //  a three-bytes sequence was encountered 
0, Line, //  if it's not the case, we can assume the encoding is the default encoding of the system 
0, Line, //  put the receiver inferred type so that the class writer knows that it will have to call a bridge method 
0, Block, /*      * The following methods are needed for implementing the Map interface.     * They are mostly delegating the request to the provided Map.      */
0, Line, //  return _result 
0, Line, //  first we add a super() call for all expressions given in the  
0, Line, // pop fb 
0, Line, //  Get the URLConnection 
0, Line, //  legacy misspelling 
0, Line, //  create the base list of classes which have possible methods to be overloaded 
0, Line, // Simple tests 
0, Line, //  text might be null and indicates no replacement text 
0, Line, //  add field 
0, Line, // new Reduction(Tpken.EOF); 
0, Line, //  loop through classes in tree 
0, Line, //  constructors should not be treated as errors (they have no real meaning for interfaces anyway) 
0, Line, //  this may happen if there's a setter of type boolean/String/Class, and that we are using the property   notation AND that the RHS is not a boolean/String/Class 
0, Line, //  check security manager 
0, Line, //  normalise 
0, Line, // GROOVY-4046   GROOVY-7954 
0, Line, //  float 
0, Line, //  adds an empty row 
0, Line, //    foo instanceof MyType 
0, Line, //  came from a trait 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.Closure#call(java.lang.Object)          */
0, Line, //  -1 means a mismatch 
0, Line, //  optional exception 
0, Line, //  A buffer is chosen by the thread's id so that tasks are distributed in a   pseudo evenly manner. This helps avoid hot entries causing contention   due to other threads trying to append to the same buffer. 
0, Line, //  do nothing here, leave it to the normal resolving 
0, Line, //  below not true for DGM#push and also co-variant return scenarios  && method.getReturnType().equals(m.getReturnType()) 
0, Line, //  if the input stream is still null, we've not found the extension 
0, Line, //  metaClass is still valid 
0, Line, //  can't check synchronized here as it doubles up with ACC_SUPER 
0, Line, //  For performance reasons test against classNamePattern first 
0, Line, //  type annotated with @DelegatesTo.Target 
0, Line, //  let's set the modifiers on the field 
0, Block, /*  The Great Computer Language Shootout   http://shootout.alioth.debian.org/    contributed by Isaac Gouy */
0, Line, //  not a problem, the field helpers may be absent 
0, Block, /*              * Keep logging, if we're verbose. Else turn it off.              */
0, Line, //  ... solve next 
0, Line, //  types may be parameterized. If so, we must ensure that generic type arguments   are made compatible 
0, Line, //  dispatch to factories if it is not a literal method 
0, Line, //  GROOVY-7330 
0, Line, //  null == ignore (we have a better method already) 
0, Line, //  commented out of groovy.g due to non determinisms  case MEMBER_POINTER_DEFAULT:      return defaultMethodPointerExpression(node); 
0, Line, //  at this point, should *always* stay empty 
0, Line, //  replicate a little bit of AnnotationVisitor here   because we can't wait until later to do this 
0, Line, //  does not apply on interfaces 
0, Line, //     TODO: make this initialization able to set useReflection true    TODO: have some way of specifying another MetaClass Registry implementation   
0, Line, //  If not specified, we will return the narrowest possible   of Integer, Long, and BigInteger. 
0, Line, //  general case for single method 
0, Line, //  dangling comma 
0, Line, //  legal cases 
0, Line, //  Read in the threshold, loadfactor, and any hidden stuff 
0, Line, //  reading the content of the file within a char buffer allow to keep the correct line endings 
0, Line, //  Generate the loop body 
0, Line, //  last chance lookup for classes within the current codebase 
0, Line, //  note: LITERAL_def never created 
0, Line, //  single declaration 
0, Line, //  if some transformation decided to generate constructor then it probably knows who it does 
0, Line, //    SYMBOLS 
0, Line, //  copy generic type information if available 
0, Line, //  not a primitive type. We must find a method which is called next 
0, Line, //  isClosureCall() check verified earlier that a field exists 
0, Line, // prefer explicit getter or setter over property if receiver is not 'this' 
0, Line, //   Add to front of list 
0, Line, //  getProperty 
0, Line, //  we handle the property part as if it were not part of the property 
0, Line, // helper.swapWithObject(ClassHelper.OBJECT_TYPE); 
0, Line, //  default port to listen to 
0, Line, //  We do not need to check instances of LowerCaseClass   to be a Class, because unless there was an import for   for this we do not lookup these cases. This was a decision   made on the mailing list. To ensure we will not visit this   method again we set a NO_CLASS for this name 
0, Line, //  now let's use the file name to determine the class name 
0, Line, // ----------------------------------------------------------------------   turn setProperty on a Map to put on the Map itself 
0, Line, //  array set: load sub, call arraySet [] 
0, Line, //  silent 
0, Line, //  not the same device (would be "" on Linux/Unix) 
0, Line, //  end ConsoleTextEditor.RedoAction 
0, Line, //             Number n = (Number) newValue; 
0, Line, //  explicitly labeled properties are already handled,   don't transform final properties   don't transform static properties   VetoableASTTransformation will handle both @Bindable and @Vetoable 
0, Line, //  ----------------------- override visit methods to provide contextual information --------------------------- 
0, Line, //  this method was introduced as to prevent from a stack overflow, described in GROOVY-5285 
0, Line, //  to move this to a boundary class and then we wouldn't need this test 
0, Line, //  this can happen if the receiver is Class<Foo>, then   the actual receiver is Foo and declaringClass is Class 
0, Line, //  avoid files which confuse us like ones with .. in path 
0, Block, /*  the list might be empty   */
0, Line, //  correct ls if we have \r\n 
0, Line, //  original class causing bridge methods for methods in super class 
0, Line, //  if original Byte meta class 
0, Block, /*          * Bind the HTTP session object - if there is one.         * Note: we don't create one here!          */
0, Line, //  check if the name is actually an aliased type name 
0, Line, //  grab existing meta (usually adaptee but we may have nested use calls) 
0, Line, //  closestClass and theType are not in a subtype relation, we need   to check the distance to Object 
0, Line, //  TODO we could support some default vals provided they were listed last 
0, Line, //  Divisions may produce different results depending on operand types 
0, Block, /* <JMenu> */
0, Block, /* Long[11] */
0, Line, //  Implementation methods  -------------------------------------------------------------------------                     
0, Line, //  Quick way to get "1.0". 
0, Line, //  vargs? 
0, Line, //  it's an assignment 
0, Block, /*  (non-Javadoc)        * @see java.io.Writer#write(char[], int, int)         */
0, Line, //  code doesn't mention the removed param at this point, okay to leave as is 
0, Line, //  we may have to add additional elements here 
0, Line, //  the class nodes are on different types   in this situation, we must choose the correct execution path : either the bound   is an interface and we must find the implementing interface from the classnode   to compare their parameterized generics, or the bound is a regular class and we   must compare the bound with a superclass 
0, Line, //  if the matching offset is not the same as the end of the    previous match, we have extra text not matched, so set to  
0, Line, //  we only need to check the variable name because the Groovy compiler   already fails if a variable with the same name already exists in the scope.   this means that a closure cannot shadow a class variable 
0, Block, /*  (non-Javadoc)     * @see java.lang.Object#hashCode()      */
0, Line, // placeholder to assist in rotating vals 
0, Line, //  fails after parser   empty ELIST 
0, Line, //  The File from which we produce Readers. 
0, Line, //  equal class with one maybe a primitive, the later explicitCastArguments will solve this case 
0, Line, //  invoke directly 
0, Line, //  Uses annotation type declared in Java,   instantiates annotation closure using pure Java APIs (no GDK),   triggers stub generation for class JavaCompatibility 
0, Line, //  don't check synchronized here as it overlaps with ACC_SUPER 
0, Line, //  resolve constructor parameter types 
0, Line, //  =====================================================   STANDARD FONTS   ===================================================== 
0, Line, //  let's do the catch nodes 
0, Line, //  it's an instance; check if it's a Java one 
0, Line, // --------------------------------------------- 
0, Line, //  FooAdapter imports both api.Foo and lib.Foo, using "lib.Foo as FooImpl" to disambiguate. 
0, Line, //  dirs 
0, Line, //  COMPARE_NOT_EQUAL            120   COMPARE_IDENTICAL            121    COMPARE_NOT_IDENTICAL        122   COMPARE_EQUAL                123   COMPARE_LESS_THAN            124   COMPARE_LESS_THAN_EQUAL      125   COMPARE_GREATER_THAN         126   COMPARE_GREATER_THAN_EQUAL   127 
0, Line, //  do modified visit 
0, Line, //             val.setValue(Boolean.TRUE);          } 
0, Line, //  start with methods from the parent if any 
0, Line, //  visitMlComment     multi-line comments are not created on the AST currently. 
0, Line, //  no processing if existing constructors found unless forced or ImmutableBase in play 
0, Line, //  Ensures not adding any regexp with capturing groups 
0, Line, //  any further use of that variable can trigger uninitialized ot not final errors 
0, Line, //  ------------------- codecs for method return type signatures ------------------------------ 
0, Line, //  import can be used only as top level element 
0, Line, //  let's convert to an int 
0, Line, //  only add guard to methods of the form: logVar.logMethod(params) 
0, Line, //  initialize the lexer if necessary 
0, Line, //  to aid explicitCastArguments we convert to the wrapper type to let is only unbox 
0, Line, //  don't check volatile here as it overlaps with ACC_BRIDGE   additional modifiers not allowed for interfaces 
0, Line, //  cached class 
0, Block, /* short[4] */
0, Line, // clean up assertion recorder 
0, Line, //    flush the response buffer. 
0, Line, //  current scope 
0, Line, //  make a public method if none exists otherwise try a private method with leading underscore 
0, Block, /*  && !specialNamedArgCase */
0, Line, //  method has already been visited by a static type checking visitor 
0, Line, //  generate closure as public class to make sure it can be properly invoked by classes of the 
0, Line, //  default case 
0, Line, //  add static value():Object[][] method 
0, Line, //  we need to resolve again! 
0, Line, //  add the ability to parse scripts with a specified encoding 
0, Line, // ----------------------------------------------------------------------   field 
0, Line, //  anything   anything but EOF   ";", "\n", EOF   ";", "\n", EOF, "}" 
0, Line, //  dispatching to EmptyStatement will not call back visitor,   must call our visitEmptyStatement explicitly 
0, Line, //  identical types 
0, Line, //  transformation has already been run on this class node   so we'll use a silent collector in order not to duplicate errors 
0, Line, //  ignore as we are re-throwing the original cause 
0, Line, //  if we don't have access to the system clipboard, will throw   a security exception 
0, Line, //  GROOVY-6357 : The JVM does not allow private modifier on inner classes: should be package private 
0, Line, //  look for @Field 
0, Line, //  if there is a property of that name, then a field of that   name already exists, which means this new field here should   be used instead of the field the property originally has. 
0, Line, //  lets call the closures now 
0, Line, //  $Id: hello.java,v 1.3 2007-06-20 03:32:39 bfulgham Exp $   http://shootout.alioth.debian.org/ 
0, Block, /*  If the internal map was not create yet, don't. We can chop the value w/o creating the internal map. */
0, Line, //  always use the expando properties first 
0, Line, //  first, short circuit 
0, Line, //  AsmClassGenerator may create "this" expressions that the type checker knows nothing about 
0, Line, //  this will trigger the call to VMPlugin#configureClassNode(CompileUnit,ClassNode) 
0, Line, //  PIECES 
0, Line, //  access to a private field from a section of code that normally doesn't have access to it, like a   closure or an inner class 
0, Line, //  ignore it 
0, Line, //  Preserve insertion order 
0, Line, //  We use here the class cache cachedClasses to prevent   calls to ClassLoader#loadClass. Disabling this cache will   cause a major performance hit. 
0, Block, /* isNested: */
0, Line, //  wrap call in an IFNULL check 
0, Line, //  int, Integer 
0, Line, //  only descend if we have annotations to look for 
0, Line, //  Object fits all, so simple dispatch rule here 
0, Line, //  void   boolean   1 byte integer   2 byte integer   4 byte integer   8 byte integer   32 bit floating point number   64 bit floating point number   unicode character code 
0, Line, //  this is a precompiled class! 
0, Line, //  we match only on the number of arguments, not anything else 
0, Block, /*  7: float   */
0, Line, //  let's call the collections constructor   passing in the list wrapper 
0, Line, //  maybe possible to have this true in joint compilation mode 
0, Line, //  create base createCallSiteArray method 
0, Line, //  obsolete java syntax 
0, Block, /*  discard first  */
0, Line, //  make cached call for given method 
0, Block, /*  ******** java.time.ZoneId extension methods ********  */
0, Line, //  Precondition: accessorName.length() > prefixLength 
0, Line, //  uh-oh, we're in unicode country.... 
0, Line, //  equality check is enough and faster than instanceof check, no need to check superclasses since Boolean is final 
0, Line, //  List<Foo> l = new List() is an example for incomplete generics type info 
0, Line, //  find longhand since the annotation from earlier versions is now a meta annotation 
0, Line, //  finally public and inherited 
0, Line, //  it was not null and not boolean, so call asBoolean 
0, Line, //  ignore instantiation errors,, try to do main 
0, Line, //  greater than a[j] to the right of a[j] 
0, Line, //  remove @endMarker 
0, Block, /* Method[] */
0, Block, /*     *  when InnerClassVisitor adds this.this$0 = $p$n, it adds it as a BlockStatement having that    *  ExpressionStatement     */
0, Line, // ---------------------------------------------                    float  --------------------------------------------- 
0, Block, /*                              * GROOVY-3985: Remove the final modifier from $INIT method in this case                             * so that subclasses of enum generated for enum constants (aic) can provide                             * their own $INIT method                              */
0, Line, //  can't access the field directly but there may be a getter 
0, Line, //  return arg0.prop <=> arg1.prop; 
0, Block, /*       * Check SecuritySupport to see if security is properly configured.  If not, fail the first      * test that runs.  All remaining tests will run, but not do any security checking.       */
0, Line, //  addMethod will ignore attempts to override abstract or static methods with same signature on self 
0, Line, //  fixed number of arguments && name is a real String and no GString 
0, Line, //  This method should be called by CallSite only 
0, Line, //  note: there is no coercion for boolean and char. Range matters, precision doesn't 
0, Line, //  nor the interfaces 
0, Block, /*  GROOVY-8609  */
0, Line, // ----------------------------------------------------------------------   turn getProperty on a Map to get on the Map itself 
0, Line, //  math methods used by indy 
0, Line, //  register an attribute change notification listener with model mbean 
0, Line, // start 
0, Line, //  visitLiteralImplements     token type "implements" only used by parser, never visited/created directly 
0, Line, //  This fixes xform declaration expressions but not other synthetic fields which aren't set up correctly 
0, Line, //  check non-braced single statement 
0, Line, //  in the case that there is already a field, we would   like to use that field, instead of the default field 
0, Block, /*  (non-Javadoc)     * @see groovy.util.BuilderSupport#createNode(java.lang.Object, java.util.Map, java.lang.Object)      */
0, Line, //  now check for closure override 
0, Line, //  the vargs argument is missing, so fill it with an empty array 
0, Line, //  do nothing and fall back to the other version 
0, Line, //  This solution is based on an absolute path 
0, Line, //  remove "L" and ";" 
0, Line, //  load main Closure 
0, Line, //  then the array version should be preferred 
0, Line, //  make sure to/from are swapped 
0, Line, //  we need to create a curried closure version 
0, Line, //  reset any out of bounds requests (again) 
0, Line, //  do not return here and try all static star imports because currently we do not know which outer class the class to resolve is declared in 
0, Line, //  --------------------------------------------------------------- 
0, Line, //  return 
0, Line, //  for arguments, we need to visit closures *after* the method has been chosen 
0, Line, //  prime the parser and reparse whole document 
0, Line, //  phase operations for this transform class have already been added before, so remove from current scan cycle 
0, Line, //  if origByte and withoutCustomHandle 
0, Line, //  helper to handle different stack based variables 
0, Block, /*      * Constructor used by makeArray() if no real class is available      */
0, Line, //  have to compile regexp first so that it will match 
0, Line, //  check if a super class has @Vetoable annotations 
0, Line, //  long x long 
0, Line, //  The styled document the filter parses 
0, Line, //  Discard all entries 
0, Line, //  isCase methods  ------------------------------------------------------------------------- 
0, Line, //  superclasses are on distinct hierarchy branches, so we 
0, Line, //  will handle :        * collection case where argument is an array        * array transformation (staticTargetType.isArray())        * constructor invocation 
0, Line, //  if the sam type or closure type do not provide generics information, 
0, Block, /*  (non-Javadoc)     * @see java.lang.Object#clone()      */
0, Line, //  don't forget to tell the class about this default constructor. 
0, Line, //  as charAt which is very expensive for large GStrings. 
0, Block, /*  backslash  */
0, Line, //  set up method listeners (such as attributeListener and Operation Listeners)   item -> [Map[methodListener:[target:"", tpe:"", callback:&Closure], ... ,]] 
0, Line, //  Do NOT trust the type of the property node! 
0, Line, // return null; 
0, Line, //  "Interfaces and Traits" section should show "Foo" as one of the implemented interfaces, 
0, Line, //   --------------------------------------------------------                Property handling super: set    -------------------------------------------------------- 
0, Line, //  visit condition leave boolean on stack 
0, Line, //  Configuration data 
0, Block, /*         currentKey and currentValue are set here to ensure that next()        returns normally if hasNext() returns true. This avoids        surprises especially when final element is removed during        traversal -- instead, we just ignore the removal during        current traversal.         */
0, Line, //  in order to avoid calls to castToType, which is the dynamic behaviour, we make sure that we call CHECKCAST instead   then replace the top operand type 
0, Line, // nothing to really test here...just looking for debug that says it   used cache version 
0, Line, //  so we can print a page number 
0, Line, //  TimeZone is only hours and minutes--no seconds 
0, Line, //  prepare call 
0, Line, //     @Override 
0, Line, //  Outer.this for any level of nesting 
0, Line, //  remove methods which should not appear in the trait interface 
0, Line, //  object type 
0, Line, // puts ("key with quote", key); 
0, Line, //  look into cache 
0, Line, //  MetaClassImpl not designed for modification, just return false 
0, Line, //  add a super call 
0, Line, //  finally, if it's not UTF-8 nor US-ASCII, let's assume the encoding is the default encoding 
0, Line, //  found a \r or \n, like on Mac or Unix   could also be Windows' \r\n 
0, Line, //    Get the template source file handle. 
0, Line, //    Requested script/template file has been target of    RequestDispatcher.include(). Its path is assembled from the relevant   javax.servlet.include.* request attributes and returned!   
0, Line, // out.print("<" + t.getType() + ">"); 
0, Line, //  generate a field node 
0, Line, //  $Id: matrix.java,v 1.1 2004-05-23 07:14:27 bfulgham Exp $   http://www.bagley.org/~doug/shootout/   modified to use a little less memory by Thomas Holenstein 
0, Block, /*             areReversed() already does an implicit type compatibility check            based on DefaultTypeTransformation.compareToWithEqualityCheck() for mixed classes            but it is only invoked if reverse == null.            So Object Range has to perform those type checks for consistency even when not calling            compareToWithEqualityCheck(), and ObjectRange has            to use the normalized value used in a successful comparison in            compareToWithEqualityCheck(). Currently that means Chars and single-char Strings            are evaluated as the char's charValue (an integer) when compared to numbers.            So '7'..'9' should produce ['7', '8', '9'], whereas ['7'..9] and [7..'9'] should produce [55, 56, 57].            if classes match, or both numerical, no checks possible / necessary         */
0, Line, //  add a helper annotation indicating that it is a bridge method 
0, Block, /*          * Bind form parameter key-value hash map.         *         * If there are multiple, they are passed as an array.          */
0, Line, //  this allows to override the commandline conf 
0, Line, //  normal assignment 
0, Line, //  TODO: support older parser attribute values as well 
0, Line, // puts ("key", "#" + key + "#", value); 
0, Block, /*              * Null cause?!              */
0, Line, //  create MIN_VALUE and MAX_VALUE fields 
0, Line, //  controller.isFastPath() -> fastPath 
0, Line, //  Static methods only 
0, Line, //  check if recompilation already happened. 
0, Line, //  Regex 
0, Line, //  evaluate parameters 
0, Line, //  GROOVY-xxxx 
0, Line, //     private Integer canonicalHashCodeCache = null; 
0, Line, // STRING          ( "a string",                           Pattern.compile("\"([^\"\\\\]*|\\\\[\"\\\\bfnrt\\/]|\\\\u[0-9a-fA-F]{4})*\"", Pattern.DOTALL)); 
0, Line, //  Copied from org.apache.tools.ant.Task, since we need to get a real thing before it gets nulled in DispatchUtils.execute 
0, Line, // Number.class, 
0, Line, //  Use "double delta=Math.sqrt(Math.ulp(1.0))" with Java 1.5 or better 
0, Line, //  no parent super class representing both types could be found   or both class nodes implement common interfaces which may have   been parameterized differently.   We must create a classnode for which the "superclass" is potentially parameterized   plus the interfaces 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#setDTDHandler(org.xml.sax.DTDHandler)      */
0, Block, /*              we will actually do                   (x < y) ? -1 : ((x == y) ? 0 : 1)          which is the essence of what the call with Number would do          this compiles to something along                        <x>              <y>              LCMP              IFGE L1              ICONST_M1              GOTO L2          L1              <x>              <y>              LCMP              IFNE L3              ICONST_0              GOTO L2          L3              ICONST_1          L2                    since the operators are already on the stack and we don't want          to load them again, we will instead duplicate them. This will          require some pop actions in the branches!                        DUP4          (operands: L1L2L1L2)              LCMP                        IFGE L1       (operands: L1L2)              ICONST_M1     (operands: L1L2I)              GOTO L2          L1              -----         (operands: L1L2)              LCMP              IFNE L3       (operands: -)              ICONST_0      (operands: I)              GOTO L2          L3              - jump from L1 branch to here (operands: -)              ICONST_1      (operands: I)          L2            - if jump from GOTO L2 we have LLI, but need only I          - if from L3 branch we get only I                    this means we have to pop of LL before loading -1                    since there is no DUP4 we have to do this:            DUP2_X1            POP2            DUP2_X1            DUP2_X1            POP2            DUP2_X1                   */
0, Block, /*      * These runners were originally included directly in GroovyShell.     * Since they are part of core they are added directly to the     * GroovyRunnerRegistry rather than via a provider configuration     * file in META-INF/services. If any of these runners are moved     * out to a submodule then they should be registered using the     * provider configuration file (see groovy-testng).     *     * These are internal classes and not meant to be referenced     * outside of the GroovyRunnerRegistry.      */
0, Line, //  For a special constructor call inside a constructor we don't need   any result object on the stack, for outside the constructor we do.   to keep the stack height for the able we kept one object as dummy 
0, Line, //  used _everywhere_ , lets assume that the other specific   testcases include enough ident usage for now. 
0, Line, //  should never happen, as a file with no content   but with a BOM has at least one char 
0, Line, //  so first we remove hidden generics 
0, Line, //  handle different states for the implicit "this" 
0, Line, //  filename or content of script 
0, Block, /* double[15] */
0, Line, //  a common super type exists, all we have to do is to parameterize   it according to the types provided by the two class nodes 
0, Line, //  half the default stream buffer size   double the default line length   End Of File 
0, Line, //  Not a (get/set/is) method that contains a property name 
0, Line, //  GROOVY-8562   when vexp has the same name as a property of the owner,   the IMPLICIT_RECEIVER must be set in case it's the delegate 
0, Line, //  close the ring: 
0, Line, // <ARRAY_DECLARATOR>int</ARRAY_DECLARATOR> primes = new int(<ARRAY_DECLARATOR>5</ARRAY_DECLARATOR>) 
0, Line, //  save copy for later 
0, Line, //  create an empty arraylist 
0, Line, //  GROOVY-8881: cater for closures within closures - getThisObject is already outer class of all closures 
0, Line, //  let's register the default methods 
0, Line, //  each found connection must comply with already found connections 
0, Line, //  want this synthetic constructor to show up in corbertura reports 
0, Line, //  Attempts to evict entries from the map if it exceeds the maximum   capacity. If the eviction fails due to a concurrent removal of the   victim, that removal may cancel out the addition that triggered this   eviction. The victim is eagerly unlinked before the removal task so   that if an eviction is still required then a new victim will be chosen   for removal. 
0, Line, //  visit RHS first for expressions like a = b = 0 
0, Block, /* Number[18] */
0, Line, //  Reset start if new buffer 
0, Line, //  "." is used to transfer compilation dependencies, which will be   recollected later during compilation 
0, Line, //  if a positive index is accessed not initialized so far   initialization up to that index takes place 
0, Line, //  Seems wrong but otherwise some tests fail (e.g. TestingASTTransformsTest) 
0, Line, // if s_i and t_i don't have have the same case 
0, Line, //  styleMap, then set the attributes of the matching string 
0, Line, // ---------------------------------------------------------------------------    // SOURCE SAMPLING 
0, Line, //  annotation to the method node 
0, Line, //  all arguments were null 
0, Block, /*  0: dummy   */
0, Line, //  -1 because the varg part is optional 
0, Line, //  test integers 
0, Line, //  pop for "makeBlockRecorder(finallyStatement)" 
0, Line, //  would happen if you have a raw Map type for example 
0, Line, //  a ClassNode superclass for an interface is not   another interface but always Object. This implies that   "extends" for an interface is understood as "implements"   for a ClassNode. Therefore, even if b doesn't implement   interface a, a could "implement" other interfaces that b   implements too, so we must create a list of matching interfaces 
0, Line, //  iterates through s   iterates through t 
0, Line, //  check for a public/protected getter since JavaBean getters haven't been recognised as properties   at this point and we don't want private field access for that case which will be handled later 
0, Line, //  not in java   not in java   not in java 
0, Line, //  rotate down perm[0..prev] by one 
0, Line, //  Note: old closure syntax using BOR is deprecated, and also never creates/visits a BOR node 
0, Line, //  lets check the parameter types match 
0, Line, //  the default style of this lexer node 
0, Line, //  if no invalid UTF-8 were encountered, we can assume the encoding is UTF-8, 
0, Line, //  perhaps overkill but let compareTo be based on hashes for commutativity   return this.hashCode() <=> other.hashCode() 
0, Line, //  ---------------------   feature: 'threadsafe' 
0, Line, //  if we reach this point we have at least one parameter or return type, that 
0, Line, //  list containing finally blocks   such a block is created by synchronized or finally and 
0, Line, //  now that a method has been chosen, we are allowed to visit the closures 
0, Line, //  long 
0, Line, //         CheckClassAdapter.verify(new ClassReader(b), true, new PrintWriter(System.err)); 
0, Line, //  category method needs Thread check   cases:   (1) method is a category method       We need to check if the category in the current thread is still active.       Since we invalidate on leaving the category checking for it being       active directly is good enough.   (2) method is in use scope, but not from category       Since entering/leaving a category will invalidate, there is no need for any special check   (3) method is not in use scope /and not from category       Since entering/leaving a category will invalidate, there is no need for any special check 
0, Line, //  leaf nodes that haven't been coloured yet 
0, Line, // increment acc if it hasn't been incremented in the current iteration 
0, Line, //  if the call expression is a spread operator call, then we must make sure that 
0, Line, //  GROOVY-5566 
0, Block, /*  (non-Javadoc)         * @see groovy.lang.GroovyObject#getProperty(java.lang.String)          */
0, Line, //  visit TripleDot, not used in the AST 
0, Line, // can't use treeset since the base classes are different 
0, Line, //  verify component type, but if we reach that point, the only possibility is that the argument is   the last one of the call, so we're in the cast of a vargs call   (otherwise, we face a type checker bug) 
0, Line, //  Handle String, StringBuilder, GString and other CharSequence implementations 
0, Line, //  optimization path 
0, Line, //  current class details 
0, Line, //  we have to use doMethodInvoke here instead of simply invoke,   because getMetaMethod may provide a method that can not be called   without further argument transformation, which is done only in    doMethodInvoke 
0, Line, //  this assumes LIST_CONSTRUCTOR set by PreJava2GroovyConvertor 
0, Line, //  end::bsf_simple[] 
0, Line, //  check package this class is defined in. The usage of ConstructedClassWithPackage here   means, that the module package will not be involved when the   compiler tries to find an inner class. 
0, Line, //  make sure Map#getAt() and List#getAt handled with the bracket syntax are properly compiled 
0, Line, //  find first { 
0, Line, //  add method:   void firePropertyChange(String name, Object oldValue, Object newValue) {       this$propertyChangeSupport.firePropertyChange(name, oldValue, newValue) 
0, Line, //  add node metadata for default parameters because they are erased by the Verifier 
0, Line, //  Grab processing may have brought in new AST transforms into various phases, process them as well 
0, Line, //  These fields provide support to bound the map by a maximum capacity 
0, Line, //  ... or more relaxed?   configuration = CompilerConfiguration.DEFAULT; 
0, Line, //  GROOVY-5681 and GROOVY-5632 
0, Line, //  all properties are also always fields 
0, Line, //  make the class abstract also see Effective Java p.152 
0, Line, //  generated by the compiler yet (generated by the Verifier) 
0, Line, //  ++   ++   ++   + 
0, Line, //  add default constructor to doc   name of class for the constructor 
0, Line, //  this is the counterpart of addThisReference(). To non-static inner classes, outer this should be 
0, Line, //  A fast-path removal 
0, Line, //  modify the Java AST into a Groovy AST 
0, Line, //  primitive types must be boxed 
0, Line, //  sort in a new list to prevent side effects 
0, Line, //  we can't just remove from the update set,   because we may be local or global, the path knows 
0, Line, //  empty 
0, Line, //  If both values are null return 0 
0, Line, //  save original streams 
0, Line, //  don't make static accessors final 
0, Line, //                     cacheStaticMethod(key,metaMethod); 
0, Line, //  the value isn't use in the getOrPut call - see the EntryWithValue constructor above 
0, Line, //  TODO 
0, Line, // GROOVY-3711: The following call now results in a valid script class node, so foo.Bar needs to get resolved. 
0, Line, //  use primitives for efficiency 
0, Line, //  variable is not on stack because we are   inside a nested Closure and this variable   was not used before   then load it from the Closure field 
0, Line, //  we already know parameter length is bigger zero and last is a vargs   the excess arguments are all put in an array for the vargs call   so check against the component type 
0, Block, /*  (non-Javadoc)      * @see groovy.lang.GroovyObject#setProperty(java.lang.String, java.lang.Object)       */
0, Line, //  0 means a direct match 
0, Line, //    Recurse for inner classes 
0, Line, //  replace all calls for super with the correct MOP method 
0, Line, //  case of: def foo = new HashMap<>() 
0, Line, // ---------------------------------------------       custom meta class creation handle  --------------------------------------------- 
0, Line, //  $Id: nestedloop.java,v 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  premature end of the object 
0, Line, // runTest("ClosureMethodTest.groovy");  runTest("tree/VerboseTreeTest.groovy"); 
0, Line, //  visit Unused "const", "do", "goto" - unsurprisingly these are unused by the AST. 
0, Line, //  move from super class to interface; 
0, Line, //                     storeType(pexp, setterMethod.getParameters()[0].getType()); 
0, Line, //  For querying, ignore all errors   Warning indicates likely error   Warning indicates possible error   Warning indicates paranoia on the part of the compiler 
0, Line, //  = assignment 
0, Line, //  block to monitor for exceptions   catch block for a particular exception   block to always execute on exit of the try   statement to throw an exception   method modifier to declare thrown transactions   alternate throw for code invariants 
0, Block, /*  Return only directories?  */
0, Block, /*                 class B extends A {}                Animal foo(A o) {...}                Person foo(B i){...}                B  a = new B()                Person p = foo(b)              */
0, Line, //  Read until the appropriate line number. 
0, Line, //  this may happen when a variable declaration type is wider than the subsequent assignment values   for example :   def o = 1 // first, an int   o = 'String' // then a string   o = new Object() // and eventually an object !   in that case, the INFERRED_TYPE corresponds to the current inferred type, while   DECLARATION_INFERRED_TYPE is the type which should be used for the initial type declaration 
0, Line, //  Implementation note: By default Groovy uses soft references to store MetaClass   this insures the registry doesn't grow and get out of hand. By doing this we're   saying this this EMC will be a hard reference in the registry. As we're only   going have a small number of classes that have modified EMC this is ok 
0, Line, //  ----------------------------------------------------   feature?: allow break/continue with value from loops? 
0, Line, //    Factory access   
0, Line, //  print the text with its own routines 
0, Line, //  load array: load x and DUP [load sub, call arrayGet, load b, call operation, load sub, call arraySet]  
0, Line, //  arguments 
0, Line, //  TODO: add vargs handling 
0, Line, //  output differs from input; we write to our local buffer 
0, Line, //  if the object expression is a closure shared variable, we will have to perform a second pass 
0, Line, //  let's create a ScriptReference to pass into the closure 
0, Line, //  file.exists() might be case insensitive. Let's do   case sensitive match for the filename 
0, Line, //  We don't allow a static context (e.g. a static method) to access   a non-static variable (e.g. a non-static field). 
0, Line, //  ex: (char) 'c' 
0, Line, //   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4   "1 9 9 4 - 1 1 - 0 5 T 0 8 : 1 5 : 3 0 - 0 5 : 0 0 
0, Line, //  GROOVY-6921: We must force a call to getType in order to update closure shared variable whose   types are inferred thanks to closure parameter type inference 
0, Line, //  to close sockets gracefully etc... 
0, Line, //  only repaint the line numbers in the gutter when the document has changed   in case lines (hence line numbers) have been added or removed from the document 
0, Line, //  pop for the variable 
0, Line, //  a more specific interface exists in the list, keep it 
0, Line, //   PLUS        200    MINUS       201    MULTIPLY    202    DIV, (203) but we don't want that one    INTDIV      204    MOD         203 
0, Line, //  if we reach here, we have an unhandled case  
0, Line, //  capture ant's output so we can verify the effect of passing compilerarg to javac 
0, Line, //  remove all old entries including the "." entry 
0, Line, //  This test ensures that value != this If you ever change this ensure that value != this 
0, Line, // ----------------------------------------------------------------------   executing the getter method 
0, Line, //  there must be one continuation byte of the form 10xxxxxx,   otherwise the following character is is not a valid UTF-8 construct 
0, Line, //  pop if-then-else temporary type info 
0, Line, //  $Id: ackermann.java,v 1.2 2005-05-13 16:24:17 igouy-guest Exp $   http://www.bagley.org/~doug/shootout/  
0, Line, //  ignore the first token, as we want n-1 parent dirs 
0, Line, //  parameters = parameters of the constructor 
0, Line, //  add ast transforms both by class names and classes, which should result in an error  
0, Line, //  anything will do as we only check size == 1 
0, Line, //  see if instanceof applies 
0, Line, // CHECKSTYLE.ON: VisibilityModifierCheck 
0, Line, //  no this$ methods for non-private isThis=true   super$ method for non-private isThis=false 
0, Line, //  parameterize a type by using all of the parameters only 
0, Line, //  exception unwrapping for stackless exceptions 
0, Line, //  (, ), [, ], {, }   (, [, {   ), ], } 
0, Line, //  there's a new line between { -> ... and the first statement 
0, Line, //  the call is made on a collection type 
0, Line, //  pseudo-random number generator 
0, Block, /*      * Convert a non java class name to a java classname     * This is used to convert a script name to a name     * that can be used as a classname with the script is     * loaded in GroovyClassloader#load()     * The method simply replaces any invalid characters     * with "_".      */
0, Line, //  varargs methods must not be preferred to methods without varargs   for example : 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.MetaClass#addNewStaticMethod(java.lang.reflect.Method)     */
0, Line, //  $Id: spellcheck.java,v 1.1 2004-05-23 07:14:28 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  ------------------ float ------------------ 
0, Line, //  unsigned right shift 
0, Line, //  store name of class away for use in constructor ident 
0, Line, //  try to find a script from classpath*/ 
0, Line, //  next_perm('1234', 2) -> '2314' 
0, Line, //  iterator 
0, Line, //  Perform an additional phase which has to be done *after* type checking 
0, Block, /*  (non-Javadoc)    * @see org.xml.sax.XMLReader#setEntityResolver(org.xml.sax.EntityResolver)     */
0, Line, //  start parsing at the compilationUnit rule 
0, Block, /*  (non-Javadoc)    * @see groovy.lang.GroovyObject#getProperty(java.lang.String)     */
0, Line, //  check for an alias 
0, Block, /*   */
0, Line, //  visit is authorized because the classnode belongs to the same source unit 
0, Line, //  b==null 
0, Line, // } 
0, Line, //  singleton 
0, Line, // ---------------------------------------------                    long  --------------------------------------------- 
0, Line, //  constant types 
0, Block, /*  If the length is under and we are asking for the key, then just look for the key. Don't build the map.  */
0, Line, //  should be called on first build method only 
0, Line, //  if a lower bound is declared, then we must perform the same checks that for an upper bound   but with reversed arguments 
0, Line, // class Foo {def bar()}  <-- this block   void f(String me) {}   list of expressions, variable defs etc 
0, Line, //  zero parameter closure e.g. { -> println 'no args' } 
0, Line, //  index in the ref array 
0, Line, //  we need to save the result 
0, Line, // ---------------------------------------------                category handle 
0, Line, //  ---------------------------------------------------------------   feature?: allow break/continue to labeled statement from loops? (is this even right syntax, or parser bug???) 
0, Line, //  if original char meta class 
0, Line, //  normalize an empty or whitespace line to \n   or strip the indent for lines containing non-space characters 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#getProperty(java.lang.Object, java.lang.String)      */
0, Line, // ---------------------------------------------------------------------------   DESCRIPTIONS 
0, Line, //  Groovy currently resolves this to last found so traverse in reverse order 
0, Line, //  add the ancillary pieces 
0, Line, //  a single match, which should be returned 
0, Line, //  If key apparently not there, check to   make sure this was a valid read 
0, Line, //  Handle the case where the exponential number ends without the actual exponent 
0, Line, //  store value in array 
0, Line, //  and finally we apply the generics information to the parameters and 
0, Line, //  if a match is found, the compiler will have already set up aic constructor to hav   an argument which isn't needed since we'll be accessing the field; we must undo it 
0, Line, //  grab may have added more transformations through new URLs added to classpath, so do one more scan 
0, Line, //  GROOVY-3110: It may be an inner enum defined by this class itself, in which case it does not need to be   explicitly qualified by the currentClass name 
0, Line, //  add "catch any" block to exception table for try part we do this   after the exception blocks, because else this one would supersede 
0, Line, //    Create new binding for the current request. 
0, Line, // if we get here, we just read in a back-slash from the source, now figure out what to do with it 
0, Line, //  Top level control structures  ------------------------------------------------------------------------- 
0, Line, //  owner should take care for us 
0, Line, //  preempt resolve as info is partially available here (aliases and star imports won't match here) 
0, Line, //  no optimization for BigDecimal yet  resultType = BigDecimal_TYPE; 
0, Line, //  at least '<' is consumed ... read next chars. 
0, Line, //  GROOVY-4272: repositioned it here from staticImport 
0, Line, //  arguments.length>0 && !=null 
0, Line, //  for each shared variable we add a reference and save it as field 
0, Line, //  perform additional check on generics   ? extends toBeAssignedTo 
0, Line, //  a two-bytes sequence was encountered 
0, Line, //  Set up the scripting engine 
0, Line, //  Used outside the for loop 
0, Line, //  now lets try some methods on each item in the list 
0, Line, //  this should probably be strenghtened when we support the A.super.foo() syntax 
0, Line, //  end of catch 
0, Line, //  can't have private and public methods of the same name, so rename original 
0, Line, //  any marker tha begins a GString   any matching marker that ends a GString   the ${ marker that starts a GString expression   the } marker that ends a GString expression 
0, Line, //  a is an interface, b is not 
0, Line, //  if this operation has brought in more phase ops for ast transforms, keep recording them 
0, Line, //  will be static in an instance 
0, Line, //  go upper level 
0, Line, //  otherwise the file would not be human readable 
0, Line, //  in a loop where foo is a label. 
0, Line, //  merge if and else values 
0, Line, //  class loader for Groovy generated classes 
0, Line, //  force no interfaces implemented 
0, Line, //  load index 
0, Line, //  last, we could have the spec saying List<String> and a classnode saying List<Integer> so   we must check that generics are compatible. 
0, Line, //  load object 
0, Line, //  no transform needed 
0, Line, //  suppress exception 
0, Line, //  we depend on the method selection having done a good    job before already, so the only case for this here is, that   we have no argument for the array, meaning params.length is   args.length+1. In that case we have to fill in an empty array 
0, Line, //  add method:   void fireVetoableChange(String name, Object oldValue, Object newValue)      throws PropertyVetoException   {       this$vetoableChangeSupport.fireVetoableChange(name, oldValue, newValue) 
0, Line, // remove duplicates 
0, Line, //  First check whether it's already been loaded, if so use it 
0, Line, //  else fall through for EmptyRange 
0, Line, //  add leading zero if the length of the string is one 
0, Block, /*  (non-Javadoc)      * @see groovy.lang.MetaClassImpl#invokeConstructor(java.lang.Object[])       */
0, Line, //  GROOVY-7039 
0, Block, /*      * Implementation notes     *     * GroovySystem stores a static reference to this instance so it is     * important to make it fast to create as possible. GroovyRunners are     * only used to run scripts that GroovyShell does not already know how     * to run so defer service loading until requested via the iterator or     * map access methods.     *     * The Map interface is for compatibility with the original definition     * of GroovySystem.RUNNER_REGISTRY. At some point it would probably     * make sense to dispense with associating a String key with a runner     * and provide register/unregister methods instead of the Map     * interface.      */
0, Line, //  if "from" part is longer, fill it up with ".." 
0, Line, //  should we trap exceptions and do an each? 
0, Block, /*  (non-Javadoc)     * @see groovy.lang.MetaClass#getClassNode()      */
0, Line, // InvokerHelper.runScript(scriptClass, null); 
0, Line, //  SAM coercion 
0, Line, //  GROOVY-6750 and GROOVY-6808 
0, Line, //  GROOVY-6270 
0, Line, //  apart from current phase, push new operations for every other phase in the master phase ops list 
0, Line, //  we have for example a class name A, are in class X   and there is a nested class A$X. we want to be able    to access that class directly, so A becomes a valid   name in X. 
0, Line, //  adapted from ClassWriter code 
0, Line, //  this can happen for example when "null" is used in an assignment or a method parameter.   In that case, instead of storing the virtual type, we must "reset" type information   by determining the declaration type of the expression 
0, Line, //  Add new class to help evict the last collected entry 
0, Line, //  replace if whitespace was found 
0, Line, //  generate a unique name for top-level Script classes 
0, Line, //  reserved: a synthetic root for a CST 
0, Line, // ---------------------------------------------                    short  --------------------------------------------- 
0, Line, //  if a custom meta class creation handle is set 
0, Block, /*  (non-Javadoc)     * @see org.xml.sax.XMLReader#getProperty(java.lang.String)      */
0, Line, //  Throw earlier exception from parent loader if it exists, otherwise create a new exception 
0, Line, //  receiver expressions with side effects should not be visited twice, avoid by using a temporary variable 
0, Line, //  skip values with unknown source position 
0, Line, //  expect a string key, or already a closing curly brace 
0, Line, // Note:  This method is NOT called if left AND right are both BigIntegers or BigDecimals because  those classes implement a method with a better exact match. 
0, Line, //  no method found, we need to replace 
0, Line, // GROOVY-4497: don't visit super field if it is private 
0, Line, //                 return cachedMethod;          }          return null; 
0, Line, //  GROOVY-5561: if two files are compiled in the same source unit   and that one references the other, the getters for properties have not been 
0, Line, //    KEYWORDS: TYPE SYSTEM 
0, Line, //  According to https://shipilev.net/blog/2016/arrays-wisdom-ancients/#_conclusion   toArray(new T[0]) seems faster, safer, and contractually cleaner, and therefore should be the default choice now. 
0, Line, //  otherwise, the file is in US-ASCII 
0, Line, //  load groovy into "root.maven" classloader instead of "root" so that   groovy script can access Maven classes 
0, Line, //  we must be careful, because the property node may be of a wrong type:   if a class contains a getter and a setter of different types or   overloaded setters, the type of the property node is arbitrary! 
0, Line, //  "super" also requires special handling 
0, Block, /* <Method[]> */
0, Line, //  let's decide if this is a property invocation or a method call 
0, Line, //  should NEVER reach here 
0, Line, //  add may not have been processed yet 
0, Line, //  Do nothing: We were not going to use it anyway. 
0, Line, //  files to compile 
0, Line, //  IF CRLF JUST KEEP LF 
0, Line, //  visitStringch     String characters only used by lexer, never visited/created directly 
0, Line, // ---------------------------------------------------------------------------   TYPES: NOTE THAT ORDERING AND VALUES ARE IMPORTANT TO LOCAL ROUTINES! 
0, Block, /*  = null  */
0, Line, //  used to mark a section of code as to be statically compiled   use to tell which method should be used in a binary expression   private bridge methods are methods used by an outer class to access an inner class method   private fields accessors are methods used by an inner class to access an outer class field   private fields mutators are methods used by an inner class to set an outer class field   callback for dynamic classes that contain statically compiled inner classes or methods   the type of the class which owns the property   for list.property expressions, we need the inferred component type   if a receiver is the receiver of a dynamic property (for mixed mode compilation) 
0, Line, //  may need rewrap 
0, Line, //  IMPLICIT_RECEIVER is handled elsewhere   however other access needs to be fixed for private access 
0, Line, //  reset the matcher and start parsing string 
0, Line, //  backup input files with extension 
0, Line, //  only guard the script class 
0, Line, //  preconditions   no text to return   no text to return   buffer hasn't been filled yet 
0, Line, //  we put the class already in output to avoid the most inner classes   will be used as first class later in the loader. The first class   there determines what GCL#parseClass for example will return, so we 
0, Line, //  Eat the following LF if any. 
0, Line, // The overtype caret will simply be a horizontal line one pixel high   (once we determine where to paint it) 
0, Line, // ---------------------------------------------------------------------------   SOURCE CREATION 
0, Line, //  $Id: hash2.java,v 1.1 2004-05-23 05:50:10 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Block, /*  Iterate through the map and do the same thing. Make sure children and children of children are chopped.   */
0, Line, //  expressions 
0, Line, //  let's replace this assignment to a subscript operator with a   method call   e.g. x[5] = 10   -> (x, [], 5), =, 10   -> methodCall(x, "putAt", [5, 10]) 
0, Line, //  GROOVY-5681: initial expressions should be visited too! 
0, Line, //  if the script text is null, i.e. the script content is invalid   use the name as cache key for the time being to trigger the validation by `groovy.lang.GroovyClassLoader.validate`   note: the script will not be cached due to the invalid script content,         so it does not matter even if cache key is not the md5 value of script content 
0, Line, // bind the two first parameters of the generated closure to this class and the sections list 
0, Line, // ----------------------------------------------------------------------   error due to missing method/field 
0, Line, //  load this   load closure map   load wildcard 
0, Line, // find the string section which precedes the row/col of the thrown exception 
0, Line, //  we'll report those as errors later 
0, Line, //  do -ve indexes based on actual args, so can't accurately calculate type here   so work out minimal type params and vararg on end will allow for other possibilities 
0, Line, //  for the property 
0, Line, //  GROOVY-6787: Don't override the original if the replacement placeholder doesn't respect the bounds,   otherwise the original bounds are lost which can result in accepting an incompatible type as an   argument, for example. 
0, Line, //  Unary expressions 
0, Line, //  The Great Computer Language Shootout   http://shootout.alioth.debian.org/   Fastest version under 100 LOC. Contributed by Jon Harrop, 2005 
0, Line, //  def _result = HashCodeHelper.initHash() 
0, Line, //  works fine in both languages   works fine in java; throws ClassCastException in groovy 
0, Line, //  ------------------------------ 
0, Line, //  handle arrays on both sides as special case for efficiency 
0, Line, // String purple = "7C308D"; 
0, Block, /*  return element i,j of infinite matrix A  */
0, Line, //  GROOVY-5150: primitive type constants will be initialized directly 
0, Line, // standard metaclass check 
0, Line, //  thread one: newInstance script foo 
0, Line, //  Original method may be null for the case of private or static methods 
0, Line, //  constructor helper   This method is used instead of calling the constructor as   calling the constructor may require a table with MetaClass   selecting the constructor for each enum value. So instead we   use this method to have a central point for constructor selection   and only one table. The whole construction is needed because    Reflection forbids access to the enum constructor.   code:   def $INIT(Object[] para) {    return this(*para)   } 
0, Line, //  we allow null objects in the object stream 
0, Line, //  Inner classes 
0, Block, /*      * Set nextObject to the next object. If there are no more     * objects then return false. Otherwise, return true.      */
0, Line, //  Coerce the file URL to a File   See ClassNodeResolver.isSourceNewer for another method that replaces '|' with ':'.   WTF: Why is this done and where is it documented? 
0, Line, //  inject message 
0, Line, //  A normal merge. 
0, Line, //  other modifiers 
0, Line, //  remove 'public' when implied already if requested 
0, Line, //  methods from GroovyType (todo: remove this horrible copy of SimpleGroovyType.java)      public GroovyAnnotationTypeDoc asAnnotationTypeDoc() {/*todo*/return null;}      public GroovyClassDoc asClassDoc() {/*todo*/ return null; }      public GroovyParameterizedType asParameterizedType() {/*todo*/return null;}      public GroovyTypeVariable asTypeVariable() {/*todo*/return null;}      public GroovyWildcardType asWildcardType() {/*todo*/return null;}      public String dimension() {/*todo*/ return null; } 
0, Line, //  Clear all refs and gc() 
0, Block, /* long[10] */
0, Line, //  always use the expando properties 
0, Line, //       P     Q     R     S     T     U     V     W 
0, Line, //  registration already done or in process, abort 
0, Line, //  add in unimplemented abstract methods from the interfaces 
0, Line, //  reserved in java and groovy   reserved in java and groovy 
0, Line, //  value is a list. 
0, Line, //  we use the type of the first parameter 
0, Line, //  setProperty 
0, Line, //  when resolving methodCall() or getProp() or setProp() 
0, Line, //  if origFloat and withoutCustomHandle 
0, Line, //  GroovyDocErrorReporter interface 
0, Line, //  GROOVY-5568, the property may be defined by DGM 
0, Line, //  TODO handle local variables 
0, Line, //  spread expressions 
0, Line, //  will contain callSiteReceiverSwap.getType() 
0, Line, //  Implementation of java.sql.getResultSet()   ------------------------------------------------------------ 
0, Line, //  not through MOP to avoid infinite recursion 
0, Line, //  calculate outer class which we need for this$0 
0, Line, //  inject([:]) { a,e {@code ->} a {@code <<} [(e.key): e.value.groupBy(tail)] } 
0, Block, /*  The file names in the current FileSet scan  */
0, Line, //  use binding to store? 
0, Line, //  using getPNR() to ignore generics at this point   and a different binary expression not to pollute the AST 
0, Line, //  0x30('0') - 0x39('9') 
0, Line, //  map containing named labels of parenting blocks 
0, Line, //  increment to next register, double/long are using two places 
0, Line, //  Just a guess that the pretty view will take 20 percent more than original. 
0, Line, //  For consistency. 
0, Line, //  |=   &=   ^=   ~ 
0, Line, //    Build the AST 
0, Line, //  if we are in an if/else branch, keep track of assignment 
0, Line, //  $Id: lists.java,v 1.1 2004-05-23 07:12:55 bfulgham Exp $   http://www.bagley.org/~doug/shootout/ 
0, Line, //  only visited when calling super() without parentheses, i.e. "super 99" is equivalent to "super(99)" 
0, Line, //  scheme        = alpha *( alpha | digit | "+" | "-" | "." ) 
0, Line, //  if left type is not a list but right type is a map, then we're in the case of a groovy   constructor type : A a = [x:2, y:3]   In this case, more checks can be performed 
0, Line, //  identifies a function declaration   XXX br identifies a macro declaration   identifies a class declaration   identifies an interface declaration   identifies a mixin declaration 
0, Line, //  $hash$code = _result 
0, Line, //  assume we have a script (and it may have a @Field) 
0, Block, /*  (non-Javadoc)        * @see java.io.Writer#write(int)         */
0, Line, //  object has default meta class, so we need to replace it on demand 
0, Line, //  BUG! exception in phase 'class generation' in source unit 'Script1.groovy'   SpreadExpression should not be visited here   fails after parser 
0, Line, //  let's not add duplicate methods 
0, Line, //  mangle resource name with the compiled pattern. 
0, Line, //  ... solve puzzle 
0, Line, //  the current implementation only checks for public modifier, because Groovy used to allow   handles on classes even if they are package protected and not in the same package.   There are situations where we could make more fine grained checks, but be careful of   potential breakage of existing code. 
0, Line, //  to work with ant 1.6 
0, Line, //  copy arguments for main class  
0, Line, //  can take place) 
0, Line, //  retrieve the content of the file using the provided encoding 
0, Line, //  otherwise cleanup() will wipe out value 
0, Line, //  Make sure we still have our entries, sample a few 
0, Line, //  while condition 
0, Line, //  Then get the iterator and generate the loop control 
0, Line, //  to be used in generics, type must be boxed 
0, Line, // swallow 
0, Line, //  the outside context parts till now define placeholder we are not allowed to   generalize, thus we save that for later use...   extension methods are special, since they set the receiver as    first parameter. While we normally allow generalization for the first 
0, Line, //  TypeChecked$TypeCheckingInfo can not be applied on constructors 
0, Line, //  undo unwanted side-effect of verifier 
0, Line, // AsmClassGenerator generator = new AsmClassGenerator(source, context, tracer, sourceName); 
0, Line, //  -----------------------   feature: static imports   ----------------------- 
0, Line, //  uppercase to hide from jarjar 
0, Line, //  put it in the list 
0, Line, //  rcurried arguments are done lazily to allow normal method selection between overloaded alternatives 
0, Line, //  we do here a null check because the params field might not have been set yet 
0, Line, // correct to method level generics for the overriding method 
0, Line, // A transposition and a casemodification 
0, Line, //  GROOVY-7909 A Helper class in same compilation unit may have not been created when referenced   Here create a symbol as a "placeholder" and it will be resolved later. 
0, Line, //  SEE BELOW 
0, Line, //  Entry was invalidated during deletion. But it could   have been re-inserted, so we must re-traverse.   To avoid useless contention, get lock to wait out modifications   before re-traversing. 
0, Block, /*  (non-Javadoc)           * @see groovy.lang.GroovyObjectSupport#getProperty(java.lang.String)            */
0, Line, //  we use a ClassExpression for transportation to EnumVisitor 
0, Line, // deprecated                case GroovyTokenTypes.LITERAL_with:   (String)itr.next() 
0, Line, //  hold flip_count result for each swap index 
0, Line, //  Views 
0, Line, //  def (key, value) == list 
0, Line, //  if a returned inferred type is available and no @TypeCheckingInfo is on node, then add an 
0, Block, /* char[6] */
0, Line, //  merge onto end of previous GString to avoid an empty bridging value 
0, Line, //  to keep the stack height, we need to leave   one Object[] on the stack as last element. At the   same time, we need the Object[] on top of the stack 
0, Line, //  the inferred type here should be a list of what the subcall returns 
0, Line, //  have first to find matching super class or interface 
0, Line, //  GROOVY-4013: If it is an inner class, tracking its dependencies doesn't really   serve any purpose and also interferes with the caching done to track dependencies 
0, Line, //  there of course transformed parameter type and argument must fit 
0, Line, //  _result = HashCodeHelper.updateHash(_result, super.hashCode()) 
0, Line, //  let's remove any non-MapEntryExpression instances   such as if the last expression is a ClosureExpression   so let's wrap the named method calls in a Map expression 

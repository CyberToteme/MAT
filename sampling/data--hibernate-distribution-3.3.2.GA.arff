276: // entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception
155: //name from a super query (a bit inelegant that it shows up here)
78: //for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays
125: // implicit joins are always(?) ok to reuse
365: //TODO check there is no actual definition elemnents when a ref is defined
2: //TODO: disable batch loading if lockMode > READ?
363: "/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */"
354: //TODO: make this handle multiple collection roles!
357: // TODO : or should we return 'containsTableAlias'??
353: //TODO: maybe call it getRowSelection() ?
150: //TODO: is this really necessary????
131: // short-circuit for performance...
111: /////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL
191: // TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete
44: //TODO: should this be Session.instantiate(Persister, ...)?
290: // TODO should we just collect these like with the collections above?
249: // TODO: It would be really, really nice to use this to also model components!
59: // TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).
143: // TODO : this constructor form is *only* used from constructor directly below us; can it go away?
53: // todo : remove
262: //yukky! Don't you have subclasses for that! //TODO race conditions can happen here
304: // TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used
197: //TODO: this is a bit arbitrary, expose a switch to the user?
280: //ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties
54: //just to help out during the load (ugly, i know)
182: // worrying about proxies is perhaps a little bit of overkill here...
205: //TODO: perhaps this should be some other RuntimeException...
218: // perhaps this should be an exception since it is only ever used // in the above method?
77: // is it necessary to register %exact since it can only appear in a where clause?
235: "// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY,     ""binary($1)"");"
70: // why does this matter?
4: // turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*
61: //TODO possibly relax that
67: // TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)
204: //TODO: remove use of instanceof!
367: // table=null -> an association - fill // it in later //TODO fill in the mappings for table == null
93: "/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference, but without cacheMode, readOnly, and comment.	 *	 * FIXME: annotations do not use it, so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable, the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e., proc)	 */"

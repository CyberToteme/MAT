// add Figs to the FigNode in back-to-front order
"/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */"
//make port invisible unless mouse enters
"/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */"
//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
"//	fireNodeRemoved(node);"
//      The following does not seem to work - centered the Fig instead. //        getNameFig().setJustificationByName("center");
// Only show actions for associations not already on diagram
// get the widest of all textfigs // calculate the total height
/* 4.5.2.24 Generalization */
// Create the new FigAssociation edge to replace the node
// Make sure we don't try to set things smaller than the minimum
"/* Center the NameFig, since center justification          * does not seem to work. */"
// Do nothing, this rect will always be transparent
// If we're about to upgrade the file lets take an archive // of it first.
"/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */"
// Actions specific to the use case diagram toolbar
// update any text, colors, fonts, etc.
// update the relative sizes and positions of internel Figs
"/*     * @see org.argouml.uml.diagram.layout.Layouter#layout()     */"
// popupAddOffset should be equal to the number of items added here:
// Loop through the associations, counting the ends with aggregations
// Add stereotypes submenu
// The fix
// We handle and consume editing events
// Now we can remove ourself (which will also remove the // attached association ends edges)
/* (MMessage) */
"/*     * List of model element listeners we've registered.     */"
"/* We want to maintain a minimum width for the fig. Also, add the border         * dimensions to the minimum space required for its contents:         */"
// Added this part to load the extra menu content
// and the stereotypes of its features
/* Owner related todo items: */
// A binary association is not a node so reject.
/* Fig related todo items: */
// intentional: if there is nonsense in the field, // we do not set the value
// parse the text that was edited
// intentional: if there is nonsense in the field, // we return false
// Pass everything except editing events to superclass
// stereotype fig covers the name fig:
"/* If the source of the event is an UML object,             * then the UML model has been changed.*/"
// Lazily create the event:
// Default implementation is to do nothing
// The source of an association end should not // be the classifier. If it is the user has drawn the wrong way // round so we swap here.
"/*     * @see java.lang.Object#equals(java.lang.Object)     */"
// TODO: Update setting
/* end class CrUnnavigableAssoc */
//////////////////////////////////////////////////////////////// // accessors
// The <<extend>> label. // It's not a true stereotype, so don't use the stereotype support //int y = getNameFig().getBounds().height;
// Set the tooltip string:
"/*     * @see org.tigris.gef.persistence.pgml.PGMLStackParser#setAttrs(     * org.tigris.gef.presentation.Fig, org.xml.sax.Attributes)     */"
"/*         * Since body ever looks         * at the type of the diagram appearance event, we can simplify from         * sending every existing event to one event only. But since there is no         * catch-all event defined, we just use one. Rationale: reduce the         * number of total refreshes of the drawing.         */"
// Note that "multiplicity" is what is the notation is listening // for in UML1.4 "uppervalue" are listened to in UML2. It is not // currently why it is not required to register for "lowerValue" // also.
"/*         * A use case has an external separator.         * External means external to the compartment box.          * This horizontal line sticks out of the box,          * and touches the ellipse edge.         */"
// fail silently as we expect users to accidentally drop // on to wrong component
// Required for MouseListener interface, but we only care about clicks
"/*             * The diagram are always owned by the model             * in this first implementation.             */"
"/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel,     *      Action)     */"
// 4. Make sure the only FigGroups on a diagram are also //    FigNodes // The report
// No need to update if model element went away
"/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */"
// Required for KeyListener interface, but not used
"/**     * Private utility routine to work out the (positive) x coordinate of a     * point on an oval, given the radii and y coordinate.<p>     * TODO: Use this to calculate the separator lines!     *     * @param a  radius in X direction     * @param b  radius in Y direction     * @param y  Y coordinate     * @return   Positive X coordinate for the given Y coordinate     */"
// Both ends must be defined and nodes that are on the graph already.
// Link the new include relationship in to the ends
//////////////////////////////////////////////////////////////// // internal main.methods
// FigAssociationRole figassociationrole = new FigAssociationRole();
//newFC = _content;
// number of goals should now be 0
// GEF sets a different Fig than the one that we had at construction // time, so we need to set its color and width
// Mark this as newly created. This is to get round the problem with // creating figs for loaded comments that had stereotypes. They are // saved with their dimensions INCLUDING the stereotype, but since we // pretend the stereotype is not visible, we add height the first time // we render such a comment. This is a complete fudge, and really we // ought to address how comment objects with stereotypes are saved. But // that will be hard work.
// place the edge on the layer and update the diagram
// update the priority of the critic to be the same priority as the // decision
/* end computeRoute */
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */"
//TODO: Does this help?
// snooze and verify its been enabled
// If this is not a circle to circle edge we default to let GEF // calculate edge route.
// test with a class and class diagram
// ? two iterations of refinement, maybe should be a for-loop
"/*     * Recursively place all nodes pointed to by outgoing transitions.     *      * Because of the recursive algorithm multiple outgoing transitions     * will end up very lopsided because one entire subgraph will be done     * before dealing with the other transition(s).     *      * @param seen set of nodes seen so far     * @param node the node to collect neighbors for     */"
// Get the two ends of any valid edge
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#clone()     */"
// Only allow binary associations
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateNameText()     */"
/* Set the drop location in the case of D&D: */
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */"
// TODO: assumes public
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)     */"
/*(MElementImport)*/
"/*     * @see GUISettingsTabInterface#getTabKey()     */"
// Modifiers ...
"/*     * @see java.util.Collection#remove(java.lang.Object)     */"
/* This sets the lineWidth of all in the group: */
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */"
// If the line angle is less than 3 degrees then snap the line // straight
//TODO: AssociationRole
// A dependency potentially has many clients and suppliers. We only // consider the first of each (not clear that we should really // accept the case where there is more than one of either)
// Add the node, check that it is an actor or use case and add it to // the model namespace.
"/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#makeSelection()     */"
// Tell GEF its changed
"/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */"
// Add the element and place it in the namespace of the model
"/*     * @see org.argouml.uml.diagram.activity.ui.FigActionState#getNotationProviderType()     */"
// Tell GEF
// TODO -> settings
// Everything else is OK
"/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */"
// Remove a node
"/*     * @see org.argouml.uml.diagram.layout.Layouter#getObject(int)     */"
// Remove an edge
// Something was added - nothing for us to worry about
"/* If it is concurrent and contains concurrent regions,        the bottom region has a minimum height*/"
// Invoke the parent constructor first
"/*     * This makes dragging connected edges very smooth.     *     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */"
// Invoke the parent refresh first
// Give up if the assocation ends don't have a type defined
/* end class StylePanelFigUseCase */
// The vertex was dropped onto the diagram. // Get the region as the first Region in the StateMachine. // If there is no region in the StateMachine then create one.
// initialize any other Figs here
"/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */"
// Only the head should be filled (not the text)
"/*         * Notation settings are different since, we know that, at a minimum,         * the isShowPath() setting can change because with implement         * PathContainer, so we make sure that we have a private copy of the         * notation settings.         */"
//      name updating
// Make all the parts match the main fig
"/*     * Text fig to hold the <<include>> label     */"
// 2. the profile configuration, holding noneditable applied profiles
// The <<include>> label. // It's not a true stereotype, so don't use the stereotype support
/* do nothing */
/* TRY SOME ACTION ERRORS */
// the text will be set later
/* Check if multiple items are selected: */
// If the element import is in the old owned, it means it must have // been removed. Make sure the associated model element is removed.
// TODO: Use per-project undo manager, not global
// By default we don't show the attribute check box. Mark this object // as a listener for the check box.
// verify the name property was correctly updated
// add Figs to the FigNode in back-to-front order // Put this rectangle behind the rest, so it goes first
// TODO: We should be able to just call renderingChanged on the child // figs here instead of doing an updateOperations...
// Make the line dashed
"/*     * List of objects.     *      * NOTE: This main.methods which read/write this don't appear to be used.     */"
// Add an arrow with an open arrow head
// This module will still register as enabled for UML1.4 but it won't // actually do anything.
// Make the edge go between nearest points
"/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */"
// Create a new version of the relevant fig
// If default Namespace is not already set
// The nodes at the two ends
// The next if-clause is important for the Deployment-diagram // it detects if the enclosing fig is a component, in this case // the container will be set for the owning Interface
// The figs for the two end nodes
"/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */"
// Link the new dependency in to the ends
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */"
/* Side effect: This creates the fig: */
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */"
// by default, do not show extension points:
"/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */"
/* Use arbitrary dimensions for now. */
/* Now we are sure dm is a State. */
// Get the parent vector first
"/*     * @see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)     */"
// Formula for a is described in the overall class description.
/*(MAssociationEnd)*/
/* For an ellipse, we can put the box in the middle:  */
"/* If dm is the top state of the statemachine, then it is              * not supposed to have incoming transitions. */"
"/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */"
// super returns -1 if any of GEFs buttons was hit // (but maybe one of the not-GEF-buttons)
// Now we're into processing each specific path // item strategy. // At the moment, we only know PathItemPlacement
// Add menu to add an extension point or note. Placed one before last, // so the "Properties" entry is always last.
"/*	 * @see javax.swing.table.TableModel#getColumnClass(int)	 */"
// Modifier menu. Placed one before last, so the "Properties" entry is // always last.
// Mutators hold write lock & will deadlock if use is not thread safe
// Work out the radii of the ellipse, a and b. The top right corner of // the ellipse (Cartesian coordinates, centered on the origin) will be // at (x,y)
/* Now we are sure dm is a StateVertex. */
// Result as integers, rounded up. We ensure that the radii are // integers for convenience.
// Only for associations
"/*     * Use the code from the FigCircle, not the one from Fig.     */"
/* end class CrInstanceWithoutClassifier */
"/* Let's register for events from all modelelements         * that change the name or body text:          */"
"/* Register for name changes, added extensionPoints             * and abstract makes the text italic.             * All Figs need to listen to ""remove"", too: */"
/* Now we are sure dm is a Composite State. */
// register for extension points:
/*(MAssociation)*/
// Set bounds will be called from our superclass constructor before // our constructor has run, so make sure this gets set up if needed.
// In DeploymentDiagrams the situation is not the // same as in other diagrams only classes, // interfaces and objects can intersect each other // while they are not the EnclosingFig, so you // have to prouve only these elements.
// Set up FigText to hold the condition.
"/*                     * Distribute the extra height over the visible                     * compartments:                     */"
// Join all into a group
// New style importers don't create diagrams, so we'll do it // based on the list of newElements that they created
// UML spec for Extend doesn't call for name nor stereotype
"/*     * @see javax.swing.JComponent#setVisible(boolean)     */"
// Make sure the line is dashed
"/*     * @see junit.framework.TestCase#setUp()     */"
/* Set up the property panels for use case diagrams: */
// If we're using a fixed offset, just add it and return // No collision detection is done in this case
// The renderer should be a singleton
"/*     * @see org.argouml.uml.diagram.activity.ui.SelectionActionState#getNewNodeType(int)     */"
"/*     * Allow all Packages and Classifiers..     */"
// Two points for line segment used to compute slope of path here // NOTE that this is the average slope, not instantaneous, so it will // give screwy results near bends in the path
/* TRY THE PREDECESSORS */
/*(MCompositeState)*/
// private constructor to enforce singleton
/* end class CrNavFromInterface */
// TODO: This is using the default platform character encoding // specifying an encoding will produce more predictable results
// cp1252 is often the default, but windows-1252 is the name listed // by Charset.availableCharsets
// Let the group recalculate its bounds and then tell GEF we've // finished.
"/*     * The clone method that should clone the JGraph with it's contents and     * the toolbar with it's contents. Since both JGraph as the toolbar are     * coming from the GEF framework, cloning them will be hard work and should     * actually not be placed here but in a clone method of the JGraph and the     * Toolbar.     * @see java.lang.Object#clone()     */"
/* We accept a Package, but not a Model or a Subsystem. */
"/* If we do not exclude a Model here, then dropping the                 * Model on a UseCase diagram causes a package                 * to be drawn. */"
// empty list
"/*	 * @see TargetListener#targetSet(TargetEvent)	 */"
// Although we register for notification of diagrams being // deleted, we currently depend on the TargetManager to assign // a new target when this happens // When we implement MDI and have our own list of open diagrams // we can ressurect the use of this
// some convenience main.methods
// Optimize for the normal case to minimize target changes
// read until the end section is found, discard // generated content
// Class Table
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */"
// Select Buttons
// The next AssociationEnd
// Output Directory
"/* No further listeners required in this case - the rest is handled         * by the notationProvider and sub-Figs. */"
// Compile Checkbox
// TODO: the last argument (recursive flag) should be a // selectable option
// skip backup files. This is actually a workaround for the // cpp generator, which always creates backup files (it's a // bug).
// TODO: The following is carried over from setOwner, but probably // isn't needed //        renderingChanged(); // It does the following (add as needed): //        updateNameText(); //        updateStereotypeText(); //        updateStereotypeIcon(); //        updateBounds(); //        damage();
// TODO: This is using the default platform character // encoding.  Specifying an encoding will produce more // predictable results
// TODO: Get saved default directory // outputDirectoryComboBox.getModel().setSelectedItem(savedDir);
// Generate Button --------------------------------------
// Iterate over all the AssociationEnds. We only have a problem if 1) // there is an end connected to an Interface and 2) an end other than // that end is navigable.
// remove trailing /
// container state / composite state
// classify nodes by base path
// End at an Interface? // Navigable other end?
// else ignore
"/* The following is a possible future improvement         * of the modelChanged() function.         * Michiel: Propose not to do this to keep architecture stable. */"
// generate the files
"/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */"
// Doesn't really matter what set we use.
// TODO: Changed from UML 1.4
// Show Filechooser to select OutputDirectory
// Only look at Associations
/* end class ClassGenerationDialog */
"/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */"
/* end class TableModelClassChecks */
"/*     * @see javax.swing.filechooser.FileFilter#accept(java.io.File)     */"
/* Try Changing the direction of m7 */
"/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */"
// ////////////// // TableModel implementation
// both ends must be classes, otherwise there is nothing to merge
//        ArgoEventPump.fireEvent( //                new ArgoImporterEvent(ArgoEventTypes.IMPORTER_ADDED, gen));
// Check if this diagram already exists in the project
// TODO: Should be improved so that it's recognized whether there is something selected that can actually be generated // Nothing selected in the diagram
// Otherwise create a new classdiagram for the package.
"/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */"
"/*     * Overridden to set Argo-specific RenderingHints to determine whether     * or not antialiasing should be turned on.     *     * @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)     */"
// the class is in the diagram // so we are on a second pass, // find the fig for this class can update its visible state.
"/*     * @see java.io.InputStream#read(byte[], int, int)     */"
// add edges // for a 2-pass r.e. process we might have already added the // class but not its edges
// For some reason, this alleged directory is a single file // This could be that there is some confusion or just // the normal, that a single file was selected and is // supposed to be imported.
// "Java" is the default module for historical reasons, // but it's not required to be there
//stores the action command into the UMLPlainTextDocument //class which is also used //for setProperty and getProperty
// the previous line helps, but we better check again:
// There is no need to test if classes is empty because // the shouldBeEnabled mechanism blanks out the possibility to // choose this alternative in this case.
// not a SuffixFilter selected, so we take all
// a runtime exception that occurs when some // internal test fails
// filter out all unchanged files
"/* Take canvas scrolling into account.             * The implementation below does place the element correctly             * when the canvas has been scrolled.             */"
// set the lastModified value
// we can delete figs like figrects now too
//return Arrays.copyOf(selectedFiles, selectedFiles.length);
/* end class SourcePathDialog */
"/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */"
// Roughly equivalent to and derived from old Import.doFile()
"/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */"
"/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
//            LOG.debug("is a Base or Multiplicity");
/* end class CrMultiComposite */
// both ends must be navigable, otherwise there is nothing to merge
"/*         * @see javax.swing.JFileChooser#approveSelection()         */"
"/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */"
"/*         * @see javax.swing.JFileChooser#cancelSelection()         */"
// Add the non-associationend edges (such as comment edges) that were // originally attached to this and attach them to the new // FigAssociation and make sure they are positioned correctly.
// Do layout even if problems occurred during import
"/* The EnumerationLiteral uses a dedicated notation that supports          * parsing ""name1;name2;name3"" and stereotypes.          * Also supports deleting a literal by erasing text. */"
// Add messages from caught exceptions
// Update the discriminator if it changed
// Select the correct diagram (implicitly creates it)
// Add the element to the diagram
"/*     * Print an exception trace to a string buffer     */"
"/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */"
// TODO: Get the list of extended settings from the current // language importer and add those too
// level 0 import detail
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */"
// level 1 import detail
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */"
// level 2 import detail
// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // toolbelt items.
// build the configPanel:
// select the level of import // 0 - classifiers only // 1 - classifiers plus feature specifications // 2 - full import, feature detail
// super implementation found a hit
"/*     * Get the extension panel for the configuration settings.     */"
/* end class CrAlreadyRealizes */
// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
// this is because of the (senseless?) "All files" FileFilter
"/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */"
// Parsing file x of z.
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */"
// progress bar
// no title looks better
"/*     * @see java.util.Collection#size()     */"
// Get the contents of the directory
// The following test can cause trouble with // links, because links are accepted as // directories, even if they link files. Links // could also result in infinite loops. For this // reason we don't do this traversing recursively.
// no need for trigger on "specialization"
// If this file is a directory
// TODO: Add filename ?
"/*         * Crazy numbering scheme at work here.  Here's how the handle numbers         * are laid out.  Values 0-7 are defined by GEF and go left to         * right, top to bottom (ie not clockwise or counterclockwise).         * Values 10-14 zigzag North, South, West, East, Southwest.         * If you can correctly guess where 15 will go, you should buy         * a lottery ticket immediately.         *  <pre>         *            10         *     0-------1-------2         *     |               |         *  12 3               4 13         *     |               |         *  14 5-------6-------7         *            11         * </pre>         */"
// can't remove the last file
"/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */"
// can't remove from existing one so create new one.
"/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */"
// Error/warning messageArea
//        gbc.gridheight = 10;
// cancel/close button
"/*     * @see java.awt.event.ComponentListener#componentMoved(java.awt.event.ComponentEvent)     */"
"/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */"
//////////////////////////////////////////////////////////////// // constructors
// normal model elements are not allowed to have spaces, // but for States we make an exception
"/*	 * @see	 * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent	 * )	 */"
/* end class CrMergeClasses */
"/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */"
// the introducing label
"/*     * @see java.beans.PropertyChangeListener#propertyChange(     *         java.beans.PropertyChangeEvent)     */"
// User closing the progress window is interpreted as cancel request
"/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */"
// panel for controls
//nothings left, disable firing.
// Most likely cause of this is that someone deleted our // target with the event pump turned off so we didn't // get notification.  Nothing we can do about it now and // we are changing targets anyway, so just log it.
//Select an index.
// When this is called from PGMLStackParser.attachEdges, we finished // the initialization of owning pseudo element (CommentEdge)
//removed item in last position
// Just quit
// the text box containing the problem messages
// continue and abort buttons
"/*     * @see org.argouml.uml.diagram.layout.Layouter#getObjects()     */"
// listeners
"/*     * @see org.argouml.uml.diagram.layout.Layouter#getMinimumDiagramSize()     */"
// TODO: this seems to be called at startup only so no check so far
// Add an invisible button to be used when everything is off
// I am only prepared to go this far.
"/*|  //removed to workaround problems with autosplit                     OCLEditor.OPTIONMASK_AUTOSPLIT*/"
"/**     * ADDONLY_COMMAND determines a changeability kind.     * TODO: Removed from UML 2.x.  Phase out of UI - tfm - 20070529     */"
//TabModelTarget interface main.methods
// warn about inherited name conflicts, different critic?
// Process the listeners last to first, notifying // those that are interested in this event
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */"
"/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */"
// Guaranteed to return a non-null array
/*(Classifier)*/
// It's illegal in UML to have multiple elements in a namespace with // the same name, but if it happens, keep them distinct so the user // has a chance of catching the error.  Pick an arbitrary, but stable, // collating order. // We don't call them equal because otherwise one will get eliminated // from the TreeSet where this comparator is used.
// first element is e.g. the class, but we need to have its namespace // to recompute the offenders.
// Update our model with our saved target
"/*     * @see org.argouml.uml.diagram.layout.Layouter#add(org.argouml.uml.diagram.layout.LayoutedObject)     */"
//List classes = getCandidates(); //return classes.size() > 0;
// Loop through the associations, looking for one with aggregation
// Our first button is invisible.   // Selecting it deselects all visible buttons.
//$NON-NLS-1$ //$NON-NLS-1$ // Make sure we have a recognized file extension //$NON-NLS-1$
// Set editor's model
// code generation
// check ocl parsing constraints
"/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// do not create a constraint:
// verify the items were correctly added
// Parse and check specified constraint.
// utility is a namespace collection - also not strictly // required to have variables.
// Split constraint body, if user wants us to
/* end class CrZeroLengthEdge */
// the constraint _must_ be owned by a namespace
// add some test data
// If the eUML.resources system property is defined then we are in a // stand alone application, else we're in an Eclipse plug in. // The eUML.resource should contain the path to the // org.eclipse.uml2.uml.resource jar plugin. //$NON-NLS-1$
// Store constraint body
// New constraint, first time setData is called
//checkAssignIDToObject(figassociationrole, true, true);
// Check name for consistency with spec
// This throws  // org.argouml.model.XmiException: Unknown element in XMI file : Model // because the UML 1.3->1.4 converter can only handle XMI 1.0, not 1.1
// Set name
/* end class CrTooManyAttr */
// Also set name in constraint body -- Added 03/14/2001
// replace name
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */"
// TODO: Why is this ignored? - tfm - 20070110
//////////////////////////////////////////////////////////////// // critiquing API
/* TRY PREDECESSORS */
//Forks have their own outgoing transitions critic
"/*     * Create a new tagged value with the given type and value     * and add it to a ModelElement.     */"
// Delete the model and make sure everything inside goes with it
// Not in UML1.4
"/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */"
// We have no model event listeners, so no need to do anything
// initialize new ToDoItem
// store wizard?
/* dm is a transition */
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */"
"/*     * @see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()     */"
/* Do nothing by default. */
/* the source of the transition is a pseudostate */
"/*     * @see java.awt.datatransfer.Transferable#getTransferData(     *         java.awt.datatransfer.DataFlavor)     */"
// TODO: I18N // Don't use the empty string for this or it won't show in the list
/* TODO: Here too? */
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */"
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     * java.lang.Object)     */"
/* This should not be necessary, but let's be sure: */
// Remember the system id of our root document so that we can write // out profiles and linked models to a different file if requested
// end of interval
"/*                     * this call could easily fall if there is e.g. no public                     * default constructor. If it fails tweak the if/else tree                     * above to accommodate the parameter or check if we need to                     * test the particular method at all.                     */"
// start of interval
/* Remove old listeners: */
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */"
// in middle of interval
// This is the XMI version used to encode the metamodel.  We could // parse deeper to pull out the actual UML version.  The UML 1.4 // version is at XMI/XMI.header/XMI.model[@xmi.version].  The UML 2.1.1 // metamodel doesn't actually seem to contain its version.
// Allow listening to other elements:
/* One of everything */
/* Add new listeners: */
"/*     * @see org.tigris.gef.presentation.FigText#setTextFilled(boolean)     */"
/*  MVW: This can never happen, isn't it? */
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#removeOtherModelEventListeners(java.lang.Object)     */"
// makes sure we can select 'none'
"/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */"
// Don't try to test this if we're removing the element
// check that the model was initialized with the unspecified goal
// we tried to remove a value
//        NotationProviderFactory2.getInstance().addNotationProvider(1234,  //                name, MyNP.class); //        NotationProvider notationProvider = //            NotationProviderFactory2.getInstance().getNotationProvider( //                    1234, new Object()); //        assertTrue("Test notation provider for 1234 not found",  //                notationProvider != null);
// Object[] args = { newValue };
"/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */"
"/* If a message has a name and a named operation          * and a script with parameters but without name,         * then show the operation name: */"
// reuse change event:
// This swaps the direction of m3:
/* TRY MOVING IN A SIMPLE MANER */
"/*     * @see TargetListener#targetAdded(TargetEvent)     */"
// try creating a string from the generated modelelements:
"/*     * @see TargetListener#targetRemoved(TargetEvent)     */"
// Set the child components to the heights in the array list // calculating the height of any proportional component on the // fly.
"/*         * The following UML 1.4 elements have been removed from UML 2.x, so we         * don't bother testing them.         */"
"/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */"
// Do not set buildingModel = false here, // otherwise the action for selection is performed.
// This swaps the direction of m3 back: // the colon is obliged, but the / not and the 2nd dot also not
// catch callers attempting to use one without other
"/* If a message has a name and a named operation          * and an expression with no script,         * then show the operation: */"
"/* If a message has a name and a named operation and a script,         * then show the script: */"
"/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */"
/* Upper / Lower case */
"/*     * @see javax.swing.table.TableModel#getRowCount()     */"
// we want the b: Foo attribute, that is the second in the list
// may only occur as child of the model or in a package
"/*         * For those things which we've already migrated to UML 2.x syntax         * we need to map them back to their UML 1.4 equivalents during the         * migration period.         */"
// //    if event source is unknown or //       the event source is the container's target //          then update the field
"/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */"
// //   check the possibility that this is a promiscuous event
// Remap specific classes
// a deployment diagram shows something about the whole model // according to the UML spec, but we rely on the caller to enforce // that if desired.
// a deployment diagram shows something about the whole model // according to the uml spec
// Clean up our two models and the extent that we read profile in to
// ns is a namespace, but not a package
// TODO: the following cleans up left overs from previous tests, but, // preferably we shouldn't have to do this...
// ommit root package name; it's the model's root
"/*     * @see java.awt.dnd.DragSourceListener#dragExit(java.awt.dnd.DragSourceEvent)     */"
// there is a selection
// If we have a model but no list then build the list with // preferred constructor. Eventually all lists should be built // this way.
/* end class ActionCopy */
"/*     * @see java.awt.datatransfer.ClipboardOwner#lostOwnership(     *      java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable)     */"
/* Add a predicate for ArgoUML's default capabilities: */
// TODO: User defined profile support untested currently //        + "\t\t<userDefined>\n" //        + "\t\t\t<filename>\n" //        + "foo.profile\n" //        + "</filename>\n" //        + "\t\t\t<model>\n" //        + "foo.profile.package\n" //        + "\t\t\t</model>\n" //        + "\t\t</userDefined>\n"
// remove from the model
// It is a UML element that is not a ModelElement
"// ProjectBrowser exposes functionality, not components. //	assertNotNull(pb.getTabProps()); //	assertNotNull(pb.getStatusBar());"
// lets see if this diagram has some figs on it
// no content of diagram
// we cannot delete the last diagram
"/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */"
// we cannot delete the model itself
"/*         * commented out next piece to remove failure of testcase. The testcase         * is probably correct but the implementation of DetailsPane is not        pane.getTabs().setSelectedComponent(docPane);        pane.targetSet(e);        assertEquals(docPane, pane.getTabs().getSelectedComponent());        */"
//////////////////////////////////////////////////////////////// // static variables
"/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */"
//TODO: We should also test that the object //have been removed from their namespace. //Collection c = Model.getFacade().getOwnedElements(p.getRoot());
"/*     * @see javax.swing.text.Document#remove(int, int)     */"
// TODO: the following fails due to the XMI writing saving all top level // model elements and because even if there was no empty project, by // creating a class, the undo mechanism in the project manager will // force the creation of an empty project. //        assertEquals(1, profileModels.size());
// test for return parameters. they can ALSO fail!
// same name, same participants, two offenders
//ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram(); //return (activeDiagram instanceof UMLClassDiagram);
// simply create 3 usecases and an actor in a package with individual names
// usage of other sureRemove method is legacy. They should be // integrated.
// Multiplicity, MultiplicityRange, and all Expression subtypes // don't have 0-argument create main.methods, so we special case them.
// the diagram contains figs so lets ask the user if // he/she is sure
// build extend // these parameters seem to be in correct order // add an extend. We do not need an assoc on the extending use case
// TODO: This catch block needs to be narrower and do something // with the caught exception - tfm 20071120 // Ignore
"/*     * @see javax.swing.table.TableModel#getColumnCount()     */"
// OK Button ------------------------------------------
// It would be better if we didn't need the container to get // the target. This constructor can have zero parameters as // soon as we improve targetChanged.
// Delete Button
"/*     * Get a node's name along with the name of its parent (which we'll use to     * find the factory to create it with.     */"
// procede with the deletion in the model
"/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */"
// confirm with the user that he wants to delete, presenting the // list of settings to delete
// If the component is a JLabel which has another // component assigned then position/size the label and // calculate the size of the registered component
// Mutators hold write lock & will deadlock // if use is not thread-safe
// Handle the simple cases // Anything very exotic will fail, but that will be our clue // that the test needs to be extended
/* The user cancelled! */
"/*         * This needs to be a concrete metatype, so we can't use         * the general, but abstract, Classifier.  Replace with its         * concrete subtypes.         */"
//Custom button text:
"/*     * @see junit.framework.TestCase#tearDown()     */"
"/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */"
"/*     * @see TestCase#setUp()     */"
// Tests used to be coded to assume immediate event delivery. // They've been modified to use flush() where needed. - tfm //oldEventPolicy = MFactoryImpl.getEventPolicy(); //MFactoryImpl.setEventPolicy(MFactoryImpl.EVENT_POLICY_IMMEDIATE);
/* TRY SOME PREDECESSOR ERRORS */
"/*     * @see java.lang.Runnable#run()     */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */"
// The following will bring up a dialog box, so can't be run headless //        actionSupplier.actionPerformed(new ActionEvent(this, 0, "foo"));
// setup a user defined profile which isn't loaded by the model // subsystem and contains a stereotype and this contains a // tag definition
// If no project was entered on the command line, // try to reload the most recent project if that option is true
/* Try adding the extension from the chosen filter. */
// adding project files icon
//        Object icon = ResourceLoaderWrapper.lookupIcon(s); //        putValue(Action.NAME, Translator.localize(s)); //        putValue(Action.SMALL_ICON, icon); //        // Set the tooltip string: //        putValue(Action.SHORT_DESCRIPTION, Translator.localize(s));
//////////////////////////////////////////////////////////////// // main main.methods
"/*	 * @see javax.swing.table.TableModel#getValueAt(int, int)	 */"
/* end class ActionOpenProject */
"/*     * The property value has changed so rebuild our view.     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// TODO: see if the new target has a TV that we can proxy
/* Try adding the default extension. */
// We only have this here until we have stereotypes // list on property panel
/* end class ActionSaveProjectAs */
// only need to this from super()
"/*     * @see org.argouml.uml.ui.UMLComboBox#UMLComboBox( UMLComboBoxModel,     *      Action, boolean)     */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel#isValidElement(java.lang.Object)     */"
"/*     * This action performs the layout and triggers a redraw of the editor pane.     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
"/*     * @see     * org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders     * (java.lang.Object)     */"
"/**     * Constructor.     * <p>     * TODO: Correct?     *     * @param nodes The UML elements, typically classifiers, to generate.     * @param inModel <code>true</code> if the path is in the model.     */"
// verify the priority was correctly updated
"/*             * MDR has a hardcoded printStackTrace on all exceptions,             * even if they're caught, which is unsightly, so we handle             * unknown elements ourselves rather than letting MDR throw             * an exception for us to catch.             *             * org/netbeans/lib/jmi/util/Logger.java             *             * This can be uses to disable logging.  Default output is             * System.err             * setProperty(""org.netbeans.lib.jmi.Logger.fileName"", """")             *              org.netbeans.mdr.Logger             *             * The property org.netbeans.lib.jmi.Logger controls the minimum             * severity level for logging             */"
"/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */"
/* Testing: does not fire. */
/////////////////////////////////////////////////////////////////////// // Proxy main.methods for real UMLModelElementTaggedValue ///////////////////////////////////////////////////////////////////////
// Only do this for classifiers
// Rearrange the diagram layout
// Compound critics
// make this thread interruptible, if called from SwingWorker
// A problem if we found more than 1 aggregation
// targets ought to be UML objects or diagrams
"/*     * @see org.argouml.model.CommonBehaviorHelper#setNodeInstance(java.lang.Object,     *      java.lang.Object)     */"
// TODO: We shouldn't need this as well as the above.
// Check here if there are no incoming call actions // if not then create an activation at the top of the lifeline
//      Guaranteed to return a non-null array
"/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */"
/* end class TabProps */
"/*             * UML 1.4.2 Spec section 4.5.3.20 [5]             * A GeneralizableElement may only be a child of             * GeneralizableElement of the same kind.             */"
// Not currently present as token in Model.getFacade(). // NIF: runTruthTest(Model.getFacade().isAElement(o), //                   Model.getFacade().ELEMENT); // NIF: runTruthTest(Model.getFacade().isAExpression(o), //           Model.getFacade().EXPRESSION); // NIF: runTruthTest(Model.getFacade().isAExtensionPoint(o), //           Model.getFacade().EXTENSION_POINT); // NIF: runTruthTest(Model.getFacade().isAFeature(o), //                   Model.getFacade().FEATURE);
// If our map has any entries for this type, it's a connection type
// We have found a non-static one that is not initialized.
// See if there's a pair in this list that match the given // model elements
/* end class CrIllegalName */
"/*     * @see TargettableModelView#getTargettableModel()     */"
// Ignore any error.  The transaction may already have // been unwound as part of exception processing by MDR
"/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */"
// If we don't have it, find the trigger. If this fails it will keep // its default value of null
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     *      java.lang.Object)     */"
// includes the "/" // the "seq_expr" from the header javadoc // the ":" is not included in "number" - it is always present
"/*     * @see org.argouml.model.CommonBehaviorHelper#setReceiver(java.lang.Object,     *      java.lang.Object)     */"
// put everything together
// If the model repository doesn't manage a DI model // then we must generate our Figs by inspecting PGML
// make lists
// Give the resolver.getIdToObjectMap() entries // priority over entries with the same UUID from // resolver.getIdToObjectMaps() because entries // in resolver.getIdToObjectMaps() are historic.
// make buttons
//@Override //public final void setHeadline(String s) { //setupHeadAndDesc(); //}
// ignored this event
// Get the assocations and connections. No problem (there is a separate // critic) if this is a binary association or is an association role.
// make buttons layout
// make listeners
"//    private Property	prpTodo; //    private Property	prpProperties; //    private Property	prpDocumentation; //    private Property	prpStyle; //    private Property	prpSource; //    private Property	prpConstraints; //    private Property	prpTaggedValues;"
// Build namespace hierarchy like this: //   g     a //         /\ //        b  c //           /\ //          d  e f
"/*     * @see javax.swing.Action#isEnabled()     */"
// Enumerate declaring class
"/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */"
// TODO: constraints // TODO: required tags
"/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */"
// NOTE: Although it's not shown in the UML 1.4 spec, a TemplateArgument // appears to be a datavalue (like MultiplicityRange) and can not be // reused in multiple instances.  The UML diagrams don't show it as a // composition, but it effectively is.
"/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */"
// Get the next non-return parameter. Null if non left.
//            GridBagConstraints gridBagConstraints3 = new GridBagConstraints(); //            gridBagConstraints3.gridx = 2; //            gridBagConstraints3.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints3.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints3.gridy = 3; //            GridBagConstraints gridBagConstraints2 = new GridBagConstraints(); //            gridBagConstraints2.gridx = 0; //            gridBagConstraints2.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints2.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints2.gridy = 3;
/* end of SourcePathControllerImpl class definition */
// This is not a well formed model in a strict sense. // See the multiplicity in UML 1.3 Figure 2-5.
// Always select properties panel if defaultToProperties is true, // and if properties panel is appropriate for selected perspective
//sb.append((String) Model.getFacade().getBody(c));
// A parameterized class can only be the client of a single binding
/*MModelElement*/
// Add to the collection and round to look at the next one
// next statement is necessary to update the textfield // if the selection is equal to what was allready // selected
"/*             * ActionPaste.getInstance().setEnabled( Globals.clipBoard             * != null && !Globals.clipBoard.isEmpty());             */"
// For now just skip registering this and ignore the request, // but the real issue is that MagicDraw serializes the same // object in two different composition associations, first in // the referencing file and second in the referenced file
// The workarea is all the visible space except the menu, // toolbar and status bar.  Workarea is laid out as a // BorderSplitPane where the various components that make up // the argo application can be positioned.
"/*         * @see javax.swing.ComboBoxEditor#selectAll()         */"
"/*         * @see javax.swing.ComboBoxEditor#getItem()         */"
// we don't want to show some nasty gray background // color, now do we?
"/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */"
"/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */"
"/*     * @see org.argouml.cognitive.critics.Critic#addKnowledgeType(java.lang.String)     */"
// Check against "" is needed for backward // compatibility.  Don't remove without // checking subclasses and warning downstream // developers - tfm - 20081211
// necessary to create distance between // the textfield and the icon.
// Compare against all earlier operations. If there's a match we've // found the problem
//make new column with LabelledLayout
// create the return message modelelement with the interaction // and the collaboration
// Comment.name text field - editing disabled
"/*     * @see javax.swing.table.TableModel#getColumnName(int)     */"
// Comment.body text field - editing disabled
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     * org.argouml.cognitive.Designer)     */"
// Only change the background colour if it is supplied by the LAF. // Otherwise leave look and feel to handle this itself.
"/*     * @see org.argouml.cognitive.Poster#getClarifier()     */"
// In this case, the bounds are determined by the FigEdge
"/*     * @see org.argouml.cognitive.Poster#getSupportedGoals()     */"
// In this case, the bounds (of the box) are determined // by the FigClassAssociationClass
// A newly created AssociationClass may not have all its parts // created by the time we are called
"/*             * The following calls are ORDER DEPENDENT. Not sure why, but the             * layer add must come before the model add or we'll end up with             * duplicate figures in the diagram. - tfm             */"
// TODO: Defer most of this work if the panel isn't visible - tfm
"/*     * Get the generic clarifier for this designer/poster.     *     * @see org.argouml.cognitive.Poster#getClarifier()     */"
// needs to be updated for changes in Notation subsystem - tfm //            String nameStr = Notation.generate(this, getOwner()).trim(); //            getNameFig().setText(nameStr);
"/*     * @see TargetListener#targetSet(TargetEvent)     */"
"/*     * Just returns false.     *     * @see org.argouml.cognitive.Poster#canFixIt(org.argouml.cognitive.ToDoItem)     */"
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */"
"/*     * @see tudresden.ocl.check.types.Type#hasState(java.lang.String)     */"
// If there's only a single child (and we're it's only parent), // set a hint for where to place it when we get to its row
//          Guaranteed to return a non-null array
"/*     * @see javax.swing.ListModel#getElementAt(int)     */"
// chooser.setSelectedFile(new File(fileName));
// if the y coordinate is before the classifier role y, // we place the start in the corner of the fighead.
/* So, let's do it the hard way: */
// We know this is a return action now. It must be pointing the // opposite way to the activator.
// If the diagram is empty, GEF won't write anything, leaving us with // an empty (and invalid) file.  Handle this case ourselves to prevent // this from happening.
// Java SE 6 has a native GIF writer, but it's not in Java 5.  One // is available in the JAI-ImageIO library, but we don't currently // bundle that and at 6+ MB it seems like a heavyweight solution, but // I don't have time to produce a stripped down version right now - tfm // https://jai-imageio.dev.java.net/
// Anything else is handled the normal way
// The FigMessage that triggered this FigActivation into existence
// Create an image which will do deferred rendering of the GEF // diagram on demand as data is pulled from it
// TODO real numbers not yet supported //assertEquals(DefaultOclEvaluator.getInstance() //.evaluate(null, null, "1.5"), 1.5);
// NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that // saves a copy of the entire image in an internal buffer before // starting work, defeating the whole purpose of our incremental // rendering.
//        LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
// Correct Exception was thrown.
"/** * Action to save a diagram as a GIF image in a supplied OutputStream. * * TODO: This requires Java 6 in its current state, so don't use. * * @author Tom Morris <tfmorris@gmail.com> */"
// The purpose of this method is not explained and it give give // NPE depending on z order of figs as they are read. For now // ignore if null but for future lets delete this.
// Convert max x/y to width/height
// Get a DOMImplementation
//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
// Create an instance of org.w3c.dom.Document
"/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */"
// we actually are computing max x & max y, not width & height
// If we have a currentAct object that means have reached the end // of the lifeline with a call or a create not returned. // Add the activation to the list after setting its height to end // at the end of the lifeline.
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */"
// Create an instance of the SVG Generator
// make it stretch vertically
// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE pgml SYSTEM "pgml.dtd">
"/* Correct lazy initialization of static field              * without further updates: */"
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */"
// Look for a TagDefinition matching the given name
//////////////////////////////////////////////////////////////// // ToDoListListener implementation
"/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */"
// if is a message, it must return the sender // and the receiver of the message.
"/**     * Return just the comment edges for a specific layer.     * TODO: Document: Diagram / layer?     *     * @param diagram The diagram.     * @return a {@link List} with the edges.     */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
"/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */"
// Request that we be made visible if we're not? // topLevelTabbedPane.setSelectedComponent(t);
// if the added edge is a Create Message it will affect the position // of the ClassifierRole so it should be repositioned
"/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */"
// handle multivalued tagged value
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */"
//super(Model.getFacade().getName(op), null);
// Target has been deleted
"/*     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */"
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */"
// If the row is past the end of our current collection, // return an empty string so they can add a new value
"/*     * Utility function to add a listener for a given property name     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            name of property to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */"
// keep nagging until the user solves the problem: // This seems a nice way to nag:
// tagValue = true;
// There are one or more regions so find the one that the //vertex was dropped in
// for debugging
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */"
/* end class ToDoByOffender */
"/*     * Override FigNode implementation to keep setOwner from getting called.     */"
// We really shouldn't add it until after it is set up, but we // need it to have an owner for the following method calls
//////////////////////////////////////////////////////////////// // constants //////////////////////////////////////////////////////////////// // instance variables
"/* This next argument may be used to switch off     * the generation of sequence numbers - this is     * still to be implemented.     * They are less desired in sequence diagrams,     * since they do not add any information.     * In collaboration diagrams they are needed,     * and they are still optional in sequence diagrams. */"
// Since we aren't sure of ordering, fire event for whole table
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */"
"/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */"
// no way, we have to give up
"/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
"/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */"
// The diagram already exists in this project. Select it // as the current target.
"/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
// Do nothing during the deprecation period, then it can be removed.
// if the classifier is not in the current diagram, add it:
//////////////////////////////////////////////////////////////// // event handlers
// for performance, we check if this is a selfmessage // if it is, we have just updated the activations
//fireTreeNodesChanged(this, path, childIndices, children);
"/*     * @see tudresden.ocl.check.types.Type#navigateQualified(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */"
// This is done for compatibility with previous version: // Move the argo.user.properties // written before 0.25.4 to the new location, if it exists.
// TODO: assumes public, user pref for default visibility?
"/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */"
"/*     * @see java.lang.Object#hashCode()     */"
"/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */"
"/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */"
"/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */"
// There is a bug in GEF where positioning nodes can affect // edge positions. We need to do 3 iterations to protect // against that.
"/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorAdded(org.argouml.application.events.ArgoGeneratorEvent)     */"
"/*     * Add an element listener and remember the registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */"
// MultiplicityElement is now an interface implemented // by element types that support multiplicities - tfm
/* end class ActionImportFromSources */
// Self messages act differently so it is needed to move them separetly. // Only self messages of selected CR should be horizontally translated.
// Don't test changed element if it was deleted
"/*     * @see org.argouml.ui.AbstractArgoJPanel#spawn()     */"
// this is never downlighted...
// This one should work except Java is not registered by default //        assertTrue(settings.setNotationLanguage("Java")); //        assertEquals("Java", settings.getNotationLanguage());
// Only specified format are allowed.
"/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */"
"/* Implementation Note:    * Unlike many of the interfaces to the model there is no control to force    * a single instance of an XmiReader. This is to allow work objects generated    * by the implementation to be garbage collected when an XmiReader instance    * falls out of scope.    */"
"/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */"
"/*     * Populate our namespace hierarchy to the requested depth.  Total number     * of created elements is children^maxLevel, so be careful not to increase     * parameters too much.     */"
// Try changing namespace of element and make sure results track
"/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#getProperty(     *         org.omg.uml.diagraminterchange.DiagramElement)     */"
// by default the build already builds one default EP
"/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */"
// Set the tooltip of the arrow to open combined tools:
// Create a generalizable element with an element without children.
"/* Set the minimum and preferred equal,         * so that the size is fixed for the labelledlayout.         */"
// reopen the project and assert that the MetaProfile isn't part of  // the profile configuration, including the fact that the stereotype  // <<Critic>> isn't found
// This will add a new ModelElement event listener // after update is complete
/* We presume that the container equals this PropPanel. */
// in UML2, the tag definition is the attribute itself
// Refresh the target for all our children which weren't getting // while not visible
"/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */"
"/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */"
"/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */"
"/*     * @see java.io.InputStream#read()     */"
"/* This works - we do get an event - and now              * refresh the UI: */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */"
// to manage the case there are no label/component // pairs but just one component
"/*     * @see org.argouml.notation.providers.NotationProvider#parse(     * java.lang.Object, java.lang.String)     */"
// Assumes the next child is the labelled component
// Make sure the component width isn't any greater // than its maximum allowed width
// assert that the model element that depends on the profile is  // consistent
// If a preferred height is not given or is // the same as the minimum height then fix the // height of this row.
// TODO: what about ObjectNode? //        return org.eclipse.uml2.uml.ObjectNode.class;        
//Project p = ProjectManager.getManager().getCurrentProject(); //Collection elems = //ModelManagementHelper.getHelper() //    .getAllModelElementsOfKind(MClassifier.class);
//    /** //     * Construct an exception with a message and a causing exception. //     * //     * @param message the message //     * @param c the cause of the exception //     */ //    public XmiReferenceException(String message, Throwable c) { //        super(message, c); //    }
// Allow listening to other elements: //                removeOtherModelEventListeners(listTarget);
/* TRY SOME MORE COMPLEX MOVING */
// The only way a region is set to null is if we're deleting // the vertex in which case we do nothing special so that // the removal of the state triggers a delete event.
// Implements backspace functionality
//make a nice little target area:
"/* In this case, either the container was not set,         * or it was not contained in a statemachine.         */"
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */"
"/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */"
"/*     * @see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)     */"
// A composite state contains at least one region
// TODO: gone from UML 2
// TODO: Not exact, but close
"/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */"
/* end class ActionCut */
// create a new project and assert that it has the MetaProfile  // as part of the project's profile configuration
// Allow listening to other elements: //                addOtherModelEventListeners(listTarget);
//      if there is a selection on the clipboard
// get localised strings once only
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */"
// setting the icon
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationChanged(org.argouml.application.events.ArgoNotationEvent)     */"
// setting the tooltip to type and name
"/*     * @see org.argouml.profile.ProfileManager#lookForRegisteredProfile(java.lang.String)     */"
"/*     * @see org.argouml.persistence.SAXParserBase#handleEndElement(     *         org.argouml.persistence.XMLElement)     */"
"/* In the next line, replacing makeEmptyProject         * by getCurrentProject fails the test,         * except when run in Eclipse.         * MVW: I have no idea why.*/"
"/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */"
"/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */"
"/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */"
"/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */"
"/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */"
"/*     * @see org.argouml.persistence.MemberFilePersister#load(org.argouml.kernel.Project, java.io.InputStream)     */"
// Stop updating model when we're not visible
// in UML2, a td is a property of a stereotype in a profile
"/*     * @see org.argouml.ui.TabTarget#refresh()     */"
// Only update our model if we're visible
"/* This target is a statemachine,              * for which no diagram exists yet,              * so, let's use it. */"
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */"
/* end class TabTaggedValues */
// setEnabled((Globals.clipBoard != null && // !Globals.clipBoard.isEmpty()) || // !isSystemClipBoardEmpty());
/* end class ActionPaste */
"/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */"
/* The target is a valid context. */
"/*     * Style panels only apply when a Fig is selected.     *     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */"
"/*         * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(         * org.argouml.ui.targetmanager.TargetEvent)         */"
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */"
"/*     * @see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)     */"
// must not be used in UML2; we model a method as a // OpaqueBehavior object that already has a body, so there is no need // to have an intermediate expression object
// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0
// Try to get the corresponding body and set it // to the current body // This _should_ work, if all the bodies // were stored with their corresponding languages.
// Specify design issue category and knowledge type
"/* Let's just build a Statemachine,              * and put it in a suitable namespace. */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */"
"/*     * the model structure has changed significantly, eg a new project.     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#structureChanged()     */"
// buttonBox.add(Box.createRigidArea(new Dimension(0, 20)));
"/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementChanged(java.lang.Object)     */"
// String title = getUI().getDialogTitle(this);
// TODO: Since there may be multiple top level elements in // a project, this should be using the default Namespace (currently // undefined) or something similar
// button action:
// Detach any non-associationend edges (such as comment edges) already // attached before this association node is removed. // They'll later be re-attached to the new FigAssociation
/* end class CrOppEndConflict */
"/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.application.api.ProgressMonitor#updateProgress(int)     */"
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */"
// If its an interface we have an interface end, otherwise its // something else and we should see if it is navigable. We don't // check that the end is a Classifier, rather than its child // ClassifierRole, since we have effectively eliminated that // possiblity in rejecting AssociationRoles above.
"/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */"
// Make sure it's parseable as an number
"/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */"
/*(MExtend)*/
"/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */"
// initialize basic parameters that are // different from Decision.UNSPEC
"/* This next line presumes that the 1st fig with this owner             * is the previous port - and consequently nullifies the owner             * of this 1st fig. */"
// Get the Association and its connections. // Iterate over all the AssociationEnds and check that each connected // classifier is in the same sub-system or model
// repair action for possible NP after load
/* (MClassifier) */
/* TRY SOME MORE ERRORS */
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeaturePrimaryExpression(tudresden.ocl.parser.node.AFeaturePrimaryExpression)     */"
/* (MModelElement) */
//to be able to remove dependencies later
// TODO: Removed from UML 2.x - phase out usage - tfm 20070530
"/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */"
// copy to new file and let the regular load code // do the actual load
/* end class ActionAddAttribute */
// Apparently this object had no getItemUID
// since UML2 it's easier: TDs only via stereotypes
// Just mark for rebuild next time since we use lazy loading
"/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs. This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */"
// A stereotype got applied or removed // Just mark for rebuild next time since we use lazy loading
"/*     * @see Namespace#pushNamespaceElement(NamespaceElement)     */"
// no concrete subclasses defined, this class is "useless"
"/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */"
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
//////////////////////////////////////////////////////////////// // issue resolution
// All strings collate before all UML elements
// The attribute 'targetScope' of an AssociationEnd in UML1.x is no // longer supported in UML2.x
// and then by their enclosing path to fully distinguish them
// Elements are collated first by name hoping for a quick solution
// Keep track of first non-equal comparison to use in case the // case-insensitive comparisons all end up equal
// Add the action to the component
// stop desiring the goal which should remove it from the model
// If the strings differed only in non-primary characteristics at // some point (case, accent, etc) pick an arbitrary, but stable,  // collating order.
// first verify that the set goal priority did not add an extra goal
/* {transient=false, volatile=false} */
// Argo customization
// prohibit instantiation
// KeyEvent.isActionKey() method
// Apparently this object had no getUUID
"/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */"
// Apparently it had a getItemUID, // but we're not allowed to call it
// Apparently this object had no setItemUID
// Apparently it had a setItemUID, // but we're not allowed to call it
// class preloading, so packages are there...
// ...getPackage() can return null's, so we have to // cater for this:
"/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintStream)     */"
"/* Switch the value back off, so that we will                     * get notified again next time.                     */"
// Ignore any nested exceptions. We don't want infinite loop.
// Didn't work.
// First step. Create the panel if not already done and options are // available. Otherwise it retains its default value of null.
// Likely a NoSuchMethodException or an IllegalAccessException loading/invoking eawt.Application main.methods
"/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */"
// If the target method returns a boolean, use that as a hint
// For eclipse setup
// For ant setup
// When running from maven
"/*     * @param node     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAStandardDeclarator(tudresden.ocl.parser.node.AStandardDeclarator)     */"
// If we're setting a handler, enable the Preferences menu item by calling // com.apple.eawt.Application reflectively
"/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */"
// Override OSXAdapter.callTarget to send information on the // file to be opened
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */"
// Ignore if the directory does not exist. // This error will throw when running from the Eclipse setup.
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAMultiplicativeExpressionTail(tudresden.ocl.parser.node.AMultiplicativeExpressionTail)     */"
"/*     * @see org.argouml.cognitive.ToDoItem#deselect()     */"
// There was a comment saying that the below has no cycles, but // Classycle thinks there's a cycle here too, so I believe there // really is one - tfm 20070702 //            "org.argouml.uml.cognitive.critics",
// Just completed the first step where we make our choices. First // see if we have a choice. We always should, so print a rude // message if we don't
//TODO:{"org.argouml.ui", "org.argouml.cognitive.ui"},//fails due to subpackages //TODO:{"org.argouml.cognitive", "org.argouml.cognitive.critics"},
"/*     * @see org.argouml.cognitive.checklist.CheckItem#expand(java.lang.String,     *      java.lang.Object)     */"
//{"org.argouml.kernel", "org.argouml.uml.diagram.ui"},//why does this fail?
"/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */"
// do nothing by design
//TODO: different critic or special message for classes //that inherit all ops but define none of their own.
// Obey the contract ourselves!
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */"
// register all of the event listener trackers
"/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */"
// remove all of the listeners
// fire all of the diagram events
// success
// fire all of the generator events
// no good trigger
// fire all of the help events
// fire all of the notation events
"/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */"
// keep track of total events fired
// keep track of which events fired
"/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */"
// initialize the event listener trackers which // verify that all of the proper events were fired
"/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */"
// Display events are fired on the Swing event thread. // We need to wait for them to be dispatched // NOTE: if more display events are added to this test, this one // needs to be last
"/* TODO: MVW: I think this has to be:                 * clone.nameFig = (FigSingleLineText) cloneFig;                 * but have not the means to investigate,                 * since this code is not yet used.                 * Enable the menu-items for Copy/Paste to test...                 * BTW: In some other FigNodeModelElement                 * classes I see the same mistake. */"
// counts each bit that has been fired
/* ResolvedCritic(String, List) */
/* ResolvedCritic(Critic, ListSet) */
// The interface realization will be created in the client namespace // (client is a namespace)
/* ResolvedCritic(Critic, ListSet, boolean) */
"/* testmc should now have an ItemUID so we should be able to         * create without adding a new ItemUID */"
// verify isRelevant returns true
// set enabled to false and check the opposite condition
// verify isRelevant not is false
// NotSnoozedCM isRelevant checks if the critic is snoozed // snooze the critic to verify isRelevant returns false
// unsnooze the critic to verify the critic is not relevant
// verify isRelevant is true
// verify isRelevant is still false
// isRelevant should now be true
//    private static final StereotypeView[] stereotypeViewMap; //     //    static { //        stereotypeViewMap = new StereotypeView[3]; //        StereotypeView. //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_TEXTUAL] =  //            StereotypeView.TEXTUAL; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_BIG_ICON] =  //            StereotypeView.BIG_ICON; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_SMALL_ICON] =  //            StereotypeView.SMALL_ICON; //    }
// isRelevant should still be true
"/*     * @see org.argouml.model.UmlHelper#getDestination(java.lang.Object)     */"
// initialize test data
// initialize the ToDoList
// add a ToDoItem
// if the current shortcut has been set but is void, then the // current shortcut is not set --> then the default value does not // change
// redundantly add item again which should be ignored
// size should be 1 since addition of second item would have been ignored
"/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */"
// retrieve item
"/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     * int, int)     */"
// remove item
// size should be 0 since item was removed
// initialize the GoalModel
"/* If the source of the event is an UML object,             * e.g. the owner of this Fig (but not always only the owner             * is shown, e.g. for a class, also its attributes are shown),             * then the UML model has been changed.             */"
// change priority of unspecified goal so we can verify it was updated
// check that the model correctly updates a goal's priority
// test the removal of a goal
// start desiring a goal which should add a goal and bump the size to 1
// number of goals should now be 1
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     * java.lang.Object, org.argouml.cognitive.Designer)     */"
//        UMLSequenceDiagram seqdiag = new UMLSequenceDiagram();
// This test calls ToDoList.addElement which requires the // Model.  We are able to get away with using the Mock model.
//        checkAssignIDToObject(seqdiag, true, true);
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */"
// FigEdgeNote has no UUID
//////////////////////////////////////////////////////////////// // Cmd API
//checkAssignIDToObject(fighistorystate, true, true);
//checkAssignIDToObject(figstate, true, true);
// TODO: This could just work off the names in the UML profile // TODO: It doesn't look like it matches what's in the UML 1.4 spec
// initialize a decision object with parameters
// We moused over an object just as it was deleted // transient condition - doesn't require I18N
// verify parameters were initialized correctly by the constructor
// No more we can do here on failure
// set the priority to a different value
// if we have only one return value and without type, // the return param string is ": ,", we remove it
// set the name to a different value
"/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */"
// following the update the priority should be // equivalent to Decision.UNSPEC
// test that properties were correctly initialized by the constructor
"/*     * @see java.awt.Component#getMinimumSize()     *     * sets minimum size to 120,100     */"
// initialize the Checklist
// verify the size of the list
// The trySave method results in the save taking place in another thread. // If that completes without error the ProjectBrowser.exit() method will // be called which will actually exist the system.
"/* The text the user has filled in the textfield is first checked             * to see if it's a valid multiplicity. If so then that is the              * multiplicity to be set. If not the input is rejected. */"
// test that the category and description are correct
// create a new list to test the addAll
// add all of the test items from the first list
/*MMessage*/
// verify the size of the new list
"/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */"
// initialize the ChecklistStatus
// Construct a CheckItem 
"/*    * @see org.argouml.profile.Profile#getProfileIdentifier()    */"
// reset the values to something different
// (2) Construct another CheckItem
//////////////////////////////////////////////////////////////// // comments
// test that the properties were correctly initialized
// initialize SnoozeOrder
// unsnooze and verify its been disabled
// test with a class in a package
// test with a class and an inner class
// It is quite possible that the cause of the problem has by now // been deleted, in which case we will throw an exception if we try // to change things. Catch this tidily.
// try with Statediagram
/* Nothing yet. Later maybe something like: */
/* Put the statemachine in the namespace of the class: */
// test with a package and a class and activity diagram
/* end class ProjectMemberModel */
// the name of this type of Object
// build the Activity Diagram
// Attempt to save this project under a new name.
"/* We no longer send individual events,             *  so next code is obsolete: */"
// CurDecisionCM isRelevant checks to see if the critic has // any decisions that have a priority > 0 and less than the // priority of the critic.  By default the critic has no // decisions so isRelevant should return false.
/* We initialised Java Notation, so let's activate it: */
/* Needed for initialisations: */
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
// set MetaProfile as a default profile
// create a dependency from the project's model to the MetaProfile
// remove the MetaProfile from the project's profile configuration
// save the project into a new file
// adds all stereotypes defined at the profiles applied to the // current namespace
// setup a user defined profile
/* TRY GUARD/ITERATOR SYNTAX */
// assert that the project's model element that had a dependency to  // the MetaProfile doesn't get inconsistent
// assert that the project's model elements that had a dependency to  // the UML profile for Java are consistent
"/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */"
// add it to the project configuration
// maybe UML2 has these as constants somewhere
// create a dependency between the project's model and the user defined  // profile
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
// save the project
// Notation events are fired on the Swing event thread. // We assume that serializing on the final call is sufficient
// load the project
// remove the user defined profile and the directory where it is
// Success - expected exception
// Clean up after ourselves by deleting profile model
// Test both forms of addBaseClass
// Test remaining form of removeBaseClass
//$JUnit-BEGIN$
//$JUnit-END$
// we put the targets 'backwards' in the history // since the first target in the addedTargets array is // the first one selected.
"/*     * Sets the value of an element#s property (tagged value). This method     * makes sure that a Collection of values is set if and only if the     * property is multivalued (upper multiplicity value greater 1), so passing     * a collection is safe.     *      * @see org.argouml.model.ExtensionMechanismsHelper#setValueOfTag(java.lang.Object, java.lang.Object, java.lang.Object)     */"
"/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */"
// Flag to enable performance testing - off by default
// initialize the model and profile subsystems to simulate a fresh  // ArgoUML session
// not implementable in UML2, because property is missing
// 20 sec.
// Add one child.
// If the target has changed notify the third party listener if it // exists and dispatch a new element event listener to // ourself. Otherwise dispatch a target reasserted to ourself.
// Performance testing parameters
// EnabledCM isRelevant checks if the critic is enabled // initialize this to true to verify isRelevant returns true
// Add grandchild.
// Check periodically to see if we've exceeded time limit
"/*         * Convert the string (e.g. ""aaa,bbb,ccc"") into separate         * stereotype-names (e.g. ""aaa"", ""bbb"", ""ccc"").         */"
// Add another child.
// Tree is created depth first, so this should be at the bottom
/* TRY SOME GUARD/ITERATOR ERRORS */
// See if the other copy was just a lucky shot
// Layout
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getOwner()     */"
"/*     * @see junit.framework.TestCase#TestCase(String)     */"
// Make sure we have a root model for TagDefinitions to get put in.
// create the tree of objects
// only targets we didn't have allready count
// copy package p1 into p2 package
// Extend, but only between two use cases. Remember we draw from the // extension port to the base port.
// change the structure in p1 package
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */"
// verify the copied package
// verify the copied class
// verify the copied nested package and the copied interface
// verify the copied attribute
// See if we can copy a class right off
// Change things
"/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */"
// Scale everything up
"/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */"
// Assert that the copy isn't modified when the source changes
"/*     * @see javax.swing.tree.TreeModel#getRoot()     */"
// TODO: For large lists, this is doing a linear search of literally thousands of elements
"/*     * @see org.argouml.uml.diagram.layout.Layouter#remove(org.argouml.uml.diagram.layout.LayoutedObject)     */"
// See if two copies look like copies of eachother
"/*     * Nothing is editable, since a Link takes its identity      * from the Association.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(     * org.tigris.gef.presentation.Fig)     */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#initNotationProviders(java.lang.Object)     */"
// See if we can copy a datatype right off
// // This function will, by design, contain long lists of i18n keys. // It might be tempting to shorten these by constructing them from // the parts but please then consider that we might loose the // possibility to build tools to statically check the property files // against this file. //
// See if two copies look like copies of each other
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()     */"
// See if we can copy an interface right off
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */"
"/*     * Update an existing tagged value on a model element.     */"
// verify all events were fired correctly
// See if we can copy a package right off
// See if we can copy a stereotype right off
// Ignore non-existent and empty names
// Expected
// Is the name already in the list of those seen, if not add it // and go on round.
"//	""Permission"","
// Check to see if association still exists
"/*        * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)        */"
// Expected IllegalArgumentException seen
// exception expected - test success
// specifies valid elements for an Interface to contain
// expected - test success
// Create a new arg list with a different set of args (but same types)
"/*     * If the new encloser is null, and the old one is a Component,     * then the ""enclosed"" Fig has been moved on the diagram.     * This causes the model to be adapted as follows:     * remove the elementResidence     * between the ""enclosed"" and the oldEncloser.     *     * @see org.argouml.ui.ArgoDiagram#changeFigEncloser(org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode)     */"
// not static
"/*     * The Transition has a name text box. It contains:     * <ul>     * <li>The event-signature     * <li>The guard condition between []     * <li>The action expression     * </ul><p>     *     * The content of the text box is generated by its own notationProvider.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */"
// Test passed
"/*     * @see org.argouml.uml.diagram.UMLMutableGraphSupport#isRemoveFromDiagramAllowed(Collection)     */"
//The source was one of the referenced state's path which // has got a new name.
// NOT UML1.4
"/*     * Update the text labels and listeners.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// non existent in UML1
// specifies valid elements for a Package to contain
//Place the comment Fig on the nicest spot on the diagram
// not in UML1.4
// returns List
// TODO: We don't currently have any settings that can change on a // per-fig basis, so we can just use the project/diagram defaults //        settings = new DiagramSettings(renderSettings);
// specifies valid elements for a Region to contain
// Deleting the stereotype should cascade to the TagDefinition, // then the TaggedValue
"/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders(java.lang.Object)     */"
// Must be called after setImplementation.
// Enumerate fields
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#calculateWeight()     */"
// Enumerate constructors
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */"
// Indicate that the test was validated
// TODO: Look up class in truth table
"/*     * Listen also to the association, of which the link is an instantiation,      * since we want to update the rendering when      * the association name changes.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */"
// Check superclass. //Make sure this class does not extend or reference non-ArgoUML classes
// valid elements for a Stereotype to contain
// Enumerate main.methods // Enumerate method arguments
// A list of valid connections between elements, the // connection type first and then the elements to be connected
// NIF: runTruthTest(Model.getFacade().isAInteraction(o), //           Model.getFacade().INTERACTION);
"// NIF: unTruthTest(Model.getFacade().isAMethod(o), //	Model.getMetaTypes().getMethod());"
/* end class WizMEName */
// specifies valid elements for a Use Case to contain
// NIF: runTruthTest(Model.getFacade().isAStructuralFeature(o), //          Model.getMetaTypes().getStructuralFeature()); // NIF: runTruthTest(Model.getFacade().isATaggedValue(o), //          Model.getMetaTypes().getTaggedValue());
"/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */"
// Call main.methods that exists for all objects and that always return // something meaningful
// specifies valid elements for an Operation to contain
//        LOG.log(Level.FINE, "getData returning raster = " + translatedRaster);
// Find the create method in the offical API
/* MMessage */
// Now get the factory implementation method to be invoked
// Here it is another object sent to the test.
"/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#isStereotypeVisible()     */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()     */"
// abstract
"/** * Rule for Project->Root (Top level) Elements. *  * TODO: As currently implemented it returns all top level elements in  * the model repository, not just those in a given project.  Since we * only support a single project at a time currently, these are equivalent * but this will need to be enhanced with additional bookkeeping in  * Project when we support multiple open projects - tfm. * * TODO: I changed it to get the roots from the project. It was showing * the profiles that were loaded but were not applied to the current project * - maurelio1234. *  * @author Tom Morris <tfmorris@gmail.com> */"
"/*     * Listen for a RemoveAssociationEvent between the comment     * and the annotated element. When recieved delete the CommentEdge     * and this FigEdgeNote.     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// Make sure we start off clean
"/*     * @see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)     */"
// The association should have same namespace as from class
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */"
// Only one end should be navigable
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAIntegerLiteral(tudresden.ocl.parser.node.AIntegerLiteral)     */"
//        "UseCaseInstance",  // Gone in UML 2.x & unused by ArgoUML
// Set up reader to be first filter in chain
// Set namespace so buildAssocationRole works
/* end class WizNavigable */
"/*     * If we're drawing to an edge then only allow if the start is a comment     * @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)     */"
/* end class CrFinalSubclassed */
// Build an activity graph with a single action state // the way the GUI would
/* end class CrNameConflictAC */
// This is a private method in Model.
/* end class CrMultipleAgg */
// Handling main.methods that doesn't return
"/*     * @see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()     */"
// Handling the isInitiated method
"/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */"
// Handling the initialise method
"/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */"
// Handle main.methods which return opaque objects
// one of the expected errors, just ignore
"/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */"
// Could not find model.
// We shouldn't get here, but just in case... // We want a wide exception catcher to make sure our // transaction always gets ended
// Handle UML 1.4 metamodel which is a MOF 1.3 model
// UML 1.4
"/*     * @see org.argouml.ui.explorer.Relocatable#isRelocationAllowed(java.lang.Object)     */"
// XMI 2.1
"/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */"
// UML 2.x
"/*     * @see org.argouml.model.ModelImplementation#getCoreHelper()     */"
// XMI 1.1
"/*     * The only thing we need to deal with is updating is the condition text.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// Only remap package if we didn't remap specific class
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */"
"/*         * A few of our factories are slightly different than as declared in the         * UML 1.4 metamodel, so we remap them here.  <metamodel, argouml>         */"
"/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */"
// Packages to be remapped
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */"
// Subsystem has been removed from UML 2.x
/* TRY THE ACTIONS */
"/*     * @see org.tigris.gef.undo.UndoableAction#isEnabled()     */"
"/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */"
// case 1
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameFig()     */"
// Because UML 1.4 & 2.1 metamodels are organized differently we need // to traverse the hierarchy looking for our owning Package.
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */"
// Specific classes to be remapped //      remap.put("", "");
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outARealLiteral(tudresden.ocl.parser.node.ARealLiteral)     */"
// Go the other way to lookup an element by path 
"/*     * @see org.argouml.uml.reveng.ImportCommon#isMinimiseFigsChecked()     */"
"/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDescendSelected()     */"
"/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#getDefaultValue()         */"
"/*     * @see org.argouml.uml.reveng.ImportCommon#isDescendSelected()     */"
// ActivityGraphs
// WFR Transitions, OMG UML 1.3
// Instance (in UML 1.4) and Classifier are abstract and not tested
"/*     * @see org.argouml.application.api.ProgressMonitor#updateSubTask(java.lang.String)     */"
"/*         *  Extend, Include, UseCaseInstance & ExtensionPoint not implemented         */"
"/*         * We return a new List with the options instead of the options themself         * because we don't want the user to be able to change the options.         *          * @see org.argouml.uml.reveng.SettingsTypes.UniqueSelection#getOptions()         */"
// reuse time event:
// Do nothing.
"/*         * State is concrete in UML 1.3, but becomes abstract in UML 1.4, so we         * never allow it to be created (and don't test creation)         */"
//        new InitProfileSubsystem().init();   
// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
// This should work now that they both have names
// If method not supported ignore failure
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */"
// Fine!
"/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(org.argouml.uml.ui.SourcePathTableModel)     */"
// Translate & clip graphic to match region of interest
// Sequence diagrams are not shown as children of the // collaboration that they show but as children of the // classifier/operation the collaboration represents. // Statediagrams and activitydiagrams are shown as children // of the statemachine or activitygraph they belong to.
"/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel2,     *      Action, boolean)     */"
// CommonBehaviorFactory // DataTypesFactory // ExtensionMechanismsFactory // ModelManagementFactory
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatCollection(java.util.Iterator)     */"
// set up all parameters. Some main.methods are invoked with // primitives or collections, so we need to create them // accordingly
// The following should fail
// and leave things unchanged
"/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */"
"/*         * Constructor.         */"
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getModelElement()     */"
"/*         * Constructor.         *           * @param me an Object         */"
/* Everything fine... */
"/*     * @see org.argouml.ui.TabTarget#getTarget()     */"
// reuse signal event:
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)     */"
// reuse call event:
"/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */"
//try creating a TimeEvent
//try changing the triggertype to ChangeEvent
"/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */"
// nested class:
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */"
/* No need to check any further if we fail the 1st part. */
"/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()     */"
/* START TESTING STUFF */
"/*         * Set the storage id for our repository so that MofIds will be unique         * (they are composed as ""storageId"":""serialNumber""). NOTE: The storage         * manager only looks for a few property names such as the         * StorageFactoryClassName. Everything else needs to be prefixed with         * ""MDRStorageProperty."" which gets deleted from the property name         * before it and its associated value are copied to an *internal*         * property table separate from the system property table.         */"
/* TRY SOME ERRORS */
"/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */"
// For a Transition use indirection through source StateVertex
// If we can't find a model, return the outermost // containing model element
"/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */"
"/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(java.lang.Object)     */"
"/*     * @see org.tigris.gef.presentation.FigNode#getPortFig(java.lang.Object)     */"
"/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */"
"/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsHelper()     */"
// Notation allows to add or modify things, not remove. // Hence, this does nothing:
/* end class CrCircularInheritance */
// The expected exception is thrown.
/* Both diagram types shall show sequence numbers when requested: */
/* But the collaboration diagram refuses to leave them out: */
"/*     * @see org.argouml.uml.util.namespace.Namespace#popNamespaceElement()     */"
/* If the message has a name, but no action, then show the name: */
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#setSelectedItem(java.lang.Object)     */"
"/* If a message has a name and a named operation,         * then show the operation: */"
/* TODO: Should there really be () here? */
"/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */"
"/* If a message has a name and a named operation and an empty script,         * then show the operation: */"
"/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */"
"/* If a message has a name and a named operation          * and a named script with parameters,         * then show the script: */"
"/*     * @see org.argouml.model.ModelImplementation#getCopyHelper()     */"
"/* TODO: Why is there a space before the ( here,          * and not in case of the operation name? */"
"/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()     */"
/* The action still has the argument from above. */
//this is not a very useful transition
"/*     * @see org.argouml.model.ModelImplementation#getVisibilityKind()     */"
/* Mixed case */
"/*     * @see org.argouml.uml.util.namespace.Namespace#isEmpty()     */"
/* A complex internal transition */
"/*     * @see org.argouml.model.ModelImplementation#getPseudostateKind()     */"
/* These are NOT entry/exit/do activities! */
/* Long list of internals */
"/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */"
// or should the 1 be 0 ?
"/*         * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()         */"
// deleting it all
"/*     * @see org.argouml.model.ModelImplementation#getMessageSort()     */"
/* If there is no script, then the language should not be maintained. */
//        ret.setIsLeaf(false); //        ret.setIsRoot(false);
"/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */"
"/*     * @see org.argouml.model.ModelImplementation#getUmlFactory()     */"
"/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()     */"
// Create file
"/*     * @see org.argouml.model.ModelImplementation#getModelManagementHelper()     */"
// This is the normal case.
"/*     * Overridden purely to keep our superclass from removing the listener     * that we just added.     *     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */"
// Load a project which contains links to it
// test project readable files
"/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object)     */"
// Standard UML 1.4 profile
"/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */"
// Create a default profile and record its contents
"/*     * @see java.util.Collection#containsAll(java.util.Collection)     */"
// Write the profile out to a temp file
"/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */"
// Read it back in to a new empty project
// specifies valid elements for an SimpleState to contain
// setting up the dependent profile creation
"/*     * @see org.argouml.model.CollaborationsHelper#getAllClassifierRoles(java.lang.Object)     */"
// actual call that executes everything
"/*     * @see org.argouml.model.CommonBehaviorHelper#getSource(java.lang.Object)     */"
// verifications
"/*     * Returns the value of an element's property (tagged value). This method     * makes sure that a Collection of values is returned if and only if the     * property is multivalued (upper multiplicity value greater 1).     *     * @see org.argouml.model.Facade#getValueOfTag(java.lang.Object, java.lang.Object)     */"
"/*     * @see org.argouml.model.VisibilityKind#getPackage()     */"
"/*     * @see org.argouml.model.PseudostateKind#getJunction()     */"
// create profile model
"/*     * @see org.argouml.model.DirectionKind#getInParameter()     */"
"/*     * @see org.argouml.model.PseudostateKind#getShallowHistory()     */"
// save the profile into a xmi file
"/**     * @see org.argouml.model.CopyHelper#copy(java.lang.Object, java.lang.Object)     *     * Make a copy of element in the given namespace.<p>     *     * This function is a dispatcher that calls the     * copyElement(Element,Namespace) function from XXXFactory.<p>     *     * This function may fail and return null for any of the following reasons:     * <ol>     * <li>No copy function is known for element's type.     * <li>The copy function fails or throws.     * </ol>     *     * @param anelement     *            is the element to copy.     * @param ans     *            the namespace     * @return a copy of element, or null.     *     * @throws IllegalArgumentException     *             if element is null.     */"
// Called during teardown
// remove leftovers from other tests
// There is a bug in the version of MDR (20050711) that // we use  that causes it to fail to delete aggregate // elements which are single valued and where the // aggregate end is listed second in the association // defined in the metamodel. For the UML 1.4 metamodel, // this affects a StateMachine's top StateVertex and // a Transition's Guard.  See issue 4948 & 5227 - tfm // 20080713
// There seems to be cases where we don't erase the profile. // Let's make sure it is deleted.        
"/*             * For a Namespace:             * <pre>             * [2] The operation allContents results in a Set containing             * all ModelElements contained by the Namespace.             *   allContents : Set(ModelElement);             *   allContents = self.contents             * where             *   contents = self.ownedElement -> union(self.namespace, contents)             * </pre><p>             */"
// [euluis] Using Windows style initial path, don't know if this fails  // in *nixes.
"/*         * The following from the original NSUML implemenetation was attempting         * to implement WFR #1 from section 2.5.3.32 of the UML 1.4 spec, but if         * there is an owner set, no namespace is valid. The checks for this         * WFR, if desired, need to go in setOwner() and setType() - tfm         */"
// ensure that model subsystem implementation doesn't remember the // profiles by changing their names and directories
//////////////////////////////////////////////////////////////// // static accessors
// but, lookout, it doesn't work both ways
"/*             * For a Package:             * <pre>             * [3]  The operation allContents results in a Set containing             * the ModelElements owned by or imported             * by the Package or one of its ancestors.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *     self.parent.allContents->select(e |             *          e.elementOwnership.visibility = #public or             *          e.elementOwnership.visibility = #protected))             *             * where the required operations are defined as :             *             * [1] The operation contents results in a Set containing the             * ModelElements owned by or imported by the Package.             *   contents : Set(ModelElement)             *   contents = self.ownedElement->union(self.importedElement)             * [2] The operation allImportedElements results in a Set containing             * the ModelElements imported by the Package or one of its parents.             *   allImportedElements : Set(ModelElement)             *   allImportedElements = self.importedElement->union(             *     self.parent.oclAsType(Package).allImportedElements->select(             *                   re | re.elementImport.visibility = #public or             *                        re.elementImport.visibility = #protected))             * </pre>             */"
//        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi, //                "x.oclIsKindOf(Classifier)"), true);               
// on a headless system (without display) this will crash
// private JPanel propertyPane;
// contains instances of each modelelement // used for testing so that we only use each modelelement // once
// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215 // There is no need for these because they arn't used by buildConnection() - b00__1 //        {Abstraction.class, org.eclipse.uml2.uml.Class.class, org.eclipse.uml2.uml.Class.class, null, }, //        {Abstraction.class, org.eclipse.uml2.uml.Package.class,org.eclipse.uml2.uml.Package.class, null, }, //        {Abstraction.class, Component.class, Interface.class, null, },
// propertyPane = /*TabProps */
// currently this is in this try block as it does not work // _propertyPanel always has size 0,0
// Make sure this test happens on the AWT event thread
//        JPanel docPane = pane.getTab(TabDocumentation.class);
// The target list is empty, re-emptying it again  // should not generate any events:
// new target is of type object, refresh should not be called
"/*     * @see org.tigris.swidgets.Orientable#setOrientation(Orientation)     */"
// new target is a fig, refresh should be called
"/*     * @see java.util.List#add(int, java.lang.Object)     */"
// Setting one target should generate one event:
// new target is of type UMLClassDiagram, refresh should not be called
// handles all children of relationship including extend and // include which are not members of core
// TODO: We could check that the contents of the files differ.
// NOTE: If we switch to a persistent repository like the b-tree // repository we'll want to keep the old extent(s) around
// new target is a modelelement, refresh should not be called
//testing with subset of targets
// set same target again should not generate new events:
//TabProps gets selected! //So, 2nd time right
// adding same targets list again should not generate new events:
"/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */"
// adding same target again should not generate new events:
/* end class CrInterfaceOperOnly */
//reverse order
// check for more literals (';' separated):
// now remove one target by setting subset:
/* If the destination is a DataType, then reject: */
// Ignore if the directory does not exist. // This error will throw when running from the ant setup.
// NOTE: we have to do this due to leftovers from other tests // being causing strange errors when running in Eclipse.
// all tests should consider the threshold as inclusive value
// Normally the extent should exist already, but in the case of // making an empty project, we may not have an extent yet, so // create a default extent
// this test is a bit stupid, but nevertheless...
// {A, A} are offenders
// remove the first prefix because it may be an archive // (like magicdraw)
// everything ok
//"org.argouml.notation.providers",//fails because sub-packages fail (?) //"org.argouml.notation.providers.java", //"org.argouml.notation.providers.uml", //"org.argouml.notation",//fails because sub-packages fail (?) //"org.argouml.notation.ui",
// same name, different classes, everything ok
"/* The user-DropActions are:                 * Ctrl + Shift -> ACTION_LINK                 * Ctrl         -> ACTION_COPY                 * Shift        -> ACTION_MOVE                 * (none)       -> ACTION_MOVE                 */"
// {A,A,B,B} are offenders
"/* Testcase: drag something from another             * application into ArgoUML,             * and the explorer shows the drop icon, instead of the noDrop.             */"
// {} no offenders
// generalizations are not required to have unique names within a // namespace
"/* And remember where we are about to draw                     * the new ghost image:                     */"
// All use cases and actors require associations // hence all predicates evalulate to true
"/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePathSettings()     */"
// build association // build association between actor and top use case.
"/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */"
// NOTE: This listener needs to always be active // even if this tab isn't visible
"/*     * @see java.util.List#set(int, java.lang.Object)     */"
// Arbitrary settings - not used used for testing
"/*     * @see java.util.Collection#addAll(java.util.Collection)     */"
"/*     * @see java.util.Collection#toArray(java.lang.Object[])     */"
// the graph should stay the same.
// build include // it seems that the parameters for build include are just the other way // round // add an include: we do not need to have associtions on one
// setup
"/*     * @see java.util.List#subList(int, int)     */"
// real test
"/*     * @see java.lang.Object#hashCode()     *     * This is a rather bad hash solution but with the {@link #equals(Object)}     * defined as below, it is not possible to do better.     */"
// Some arbitrary bounds and settings - unused in test
// Make sure everything created gets deleted
"/*     * @see java.awt.event.MouseListener#mouseReleased(     *          java.awt.event.MouseEvent)     */"
// setup the Project due to its use in SourcePathTableModel ctor
// create a class model element
"/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */"
// Return a package to use as the Namespace.
// Disable event delivery during model load
// restore original event policy - not supported by MDR - tfm //MFactoryImpl.setEventPolicy(oldEventPolicy);
// Make sure we always have a default extent. // The old extent will get deleted as part of creating the // new extent.
//cont.setTarget(elem);
// Testing with more than one, since it failed with a manual test I  // made.
// The following will bring up a dialog box, so can't be run headless //        actionClient.actionPerformed(new ActionEvent(this, 0, "foo"));
"/*     * Refresh the table when a critique is enabled/disabled     *     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */"
// create a new empty project
// Inconclusive
// add the profile stereotype to the class
// add the profile to the project configuration
// Use a transaction to avoid the performance penalty (3x) of // MDR's autocommit mode
// This works when running the test from within Eclipse. // Apparently Eclipse runs the tests using a class-loader that // has the tests Folder among the URL:s.
//disable the buttons for now, since no selection has been made yet
// create a class in the project model
// check that the tag definition is returned by // {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
// If we're setting a handler, enable the About menu item by calling // com.apple.eawt.Application reflectively
// Set the screen layout to what the user left it before, or // to reasonable defaults.
//////////////////////////////////////////////////////////////// // instance variables
"//  Autoscroll Interface... //  The following code was borrowed from the book: // 		Java Swing // 		By Robert Eckstein, Marc Loy & Dave Wood // 		Paperback - 1221 pages 1 Ed edition (September 1998) // 		O'Reilly & Associates; ISBN: 156592455X // //  The relevant chapter of which can be found at: // 		http://www.oreilly.com/catalog/jswing/chapter/dnd.beta.pdf"
//      calcBounds();
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)     */"
// For classifiers
//////////////////////////////////////////////////////////////// // constants
"/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(     *         java.awt.datatransfer.DataFlavor)     */"
// case 4 // erase it
//////////////// // event handlers
//////////////////////////////////////////////////////////////// // TreeModel implementation
// case 1 // after(...)
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALiteralCollection(tudresden.ocl.parser.node.ALiteralCollection)     */"
// We have the path provided from the build script.
// Check the localized parts.
// Wait for all Model subsystem events to be delivered
// Wait for all AWT events to be dispatched and processed
"/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */"
"/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */"
// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
"/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */"
// This is null as until // the first stereotype declaration is seen. // After that it is non-null.
//newOp.setOwnerScope(op.getOwnerScope()); // //not needed in case of operation
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALetExpression(tudresden.ocl.parser.node.ALetExpression)     */"
//                Model.getExtensionMechanismsFactory().buildTaggedValue( //                        tagName, new String[] {"true"}, Model.getFacade().getRoot(umlObject));
// MClassifiers // cannot be Bag
"/*     * @see org.argouml.model.ModelImplementation#getDataTypesHelper()     */"
// Read xsltStream into a temporary file // Get url for temp file. // openStream from url and wrap in StreamSource
"/*     * This function only sets the color of the divider line      * (since that is the only visible part), and can be used to make      * the divider line invisible for the top region in a composite state.     *      * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */"
// if the object does not have a name, // than no problem
"// tree // value // isSelected	(dont want a colored background) // isExpanded // isLeaf // row	(not important for rendering) // hasFocus (dont want a focus rectangle)"
// Only work for associatins
// We need to find the stereotype with the name // "create" and the base class BehavioralFeature in // the model. If there is none then we create one and // put it there.
//- RedrawManager.unlock(); //- _redrawer.repairDamage();
// if this composite state is not attached to a statemachine // it is not the toplevel composite state.
// If this was an association then there will be relevant // information to fetch out of the mode arguments.  If it // not an association then these will be passed forward // harmlessly as null.
// find selected rows and make a list of the model elements // that are selected
//////////////////////////////////////////////////////////////// // TreeCellRenderer implementation
// always fire changes in the case something has changed in the // composition of the taggedValues collection.
// Build up an array list of the heights of each label/component pair. // Heights of zero indicate a proportional height.
//            CmdPaste cmd = new CmdPaste(); //            cmd.doIt();
// Ignored: Highly unlikely, and what would we // do anyway?  log it
// stereotypes applied to the target mostly control which TDs // (but see below for other listeners too)
"/*     * Overridden to make it possible to include a stateVertex in a composite     * state.     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */"
// TODO: Add referenceValue for tagged values  // which have a non-primitive type
// add a decision but set the critic priority to 0 so isRelevant // should still be false
// Because the notation events get dispatched on the Swing // event thread, we need to use invokeAndWait to make sure that we // don't return until they've been delivered
// Parent is Element, but it has no attributes or associations to check // checkElementCopy(e1, e2);
"/*     * @see tudresden.ocl.check.types.Type2#navigateParameterizedQuery(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */"
// Extra careful now, not to keep any references to the // second argument.
"/*	 * @see javax.swing.table.TableModel#isCellEditable(int, int)	 */"
// Auto-create a return message for a call message
"/*     * @see tudresden.ocl.check.types.ModelFacade#getClassifier(java.lang.String)     */"
// get the source of the return message
// get the dest of the return message
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCallParameters(tudresden.ocl.parser.node.AFeatureCallParameters)     */"
//            Fig spf = null; //            Fig dpf = null; //            FigNode sfn = null; //            FigNode dfn = null;
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAAdditiveExpressionTail(tudresden.ocl.parser.node.AAdditiveExpressionTail)     */"
// If the event originated from the window w/glass pane, consume  // the event
"/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintWriter)     */"
// Add GUI-internal stuff. // GUI-internal stuff is panes, tabs, menu items that are // part of the GUI subsystem i.e. a class in the // org.argouml.ui-package. // Things that are not part of the GUI, like everything that // has any knowledge about UML, Diagrams, Code Generation,  // Reverse Engineering, creates and registers itself // when that subsystem or module is loaded.
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAPostfixExpressionTail(tudresden.ocl.parser.node.APostfixExpressionTail)     */"
// This is perfectly normal and happens among other things // within the call to setDiagram (below).
// iterate through the tabbed panels to determine whether they // should be enabled.
//        tabs.addTab(Translator.localize("dialog.find.tab.name-and-location"), //                nameLocTab);
"/*     * @see java.lang.Object#clone()     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outABooleanLiteral(tudresden.ocl.parser.node.ABooleanLiteral)     */"
// if the current shortcut has not been set, then the actual // shortcut value is the default one
// if the user cancelled the operation, // we don't have to save anything
"/*     * @see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)     */"
// Generate and register the OSXAdapter, passing the main.methods // we wish to use as delegates for various // com.apple.eawt.ApplicationListener main.methods
// TODO: no Links in UML 2
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAExpressionListOrRange(tudresden.ocl.parser.node.AExpressionListOrRange)     */"
// nothing we can do about veto, so just ignore it
//        LOG.log(Level.FINE,result.x + ", " + result.y //                + " theta = " + theta * 180 / Math.PI //                + " dx = " + dx + " dy = " + dy);
//////////////////////////////////////////////////////////////// // event handling
"/*     * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)     */"
//////////////////////////////////////////////////////////////// // Fig accessors
"/*     * @see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)     */"
// the UML object // wrong end of the edge
"/*     * Tests if enter is pressed in the _bbodField so we need to set the target     * bounds.     *     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */"
// We are going to add the ones still valid & new ones // in the right sequence:
"/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */"
//////////////////////////////////////////////////////////////// // events
// this is safe because getName always returns a string of some type
// if the new edge implements the MouseListener // interface it has to receive the mouseReleased() event
//////////////////////////////////////////////////////////////// // user feedback
//////////////////////////////////////////////////////////////// // GraphFactory implementation
// adapted from SelectionWButtons from line 280 // calls a helper method to avoid this edge disappearing // if the new source and dest are the same node.
// Give up if we are already on the graph. This is a bit inconistent // with canAddNode above.
"/*     * @see javax.swing.AbstractAction.AbstractAction(java.lang.String)     */"
// Link the new extend relationship in to the ends. Remember we // draw from the extension use case to the base use case.
// next line does give user.home back but this is not // compliant with how the project.uri works and therefore // open and save project as give different starting // directories.  String directory = // Globals.getLastDirectory();
// Correct the activator value
"/*     * @see java.awt.Window#dispose()     */"
// Although we've historically written out the DOCTYPE, the DTD doesn't // actually exist and this line will get stripped by the .uml file // persister //        + "<!DOCTYPE profile SYSTEM \"profile.dtd\" >\n"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */"
// REMEMBER to change this if you change the number of MEs with source // path settings
"/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */"
// put the x at the right side of the activation if needed
"/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */"
// Make sure there is the minimum gap above the message being drawn
// Make sure there is the minimum gap below the message being drawn
//////////////// // actions for toolbar
"/*         * @see javax.swing.ListCellRenderer#getListCellRendererComponent(         *         javax.swing.JList, java.lang.Object, int, boolean, boolean)         */"
// Get the region as the first Region in the State. // If there is no region in the StateMachine then create one.
"/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */"
// Create the layer
// Create the renderer
// If we're not provided a namespace then get it from the diagram or // the root
"/* Force the line-width to 0, since the FigGroup that contains the      * stereotype may want to show a border, but we don't. */"
// Link the previous/next reference of the swimlanes // according to the x order.
"/*     * Catches a mouseevent and calls mySingleClick and myDoubleClick if a tab     * is clicked which is selected.     * @see java.awt.event.MouseListener#mouseClicked(MouseEvent)     */"
//////////////////////////////////////////////////////////////// // GraphModel implementation
// make space for the clarifier // for vertical symmetry // margin between text and border
//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
//////////////////////////////////////////////////////////////// // contructors
//////////////////////////////////////////////////////////////// // event processing
"/*     * @see org.argouml.model.ModelImplementation#getStateMachinesFactory()     */"
//////////////////////////////////////////////////////////////// // fig accessors
"/*     * @see org.tigris.gef.graph.GraphListener#edgeRemoved(org.tigris.gef.graph.GraphEvent)     */"
// can't have a connection between 2 interfaces: // get the 'other' end type
// Only work for associations
// Use "aSize" to build up the minimum size. Start with the size of the // name fig and build up.
"/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */"
"/*     * @see javax.swing.event.MenuListener#menuDeselected(javax.swing.event.MenuEvent)     */"
// Our angle theta is arctan(opposite/adjacent) // Because y increases going down the screen, positive angles are // clockwise rather than counterclockwise
// if we are the dest and is a call action, create the  // activation, but don't add it until the height is set.
// if we are the destination of a create action, // create the entire activation
// if we are the target of a destroy action // the figlifeline ends here and we add the activation
// if we are the source of a return action // the activation ends here.
"/*     * @see java.util.List#remove(int)     */"
// we do nothing. No call to the parent
"/*     * Compares obj1 and obj2 sorting by user object type, then name. Diagrams     * are sorted first, then packages, then other types. sorts by name within     * type groups. Nulls are sorted first for names.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */"
// we don't recalculate activations, just move them
// if is a classifier role, it must return all the related messages.
// Comments from anywhere in the model are allowed
// argument can be an instanceof a Fig which we ignore
// All other types of elements must be in this namespace
// (1) test that the properties were correctly initialized
"/*     * This is not the correct location to set the cursor.     * The commented out code illustrates the calculation     * of coordinates.     *     * @see java.awt.dnd.DragSourceListener#dragOver(java.awt.dnd.DragSourceDragEvent)     */"
// No problem if this is an association role.
// we initialize the coordinates.
// limit our retries in case its too hard to get free
// we do nothing
"/*     * Do string compare of names of UML objects.  Comparison is     * case insensitive using a primary strength collator in the user's     * locale.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */"
// manage if cursor x is less than lastX1 
"/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */"
// manage if cursor x is more than lastX2 
// manage changes of direction...
"/*                 * Alternatively, we could reduce the height of the Fig by the                 * height of this one hidden compartment. But that would not be                 * possible for the width - so we better return to minimal                 * dimensions overall.                 */"
// I have no direction yet
"/*     * @see org.tigris.gef.base.PathConv#applyOffsetAmount(java.awt.Point, java.awt.Point, int, java.awt.Point)     */"
// we move down or up the messages that are downward the broom
// we recalculate all the activations
// we draw a cross
"/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */"
// we don't let the user move the messages horizontally.
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *         java.lang.Object, org.argouml.cognitive.Designer)     */"
// if the edge is near the bottom of the classifier roles, // we enlarge all the FigClassifierRoles in the diagram.
// we need the edge to be complete
// the initial x is the left side of the activation
"/*     * @see org.argouml.model.ModelImplementation#getUseCasesFactory()     */"
// if the y coordinate is inside the head, // the x must be in the border of the headFig.
"/*     * @see org.tigris.gef.presentation.FigGroup#addFig(Fig)     */"
"/*         * @see java.awt.dnd.DropTargetListener#dropActionChanged(java.awt.dnd.DropTargetDragEvent)         */"
"/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     *     * Override setBounds to keep shapes looking right.     */"
/* Use a different notation as Messages on a collaboration diagram: */
"/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */"
// Operations ...
"/*     * @see org.tigris.gef.graph.GraphListener#nodeAdded(org.tigris.gef.graph.GraphEvent)     */"
//TODO: add logging, but this will never happen and is handled
// If possible we determine this by checking the destination // and source Figs are the same. If this is not possible // because the edge is not yet connected then we check the // model.
// we update the activations...
"/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */"
// This call seems not very robust. Yet to determine cause.
"/*     * Override setBounds to keep shapes looking right.     * The classifier and state Figs are nicely centered vertically,     * and stretched out over the full width,     * to allow easy selection with the mouse.     * The Fig can only be shrunk to half its original size - so that     * it is not reducible to a few pixels only.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */"
// this constructor is needed for PGMLStackParser to load // saved diagrams. It does nothing, because  // PGMLStackParser will call setPoints later.
"/*     * TODO: Support commentEdges.     * TODO: Support associations to self.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// vertical resizing
// Set up the target and its model element variant.
"/*     * Return true if the given object is a valid edge in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */"
"/*     * Return all ports on node or edge.     *     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */"
"/*     * Return all edges going to given port.     *     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */"
// There are no regions so create one and place the vertex //there.
"/*	 * @see javax.swing.table.TableModel#setValueAt(	 *         java.lang.Object, int, int)	 */"
"/*     * @see     * org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */"
// c.insets = new Insets(1, 1, 1, 1);
"/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */"
"/*     * @see org.argouml.uml.ui.SourcePathController#getAllModelElementsWithSourcePath()     */"
// in this event we do nothing, // only stop drawing the broom.
"/*     * Return true if the two given ports can be connected by a     * kind of edge to be determined by the ports.     *     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     * java.lang.Object)     */"
// 1. Remember current message paths
// 2. Reposition and resize nodes
// 3. Now reposition messages based on their original position
// Compute the initial center position of the CR
// The name of the meta type is the class name (after the last .) // and before the next $ or end of class name.
// horizontal resizing
// Compute the final center position of the CR
// Create the graph model
// Y position of the new CR should match existing CRs Y position
"/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */"
// Init the sequence diagrams from the module
// debugging and looking at fig.headFig.figs[1]._currText  // I can see that it's working, but how to test it?       
// Operations that work on elements:
"/*     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */"
// Operations that work on classes of objects:
"/* The box for the compartments is somewhere         * inside the outside bounds: */"
"/*     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     *      java.lang.Object)     */"
//    Object getImportedPackage(Object element);
//    Object getIncludingCase(Object handle);
//////// Javadoc reviewed above this point - tfm /////////////
//    Object getImportingNamespace(Object element);
"/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */"
//Object createStereotype();
// ADiagramElementProperty delegate main.methods
"/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#add(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */"
"/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#exists(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */"
//easy interface to properties
// Just swap order of arguments to get to new form
// Here follows the interfaces that contain the enums of different // kinds in the UML meta-model.
// Flow is not in UML 2.x - don't implement
//additional support for tagged values
"/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAListExpressionListOrRangeTail(tudresden.ocl.parser.node.AListExpressionListOrRangeTail)     */"
//////////////////////////////////////////////////////////////// // public main.methods
/* end class UUIDManager */
"/*     * @see java.awt.dnd.DropTargetListener#dragExit(     *         java.awt.dnd.DropTargetEvent)     */"
// Write out something for us to read back in
// Now read it and check the results.
"/*     * @see org.tigris.gef.presentation.Fig#isSelectable()     */"
// Silently ignore anything specified by caller attempt to continue
// Create an empty file and try to read it
"/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs.  This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */"
// Depends on implementation: 
// verify that the equivalence test works
// maybe next test is going to change in future
// TODO: 
// The netbeans SAXParser sets line number // and column number to -1.
// The xerces SAXParser sets line number // and column number to 1.
"/*     * Updates the modelelement container if the fig is moved in or     * out another fig. If this fig doesn't have an enclosing fig     * anymore, the namespace of the diagram will be the owning     * modelelement. If this fig is moved inside another     * FigNodeModelElement the owner of that fignodemodelelement will     * be the owning modelelement.     *     * @see org.tigris.gef.presentation.FigNode#setEnclosingFig(org.tigris.gef.presentation.Fig)     */"
// Not true in general, but should be true for our test models
// TODO:
"/*     * Necessary since GEF contains some errors regarding the hit subject.     *     * @see org.tigris.gef.presentation.Fig#hit(Rectangle)     */"
// If the region is changed to another region then // we make sure that a delete event is not fired // as a result. //$NON-NLS-1$
"/*     * Need to 'arm' the rerouting capability with mouseDragged().     * <p>     * Don't arm if the edtior's current mode is a figedge create mode,     * because once a new edge has been created it is not deselected,     * therefore on the next create an unwanted reroute is performed.     *     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */"
"/*     * @see org.tigris.gef.base.SelectionButtons#getNewNode(int)     */"
"/*     * Makes sure that the edges stick to the outline of the fig.     * @see org.tigris.gef.presentation.Fig#getGravityPoints()     */"
// In UML a message could have an Action. In UML2 it never does.
"/*         * @see java.beans.PropertyChangeListener#propertyChange(         *         java.beans.PropertyChangeEvent)         */"
// No body found.
"/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,     *      java.lang.Object, int, boolean, boolean)     */"
// oops we already have the body
//        return handle.stringValue();
"/*     * @see java.awt.event.MouseListener#mouseClicked(     *          java.awt.event.MouseEvent)     */"
//        public Collection<Element> getExtendedElements(Object handle) {
"/*     * @see javax.swing.text.Document#render(Runnable r)     */"
"/*     * Perform recursive search of subtree rooted at 'node', selecting all nodes     * which have a userObject matching one of our targets.     */"
// Gone from UML 2.x //        throw new NotImplementedException();
// Get all the relationships, that this model element has. // and filter everything, that is not an import.
// Can't be done in the general case of federated repositories, // but at least get what we can find for the current resource set
// should be Element not EObject really
"/*     * @see     * org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.     * beans.PropertyChangeEvent)     */"
/* Classifier powerType = */
// TODO: Signal -> Receptions association not navigable in this // direction
// usage differs from UML1
// Transitions can have multiple Triggers now
// Gone in UML 2.x
"/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     *      javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     *      boolean)     */"
// ActionState, CallState, and SubactivityState have been replaced // in UML 2.0 by explicitly modeled Actions
"/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// TODO: Double check - tfm
"/*     * This method is overridden in order to ignore change of the y coordinate     * during dragging.     *     * @see org.tigris.gef.presentation.FigNode#superTranslate(int, int)     */"
// TODO: gone in UML 2
"/*         * @see PropertyChangeListener#propertyChange(PropertyChangeEvent)         */"
// TODO: Gone in UML 2
// We have already confirmed the connection is valid
// MDR classes may have a UML or Uml prefix which should be removed.
// TODO: double check - tfm
// below for UML 1.4 compatibility
// TODO: changed for UML 2.x
// has <<subsystem>> stereotype
// && ((Action) handle).get
"/*     * Here we are actually violating the test independance since we keep     * the DetailsPane from test to test. The reason to do this is to make     * it possible to run the tests with less memory requirements.     *     * Hopefully someone might eventually fix the DetailsPane so that it is     * garbage collected properly and this is no longer needed.     *     * @see junit.framework.TestCase#setUp()     */"
// Not in UML2
// OK, so that didn't work out... Just ignore // any problems and don't set the name in the // constraint body better had log it.
// Even though this is not relevant for UML2 we have // code calling this that expects it for UML1.4 // and we must handle it gracefully.
//        return ((RedefinableElement) handle).isRoot(); // TODO: One part of UML 2.1.1 spec says that this is as above, // but it appears to be gone - tfm
// All of the ApplicationListener main.methods are void; return null regardless of what happens
// Place in the middle of the line and ensure the line is dashed.  Add // an arrow with an open arrow head. Remember that for an extends // relationship, the arrow points to the base use case, but because of // the way we draw it, that is still the destination end.
"/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *      org.argouml.cognitive.ui.Wizard)     */"
// an AssociationEnd is now a Property owned by an Association
"/*         * @see org.argouml.uml.ui.UMLComboBoxModel#addElement(java.lang.Object)         */"
//        throw new NotImplementedException( //            "This is not a UML2 element"); //$NON-NLS-1$
"/*     * @see java.awt.dnd.DropTargetListener#drop(     *         java.awt.dnd.DropTargetDropEvent)     */"
// JMenuItem cutItem = edit.add(ActionCut.getInstance()); // setMnemonic(cutItem, "Cut"); // setAccelerator(cutItem, ctrlX); // // JMenuItem copyItem = edit.add(ActionCopy.getInstance()); // setMnemonic(copyItem, "Copy"); // setAccelerator(copyItem, ctrlC); // // JMenuItem pasteItem = edit.add(ActionPaste.getInstance()); // setMnemonic(pasteItem, "Paste"); // setAccelerator(pasteItem, ctrlV); // // edit.addSeparator();
"/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */"
// TODO: Exception has been removed for UML 2.x // just return Signal for now - tfm
// Gone in UML 2.x - just Classifier now
// only association end has an aggregation option box
// TODO: Not really the same thing, but close
// Delete CollaborationInstanceSets where // this is the last participatingInstance
// The name of the meta type is the class name (after the last .) // and before the "Impl" or end of class name.
// TODO: Gone in UML 2.x // Return place holder for now
/* the source of the transition is a choice */
// TODO: no separate SyncState in UML 2.1 - tfm
"/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */"
/*ActionSequence.class*/
// Comment out when we are ready to release undo/redo //        JMenuItem undoItem = edit.add( //                ProjectActions.getInstance().getUndoAction()); //        setMnemonic(undoItem, "Undo"); //        ShortcutMgr.assignAccelerator(undoItem, ShortcutMgr.ACTION_UNDO); // //        JMenuItem redoItem = edit.add( //                ProjectActions.getInstance().getRedoAction()); //        setMnemonic(redoItem, "Redo"); //        ShortcutMgr.assignAccelerator(redoItem, ShortcutMgr.ACTION_REDO); // //        edit.addSeparator();
// Find the target in the project browser. We can only do anything if // its a use case.
/*Argument.class*/
"/* The ""Close window"" shortcut (ALT+F4) actually can't             * be registered as a shortcut,             * because it closes the configuration dialog! */"
/*AttributeLink.class*/
// Access should be fast
// Detach any edges (such as comment edges) already attached // to the FigAssociation before the FigAssociation is removed. // They'll later be re-attached to the new FigNodeAssociation
// Iteration should be fast
// Only reset the text if the two are not the same (i.e the fig // has // moved, rather than we've just edited the text, when // setTargetBBox() // will have made them the same). Note that styleBounds could // be null, // so we do the test this way round.
// i.e. eventType == Notification.REMOVE
///////////////////////////////////////////////////// ////////// Begin AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
/*implements CommandStack*/
// Not in UML 2.x (or metatypes) //        type.addItem(PredicateMType.create( //                Model.getMetaTypes().getActivityGraph()));
// Subtract the the offset of the click, to take account of user // having not initially clicked in the centre.
//LiteralSpecification //list.add("LiteralNull");//When other ok
// if a default action was voided then we have to save it
//list.add("LiteralInteger");//When other ok
// If the edge is from a circle to a circle (e.g. between use // cases) we have our own implementation overriding GEF. Which // attempts to keep the edges perpendicular if the edge is already // close to perpendicular.
//list.add("LiteralUnlimitedNatural");//When other ok
"/*     * Return the node or edge that owns the given port.     *     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */"
// TODO else => Exception !
// delete Messages which have this as sender or receiver
// Can't be changed
//rewrite it after change setExpression ?
// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0 
// Can't be set
"/*     * @see org.netbeans.lib.jmi.xmi.XmiContext#getReference(java.lang.String, java.lang.String)     */"
// Suggest that actors may not connect (see JavaDoc comment about // this).
// A Link is an Assocation in UML2.x
// We need a method (operation implementation) // to store the method body.
// The 4-arg version of this method depends on this ordering. // Don't change it!
// Maybe this operation already has a method, that fits our purpose? // In this case, try to reuse it, instead of creating a new // implementation.
// CHECKSTYLE:OFF - ignore too many parameters since API is fixed by MDR
// Check, if we have to create a new implementation.
// Create a new implementation.
/* This will contain the Figs that we do not need anymore: */
// And set the specification to the current operation.
// Add it to the operation's main.methods.
// Look, if there's already a java implementation
// Job done.
// TODO: Get default output directory from user settings // Project p = ProjectManager.getManager().getCurrentProject(); // p.getProjectSettings().setGenerationOutputDir(path);
// It seems, there was no implementation of // our current target language, so we just add one.
"/*     * Compare path of two elements in reverse order (inner to outer)     * using a primary strength text collator.      * This will collate e, E, 锟? 锟?together, but not eliminate non-identical     * strings which collate in the same place.     *      * @return equivalent of list1.compareTo(list2)     */"
// We cannot set the body of this model element type.
// Removed from UML 2.x
"/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */"
// also parse 1_* or 0_N etc.
// WARNING - This has containment side effects! // Eclipse UML2 will move the Property from the Classifier to // the Association when the navigability is changed.
"/**     * @param item the todo item     * @param reason the reason TODO: Use it!     * @return <code>true</code> if the argument was a component of this list;     *         <code>false</code> otherwise     * @throws UnresolvableException unable to resolve     */"
// UML 2.x only
// The Machine State has got a new name
// Where there is more than one supplier or client, take the first // element in each case. There really ought to be a check that // there are some here for safety.
// for other xmi files with further namespaces:
// The boundary box as held in the target fig, and as listed // in the boundary box style field (null if we don't have  // anything valid)
// eclipse namespaces:
// For the .uml files in the eclipse jar files, we need this:
// Only add MOF elements, not primitive datatypes
"/* TODO: Verify this.             * IIUC, then this triggers the CompountStateFig             * to draw itself correctly.             * Hence, there was a reason to wait this long             * to make the state concurrent. */"
// Notation events are likely to cause GEF/Swing operations, so we // dispatch them on the Swing event thread as a convenience so that // the receiving notationChanged() main.methods don't need to deal with it
// We clear the save-required flag on the Swing event thread // in the hopes that it gets done after any other background // work (listener updates) that is being done there
// Not needed currently for UML 2
// Make the result inmediately visible in case of apply:
// an error that can be corrected by the user, so no stack // trace, but instead an explanation and a hint how to fix
// Create a proxy object around this handler that can be reflectively added as an Apple ApplicationListener
// There are various details panes all of which could hold // different tabs pages according to users settings. // Place each pane in the required border area.
// final Object scope,
// Remove the old project first.  It's wasteful to create a temp // empty project, but too much of ArgoUML depends on having a // current project
///////////////////////////////////////////////////////////////////////// // TargetListener main.methods implemented so notified when selected // diagram changes. Used to update the window title.
"/* mvw: Indeed. The intention of the constructor parameter is to prove         * that there is a valid UML object to bind the notation to.          * So, the next statement should fail on a null parameter,          * and on anything that is not an object of which          * we can retrieve the multiplicity. */"
"/*     * @see org.argouml.model.UmlHelper#getSource(java.lang.Object)     */"
"//        prpTodo = createProperty(""label.todo-pane"", positions, TabToDo.class); //        prpProperties = //            createProperty(""label.properties-pane"", //                    positions, TabProps.class); //        prpDocumentation = //            createProperty(""label.documentation-pane"", //                    positions, TabDocumentation.class); //        prpStyle = //            createProperty(""label.style-pane"", //                    positions, TabStyle.class); //        prpSource = //            createProperty(""label.source-pane"", //                    positions, TabSrc.class); //        prpConstraints = //            createProperty(""label.constraints-pane"", //                    positions, TabConstraints.class); //        prpTaggedValues = //            createProperty(""label.tagged-values-pane"", //                    positions, TabTaggedValues.class); // //        Property[] propertyList = new Property[] { //            prpTodo, prpProperties, prpDocumentation, prpStyle, //	    prpSource, prpConstraints, prpTaggedValues, //        }; //        Arrays.sort(propertyList); // //        top.add(new JScrollPane(new PropertyTable( //						  propertyList, //						  paneColumnHeader, //						  positionColumnHeader)), //		BorderLayout.CENTER);"
"/*         * Initialize the module loader. At least the plug-ins that provide         * profiles need to be initialized before the project is loaded,         * because some of these profile may have been set as default         * profiles and need to be applied to the project as soon as it has         * been created or loaded. The first instance of a Project is needed         * during the GUI initialization.         */"
// create an anonymous class as a kind of adaptor for the cognitive // System to provide proper translation/i18n.
// in UML2, we model a method as a Behavior (initially OpaqueBehavior)
// Extent ignored for eUML2 implementation (required for NetBeans MDR)
// add listener to get notified when active diagram changes
"/* We need to verify that ns is a Package,         * if not - find its parent package!         * Otherwise this causes an exception when creating         * a sequence diagram for a ClassifierRole.*/"
"/*     * @see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()     */"
"/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */"
// also apply subprofiles:
"/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */"
// eliminate Classifiers which already have an unnamed role
// This needs to iterate to fill entire output raster if implemented //        return image.copyData(outRaster);
"/* Now let's check if the new line is already present in             * the old list of internal transitions; if it is, then             * mark the old one to be retained (i.e. do not create a new one),             * if it isn't, continue with parsing:             */"
// we only need to add the classloader once // and if and only if there is at least a profile // in the JAR
// remove base class by destroying the extension
// consider the property multiplicity
// no state with the given name is found, so we have to // reject the complete user's input
// Search all attributes found to those expected. // If any don't match then turn off the found flag // so that we search for the next matching tag.
// too bad, we choose to take the first value
// ready to set the value finally
// TODO: isStatic in UML 2.x
// in case of a tagged value, the type shouldn't be set here
// also unapply subprofiles:
// also define subprofiles:
//        {AssociationRole.class,  ClassifierRole.class, },
/* 4.5.2.13 Constraint */
// because we're listening for stereotypes being added and removed // but we're really interested in their owned tag definitions, // the default implementation won't work for us
//        {Link.class, Instance.class, }, //        {Transition.class,       StateVertex.class, },
//        {Message.class, ClassifierRole.class },
/* end class StartCritics */
// Note for UML2 the aggregation ends are swapped
// in UML2 subsystem is a Component with <<subsystem>> stereotype // so this must occur after the metaTypes.getComponent() case
// initialized in static initializer block below
// find the passed in container in validContainmentMap
// determine if metaType is a valid element for container
"/* This double 'for' loop may be optimised as follows:             * - Use arrays in stead of a Set for bases             * - Have the second loop start from the element after base1             * ... but I chose not to do this, since the gain is small,             * and this is only used for a lazily filled combo.             * BTW: This is also used by Notation.*/"
"/*     * @see org.tigris.gef.graph.GraphFactory#makeEdge()     */"
"/** * This class represents all Diagrams within ArgoUML. * It is based upon the GEF Diagram.<p> * * It adds a namespace, and the capability * to delete itself when its namespace is deleted. <p> * * TODO: MVW: I am not sure of the following:<p> * The ""namespace"" of the diagram is e.g. used when creating new elements * that are shown on the diagram; they will have their namespace set * according this. It is NOT necessarily equal to the ""owner"". <p> * * MVW: I doubt all following: * The ""namespace"" of the diagram is e.g. used to register a listener * to the UML model, to be notified if this element is removed; * which will imply that this diagram has to be deleted, too. <p> * * Hence the namespace of e.g. a collaboration diagram should be the * represented classifier or, in case of a represented operation, the * classifier that owns this operation. * And the namespace of the statechart diagram should be * the namespace of its statemachine. */"
"/**     * Constructor for a {@link FigClass} during file load.<p>     *     * Parent {@link org.argouml.uml.diagram.ui.FigNodeModelElement}     * will have created the main box {@link #getBigPort()} and its     * name {@link #getNameFig()} and stereotype     * (@link #getStereotypeFig()}. This constructor     * creates a box for the attributes and operations.<p>     *     * The properties of all these graphic elements are adjusted     * appropriately. The main boxes are all filled and have     * outlines.      * TODO: which is wrong, since the bigPort is filled, too.     *      * @param element model element to be represented by this fig.     * @param bounds rectangle describing bounds     * @param settings rendering settings     */"
// valid elements for a Profile to contain
"/*     * @see org.tigris.gef.base.Selection#dragHandle(int, int, int, int,     * org.tigris.gef.presentation.Handle)     */"
// specifies valid elements for a class to contain
// specifies valid elements for a classifier to contain
// specifies valid elements for a Signal to contain
// specifies valid elements for an Actor to contain
// specifies valid elements for a Component to contain
"/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */"
// specifies valid elements for a Node to contain
"/* Test-case for the above code:          * Draw a class.          * Create a stereotype for it by clicking on the prop-panel tool, and          * name it.         * Remove the class from the diagram.         * Drag the class from the explorer on the diagram.         * Select the stereotype in the explorer, and change         * its name in the prop-panel to something longer.         * The longer name does not make the class Fig wider          * unless the above code is added.*/"
// If there isn't a 3rd column then this represents a connection // of elements of the same type.
// If there is a 3rd column then this represents a connection // of between 2 different types of element.
"/*     * @see org.tigris.gef.presentation.Fig#damage()     */"
// If the array hasn't been flagged to indicate otherwise // swap elements the elemnts and add again.
// specifies valid elements for a DataType to contain
"/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */"
// valid elements for an Action to contain
// trying to get a built-in standard profile from eclipse UML2
// Removed from UML 2
// Start interception UI interactions
// Perhaps something like the following would workd.  If not, then // traverse up the component hierarchy to a MultEditorPane //        Rectangle drawingArea = //            Globals.curEditor().getJComponent().getVisibleRect();
// Only interested in the "ownedElement" property. Either something has // been added to the namespace for this model, or removed. In the // latter case the "something" will be in the old value of the // property, which is the collection of owned elements, and the new value // will be the element import describing the model element and the // model from which it was removed
// Roll back transaction to remove any partial results read
/////////////////////////////////////////////////////////////////////////// // // Methods that implement the MutableGraphModel interface // ///////////////////////////////////////////////////////////////////////////
// If we can find a nested SAX exception, it will have information // on the line number, etc.
"/*     * @see org.tigris.gef.presentation.Fig#setLayer(org.tigris.gef.base.Layer)     */"
// Ignore if the extent never got created or has been deleted
//            pce = (PropertyChangeEvent) rxdEvent.getSource(); //            assertTrue("Wrong event name", //                    pce.getPropertyName().equals( //                            DiagramAppearance.KEY_DEFAULT_SHADOW_WIDTH.getKey())); //            String value = (String) pce.getOldValue(); //            int i = Integer.parseInt(value); //            assertTrue("Wrong old event value", i == 4); //            assertTrue("Wrong new event value", //                    ((String) pce.getNewValue()).equals("2"));
// InputSource xformedInput = chainedTransform(transformFiles, pIs);
"/**     * TODO: The next text was copied - to adapt.     *      * Sets the target. If the old target is an UML Element, it also removes     * the model from the element listener list of the target. If the new target     * is an UML Element, the model is added as element listener to the     * new target. <p>     *     * This function is called when the user changes the target.      * Hence, this shall not result in any UML model changes.<p>     *      * This function looks a lot like the one in UMLComboBoxModel2.     * <p>     * As a possible future extension, we could allow listening to      * other model elements.     *      * @param theNewTarget the new target     */"
"/*     * @see org.argouml.model.XmiReader#getXMIUUIDToObjectMap()     */"
"/*         * This comment was included in a previous version (before 1/2005)         * of the test which had this assertion commented out:         * ------         * Interaction should not be removed when removing ClassifierRole...         * maybe if the last message is removed from the interaction but even         * then it's doubtfull since it will probably lead to backward         * compatibility problems in save formats.         * ------         * but my reading of the UML 1.4 specification is that an Interaction         * without at least one message is definitely illegal, so MDR is         * doing the right thing by removing it in this case where we only         * have a single message, which then gets deleted. - tfm         */"
// Set up source for style sheet
// Create & set up temporary output file
// In UML2.x there is no metaclass named Method, but we use the // 'method' association of BehavioralFeature
"/* If action comes in with *no* modifiers, it is a pure                 * keyboard event (e.g. spacebar), so do it.  Anything else                 * is probably a mouse event, so ignore it. Mouse events are                 * dealt with by mousePressed() instead (see bottom of page).                 */"
// Create filter for each style sheet and chain to previous // filter/reader
//            jContentPane.add(getJchbBold(), gridBagConstraints2); //            jContentPane.add(getJchbItalic(), gridBagConstraints3);
// Create transformer and do transformation
// Set up for next iteration
// we presume the stream is encoded using the default char encoding
// Delete the old extent first
//                LOG.log(Level.WARNING, "Unable to find extent " + extent);
// Connect to the repository
// find and add all subdirectories
// Create an extent and read in our metamodel (M2 model)
// Create and start event pump first so it's available for all others
"/*     * @see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()     */"
"/*         * @see javax.swing.table.TableModel#setValueAt( java.lang.Object, int,         * int)         */"
"/*     * @see org.argouml.model.ModelImplementation#getFacade()     */"
"/*         * @see javax.swing.table.TableModel#getColumnName(int)         */"
"/*     * @see org.argouml.model.ModelImplementation#getModelEventPump()     */"
"/*     * @see org.argouml.model.ModelImplementation#getDirectionKind()     */"
"/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsFactory()     */"
/* The default (16) puts the icons too close together: */
"/*                 * If the name is too long or multi-line (e.g. for comments)                 * then we reduce to the first line or 80 chars.                 */"
// If we've got a streaming input, copy it to make sure we'll // be able to rewind it if necessary
// to rupdate the diagram set the stimulus name again // TODO: Explain that this really works also in the // MDR case. Linus is a sceptic.
// If a UML 1.3 file, attempt to upgrade it to UML 1.4
// Save project at slightly lower priority to keep UI responsive
// Roll back transaction from first attempt & start new one
// Clear the associated ID maps & reset starting collection
"/*         * @see javax.swing.table.TableModel#getColumnCount()         */"
// DataTypes is next so it's available for Kinds, ModelManagement, // & Extensions
// Initialize remaining factories and helpers // (but defer heavyweight ones until needed)
/* end class CrDisambigStateName */
// Create a default extent for the user UML model. This will get // replaced if a new model is read in from an XMI file.
"/*     * @see org.argouml.model.ModelImplementation#getCollaborationsFactory()     */"
"/*     * @see org.argouml.model.ModelImplementation#getOrderingKind()     */"
"/*     * @see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)     */"
"/*     * @see org.argouml.model.ModelImplementation#getCoreFactory()     */"
// //  as long as they aren't both null //   (or a really rare identical string pointer)
"/*     * @see org.argouml.model.ModelImplementation#getDataTypesFactory()     */"
//        savePosition(prpTodo, TabToDo.class); //        savePosition(prpProperties, TabProps.class); //        savePosition(prpDocumentation, TabDocumentation.class); //        savePosition(prpStyle, TabStyle.class); //        savePosition(prpSource, TabSrc.class); //        savePosition(prpConstraints, TabConstraints.class); //        savePosition(prpTaggedValues, TabTaggedValues.class);
// Alphabetic order!
"/*     * @see org.argouml.model.ModelImplementation#getModelManagementFactory()     */"
"/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */"
"/*         * @see javax.swing.table.TableModel#getValueAt(int, int)         */"
"/*     * @see org.argouml.model.ModelImplementation#getStateMachinesHelper()     */"
"/*     * @see org.argouml.model.ModelImplementation#getUmlHelper()     */"
"/*     * @see org.argouml.model.ModelImplementation#getUseCasesHelper()     */"
"/*     * @see org.argouml.model.ModelImplementation#getChangeableKind()     */"
"/*     * @see org.argouml.model.ModelImplementation#getAggregationKind()     */"
"/*     * @see org.argouml.model.ModelImplementation#getScopeKind()     */"
"/*     * @see org.tigris.gef.presentation.FigNode#hitPort(int, int)     */"
"/*     * @see org.argouml.model.ModelImplementation#getConcurrencyKind()     */"
"/*         * @see javax.swing.table.TableModel#getRowCount()         */"
// Elements created after file load won't have index entries
"/*     * Private constructor for common work needed by both public     * constructors.     */"
// end our transaction
"/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */"
"/*     * @see org.argouml.model.ExtensionMechanismsHelper#getAllPossibleStereotypes(java.util.Collection, java.lang.Object)     */"
/* end class CrInvalidSynch */
// there is nothing to do in UML1.4
//        loadPosition(prpTodo, TabToDo.class); //        loadPosition(prpProperties, TabProps.class); //        loadPosition(prpDocumentation, TabDocumentation.class); //        loadPosition(prpStyle, TabStyle.class); //        loadPosition(prpSource, TabSrc.class); //        loadPosition(prpConstraints, TabConstraints.class); //        loadPosition(prpTaggedValues, TabTaggedValues.class);
// forbid instantiation
// Loop through all the ends, comparing the name against those already // seen (ignoring any with no name). // No problem if there are no connections defined, we will fall // through immediately.
// If this is not overridden it will revert to the old behavior // All internal subclasses have been updated, but this if for // compatibility of non-ArgoUML extensions.
"/*     * @see org.argouml.model.MetaTypes#getAbstraction()     */"
// Delete Stimulii which have this as their dispatchAction
// Delete Messages which have this as their action
"/*     * Override paint so we can set a flag the first time we're called     * and notify any waiting threads that the splash screen has been     * painted.     * @see java.awt.Component#paint(java.awt.Graphics)     */"
// Delete LinkEnds
// Create an event for the other end of the association
// Delete AttributeLinks where this is the value
// Ask to be notified of any changes to TagDefinitions so that we // can track new ones, name changes, etc
// binary link
"/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */"
// Delete all SendActions which have this as signal
// and a change event for that end
// Delete all SignalEvents which have this as the signal
"/* These 3 steps are only needed for          * the 2 cases indicated with a X below. */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */"
// Text was stored in name in UML 1.3
// will always be null
// Delete InteractionInstanceSets where // this is the last participatingStimulus
//to be able to remove dep's later
"/*     * Updates the button if the current row changes     *     * @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)     */"
// this doesn't support I18N or multiple states,  // but it's just a default
// Partitions are composite elements and will get deleted implicitly // Partition contents don't need to be deleted or checked
// specifies valid elements for a Enumeration to contain
"/*     * @see org.netbeans.api.xmi.XMIReferenceProvider#getReference(javax.jmi.reflect.RefObject)     */"
// Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite substates in a // concurrent composite state. // If this is broken by deletion of substate then we delete the other // remaining substates.
// Look for an existing reference matching our MofID
// only add all if there are some to add.
// probably redundant - just in case
// Helper interfaces and main.methods.
"/*     * @see javax.swing.tree.TreeNode#isLeaf()     */"
// CHECKSTYLE:ON
// specifies valid elements for an AssociationRole to contain
// Shorthand notation for convenience
// Quick exit if it's a transaction event // (we get a lot of them and they are all ignored)
// InteractionInstanceSets will get deleted automatically // because they are associated by composition
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */"
// If this is the only message contained in the Interaction // we delete the Interaction
// Object from a different file, register with superclass so it // can resolve all references
// if the model URL has a suffix of '.zip' or '.jar', get // the suffix without it and store it in the urlMap
// Several tries to construct a URL that really exists.
// If systemId is publicId previously mapped from a systemId, // try to use the systemId.
"/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */"
// Try to find suffix in module list.
"/*     * @see javax.swing.ComboBoxModel#getSelectedItem()     */"
// search the classpath
// ignored - we only care about open/closing
// Give up and let superclass deal with it.
// TODO: Probably really want to cancel editing //((FigTextEditor) focusOwner).cancelEditing();
// We've got a profile read pending - handle it ourselves now
"/*     * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)     */"
// shouldn't happen
"/*         * @see javax.swing.table.TableModel#getColumnClass(int)         */"
// Otherwise if it's not something we've already read, just // punt to the super class.
// Unfortunately the MDR super implementation throws // DebugException with just the message from the causing // exception rather than nesting the exception itself, so // we don't have all the information we'd like
// specifies valid elements for an CallState to contain
// specifies valid elements for an ActionState to contain
// For Transition use indirection through target StateVertex
// TODO: We don't have any settings that can change per-fig currently // so we can just use the default settings; //        settings = new DiagramSettings(renderSettings);
// Get all (UML) metaclasses
"/*     * @see org.tigris.gef.ui.IStatusBar#showStatus(java.lang.String)     */"
//                    Object[] args = { typeName, elemName }; //                  misc.name.element-import = Imported {0}: {1} //                    return Translator //                            .localize("misc.name.element-import", args);
// Although this only handles one level of package, it is // OK for UML 1.4 because of clustering // Get the right UML package in the extent
// Return the metatype proxy
// we must find out if the activator itself does not have // message as it's activator
"/*     * Called when the user has pressed Cancel. Performs ""Cancel"" in all Tabs.     */"
// An activator can't also be a predecessor of a message
// An Association can only have a single unnamed ClassifierRole, so
// if we are unnamed eliminate all classifiers which are already // the base of some role
// WFR 2.10.3.3 #4
// No initialization currently
//|| context instanceof Collaboration //|| context instanceof Model
"/*     * @see org.netbeans.lib.jmi.xmi.XMIHeaderProvider#writeHeader(java.io.Writer)     */"
"/*     * @see java.beans.PropertyChangeListener#propertyChange(PropertyChangeEvent)     */"
// NOTE: The <XMI.header></XMI.header> is provided for us
// Not implemented in MDR 
// If the user selects an Action that is already selected in sticky // mode (double clicked) then we turn off sticky mode and make sure // no action is selected.
"/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */"
"/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */"
"/*     * @see org.argouml.model.AbstractModelEventPump#addClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
// Clean up index entries
"/*     * @see javax.swing.text.Document#getText(int, int)     */"
"/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.     * PropertyChangeEvent)     */"
// Create a change event for the corresponding property
"/*     * @see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)     */"
// Empty implementation - we only care about keyTyped
// No longer abstract to allow subclasses to remove, so we provide a // null default implementation
"/*     * Return all edges going from given port.     *     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */"
// Create a change event for the associated property
"/*     * @see javax.swing.text.Document#getDefaultRootElement()     */"
// Cut down on debugging noise
"/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(     * javax.swing.JList, java.lang.Object, int, boolean, boolean)     */"
// Unregister deleted instances after all events have been delivered
// If we don't have a fig for this UML object, we'll need to add // one. We set the bounds, but they will be reset later.
// Any given listener is only called once even if it is // registered for multiple relevant matches
// This will include all subtypes registered
/*(LOG.isDebugEnabled()*/
// Put all the bits together, suppressing bounds calculations until // we're all done for efficiency.
// For debugging you probably want either this // OR the logging for every event which is fired - not both
// This enforces the following well-formedness rule. // <p>Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite // substates in a concurrent composite state.<p> // If this is broken by deletion of substate then we // change the parent composite substate to be not // concurrent.
/*LOG.isDebugEnabled()*/
// TODO: Need named Tags and Constraints compartments here //        addFig(tagsFig); //        addFig(constraintsFig);
// Fetch the key before going in synchronized mode
// LOG.log(Level.FINE, " Class " + name + " has subtypes : " // + names.get(name));
// Temporary start //    private static final Color[] COLOR_ARRAY = { //        Color.RED, Color.BLUE, Color.CYAN, Color.YELLOW, Color.GREEN}; //    private int nextColor = 0; // Temporary end
// convert classname to RefObject
// If we don't have a MofClass, see if we can get one from the // instance
// If we still don't have a MofClass, something's wrong
//                    throw new IllegalArgumentException("Property '" //                            + attribute + "' doesn't exist in metamodel");
// Save the model (current)
"/*     * If the Operation/Reception is abstract,      * then the text will be set to italics.     */"
"/*     * @see org.argouml.model.ChangeableKind#getAddOnly()     */"
// Lookup primary key, creating new entry if needed
"/*     * @see javax.swing.text.Document#getLength()     */"
// If there are no subkeys, register using our special value // to indicate that this is a primary key only registration
"/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.     * PropertyChangeEvent)     */"
// Create a new TagDefinition if none found
// Clear target so that multiple copies have no effect  // (other than inefficiency)
// TODO: Add Tags & Constraints //        addMenu.add(TargetManager.getInstance().getAddAttributeAction()); //        addMenu.add(TargetManager.getInstance().getAddOperationAction());
// Delete all TaggedValues with this type
"/*     * Used by the copy functions. Do not call this function directly.     *      * @param source     *            The stereotype to copy from.     * @param target     *            The object becoming a copy.     */"
// "Element");
/* TODO: Check the name for validity. */
// The effect will get deleted automatically by MDR, unlike the Guard.
// Although Usage & Permission are Dependencies, they need to // be include separately because of the way lookup works
// The following is specifically for Realizations
"/*     * @see AbstractAction#actionPerformed(ActionEvent)     */"
// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatElement(java.lang.Object)     */"
// specifies valid elements for a Model to contain
"/*     * @see org.tigris.gef.presentation.FigEdge#setDestFigNode(org.tigris.gef.presentation.FigNode)     */"
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */"
// ignored - we just skipped inserting it in our document
// specifies valid elements for a Operation to contain
// specifies valid elements for an Event to contain
"/*  The operation specificationPath results in a set containing                     * all surrounding Namespaces that are not instances of                     *  Package.                     *  specificationPath : Set(Namespace)                     * specificationPath = self.allSurroundingNamespaces->select(n |                     *    n.oclIsKindOf(Subsystem) or n.oclIsKindOf(Class))                     **/"
"/*     * Update the text labels.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
"/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(     *         java.lang.Object)     */"
// specifies valid elements for an State to contain
// Since this is a complex polygon, there's no easy way to resize it.
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */"
// specifies valid elements for an SubactivityState to contain
// the last one needs extra space below it
"/* Remove the commentedge.             * If there are more then one comment-edges between             * the 2 objects, then delete them all. */"
// supports implementation of some special elements not // supported by buildNode
"/*                 * NOTE: Although WFR #3 in section 2.11.3.5 UseCase of the                 * UML 1.4 spec says ""A UseCase cannot contain any                 * Classifiers,"" the OCL is actually self.contents->isEmpty                 * which would seem to imply it can't contain any elements                 * - tfm - 20060416                 */"
// the list of namespaces to return
/* 4.5.2.27 ModelElement */
// Get the list of valid model item pairs for the given connection type
/* 4.5.2.37 StructuralFeature */
/* If the base was not changed, then only set the name: */
// Begin a transaction - we'll do a bunch of reads first // to collect a set of elements to delete - then delete them all
/* 4.5.2.14 Dependency */
// no else here to make sure Classifier with // its double inheritance goes ok
// no else here to make sure AssociationClass goes ok
/* 4.5.2.7 BehavioralFeature */
// no else to handle multiple inheritance of linkobject
// If we get this with the repository locked, it means our root // model element was already deleted.  Nothing to do...
// Our wrapped version of the same error
// Additional Operations in 4.5.3.26
// if there are no owned elements then return empty list
// We don't care about the value - just want to see if it throws
// Recurse into ourself for each parent
// if test fails this element should not // be in the result set
// the following should always be true
// If we were handed a Classifier to start, // this must be a Classifier
"/*     * Add the given node to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */"
// we have to follow the // arrows..
// || ns instanceof UseCase // see comment below
// Made following changes from OCL in UML 1.4 section 2.9.3.16: //   CollaborationInstance -> CollaborationInstanceSet //   Stimuli -> Stimulus
"/*     * @see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)     */"
// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
// Get Classifiers in Namespace
"/* The next line is needed so that we have the right dimension          * when drawing this Fig on the diagram by pressing down          * the mouse button, even before releasing the mouse button: */"
// A Profile is a special package having the <<profile>> // stereotype which can only contain the following types
/* || modelElement instanceof StateMachine */
// A Profile is a special package having the <<profile>> stereotype
// only build a namepace if needed, with
/////////////////////////////////////////////////////////////////////////// // // Methods that implement the GraphModel itself // ///////////////////////////////////////////////////////////////////////////
"/*     * Check whether model element is contained in given namespace/container.     */"
//        return struc.getOwner().getNamespace().getOwnedElement().contains( //                struc.getType());
"/*     * Override setBounds to keep shapes looking right.     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */"
//  d.supplier.oclAsType(GeneralizableElement). //  allParents.oclAsType(Namespace).ownedElement->select (e | //              e. elementOwnership.visibility = //                      #public)->includes (r.participant) or
//  d.supplier.oclAsType(Package).allImportedElements->select ( //                  e | e. elementImport.visibility = //                      #public) ->includes (r.participant) ) )
// Get the namespace hierarchy for each element
// Traverse the lists looking for the last (innermost) match
// UML 1.4 WFR 2.5.3.1 #3
// If we made something aggregate, make sure the other ends conform // to UML 1.4 WFR 2.5.3.1 #2 - no more than one aggregate end
// There actually don't appear to be any restrictions on the // namespace for a Generalization.  The UML 1.4 WFR 2.5.3.20 #3 // refers to GeneralizableElements, not Generalizations - tfm
// All text was stored in name field in UML 1.3
// Returns nothing
// Boolean, String, Integer, Long, Float, Double, etc
"/*     * This method is CPU intensive and therefore needs to be as efficient as     * possible.     */"
// Additional Operations in 4.5.3.8
// Remove any elements not in requested namespace
// Parse the boundary box text. Null is // returned if it is empty or // invalid, which causes no change. Otherwise we tell // GEF we are making // a change, make the change and tell GEF we've // finished.
// Select those Features which are BehavioralFeatures
// Should these also be deleted?
// This is silly, but for backward compatibility
/* TODO: This is the 2nd part of this method: */
// wellformednessrules and preconditions
// equal
// Update the listeners to match the desired set using the minimal // update facility
// greater
// less than
// Link does not exist in UML2, a link is represented just as an // association
// binary association
// delete LinkEnds which have this as their associationEnd
// delete AttributeLinks where this is the Attribute
"/*     * @see org.argouml.model.ModelImplementation#getMetaTypes()     */"
// delete CreateActions which have this as their instantiation
"/*             * @see org.argouml.uml.ui.ActionSetMultiplicity#setSelectedItem(             *      java.lang.Object, java.lang.Object)             */"
"/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(     *         java.lang.Object, java.lang.String)     */"
/////////////////////////////////////////////////////////////////////////// // // Methods that implement the VetoableChangeListener interface // ///////////////////////////////////////////////////////////////////////////
// Delete dependencies where this is the only supplier
// delete CallActions which have this as their operation
// If we drop out there were no clashes
// delete CallEvents which have this as their operation
// Nothing more to do.
"/*         * @see java.util.Enumeration#nextElement()         */"
// For consistency with attribute and operation, give it a default // name and location
// Copy all the Features
"/*         * @see java.util.Enumeration#hasMoreElements()         */"
"/**     * Used by the copy functions. Do not call this function directly.     * TODO: template parameters, default type     * TODO: constraining elements     * TODO: flows, dependencies, comments, bindings, contexts ???     * TODO: contents, residences ???     *     * @param source     *            the source me     * @param target     *            the target me     */"
/* NameFig and StereotypeFig are handled by parent. */
// Nothing more to do, don't copy owned elements.
"/*     * @see org.tigris.gef.presentation.FigGroup#hitFig(java.awt.Rectangle)     */"
// copy raised signals:
// Set the name so that superclasses can find the newly // created element in the model, if necessary.
// Search for our current target language.
// Note that if we're copying this element then we // must also be allowed to copy other necessary // objects.
// Don't explicitly check if element is null
// Unfortunately the Fig and it's associated CommentEdge will not be // fully initialized yet here if we're being loaded from a PGML file. // The remainder of the initialization will happen when // set{Dest|Source}FigNode are called from PGMLStackParser.attachEdges()
// Return 1..1 multiplicity for empty string
// Convert "*" to "0..*" instead of "*..*"
/* according WFR: in case of ActivityGraph only. */
// delete Extends where this is the base
// delete Includes where this is the addition
// Test multipe items registered for single key set
// and its enumerationLiterals
// Remove with null item should remove all entries for key
"/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */"
"/* If we get here then we didn't get the		     * default diagram.                     */"
"/* Need to copy the lists since we will be moving the elements              * one by one: */"
"/*     * @see org.tigris.gef.util.Predicate#predicate(java.lang.Object)     */"
// Deleting "source" here would probably delete the parameters...
// Advance currentY to where the start of the body box is, // remembering that it overlaps the next box by 1 pixel. Calculate the // size of the body box, and update the Y pointer past it if it is // displayed.
"/*         * Only set the name if it differs from the text.         */"
// Get the assocations and connections. No problem (there is a separate // critic) if this is not a binary association or is an association // role.
/* Need to copy the lists since we will be moving the elements: */
// This is not necessarily the current diagram!
"/* Remove the old fig from the diagram, so we can draw the                 * new one in its place: */"
"/*     * Create a new FigText instance based on the given mouse down     * event and the state of the parent Editor.      */"
//            p.moveToTrash(source);
// Made following change from OCL in UML 1.4 section 2.9.3.22: //   CollaborationInstance -> CollaborationInstanceSet
"/*     * @see org.argouml.model.UmlHelper#deleteCollection(java.util.Collection)     */"
// Elements which will be deleted when their container is deleted // don't get added to the list of elements to be deleted // (but we still want to traverse them looking for other elements //  to be deleted)
// Technically this is legal, but a StructuralFeature should probably // only ever have an owner instead of a namespace. - tfm
// EnumerationLiterals should get deleted implicitly // since they are associated by composition
// UML2 only
//list.add("LiteralReal");//UML 2.4 //End LiteralSpecification     
// Have we handled UML2 here?
"/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */"
// hypotheses no time expression (only invariants)
"/*     * @see javax.swing.AbstractAction.AbstractAction()     */"
// TODO: Gone in UML 2.1 // It is now an InstanceSpecification with an  // Association as its classifier
// Get all classifiers in all top level packages of all profiles
//  d.supplier.oclAsType(Namespace).ownedElement->select (e | //  e.elementOwnership.visibility = //  #public)->includes (r.participant) or
"/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */"
// UML1.4 only
// We got passed an unmodifiable List.  Copy it and sort the result
"/*     * @see java.awt.event.MouseListener#mouseReleased(     *      java.awt.event.MouseEvent)     */"
// Now resize all sub-figs, including not displayed figs. Start by the // name. We override the getMinimumSize if it is less than our view (21 // pixels hardcoded!). Add in the shared extra, plus in this case the // correction.
/* Set up the property panels for UML elements: */
// TODO: Restructured in UML 2
// Delete Stimuli which have this as a Sender or Receiver
"/*                 * For a iterator call we should provide: (a) the variables (b)                 * the expression to be evaluated on each step (c) the                 * lambda-evaluator to evaluate it                 */"
// TODO: unimplemented //          return ((Property) handle).gets
"/* The figPoly is located at the right of the name text.             * The nameFig size is increased, so that it fits its text,             * and the figPoly next to the text, all within the boundaries             * of the nameFig. */"
/* If we do not set it to null first, then we get a MDR DebugException: */
"/*         * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)         */"
"/*         * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()         */"
// Removed from UML 2.x and deprecated in Model API // so we won't implement it //        throw new NotImplementedException(); // we do not throw an exception because ArgoUML still uses this
"/*         * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)         */"
"/*         * <em>Warning: when changing the implementation of this method be         * warned that the sequence of the if then else tree DOES matter.</em>         * Most notably, do not move the setNamespace method any level up in         * the tree.<p>         */"
"/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */"
// If the child component is resizable then // we don't know it's actual size yet. // It will be calculated later as a // proportion of the available left over // space.  For now this is flagged as zero.
"/*     * @see TestCase#tearDown()     */"
"/*     * @see javax.swing.AbstractAction.AbstractAction(     *       java.lang.String, javax.swing.Icon)     */"
"/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()     */"
/* end class CrNonAggDataType */
"/*     * @see org.tigris.gef.base.SelectionButtons#paint(java.awt.Graphics)     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */"
// fire all of the status events
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */"
"/* TODO: If a namespace with sub-classdiagrams is deleted, then {            confirmStr +=                Translator.localize(                    ""optionpane.remove-from-model-will-remove-subdiagram"");            doAsk = true;        }*/"
/* Do nothing by design. */
// simply use name as it is
// Allow null
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */"
// restricting types for tagged values
// classifier is way too much in UML 2.x
// the minimum set of standard types
// keep them sorted
// We assume profile is contained in a single extent
"/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.     * DocumentEvent)     */"
"/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */"
"/*         * @see java.awt.event.ActionListener#actionPerformed(         * java.awt.event.ActionEvent)         */"
/* Make a copy of the modelelements: */
"/*     * @see junit.framework.TestCase#runTest()     */"
// if the list does not exist add the code generation and // good practices profiles as default
"/*      * @see junit.framework.TestCase#setUp()     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(     *         java.lang.Object)     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */"
// the selected operation
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)     */"
// make sure we know it when a classifier is added as a base
"/*	     * @see TargetListener#targetRemoved(TargetEvent)	     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseARelationalExpressionTail(tudresden.ocl.parser.node.ARelationalExpressionTail)     */"
"/*	 * @see TargetListener#targetAdded(TargetEvent)	 */"
"/* So, we found a Classifier                     * that is not a ClassifierInState.                     * And at least one state has been selected.                     * Well, let's correct that:                     */"
// TODO: We just need to get someone to re-render a single // line of text which represents the element here, but I'm // not sure how to do that. - tfm // TODO: Bob replies - we shouldn't be interested in this // event here. The FigFeature (or its notation) should be // listen for change and the FigFeature should be update // from that.
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#removeOtherModelEventListeners(java.lang.Object)     */"
"/*     * Builds an initialized stereotype with no namespace. A stereotype must     * have a namespace so this method is unsafe. Use buildStereotype(String,     * Object).     *      * @param text     *            is the name of the stereotype     * @return an initialized stereotype.     */"
//do not use a custom Icon //the titles of buttons //default button title
// base is already set to this assoc...
"/*     * @see GUISettingsTabInterface#getTabPanel()     */"
// or //      self.allConnections->forAll( //              r | self.namespace.allContents->excludes //      (r.participant) implies //      self.namespace.clientDependency->exists (d | //      d.oclIsTypeOf(Permission) and //      d.stereotype.name = 'access' and
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAIfExpression(tudresden.ocl.parser.node.AIfExpression)     */"
// Just in case the existing selected element is from elsewhere // make sure it is in the list
// Set properties of the stereotype box. // Initially not set to be displayed, but this will be changed // when we try to render it, if we find we have a stereotype.
// Select the Current type in the combobox
"/* The selected value may be """" to              * clear the represented classifier. */"
// Get the implementations of this operations and // look for an OpaqueBehavior.
/* init profiles defined in jar files */
//    private boolean mustRefresh;
//        mustRefresh = true;
"/*     * Return a list of namespaces enclosing this element.     * The list is ordered outer to inner. i.e. it starts at the root model.     */"
/* This should not happen. */
"/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */"
// if it has no language, then we assume it is not an instance of // OpaqueExpression, so we leave it null and handle elsewhere
// /////////////////////////////////////// // Build the field // ///////////////////////////////////////
// Create a Body that reacts to double-clicks and jumps to a diagram.
// /////////////////////////////////////// // Add field(s) to panel // ///////////////////////////////////////
// click on the already selected value must not call setValue
//                    + "a.allConnections->exists(r | r.type.oclIsKindOf(Actor)) and "
// The 2 Radios have only one information.
// Update the model, and then notify
// We silently ignore requests which conflict with // UML 1.4 WFR 2.5.3.1 #3 - no aggregation for n-ary associations
// When call by contructor : no one is selected
"/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */"
// Expressions are DataTypes, not independent model elements // be careful not to reuse them
// We need to to this otherwise there is no notification // and diagram isn't change
// ScopeKind, VisibilityKind, PseudostateKind, etc // Doesn't include Boolean though, despite what UML 1.4 spec says
// needed for notification
// Because we map both ends of an association we'll see many // names twice //                LOG.log(Level.FINE, "Duplicate property name found - {0}:{1}", new Object[]{typeName, propertyName});
// This is an expensive method that we should ensure is called // rarely. Hence info level to track easily.
"/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)     */"
// Language has changed
// fill the list with items
"/*     * @see org.argouml.model.ModelImplementation#getCollaborationsHelper()     */"
// specifies valid elements for an ObjectFlowState to contain
// Commit our transaction
// in UML2, the target is already the "expression" (Opaque...)
"/*     * @see org.argouml.model.DirectionKind#getInOutParameter()     */"
"/*     * @see java.util.List#lastIndexOf(java.lang.Object)     */"
// Add the diagram as a listener to the namespace so // that when the namespace is removed the diagram is deleted also.
"/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.     * DocumentEvent)     */"
// Simulates UML2 getting the aggregation from the opposite end
"/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     */"
"/*     * @see Observable#notifyObservers()     */"
"/*     * @see org.argouml.model.VisibilityKind#getPublic()     */"
"/*     * @see org.argouml.model.ExtensionMechanismsFactory#createTaggedValue()     */"
// build all other elements using existing buildNode
// This calls the getters to fetch actions even though the // action variables are defined is instances of this class. // This is because any number of action getters could have // been overridden in a descendant and it is the action from // that overridden method that should be returned in the array.
"/* Let's create a class with the given name, otherwise         * the user will not understand why we refuse his input! */"
"/*     * @see java.util.Collection#iterator()     */"
// TODO: All of the following can be broken if we have multiple // targets selected
// if not, it is a control and must be labeled...
"/*     * @see org.argouml.model.VisibilityKind#getPrivate()     */"
"/*     * @see org.argouml.model.ScopeKind#getInstance()     */"
"/*     * @see org.argouml.model.PseudostateKind#getJoin()     */"
"/*     * @see org.argouml.model.PseudostateKind#getInitial()     */"
// Destroy it
// disable the button since no row will be selected now
// title = "" because already done for Optional
// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
// Nothing to do - we get all events automatically
// Force the parent to redraw
"/**     * Test if the given namespace is a valid namespace to add the diagram to.     * TODO: This method was created to facilitate the merge     * of this class with ActionAddDiagram.     *     * @param ns the namespace to check     * @return Returns <code>true</code> if valid.     */"
"/*     * @see org.argouml.model.AbstractModelEventPump#removeClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
"/*     * @see org.argouml.model.ModelEventPump#flushModelEvents()     */"
"/*     * @see org.argouml.model.ExtensionMechanismsHelper#getStereotypes(java.lang.Object)     */"
"/*     * @see org.argouml.model.ConcurrencyKind#getSequential()     */"
"/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object)     */"
"/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object)     */"
"/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */"
"/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */"
"/*     * @see javax.swing.ListModel#getSize()     */"
"/*     * @see org.argouml.cognitive.critics.Critic#addSupportedDecision(org.argouml.cognitive.Decision)     */"
"/*     * @see org.tigris.gef.presentation.Fig#classNameAndBounds()     */"
///////////////////////////////////////////////////// ////////// End AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
"/*     * @see org.argouml.model.ChangeableKind#getFrozen()     */"
// if we've found the module model, log it // and place it in the map so we don't have to // find it if we need it again.
"/*     * @see org.argouml.model.UseCasesHelper#getAllUseCases(java.lang.Object)     */"
"/*                 * Although not represented in the OCL (or our Java), the                 * English text of WFR #4 of Section 2.10.3.4 in the UML 1.4                 * spec is more restrictive - ""[4] A Collaboration may only                 * contain ClassifierRoles and AssociationRoles, the                 * Generalizations and the Constraints between them, and                 * Actions used in the Collaboration's Interactions.""                 */"
"/*     * Just returns the descr param.     *     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */"
// returns a List
"/*         * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)         */"
// find the bases of the connected classifierroles so that we can see // what associations are between them. If there are bases then the // associations between those bases form the possible bases. Otherwise // the bases are formed by all associations in the namespace of the // collaboration
// NOTE: This may be called from a different thread, so we need to be // careful of the threading restrictions imposed by AbstractDocument // for mutators to be sure we don't deadlock.
///** // * A list of the path item attributes for this container. // * The list is populated during parsing, them processed at endElement() // */ //private List<Hashtable<String, String>> pathItemAttrs = //    new ArrayList<Hashtable<String, String>>();
"/*         * Because we get the metatype class stripped of its reflective         * proxies, we need to jump through a hoop or two to find it         * in the metamodel, then work from there to get its proxy.         */"
"/*     * @see org.argouml.uml.ui.     *      AbstractTestActionAddDiagram#getValidNamespaceClasses()     */"
"/*     * @see org.argouml.uml.ui.UMLCheckBox#buildModel()     */"
"/*             * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)             */"
// Copy the current in the previous
"/*     * @see javax.swing.table.TableModel#setValueAt(     *         java.lang.Object, int, int)     */"
// Sanity check - the returned path item placement // strategy should match the one in the UML. // If it doesn't, it could be that the UML was // created with an older argo version, and the new // argo version use a different placement strategy. // If they don't match, just use the default.
//super(new LabelledLayout());
// Get the list: OpaqueExpression, LiteralString,...
// By default, the first value of the combobox is selected.
// Get current InitialValue
"/*     * @see org.argouml.cognitive.critics.Critic#critique(java.lang.Object,     * org.argouml.cognitive.Designer)     */"
"/*     * @see org.argouml.model.StateMachinesHelper#getSource(java.lang.Object)     */"
// default : 0 => OpaqueExpression // set to 1 for test
"/*     * @see org.argouml.cognitive.Poster#getSupportedDecisions()     */"
"/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */"
"/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */"
"/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */"
// Create the body and language Field
"/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */"
// Create other panel element
// create Panel containing the previous field
"/*     * @see org.argouml.cognitive.critics.Critic#isActive()     */"
"/*     * @see org.argouml.cognitive.critics.Critic#isEnabled()     */"
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */"
// Compare the type of the parameters. If any of the types is // null, then we have a match.
/* There are no composite states, so this will work: */
"/*     * Does not do anything.     *     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem,     * java.lang.Object)     */"
// Copy in memory the current
"/*     * @see org.argouml.cognitive.Poster#unsnooze()     */"
"/*     * @see org.argouml.cognitive.Poster#snooze()     */"
"/*     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem, java.lang.Object)     */"
// Copy the next value in the current
"/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *          TargetEvent)     */"
"/* The selected value may be """" to              * clear the represented operation. */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *          TargetEvent)     */"
"/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorRemoved(org.argouml.application.events.ArgoGeneratorEvent)     */"
"/*	 * @see TargetListener#targetRemoved(TargetEvent)	 */"
"/*     * @see java.util.List#listIterator(int)     */"
// Copy the current in the next
// Temporary until SimpleListModel is used for all
// Create popup tool if we have a single row
// Create add and remove buttons if needed first
// Pushing this to the end of the AWT thread seems to be the only // way to get this to update correctly
"/** * Class to display graphics for a UML Link in a diagram. <p> *  * The underlined association name is shown next to the middle of the path. *  * TODO: Show more notation as described in the standard: * ""A rolename may be shown at each end of the link. An association  * name may be shown near the path. If present, it is underlined * to indicate an instance. Links do not have instance names,  * they take their identity from the instances that they relate. * Multiplicity is not shown for links because they are instances.  * Other association adornments (aggregation, composition,  * navigation) may be shown on the link ends."" */"
//TODO: GenNavigableClasses?
"/*	     * @see TargetListener#targetSet(TargetEvent)	     */"
"/*     * @see org.argouml.notation.NotationName#getConfigurationValue()     */"
"/*     * Utility function to add a listener for an array of property names     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            array of property names (Strings) to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */"
"/*     * Utility function to remove an element listener     * and adapt the remembered list of registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */"
// Get Features owned by those Classifiers
// now we construct the zig zag inheritance line //getUnderlyingFig()
// The 5 main component : 2 label, a panel for langage , a panel with // button, a textarea
// Copy previous element
"/*             * For a Classifier:             * <pre>             * [10] The operation allContents returns a Set containing             * all ModelElements contained in the Classifier together             * with the contents inherited from its parents.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *       self.parent.allContents->select(e |             *            e.elementOwnership.visibility = #public or             *            e.elementOwnership.visibility = #protected))             * where parent is defined for GeneralizableElement as:             * [1] The operation parent returns a Set containing all direct             * parents             *   parent : Set(GeneralizableElement);             *   parent = self.generalization.parent             * </pre><p>             */"
// Copy next element
"/*     * @see org.argouml.notation.providers.NotationProvider#updateListener(java.beans.PropertyChangeListener, java.lang.Object, java.beans.PropertyChangeEvent)     */"
// Copy the previous value in the current
// self associations are special cases. No need to let the maze // runner find the way.
// The 2 component: a textField and a list
// Extract the icon that is used by the tree control // for the current look and feel
// Add a new entry in the list and select it. // Translator.localize("button.add") // +
"/*         * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)         */"
/* TODO: Make use of the constants defined in the ToDoItem class! */
// Handle ItemUID in container contents
// profile section: dealing with profiles in different states
"/* This should not be needed if the above is correct,          * but let's be sure: */"
// Copy the todo items after the model and diagrams so that // any model elements or figs that the todo items refer to // will exist before creating critics.
"/*     * For Java notation, we also need to listen to ""leaf"" changes,      * since they are shown as ""final"" on the diagram.     */"
//no text? remove attr!
"/* This is needed for the JUnit tests.         * Otherwise a ""assert initialized"" would suffice. */"
// Let's make it a bit more difficult by setting the target:
"/* We need to set the namespace/owner                     * of the new attribute before parsing: */"
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */"
// If anything goes wrong return the stack // trace as a string so that we get some // useful feedback.
"/*     * Is this item a copy?     *     * @see java.lang.Object#equals(java.lang.Object)     */"
// once one criticism is found, exit
// Create new menu item if it doesn't exist for this class.
"/*             * For a Collaboration:             * <pre>             * [1 ] The operation allContents results in the set of             * all ModelElements contained in the Collaboration             * together with those contained in the parents             * except those that have been specialized.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union (             *                       self.parent.allContents->reject ( e |             *                       self.contents.name->include (e.name) ))             *             *  parent here is the GeneralizableElement definition             * </pre>             */"
//////////////////////////////////////////////////////////////// // constructor
"/*     * @see org.argouml.model.ModelImplementation#getXmiReader()     */"
//////////////////////////////////////////////////////////////// // user interface
"/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */"
//////////////////////////////////////////////////////////////// // criticism control
"/*     * @see java.util.Collection#clear()     */"
//////////////////////////////////////////////////////////////// // issue resolutions
// default parameter name
//////////////////////////////////////////////////////////////// // critiquing
// the critiquing thread should wait if disabled.
// why?
// If menus don't containt menu item necessary for this class, create it
"/*         * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)         */"
//////////////////////////////////////////////////////////////// // constructor and singeton main.methods
"/**     * Used by the copy functions. Do not call this function directly.     * TODO: generalizations, specializations?     *     * @param source     *            the source generalizable element     * @param target     *            the target generalizable element     */"
//                      && getAutoCritique()
// Delete dependencies where this is the only client
/* Don't clear everything here, breaks loading! */
// Don't let a transient error kill the thread
"/*     * @see org.argouml.uml.notation.NotationProvider#getParsingHelp()     */"
//decision model listener
/* end class ChildGenDMElements */
"/*     * TODO: All the ToDos in the doCopyFoo main.methods below are inherited from the     * NSUML implementation and do not reflect new issues. One additional thing     * which does need to be dealt with is the copying of any attributes which     * have been added since this code was implemented for UML 1.3.     */"
"/**     * Used by the copy functions. Do not call this function directly.     * TODO: actions? instances? collaborations etc?     *     * @param source     *            the source classifier     * @param target     *            the target classifier     */"
//TODO: This should be the name of the designer that created //      the todoitem, not the current username!
// LOG.log(Level.FINE, "predicate() returned true, creating ToDoItem");
//////////////////////////////////////////////////////////////// // corrective automations, wizards
// check param types: only some connections are legal uml connections:
"/* In this case, either the container was not set,             * or it was not contained in a statemachine.             */"
// We'll put the association in the namespace of whichever end // is not navigable and is writeable.  If they both are, we'll use the // namepace of c1.
/*(MStateVertex)*/
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationRemoved(org.argouml.application.events.ArgoNotationEvent)     */"
// if wizClass is not a subclass of Wizard, print a warning
//return getCriticName();
//////////////////////////////////////////////////////////////// // design feedback
/* end interface Poster */
"// Use this for fast fail instead. // Sacrificed for complete fail. d00mst //throw new UnresolvableException( //	""Unable to create ItemUID for class: "" //	+ obj.getClass());"
// TODO: values
// Delete Extends which have this as their only ExtensionPoint
/* end class Goal */
"/*     * @see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)     */"
// check if we are using a supported java version
//implements java.io.Serialization
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderRemoved(org.argouml.application.events.ArgoNotationEvent)     */"
// end class CurDecisionCM
// As soon as we've created a notation and have registered it listener // force an event to go to the listener so it draws for the first time.
/* end class StandardCM */
"/*     * @see org.argouml.persistence.SAXParserBase#handleStartElement(     *         org.argouml.persistence.XMLElement)     */"
// end class CompositeCM
// end class EnabledCM
// end class NotSnoozedCM
// end class AndCM
// end class DesignGoalsCM
// end class OrCM
// Register our last chance exception handler
"/*     * @see java.awt.Component#getLocale()     */"
// Get the splash screen up as early as possible
// We have to do this to set the LAF for the splash screen
// main initialization happens here
"/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */"
// Force the configuration to load
// Synchronize the startup directory
// then, print out some version info for debuggers...
// Set the i18n locale
/* set properties for application behaviour */
// now, let's print it
// nothing else to do (?)
"/*     * @see org.argouml.persistence.XMLTokenTableBase#setupTokens()     */"
// We MUST have a project open before continuing. Create if necessary
// Perform one command.
// Now create a new object.
// Set the namespace to that of the base as first choice, or that of // the addition as second choice.
// initLogging();
// make the projectbrowser
"/*             * The next one defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting:             */"
/* end Class Main */
/* end class PostLoad */
/* We don't care if optional modules aren't found. */
/* end class LoadModules */
/* All tabs are added at the end, except a TabToDoTarget: */
/* End interface GUISettingsTabInterface */
//            Editor editor = Globals.curEditor(); //            GraphModel gm = editor.getGraphModel(); //            LayerDiagram lay = //                ((LayerDiagram) editor.getLayerManager().getActiveLayer());
// skip pos, we know it's not a valid char from above
// Store in the user configuration, and // let gef know also.
// Use the configuration if it exists, otherwise // use what gef thinks.
"/*     * @param pc     * @see org.argouml.profile.ProfileManager#applyConfiguration(org.argouml.kernel.ProfileConfiguration)     */"
//failed to clone
"/*     * @see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)     */"
"/* Remark: The code in             * ProjectSettings.init() currently presumes             * that nobody is using this event. */"
// calculate the higher and lower Figs
// NOTE: This is package scope to force callers to use ResourceLoaderWrapper
"/*     * @see java.util.Observable#notifyObservers(java.lang.Object)     */"
/* end class ResourceLoader */
// the validity checking thread should wait if disabled.
// If element has been deleted, it's no longer valid
// History.TheHistory.addItemResolution(item, // "no longer valid"); // ((ToDoItem)item).resolve("no longer valid"); // notifyObservers("removeElement", item);
// ////////////////////////////////////////////////////////////// // Notifications and Updates
"/*     * @see org.argouml.profile.internal.ocl.OclExpressionEvaluator#evaluate(java.util.HashMap, org.argouml.profile.internal.ocl.ModelInterpreter, java.lang.String)     */"
/* skip any identical items already on the list */
// cat.debug("Checking for inhibitors " + rc);
"/*         * @see org.argouml.ui.TabTarget#refresh()         */"
// History.TheHistory.addItemResolution(item, reason);
"/*     * @see org.argouml.profile.internal.ocl.uml14.Bag#count(java.lang.Object)     */"
"/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */"
"/*     * Returns the target of this tab.     *     * @see org.argouml.ui.TabTarget#getTarget()     */"
"/*     * Enable buttons when selection made.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
"/* Here we located the new classifier                          * with its operation. */"
/* end class ArgoJMenu */
// EventListenerList.add() is synchronized, so we don't need to // synchronize ourselves
"/*     * Refresh the text of the tab.     *     * @see org.argouml.ui.TabTarget#refresh()     */"
// End of block
/* end interface Clarifier */
// Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true.
// Extra care to be taken since allOffenders can be reset while // this method is running.
// these are blue in Metal Default Theme
// Cached expansions
// these are gray in Metal Default Theme
"/*     * @see org.argouml.application.api.ProgressMonitor#isCanceled()     */"
// set the icon for this poster
// EventListenerList.remove() is synchronized, so we don't need to // synchronize ourselves
//MVW
// TODO: Add double click listener 
// ////////////////////////////////////////////////////////////// // event related stuff
"/*     * @see javax.swing.Icon#getIconWidth()     */"
/* end class CrNWayAgg.java */
"/*     * @see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)     */"
/* end class CheckManager */
// Now lets search
/* end class TabChecklist */
// We found it!
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *      TargetEvent)     */"
// Enter the class to speed up the next search.
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)     */"
"/*     * This is explained by WFR 2 of a StructuralFeature: The type of a     * StructuralFeature must be a Class, DataType, or Interface.     *      * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */"
//////////////// // accessors
//////////////// // instance varables
//////////////// // constructor
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#propertyChange(java.beans.PropertyChangeEvent)     */"
//////////////// // TableModel implemetation
"/*     * @see org.argouml.application.api.ProgressMonitor#close()     */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#addOtherModelEventListeners(java.lang.Object)     */"
"/*     * @see java.util.List#addAll(int, java.util.Collection)     */"
/* in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT. */
"/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */"
/* by default, double the snooze interval each time */
/* end class SnoozeOrder */
//////////////////////////////////////////////////////////////// // wizard actions
"/* This changes the complete structure of the table,          * so we need to set the column widths again. */"
// TODO: do all following steps // TODO: resolve item from ToDoList
/* end class ActionOpenCritics */
// Set initial sorting on Critic Headline
// Critics Table
// instead of making a new list, decrement index, return when // found and index == 0
"/*     * @see org.argouml.application.api.ProgressMonitor#notifyNullAction()     */"
// Critic Details panel
// case 2
//  TableModel implemetation
//TODO:
// no maximum set, so it will stretch...
/* and for advanced mode: */
"/* This check is needed, otherwise the setbase()                 *  below gives an exception.*/"
// Set tableSP's preferred height to 0 so that details height // is used in pack()
//     c.gridy = 0; //     c.gridx = 0; //     JLabel priLabel = new JLabel("Priority:"); //     gb.setConstraints(priLabel, c); //     _mainPanel.add(priLabel);
//     c.gridy = 0; //     c.gridx = 2; //     JLabel lowLabel = new JLabel("Low"); //     gb.setConstraints(lowLabel, c); //     _mainPanel.add(lowLabel);
//     c.gridy = 0; //     c.gridx = 3; //     JLabel twoLabel = new JLabel("ad"); //     gb.setConstraints(twoLabel, c); //     _mainPanel.add(twoLabel);
//     c.gridy = 0; //     c.gridx = 5; //     JLabel fourLabel = new JLabel("asd"); //     gb.setConstraints(fourLabel, c); //     _mainPanel.add(fourLabel);
//     c.gridy = 0; //     c.gridx = 6; //     JLabel highLabel = new JLabel("High"); //     gb.setConstraints(highLabel, c); //     _mainPanel.add(highLabel);
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */"
// ------------ other main.methods ------------
"/*     * @see java.util.List#get(int)     */"
"/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementRemoved(java.lang.Object)     */"
//////////////////////////////////////////////////////////////// // TreeModel implementation - todo specific stuff
//////////////////////////////////////////////////////////////// // class variables
// general icons for poster
"/*             * @see java.lang.Runnable#run()             */"
// specialised icons for designer
/* end class ToDoTreeRenderer */
//   public static Decision decisionUNCATEGORIZED = //   new Decision("Uncategorized", 1);
/* end class ToDoByDecision */
"/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#removePerspective(java.lang.Object)     */"
// if the control is a panel, add it
//     c.gridx = 1; //     c.gridy = 3; //     c.gridheight = GridBagConstraints.REMAINDER; //     SpacerPanel spacer2 = new SpacerPanel(); //     gb.setConstraints(spacer2, c); //     _mainPanel.add(spacer2);
"/*         * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(         * org.argouml.ui.targetmanager.TargetEvent)         */"
//image.setMargin(new Insets(0, 0, 0, 0));
"/*         * @see org.argouml.ui.targetmanager.TargetListener#targetSet(         * org.argouml.ui.targetmanager.TargetEvent)         */"
/* end class WizStepTextField */
/* end class WizDescription */
/* end class WizStepCue */
// stop/start creating more critics
/* end class ActionGoToCritique */
// does nothing
/* end class ActionAutoCritique */
// stop/start cleaning up invalid TodoItems.
// reuse Opaque..., just set it's attributes
//otherwise parent must be an offending design material
/* end class ActionOpenGoals */
//? inform()
// If visibility is already changed for this class, respect it.
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(     *         java.lang.Object)     */"
"/*     * @see java.util.Collection#add(java.lang.Object)     */"
// the target of description will always be set directly by tabtodo
// ------------- MouseListener implementation ---------------
//p  = new UMLValueSpecificationPanel(model, propertyName);
/* end class WizStepConfirm */
"/*     * @see org.argouml.uml.ui.UMLComboBox#doIt(ActionEvent)     */"
// next line coming from projectbrowser
// ------------ ItemListener implementation ----------------------
// -------------TreeSelectionListener implementation -----------
// not needed in UML 1.x
"/*     * Prepare for typing in rationale field when window is opened.     *     * @see java.awt.Component#setVisible(boolean)     */"
// Only interrupt for one todoitem
/* end class ActionOpenDecisions */
// blinks?
// add the perspectives to a list for the combobox
// fireTreeNodesChanged(this, path, childIndices, children);
// TODO: This looks O(n^2)
//TODO: make a new history item
//cat.debug("bad decision");
//cat.debug("bad goal");
/* end class DismissToDoItemDialog */
// Our comparator will throw an InvalidElementException if the old // list contains deleted elements (eg after a new project is loaded) // so remove all the old contents first
// finally, apply profile configuration to the model
"/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */"
/* the text was: {frozen} */
/* end class WizStep */
//////////////////////////////////////////////////////////////// // actions
// Don't allow instantiation
// N.B. A node which is an Association is either a n-ary association // or the Class part of an AssociationClass
//////////////////////////////////////////////////////////////// // ActionListener implementation
//////////////////////////////////////////////////////////////// // DocumentListener implementation
//////////////////////////////////////////////////////////////// // TargetListener implementation
//////////////////////////////////////////////////////////////// // Instance variables
/* end class ConfigurationFactory */
// LOG.log(Level.INFO, "Configuration saved to {0}\n", url);
/* the text was: {frozen = false} */
// check for the older properties file and // copy it over if possible
// Only allow one load
// add the first point twice
// Initialize band buffer bounds
//        LOG.log(Level.FINE, "getData Rectangle = " + clip);
// Create a new graphics context so we start with fresh transforms
// Get all classifiers in our model // TODO: We need the property panels to have some reference to the // project they belong to instead of using deprecated functionality
// Fill with our background color
// Ask GEF to print a band of the diagram (translated & clipped)
// Make sure it isn't caching anything that should be written
//        assert !initialized; // GUITestActionOpenProject fails over this...
// Retain the original one:
"/*     * Internal initialization method.  Handles initialization which     * is common to both public main.methods.     */"
// Flag the command as to whether it is first in a chain
/* end class DelayedChangeNotify */
/* end class CrConflictingComposites */
// Default diagram settings
// Default notation settings
/* Generation preferences: */
"/*         * The next one defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */"
"/*         * The next ones defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */"
/* This Notation is not available! */
// Always put the model at the top
// otherwise add the diagram at the start
// Register with the save action with other subsystems so that // any changes in those subsystems will enable the // save button/menu item etc.
"/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */"
/* end interface DelayedVChangeListener */
// then any new buttons
// a profile initially has no applied profiles, we go bottom-up
/* Skip leading underscores: */
"/**     * TODO: should just be the directory to write.     */"
/* The preferences with project-scope: */
/* The ArgoUML version with which this project was last saved: */
// if diagram added successfully, add the member too
// Adding a todo member removes any existing one.
// got past the veto, add the member
// send indeterminate new value instead of making copy of vector
"/* Hence, a diagram name was saved in the project             * that we are loading. So, we use this name             * to retrieve any matching diagram. */"
"/*     * @see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)     */"
/* Use the first diagram. */
"/* If there was no diagram at all,             * then use the (first) UML model. */"
// we don't need this HashMap anymore so free up the memory
//Can not delete the model
//Can not delete the profile
"/*     * @see java.lang.Object#finalize()     */"
"/*	 * @see javax.swing.table.TableModel#getColumnCount()	 */"
"/*	 * @see javax.swing.table.TableModel#getColumnName(int)	 */"
// NOTE: No longer a separate type in UML 2.1
"/*	 * @see javax.swing.table.TableModel#getRowCount()	 */"
// Make the topmost diagram (that is not the one being deleted) // current.
//////////////////////////////////////////////////////////////// // trash related main.methods
// Fire an event some anyone who cares about diagrams being // removed can listen for it
// there's just one ProfileConfiguration in a project // and there's no other way to add another one
"/** * Tab for the settings dialog that makes it possible to * select the modules that are to be enabled. * * TODO: Header for the table. * * @author Linus Tolke */"
"/*     * @see java.util.Collection#retainAll(java.util.Collection)     */"
// Do nothing - these buttons are not shown.
// Do nothing! // The next time we refresh, we will fetch the values again.
// Access main.methods for modules that need to query about the status of // other modules.
// Access main.methods for the GUI that the user uses to enable and disable // modules.
// Access main.methods for the program infrastructure
// Catch all exceptions and errors, however severe
// TODO: huntForModulesFromJavaWebStart();
// We expect all extensions to have a manifest even though we // can operate without one if necessary.
// Look for our specification
// Add this to search list for I18N properties // (Done for both modules & localized property file sets)
// We havn't found it. Add it.
"/*     * Called after the notation default property gets changed.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// The following check should have been satisfied before we // instantiated the module, but double check again
// If it didn't have a loadable module class and it doesn't look like // a localized property set, warn the user that something funny is in // their extension directory
// Since there is no way to compare the objects as equal, // we have to search through the list at this point.
"/*     * Remark:     * There is also a java-like notation, which is also     * part of ArgoUML core distribution.     */"
// NSUML does this (?) // Model.getFacade().setGuard(trans, g);
// This is needed for the case when the default notation is // not loaded at this point.
// Build the final string
//////////////////////////////////////////////////////////////// // Static workers for dealing with notation names.
"/*     * @see org.tigris.gef.base.Diagram#initialize(java.lang.Object)     */"
// No valid field for above notationLanguage.  It's valid if not null.
// We also show stereotypes
"/*     * @see org.tigris.gef.presentation.FigNode#isDragConnectable()     */"
// We also show the type (of which e.g. the name may change)
// We also show tagged values (the / for derived)
"/*     * @see org.tigris.gef.presentation.Fig#getEnclosedFigs()     */"
// and when the Operation is replaced:
"/*     * @see org.tigris.gef.presentation.Fig#translate(int, int)     */"
/* We are not interested in the name. */
/* And the parameter names and values: */
/* And the arguments: */
// We also show parameters
//  We also show types of parameters
/* Listen to the modelelement itself: */
//////////////////////////////////////////////////////////////// // convenience main.methods
// register for events from all modelelements // that change the name and body text // i.e. when the CallAction is replaced:
// and when the owner is replaced (unlikely for operations), // and when the operation changes name:
// removed stereotype
// register for events from all modelelements // that change the text // i.e. when the Transition is replaced:
// new stereotype
// register for the doActivity etc.
// register for internal transitions:
"/*     * @see java.lang.Object#hashCode()     *     * This will result in rather bad performance but at least we will     * not violate the contract together with {@link #equals(Object)}.     */"
//        return "parsing.java.help.attribute";
//        return "parsing.help.fig-association-end-name";
//TODO: initial value
/* skip spaces */
// the name itself
/* Check the name for validity: */
// pick out return type
// handle multiplicity here since we need the type // actually the API of generator is buggy since to generate // multiplicity correctly we need the attribute too
// strip any trailing semi-colons
// name and params
// constructor
// check for more attributes (';' separated):
// Remove bases that aren't there anymore
/* Initialize the NotationUtilityUml: */
// copy - can't iterate modify live collection while iterating it
/* When nothing is generated: omit the space. */
// Loop through all base classes, building a comma separated list
// yes, there are more:
//no non-whitechars in text? remove attr!
"/* If the 1st attribute is static,                         * then the new ones, too. */"
/* Handle Derived: */
/* Handle Visibility: */
// fix for loading bad projects
"/*                     * The ""show types"" defaults to TRUE, to stay compatible                     * with older ArgoUML versions that did not have this                     * setting:                     */"
// The element was deleted while we were processing it
// no instantiations
// construct bases string (comma separated)
//no text? remove op!
//no non-whitechars in text? remove op!
// check for more operations (';' separated):
// end while loop
// Don't create a stereotype for <<signal>> on a Reception // but create any other parsed stereotypes as needed
// lets concatenate it to the resulting string (genStr)
"/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */"
// the parameters
// the returnparameters
// The model element was deleted while we were working on it
// else: we remove only the extra ","
"/*     * @see org.argouml.uml.util.namespace.NamespaceElement#getNamespaceElement()     */"
// the query state
// remove last ,
"/*     * @see org.argouml.uml.util.namespace.Namespace#setDefaultScopeToken(java.lang.String)     */"
// end of block
// A string of the form "name:"
"/*     * @see java.util.Collection#removeAll(java.util.Collection)     */"
// this is a Message UML object
"/* Supported format:         *     predecessors number "":"" action         * The 3 parts of the string to generate: */"
"/*     * @see java.util.Collection#contains(java.lang.Object)     */"
/*(MMessage)*/
// This may return null:
// activatorIntNo is now guaranteed not null
//        List<String> args = null;
// get the ordered list of immediate successors:
// the condition or iteration expression (recurrence):
"/*     * @see java.awt.event.ComponentListener#componentResized(java.awt.event.ComponentEvent)     */"
/* Now apply the changes to the model: */
// windowOpen state will be changed when window is activated
"/* Disconnect the message from the call graph                 * Make copies of returned live collections                 * since we're modifying                 */"
// Find the preceding message, if any, on either end of the // association.
/* Do not set the name. */
/* MClassifierRole */
// Connect the message at a new spot
// case 3 & 4
/* If no variable name was given, then retain the one in the model. */
"/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)     */"
/* If no function-name was given, then retain the one in the model. */
"/* Store the guard, i.e. condition or iteration expression,         * in the recurrence field of the Action: */"
/* If there was no Action yet, create a CallAction: */
// Things are strange if there are more than one candidate root, // it has no obvious interpretation in terms of a call tree.
// We can do nothing if we don't have both the use case and extension // point.
// Parse the string to creat a new extension point.
// Build a new extension point
// The empty string. Return null
"/* This case is a bit different, because of the parameters.                      * If the event already exists, the parameters are ignored. */"
// If we are given the null string, return immediately,  // so that the extensionpoint is removed.
// A string of the form "name:location". Discard the middle token // (":")
// Read past the colon.
// The string to build
// Get the fields we want
// Put in the name field if it's there
// Put in the location field if it's there
/* First we decode the string: */
/* And 3rd, we adapt the model: */
// Same class, other operation
// Other class
// We found the classifier, now go find the operation:
"/*     * @see org.argouml.uml.util.namespace.Namespace#peekNamespaceElement()     */"
/* the text was: {frozen = true} */
/* case 3 */
// Should we be getting this from the GUI? BT 11 aug 2002
// no type defined yet
"/*     * @see org.argouml.uml.util.namespace.Namespace#iterator()     */"
/* This automatically pulls in a TagDefinition from the profile: */
/* The TV existed, but maybe it was not "true": */
/* TODO: For UML2: Check if the type of the TV is String. */
"/* Generate all the existing internal transitions,         * so that we can compare them as text with the newly entered ones.         */"
// Allow concatenation order and separator to be localized
/*Parameter etc.*/
/* "in" is the default */
// return nothing
// it can still be null if the UML element  // did not have a multiplicity defined.
"/*     * @see org.tigris.gef.graph.MutableGraphModel#connect(java.lang.Object,     *      java.lang.Object, java.lang.Class)     */"
/* Let's not be picky about the brackets - just remove them: */
// get the // classifier
// the State of a ClassifierInState is removed, // so let's reduce it to a Classifier.
// Strings
"/*     * @see org.argouml.uml.util.namespace.Namespace#getBaseNamespace()     */"
/* Remove the states that did not match. */
// the model is changed - our job is done
// no state named s is found, so we have to // reject the user's input
/* Finally, do the adaptations: */
// then c is a "normal" Classifier // UML states
"/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(     *         java.lang.Object)     */"
// let's create a new ClassifierInState with the correct links
/* This updates the diagram - hence as last statement: */
// case 3
/*(MTransition)*/
// if no classifier has been set, then entering a state is // not useful, so the user's input has to be rejected.
"/* TODO: If the next line trows an exception, then what                     * do we do with the remainder of the                     * parsed/to be parsed lines?                     */"
/* Add this new one, and mark it to be retained: */
"//	 WFR Transitions, OMG UML 1.3"
"/* Process the final list of internal transitions,         * and hook it to the state:         */"
// don't forget to remove old internals!
// Make next accesses to this instance predictable:
// and hook in the new ones:
// the ActionExpression
// let's look for a TimeEvent, ChangeEvent, CallEvent or SignalEvent
// operation(paramlist)
// the part after the || is for when there's nothing between the ()
"/* It is safe to give a null to the next function,         * since a statemachine is always composed by a model anyhow. */"
// else the empty s will do
"/*     * Return the ith element from a Collection.     *     * @param collection collection to get element from     *     * @param index index of the element to be returned     *     * @return the object     */"
// case 1 and 2
/*language*/
// when(...)
// signalname
// and parse the parameter list
"/* And hook it to the transition immediately,                 * so that an exception can not cause it to remain dangling: */"
/* Do nothing. */
"/*     * @see javax.swing.event.MenuListener#menuSelected(javax.swing.event.MenuEvent)     */"
/* Just change the time expression */
// we have an event without expression
"/* It's a time-event now,                         * but was of another type before! */"
/* Just change the ChangeExpression */
/* Create a new expression: */
"/*         * We can distinguish between 4 cases:         * 1. A trigger is given. None exists yet.         * 2. The trigger was present, and it is the same type,         * or a different type, and its text is changed, or the same.         * 3. A trigger is not given. None exists yet.         * 4. The name of the trigger was present, but is removed.         * The reaction in these cases should be:         * 1. Find the referred trigger (issue 5988) or create a new one, and hook it to the transition.         * 2. Rename the trigger.         * 3. Nop.         * 4. Unhook and erase the existing trigger.         */"
"/* The parsed text describes a change-event,                         * but the model contains another type! */"
/* Just change the Name and linked operation */
/* TODO: Change the linked operation. */
/* Just change the Name and linked signal */
// case 3 and 4
/* Do not check if the parameters match. */
/* No text. We may remove the literal. */
/* No non-white chars in text? remove literal! */
/* Heuristic algorithm: do not show stereotypes if there is no name. */
/* Great! The class already existed - just use it. */
/* If no base was typed, then only set the name: */
/* Only set the name if the base was found: */
//get the associationRole name
// Only instantiate when we need it.
"/* If the base is already set to this assoc,                      * then do not set it again.                     * This check is needed, otherwise the setbase()                     *  below gives an exception.*/"
// 2002-07-31 // Jaap Branderhorst // from here made visibility etc. configurable
//get the base association name
// and not association classes
// end of OCLEvaluator
// look for associations
//MAssociationEnd
//MParameter
"/*     * @see org.tigris.gef.graph.GraphListener#edgeAdded(org.tigris.gef.graph.GraphEvent)     */"
// The ocl toolkit does not like void return types
///////////////////////////////////////////////////////////////////////// // event handlers - MouseListener and MouseMotionListener implementation
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(     * java.lang.Object, org.argouml.cognitive.Designer)     */"
//MClassifier
// first search for appropriate attributes
//MOperation
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()     */"
// ... and not incompletely imported
/* Query checking added 05/21/01, sz9 */
/* end class OCLExpander */
// skip first parameter == return type
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()     */"
// Only look at classes...
// abstract classes are hardly ever singletons
// If there is an attribute which is not static => no problem
// Only look at classes
// Check for Singleton stereotype, uninitialised instance variables and // outgoing associations, as per JavaDoc above.
// Found no such attribute
// We only look at singletons
/* end class CrSingletonViolatedOnlyPrivateConstructors */
// NOTE: For historical reasons true == hide, so we need to invert // the sense of this
/* end class CrEmptyPackage */
"/* At this stage during loading, the diagrams are         * not created yet - so we have to store this name for later use. */"
//            pw.close();
// prevent no changes...
//project.setFile(file);
// for AndroMDA profiles
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */"
// Give the parser a map of model elements // keyed by their UUID. This is used to allocate // figs to their owner using the "href" attribute // in PGML.
// Create it [Here, OpaqueExpression which is the first // choice] // Note that if we edit the Initial value in the diagram // (double clic) // it was replaced by an OpaqueExpression
// If we get a 2nd error, just ignore it
// we have to give a message to user and set the system to unsaved!
// Should never happen - something's really wrong
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */"
//////////////////////////////////////////////////////////////// // main parsing main.methods
"/*         * @see java.io.InputStream#close()         */"
//boolean upgradeRequired = !checkVersion(fileVersion, releaseVersion)
// Upgrade is in the way for UML2 projects, so we turn it off in that case:
// Load .argo project descriptor
"/*     * @see org.argouml.cognitive.ToDoItem#select()     */"
// Load the rest
"/* There are 2 possibilities: either (1) we follow the traditional notation                  * philosophy, and set the tagged value to false, or (2) we restore to                  * the pristine situation and delete the taggedValue (whatever the                  * value was). I chose the latter (mvw).*/"
// first read the .argo file from Zip
// Keep reading till we hit the <argo> tag
// Get the version from the tag.
// Skip 1 lines
// Loop round loading the diagrams
//private EventListenerList listenerList = new EventListenerList();
// Keep reading till we get the left bracket of an opening tag
// Compare each following character to see // that it matches the tag we want
// We also want to match with the right bracket of the tag or // some other terminator
// Read the name of the child tag // and then reset read position // back to that child tag.
// Skip any whitespace till we should be on an equals sign.
// Skip any whitespace till we should be on a quote symbol.
"/*     * @see org.argouml.uml.cognitive.critics.WizMEName#doAction(int)     */"
// No other uses of string in PGMLHandler
"/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()     */"
// Handle other uses of <private> contents
// If any of the values are null, ignore the element.
/* || model == null */
"/** * Class to display graphics for a UML ObjectFlowState in a diagram.<p> * * The Fig of this modelElement may either represent the following UMLelements: * <p> * (1) an ObjectFlowState with a Classifier as type, or <p> * (2) an ObjectFlowState with a ClassifierInState as type. <p> * * In both cases (1) and (2), the Fig shows * the underlined name of the Classifier, * and in the latter case (2), it shows also the names of the states * of the ClassifierInState. <p> * * In the examples in the UML standard, this is written like<pre> *      PurchaseOrder *       [approved] * </pre> * i.e. in 2 lines. The first line is underlined, * to indicate that it is an instance (object).<p> * * The fact that the first line is underlined, and the 2nd not, is the * reason to implement them in 2 separate Figs.<p> * * TODO: Allow stereotypes to be shown. * * @author mvw */"
// For a match to be found, it has to have the same // owner, and the same long class name.
"/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */"
// Create a new diagram wide settings block which is backed by // the project-wide defaults that we were passed
// Ignore non-private elements within FigNode groups
// Discard class name, x y w h
// The owner should always have already been set in the constructor
// happens when 'is' comes from a zip file
// continue with null stream, readDiagram(...) will take care of // it
// TODO: Localize these
"/* This would be solution (1):                  * Model.getExtensionMechanismsHelper().setDataValues(                 *      taggedValue, new String[] {""false""});                 */"
// If there is no dot then this must be a top level Fig and can be // assumed to be a FigNode.
// FigNodeModelElements should match here
// FigEdgeModelElements should match here (they have no // bounds)
// <model> is not used in current implementation
"/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()     */"
// Try-catch only the JarFile instantiation so we // don't accidentally mask anything in ArgoJarClassLoader // or processJarFile.
// Fall back to GEF's handling if we couldn't find an appropriate // constructor
//myWriter,
// Empty constructor
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(Object, Designer)     */"
// for compatibility with older format
"/*     * @see org.argouml.cognitive.critics.Critic#predicate( java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
// Write out header section
// Note we assume members are ordered correctly already
// let's initialize the progressMgr
// Run through any stylesheet upgrades
"/*     * @see org.argouml.uml.cognitive.critics.WizMEName#makePanel(int)     */"
// Don't use systemId here or it will get opened in preference // to inputStream.
// UML 2.x files could also contain a profile model. // Try again with uml:Profile as main tag.
//                LOG.log(Level.FINE, "Finding children for " + o.getClass());
// let's update the progress
// If we're trying to load a file from a future version // complain and refuse.
"/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#getNumSteps()     */"
"/* To be really sure, let's add the operation             * that is linked to the action in the model,             * too - if it is not listed yet.             * We need this, incase an operation is moved             * out of the package,             * or maybe with imported XMI...             */"
// Buffer containing characters which have been decoded from the bytes // in inBB.
// RegEx pattern for XML declaration and, optionally, DOCTYPE // Backslashes are doubled up - one for Java, one for Regex
// Convert from bytes back to characters
// rewind our character buffer
// Remove anything that matches our pattern
"/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementAdded(java.lang.Object)     */"
// Remove null characters at the end
// Reencode the remaining characters as bytes again
// and write them to our output stream
// Skip the <?xml... first line
// NOP
/* This is expected to be safe, don't add a try block here */
//cat.debug("Added ToDoItem: " + _headline);
"/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#addPerspective(java.lang.Object)     */"
"/*     * @see org.xml.sax.ContentHandler#startElement(java.lang.String,     *         java.lang.String, java.lang.String, org.xml.sax.Attributes)     */"
"/*     * @see org.xml.sax.ContentHandler#endElement(java.lang.String,     *         java.lang.String, java.lang.String)     */"
"/*     * @see org.xml.sax.ContentHandler#characters(char[], int, int)     */"
"/**     * Test creating modelelements from a given notation, and then      * re-generate the notation-string again, and check if they are equal.     * Some of these tests are not very usefulll,      * since they may fail on white space differences.      * TODO: White space should best be ignored.      */"
/* These strings match the XML element names in the argo.tee exactly. */
// The following is deprecated, but can never be removed to preserve  // backward compatibility with old project files
//////////////////////////////////////////////////////////////// // protected main.methods
// empty constructor
//////////////////////////////////////////////////////////////// // abstract main.methods
//////////////////////////////////////////////////////////////// // non-abstract main.methods
//e.g:org.argouml.uml.generator.ui.ClassGenerationDialog -> poseidon.jar
/* end class SAXParserBase */
// Stop UI interception
// Jaap Branderhorst 2002-23-09 added next lines to link // parameters and operations to the figs that represent // them
// possibly use the following instead //            MemberFilePersister persister = new DiagramMemberFilePersister();
//////////////////////////////////////////////////////////////// // class main.methods
/* end class XMLTokenTableBase */
// These are the file formats I know about:
"/* make sure this setting exists in the configuration file         * to facilitate changing: */"
"/*     * @see javax.swing.event.MenuListener#menuCanceled(javax.swing.event.MenuEvent)     */"
// Is row at top of screen?
"/* If the current property occurs a second time             * in the given list of properties, then skip it: */"
//////////////////////////////////////////////////////////////// // FileFilter API
// this check for files without extension...
/* end class XMLElement */
// for AndroMDA
/* Tested with fabricated XMI - OK. */
"/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */"
// Thin bar to show current used
// Make sure the contents match what we expect
// load profile name
// changing the sequence only
// Yes, scroll up one row
"/*    * Get a list of UML metaclass names from the XMI document.    * <p>    * Though some of the DOM main.methods such as getAttributes    * may return null values under other conditions,    * in the context of this test    * and assuming a valid XMI file    * none should occur.    * <p>    * Hence there is no special checking for those abnormal    * cases, allowing the test to fail simply with a    * NullPointerException, with this comment indicating that    * either the input data is incorrect or the test needs    * to be improved.    */"
/* Testing: Works Ok. */
// if there is only one package in the model, // we should suppose it's the profile model, // if there is more than one, we take the ones // marked as <<profile>>
"/*                     * Now we have to see if any state in any statemachine of                     * classifier is named [name]. If so, then we only have to                     * link the state to c.                     */"
// load profile dependencies
/* Set up the property panels for critics: */
// We have our own UML2 profile, but it is not used. Instead, // by the following line the build-in eclipse UML2 standard // profile and primitive types implementation are used.
// Missing WFRs
// Association Class // 4.5.3.2 [1]
// Behavioral Feature // 4.5.3.5 [2]
/* TODO: Partly overlaps CrOppEndVsAttr. */
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALogicalExpressionTail(tudresden.ocl.parser.node.ALogicalExpressionTail)     */"
// UseCase // 4.11.3.5 [2]
// Classifier // 4.5.3.8 [5]
// DataType // 4.5.3.12 [1]
// Actor // 4.11.3.1 [1]
// Namespace // 4.5.3.26 [2]
// general
// UseCase // 4.11.3.5 [1]
// Actor // 4.11.3.1 [2]
"/* Tested OK, except in some cases, depending on the         * sequence of the EPs. Probably the implementation of         * ""forAll (x, y | ..."" does not cover all combinations. */"
// UseCase // 4.11.3.5 [4]
// UseCase // 4.11.3.5 [3]
// If there are more than one suitable operation, // then we pick the first one.
// ActionState // 4.13.3.2 [3] // Issue 715
// no default type for UML2
// the UML Profile is always present and default
// register the built-in profiles
// if an exception is raised file is unusable
// this profile could have not been loaded when // the default profile configuration // was loaded at first, so we need to do it again
// Nothing to delete if we couldn't get the packages
// If we found an old-style name, update it to the new package name
// Clean up our model and the extent that we read profile in to
// Make sure the names didn't change again
// //   if element is an AssociationEnd use //      the namespace of containing association //
// if one side is null, compare with the equality operator
// XXX: hypotheses for AFeatureCall: fwd = op, val = head
// XXX hypothesis: no time expression (inv)
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAConstraint(tudresden.ocl.parser.node.AConstraint)     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAClassifierContext(tudresden.ocl.parser.node.AClassifierContext)     */"
// these operations are ok for lists too
// LOG.log(Level.FINE, "OCL FEATURE CALL: " + subject + ""+ type +""+ feature + "" // + parameters);
// XXX this should be done in CollectionsModelInterpreter // but it can't trigger another invokeFeature...
// /** //  * Logger. //  */ // private static final Logger LOG = //     Logger.getLogger(DefaultOclEvaluator.class.getName());
//LOG.log(Level.FINE, "OCL: " + ocl);
// propagate
"/*         * Although Operation and Signal are peers in the UML type          * hierarchy they share the attributes isRoot, isLeaf,          * isAbstract, and  specification. Concurrency is *not*          * shared and is specific to Operation.         */"
// if test is ok this element should not // be in the result set
// these operations are ok for bags too
/* 4.5.2.1 Abstraction */
/* 4.5.2.3 Association */
// Additional Operation 4.5.3.1 [1]
/* 4.5.2.5 AssociationEnd */
"/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */"
// Additional Operation 4.5.3.3 [1]
/* 4.5.2.6 Attribute */
/* 4.5.2.8 Binding */
/* 4.5.2.9 Class */
/* 4.5.2.10 Classifier */
// TODO specifiedEnd??
/* 4.5.2.11 Comment */
"/* The ""show types"" defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting: */"
/* 4.5.2.12 Component */
// Additional Operation in 4.5.3.9
// No, scroll down one row
/* 4.5.2.18 ElementOwnership */
/* 4.5.2.19 Enumeration */
/* 4.5.2.20 EnumerationLiteral */
/* 4.5.2.21 Feature */
/* end class CrTooManyTransitions */
// Additional Operation in 4.5.3.20
/* 4.5.2.23 Generalizable Element */
/* 4.5.2.26 Method */
// avoiding null names
// As extended by 4.6.2.2
// Additional Operations in 4.5.3.25
/* 4.5.2.29 Node */
/* 4.5.2.30 Operation */
// the method
/* 4.5.2.31 Parameter */
// Set the icon:
"/*     * @see javax.swing.Icon#getIconHeight()     */"
"/*     * @see java.awt.Component#getMinimumSize()     */"
// if location is null here the position of the new figNode is set // after in org.tigris.gef.base.ModePlace.mousePressed(MouseEvent e)
"/*     * Generates a string representation for the provided     * attribute. The string representation will be of the form:     *          visibility name [multiplicity] : type-expression =     *                          initial-value {property-string}     * Depending on settings in Notation, visibility, multiplicity,     * type-expression, initial value and properties are shown/not shown.     */"
/* 4.5.2.38 TemplateArgument */
/* 4.5.2.39 TemplateParameter */
/* end class CrTooManyOper */
/* 4.11.3.5 UseCase */
/* 4.5.3.2 AssociationClass */
"/* The operation allConnections results in the set of all                     * AssociationEnds of the AssociationClass, including all                     * connections defined by its parent (transitive closure).                     */"
"/* if curHandle.index is 0 or 2,             * the adjacent region is the previous region             * but if it is 5 or 7, the adjacent region is the next region.             * curHandle.index show which corner of the bound we are dragging.             */"
/* 4.6.2.3 Stereotype */
/* 4.6.2.4 TagDefinition */
/* 4.6.2.5 TaggedValue */
"/*     * @see org.argouml.kernel.ProjectMember#repair()     */"
// add adapters that do nothing for keyboard and mouse actions
// discard the event if its source is not from the correct type
// Guard against error conditions if climb search wasn't successful
// Sets the mouse cursor to hourglass mode
// Start receiving all events and consume them if necessary
// Activate the glass pane capabilities
// Stop receiving all events
// parameterlist is guaranteed to contain at least "("
// Deactivate the glass pane capabilities
// Sets the mouse cursor back to the regular pointer
// no initialization required
/* end class SpacerPanel */
"/* If dm is the top state of the statemachine, then it is              * not supposed to have outgoing transitions. */"
"/*     * @see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)     */"
"/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)     */"
/* end class ClClassName */
"/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#setSuggestion(java.lang.String)     */"
"/*     * Called when the user has pressed Save. Performs ""Save"" in all Tabs.     */"
// Climb the component hierarchy until a RootPaneContainer is found or  // until the very top
/* end class SplashPanel */
"/*     * @see org.argouml.cognitive.ui.Wizard#canGoNext()     */"
// Add settings from the settings registry.
// keep track of the visible window associated w/the component // useful during event filtering
"/*         * Updates stereotype setting, adds all children per treemodel 'build on         * demand' design.         *          * @see         * javax.swing.event.TreeWillExpandListener#treeWillExpand(javax.swing         * .event.TreeExpansionEvent)         */"
// show a chooser dialog for the file name, only xmi is allowed
// If drop out, we're OK
// If a toolbar was requested, create an empty one.
// Make sure we got what we started with
// Increase width to accommodate all tabs on one row.
// TODO: Localize
/* end class TabText */
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatNamespace(java.lang.Object)     */"
// If a recursive call from setVisible(), just return
"/* We have to tell the settings tab in which project                     * the settings reside: */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *      TargetEvent)     */"
"/*     * @see java.util.List#indexOf(java.lang.Object)     */"
// We only request focus the first time we become visible
// Use Case
"/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)         */"
// Handle the same as an explicit cancel
// defer work until fetched/visible
// Actor
// ------------- Rule management --------------
// slope of the line we're finding the normal to // is slope, and the normal is the negative reciprocal // slope is (p1.y - p2.y) / (p1.x - p2.x) // so recip is - (p1.x - p2.x) / (p1.y - p2.y)
// ----------- name -------------------------
// ------ all rules ----------
"/** TODO: factor out     *     * @param rule the rule to be added     */"
"/*         * @see javax.swing.event.TreeExpansionListener#treeCollapsed(         * javax.swing.event.TreeExpansionEvent)         */"
// Put the current pane in a scroll pane.
/* end class StylePanelFigText */
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getProfile()     */"
// NOTE: These must stay in this order to match rendering styles
"/* We aren't able to resize neither the top bound             * from the first region nor             * the bottom bound from the last region.             */"
// The boundary box as held in the target fig, and as listed in // the // boundary box style field (null if we don't have anything // valid)
// Change the fill colour
// Change the line colour
// Can't do anything if we don't have a fig.
// Get the text in the field, and don't do anything if the // field is // empty.
// how to handle empty target lists? // probably the TabProps should only show an empty pane in that // case
// Parse the string as if // possible
// ignored - will never be called
// add preloading progress bar?
// JasonsThemes
// TODO: The src_visibility tag doesn't appear to be created // anywhere by ArgoUML currently
// TODO - lets pass in Project as a constructor argument
/* Listen to name changes in the path (useful for e.g. Package): */
/* Make up a default */
/*lafClass == null ||*/
// Set to the default LAF
/* top, left, bottom, right */
// Set a custom LAF
"/*     * @see javax.swing.JTree#fireTreeCollapsed(javax.swing.tree.TreePath)     */"
"/*     * @see javax.swing.JTree#setModel(javax.swing.tree.TreeModel)     */"
/* It looks better if the height increases, too */
// the model is changed - job done
// TODO: 10 and 120 were found by trial and error.  Calculate them.
//pack();
// Not localized:
/* end class AboutBox */
//These are the positions of child figs inside this fig //They must be added in the constructor in this order. //For now the name must not be last as this would force //zero width lines (until GEF is fixed)
// saves the project
"/*     * Return true if the given object is a valid node in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */"
"/* MVW: We should use default font sizes as much as possible.         * BTW, this impacts only the width, and reduces readibility:         */"
"/* The stereoDim has height=2, even if it is empty,          * hence the -2 below: */"
// This enables tooltips for tree; this one won't be shown:
// ------------ main.methods that override JTree main.methods ---------
// with a name...
// Look for stereotype
// Use default formatting for any other type of UML element
// The event source is the stub state's referenced state // or one of the referenced state's path.
// ------------- other main.methods ------------------
/* Labels at the left ... */
// and when the class changes name:
/* ... and fields at the right. */
/* The user's full name: */
// Get the ends from the association (we know there are two), and the // types associated with them.
/* The user's email: */
/* The project description: */
"/* This non-editable field shows          * the version of the ArgoUML          * that last saved this project: */"
// There is no default description.
// Defer all work until we're actually needed
"/*     * @see org.argouml.cognitive.Critic#getCriticizedDesignMaterials()     */"
//////////////////////////////////////////////////////////////// // class accessors
// TODO: The following can be used when we drop Java 5 support or // when an ImageIO GIF writer plugin is bundled //            cmd = new SaveGIFAction2(Translator.localize("action.save-gif"));
// Leave logging commented out by default for efficiency //        LOG.debug("determine rendering for: " + value); //        LOG.debug("show icon: " + showIcon);
"/*     * @see org.tigris.gef.base.Cmd#undoIt()     */"
"/*     * @see org.argouml.application.api.ProgressMonitor#setMaximumProgress(int)     */"
//Accumulate a bounding box for all the Figs in the group.
//    private JCheckBox jchbBold = null;
"/*     * @see org.tigris.gef.graph.GraphListener#nodeRemoved(org.tigris.gef.graph.GraphEvent)     */"
//    private JCheckBox jchbItalic = null;
// Initialize font faces list
/* end class ActionCreatePseudostate */
// Most of this code originates from ActionOpenProject.
// Initialize font sizes list
"/*     * @see org.argouml.uml.ui.SourcePathController#deleteSourcePath(java.lang.Object)     */"
//////////////////////////////////////////////////////////////// // MouseListener implementation
// keep d even or odd, just like the line width:
"/*     * @see org.tigris.gef.graph.GraphListener#graphChanged(org.tigris.gef.graph.GraphEvent)     */"
"/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()         */"
// Load project at slightly lower priority to keep UI responsive
"/*     * @see java.util.Collection#isEmpty()     */"
/* end class ProjectBrowser */
"/*     * @see org.argouml.uml.reveng.ImportCommon#isCreateDiagramsChecked()     */"
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()     */"
//////////////////////////////////////////////////////////////// // KeyListener implementation
//////////////////////////////////////////////////////////////// // ListSelectionListener implementation
// diagrams are not placed in search results
// no related
// now remove the ones already applied.
//TODO: tabs for class, state, usecase, help
// load of the new project // just reuse of the ActionOpen object
// empty implementation - we only handle mouseClicked
"/* The south panel always has tabs - but they are             * added (later) elsewhere.             */"
//Remove the element from Available List
// loads the project
"/*     * @see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)     */"
// default tab todo
// Special case for backward compatibility
// Add the path of the model to the search path, so we can // read dependent models
// Select prop panel if current panel is not appropriate // for selected target
"/*     * @see org.argouml.persistence.XmiFilePersister#isSaveEnabled()     */"
// not visible any more - so remove as listener
// update the previously selected tab
// The other tabs need to be updated depending on the selection.
"/*         * If center points are ""close enough"" we just adjust the endpoints         * of the line a little bit.  Otherwise we add a jog in the middle to         * deal with the offset.         *         * TODO: Epsilon is currently fixed, but could probably be computed         * dynamically as 10% of the width of the narrowest figure or some         * other value which is visually not noticeable.         */"
// we could check for base class of the stereotype but the // condition normally covers it all.
// TODO: Quick return here for target == null? - tfm
"/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePath(java.lang.Object)     */"
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#setNamespace(java.lang.Object)     */"
"/* Remove duplicates and take care of getOwner()         * and remove nulls: */"
// If there is an outgoing association => no problem
// ---------------- listener management ----------------
"/* Since there are no buttons on this panel, we have to set         * the size of the buttonpanel, otherwise the          * title would not be aligned right. */"
// ------------- tree structure -----------------
// see getValue(), setValue()
"/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#setStereotypeVisible(boolean)     */"
//Create a timer.
// Mount the glasspane on the component window
"/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)     */"
// keep track of the glasspane as an instance variable
// The name. Width is the same as the cover, height is the default. // The text of the name will be centered by // default. In the same place as the stereotype, since at this stage // the stereotype is not displayed. Being a classifier role it is // underlined
/* end class StylePanel */
"/*     * @see org.argouml.persistence.MemberFilePersister#save(org.argouml.kernel.ProjectMember, java.io.OutputStream)     */"
//getContentPane().add(_menuBar, BorderLayout.NORTH);
"/*     * Calculate the insets for the *JTREE*, not the viewport the tree is in.     * This makes it a bit messy.     *     * @see java.awt.dnd.Autoscroll#getAutoscrollInsets()     */"
// allows me to ask "Do you want to save first?"
"/*     * Ok, we've been told to scroll because the mouse cursor is in our     * scroll zone.     * @see java.awt.dnd.Autoscroll#autoscroll(java.awt.Point)     */"
// Add listener for project changes
"/*     * @see org.argouml.model.ModelImplementation#getXmiWriter(java.lang.Object, java.io.Writer, java.lang.String)     */"
// Add a listener to focus changes. // Rationale: reset the undo manager to start a new chain.
// Load modules specified by a System property. // Modules specified by a system property is for // running modules from within Eclipse and running // from Java Web Start.
/* We get many many events (why?), so let's filter: */
// create the todopane
// If we delete a FigEdge // or FigNode we actually call this method with the owner not // the Fig itself. However, this method // is called by ActionDeleteModelElements // for primitive Figs (without owner).
"/*     * @see javax.swing.JFrame#getJMenuBar()     */"
"/*     * @see org.argouml.persistence.SAXParserBase#isElementOfInterest(String)     */"
"/*     * @see java.awt.Component#setVisible(boolean)     */"
// Toolbar boundary is the area between the menu and the status // bar. It contains the workarea at centre and the toolbar // position north, south, east or west.
"/*     * @see org.argouml.uml.diagram.ui.PathContainer#setPathVisible(boolean)     */"
// Add target listeners for details panes
"/*     * @see java.awt.dnd.DragSourceListener#dragEnter(java.awt.dnd.DragSourceDragEvent)     */"
// Convenience main.methods to return saved width and height values
// In theory there can be multiple details pane (work in // progress). It must first be determined which details // page contains the properties tab. Bob Tarling 7 Dec 2002
"/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */"
/* end class WindowCloser */
// the project changed
"/*     * North, South, West, East, South-West     */"
// update all panes
// this method is invoked from several places, so we have to check // whether if the project uri is set or not
// does the file really exists?
// project file doesn't exist. let's pop up a message dialog..
"/*     * @see org.xml.sax.EntityResolver#resolveEntity(java.lang.String,     *         java.lang.String)     */"
// ..and let's ask the user whether he wants to save the actual // project into a new file or not
// Eclipse UML2 implementation classes end with "Impl" //$NON-NLS-1$
// save action has been cancelled
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationAdded(org.argouml.application.events.ArgoNotationEvent)     */"
// Prompt the user for the new name.
// let's call the real save method
// Repair any errors in the project
// e.g. for an operation: // if pce.getSource() == modelElement // && event.propertyName = "parameter" //     if event instanceof AddAssociationEvent //         Get the parameter instance from event.newValue //         Call model to add listener on parameter on change //             of "name", "type" //     else if event instanceof RemoveAssociationEvent //         Get the parameter instance from event.oldValue //         Call model to remove listener on parameter on change //             of "name", "type" //     end if // end if
"/*             * notification of menu bar             */"
"/*     * Simulate some errors to repair.     * Replace with junits - Bob     */"
// Change to true to enable testing
// A Fig with a null owner
// A Fig with a null layer
// A Fig with a removed model element
// Let's save this project in the mru list
// Defer initialization until we're visible
"/*     * @see java.awt.dnd.DragSourceListener#dropActionChanged(java.awt.dnd.DragSourceDragEvent)     */"
// Let's save this project as the last used one // in the configuration file
//        uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri);
"/*     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */"
// This is temporary. Load project // should create a new project // with its own UndoManager and so // there should be no Command
// Make sure save action is always reinstated
"/*     * @see org.argouml.application.api.ProgressMonitor#updateMainTask(java.lang.String)     */"
//filled in later
"/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#setSelection(int)         */"
// ----- setup similar to the super() implementation -----
"/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     * javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     * boolean)     */"
// Make this change persistant
"/*	     * @see TargetListener#targetAdded(TargetEvent)	     */"
// If there is persistant state for this toolbar, respect it, // or add it to persistance data
// Queue to event thread to prevent race during close
// test an unknown file
// Add toolbar.
// Register popup menu with toolbar.
// these settings are needed to make the ProgressMonitor pop up early
"/*     * @see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)     */"
"/*     * @see org.argouml.notation.NotationName#sameNotationAs(org.argouml.notation.NotationName)     */"
"/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorChanged(org.argouml.application.events.ArgoGeneratorEvent)     */"
"/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(     * java.lang.Object, java.io.File)     */"
"/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#getDefaultSelection()         */"
"/*     * @see org.argouml.uml.reveng.ImportCommon#getImportLevel()     */"
// TODO: concatenate? - tfm // overwrite for now
"/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#isSelected()         */"
/* end class StylePanelFigRRect */
// Let the parent do its refresh.
"/*     * @see org.argouml.uml.reveng.ImportCommon#isDiagramLayoutSelected()     */"
// lets redraw the box
"/*     * @see java.awt.Component#getPreferredSize()     */"
//     c.gridy = 0; //     c.gridx = 4; //     JLabel threeLabel = new JLabel("asd"); //     gb.setConstraints(threeLabel, c); //     _mainPanel.add(threeLabel);
"/*     * Called when the user selects a tab, by clicking or otherwise.     *     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */"
"/*     * @see org.argouml.uml.reveng.ImportCommon#isChangedOnlySelected()     */"
// We don't know what thread events will be delivered on, so make sure // we run Swing main.methods on the Swing thread
//This instead of the label ??? //displayPane.setBorder(new TitledBorder( //    Translator.localize("Display: ")));
// Eclipse UML2 implementation classes often start with "UML" //$NON-NLS-1$
// add in front of the others // add the label in front of the "pane"
// and finally, adjust the scrollbars to show the Fig
"/*         * @see         * javax.swing.event.TreeWillExpandListener#treeWillCollapse(javax.swing         * .event.TreeExpansionEvent)         */"
// % thresholds for bar color changes
// Record the changes in the instance variables of our parent, tell GEF // and trigger the edges to reconsider themselves.
// making it possible to jump to the modelroots
// Readonly class: no generalization, no association to self
"/*     * Timer action method.  Periodically update our stats and force a repaint.     */"
"/*     * @see org.argouml.cognitive.ui.WizStep#setTarget(java.lang.Object)     */"
// Virtual memory (heap) stats
// Thin bar to show current allocated heap size
//     c.gridy = 0; //     c.gridx = 1; //     JLabel offLabel = new JLabel("Off"); //     gb.setConstraints(offLabel, c); //     _mainPanel.add(offLabel);
// TODO: assumes public, user pref for default visibility? //do I have to check the namespace here? (Toby)
// how to handle empty target lists?  probably the // MultiEditorPane should only show an empty pane in that case
//TODO: qualifiers (e.g., const) //TODO: stereotypes...
//    private JPanel constraintsTab = new JPanel();
//The child is sometimes not found when the tree is being updated
//    private JTabbedPane tabs = new JTabbedPane();
//        tabs.setMinimumSize(new Dimension(300, 250));
"/*     * @see org.argouml.uml.reveng.ImportSettings#isCreateDiagramsSelected()     */"
//    private JPanel modifiedTab = new JPanel();
/* The ActivityGraph. */
//    private JPanel tagValsTab = new JPanel();
// open space at gridy = 2;
//        mainPanel.add(north, BorderLayout.NORTH);
"/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDiagramLayoutSelected()     */"
// Any type
"/*     * @see java.awt.event.ActionListener#actionPerformed(     * java.awt.event.ActionEvent)     */"
"/*     * @see java.util.List#listIterator()     */"
// If this fails, then there is a problem... // dthompson 29/12/2008: It seems that the returned value is  // irrelevant here, so I assume that the purpose of this call // is just to throw an exception in case of a problem.
// This text is for the developers. // It doesn't need to be localized.
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// These shouldn't really be <br> instead of <p> elements, but // the lines all get run together when pasted into a browser window.
"//        initConstraintsTab(); //        tabs.addTab(Translator.localize(""tab.constraints""), //		     constraintsTab); //        tabs.setEnabledAt(3, false);"
"/*     * @see tudresden.ocl.check.types.Type#navigateParameterized(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */"
//        initTagValsTab(); //        tabs.addTab(Translator.localize("dialog.find.tab.tagged-values"), //                tagValsTab); //        tabs.setEnabledAt(2, false);
/* Secondly we check the previous model structure: */
/* end class FindDialog */
// If we got back null we interpret this as meaning delete the // reference to the extension point from the use case, otherwise we set // the fields of the extension point to the values in newEp.
//name += " in " + dName;
// A string of the form "location". This will be confused by the // string ":", so we pick this out as an instruction to clear both // name and location.
// Set the name and icon:
//help tab is 0
"/** * Dialog box to list all critics and allow editing of some of their * properties. <p> * * TODO: supported goals, critic network. */"
// end runGC_actionPerformed()
/* end class PredicateMType */
"/* Follow well-formedness rule for a Class [2].                 * Determine the owning namespace for the statemachine: */"
//end updateInfo()
/* end class NavigatorPane */
// end copy_actionPerformed()
/* end class SystemInfoDialog */
// clean the history
"/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, org.argouml.cognitive.ListSet)     */"
"/* But exclude elements that enclose others,                      * since their algorithms to calculate the minimum size                      * does not take enclosed objects into account: */"
"/*     * @see org.argouml.uml.util.namespace.Namespace#getCommonNamespace(     *         org.argouml.uml.util.namespace.Namespace)     */"
// unsupported. 
"/*     * @see org.tigris.gef.base.ModeCreateFigPoly#createNewItem(java.awt.event.MouseEvent, int, int)     */"
"/* Only resize elements which the user would also be able             * to resize: */"
"/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isChangedOnlySelected()     */"
// Set the name:
// If location is non-null, convert to a rectangle that we can use
// let's load the default shortcut for every action
/* end class ActionFind */
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameBounds()     */"
// generate menu
// it should never go here!
// view menu
// file menu
"/*     * @see java.util.Collection#toArray()     */"
// align submenu
// edit menu
// create menu
// arrange menu
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */"
// help menu
/* This ID is used as DEFAULT_ID ! */
/* end class ActionAboutArgoUML */
// distribute submenu
"/*     * @see org.argouml.cognitive.critics.Critic#addSupportedGoal(org.argouml.cognitive.Goal)     */"
/* end class ActionPageSetup */
// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE todo SYSTEM "todo.dtd" >
// trap focus traversal keys also 
// let's add the key printing logic
// Both lists have the same length.
// We've found the matching tag but do we have // the correct instance with matching attributes?
// If we drop out here, there was no match and we have no problem
// if a not-default current shortcut was added, then we have to // save it
"/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */"
// if the actual is not going to be saved, then try to remove it // (as it could have been cancelled)
// This pair of params where the same. Lets check the next pair.
// no modifiers - let's check if the key is valid
//// Method 1: //// (collect data and assign later in endElement() method). //Hashtable<String, String> ht = //    new Hashtable<String, String>(); //ht.put("classname", classname); //ht.put("figclassname", figclassname); //ht.put("ownerhref", ownerhref); //ht.put("angle", angle); //ht.put("offset", offset); //pathItemAttrs.add(ht);
// middle of shortcut 
// add last recently used list _before_ exit menu
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEmptyFeatureCallParameters(tudresden.ocl.parser.node.AEmptyFeatureCallParameters)     */"
// KeyStroke f7 = KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0);
// and exit menu entry starting with separator.
// This used to be deferred, but it's only 30-40 msec of work.
// now, let's set up the "selected action" container
// Get all the features (giving up if there are none). Then loop // through finding all operations. Each time we find one, we compare // its signature with all previous (held in collection operSeen),  // and then if it doesn't match add it to the collection.
// Add the help menu item.
// If the PathItemPlacement was unknown, leave the // diagram with the default settings.
"/*     * @see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)     */"
"/* Create the edit toolbar based on the Menu.             * All menuItems that have an Icon are presumed to             * be based upon an Action,             * and these Actions are used in the toolbar.  */"
// setHelpMenu(help);
// This code has to go within the startElement block after the strings // have been matched.
//Component or Action
// set maximum length of menu entry
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderAdded(org.argouml.application.events.ArgoNotationEvent)     */"
//JMenuItem item = _fileMenu.add(new ActionReopenProject(filename));
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */"
// the text is used by the event handler for opening the project
// create all nessessary configuration keys for lru
// holds file menu
// text is short, tooltip is long
// read existing file names from configuration
// empty entry stops reading --> last line!
// this is the recent count
// delete all existing entries
"/*         * @see java.io.FileFilter#accept(java.io.File)         */"
// add new entry as first entry
// add other existing entries, but filter the just added one
// save count
// and store configuration props
"/*     * @see org.argouml.model.UmlHelper#addListenersToModel(java.lang.Object)     */"
/* end class ActionExit */
"/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */"
/* end class ActionHelp */
// instantiation not allowed
/* end class ActionPrint */
// let's add the table, inside a JScrollPane
// init from config // read number, write result as new default and prepare keys
// get already existing names from menu actions // real file names, not action names !
"/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */"
// let's enable the radiobuttons container
"/*     * Amount to increment Y position by for each node placed. We pack them     * densely on the assumption that the user is going to split them into at     * least two swimlanes.     */"
// updating the radiobuttons container's title
// let's select the correct radio button
"/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */"
// no shortcuts --> NONE
// current shortcut == default --> DEFAULT
// customized shortcut --> CUSTOM
// update the values
// let's reload the shortcuts
"/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     *      * All main.methods below similarly override main.methods in CoreHelper.     */"
// saving shortcuts
// If the id does not look like a top-level Fig then we can assume // that this is an id of a FigEdgePort inside some FigEdge. // So extract the FigEdgePort from the FigEdge and return that as // the FigNode.
// if a shortcut has been select then we have to check if the actual // action is in conflict with other ones
"/*     * @see org.argouml.model.ModelEventPump#startPumpingEvents()     */"
// blanking the old action's shortcut.. // and now refreshing the table.
// re-selecting the old row, without changing the target - // and without throwing another ListSelectionEvent!
// give priority to standard documentation tag
// let's change the target
// We are looking first to match with 3 different constructor // types. We would not expect a Fig to have any mix of these. // Any constructor other than these should be deprecated so we // look for these first. // Fig(DiagramEdgeSettings, DiagramSettings) // Fig(Object, Rectangle, DiagramSettings) // Fig(Rectangle, DiagramSettings)
// duplicate shortcut not found; let's check for duplicates
// there's a duplicate: let's recheck if there is a conflict
"/*     * @see org.argouml.model.PseudostateKind#getDeepHistory()     */"
// updating the shortcut field
"/*     * @see org.argouml.model.ConcurrencyKind#getConcurrent()     */"
// updating the table data
"/*     * @see org.argouml.model.AggregationKind#getComposite()     */"
// the shortcut has already been assigned to another action!
// verify SnoozeOrder starts off not snoozed
// if the given object is a KeyStroke instance, then we ca
// let's update also the actions array
"/*     * @see org.argouml.model.ChangeableKind#getChangeable()     */"
"/*     * @see org.argouml.model.PseudostateKind#getChoice()     */"
"/*     * @see org.argouml.model.DirectionKind#getOutParameter()     */"
"/* The default nr of rows is 8,          * but since we have 9 perspectives by default now,          * setting to 9 is nicer. */"
"/*             * In UML 1.3, the name is the only place to store text.             * In UML 1.4, there is a body as well, but some tools             * still seem to use name.             */"
/* Check if multiple items are selected. */
// 1. a noneditable applied profile
// just no item added in this case
// DesignGoalsCM checks if the critic isRelevantToGoals of the Designer // this value is always true for the Critic base class so  // DesignerGoal should always return true in this condition
// 3. the editable unapplied profile
"/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */"
// end of profile section
// TODO: These should get replaced immediately by the creating // initialization code, but make sure we've got a default just in case.
// Can't delete last top level model
// check that the model was initialized with one goal
// Determine if only diagrams are in the target list.
"/*     * @see org.argouml.model.ConcurrencyKind#getGuarded()     */"
// "x nodes and x edges"
// Extra care to be taken since allPosters can be reset while // this method is running.
// test if this element can be contained by the target
"/*     * @see org.argouml.model.OrderingKind#getOrdered()     */"
// iterate through all possible model elements to determine which // are valid to be contained by the selected target
/* end class ActionAddExistingRelatedNode */
/* ... otherwise we select the item below the mousepointer. */
// the dialog is modal
// unimplemented - we only care about expanding
/* end class ExplorerMouseListener */
// fire all of the profile events
// does nothing.
// need to update the selection state.
// get the elements
// Block added by BobTarling 8-Jan-2002 Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true in order // to remain compatible with previous versions of this code.
// scan the visible rows for duplicates of // this elem and select them
// check which targetmanager method to call
"/*     * @see org.argouml.uml.diagram.ui.PathContainer#isPathVisible()     */"
// we must call the correct method on targetmanager // for each added or removed target
// we have to give a message to user and set the system // to unsaved!
// we can't remove the targets in one go, we have to // do it one by one.
// at the top // right bottom // left bottom
// Override superclass to do nothing. // Fill property cannot be changed.
"/*     * @see org.argouml.model.OrderingKind#getUnordered()     */"
"/*     * @see org.argouml.model.DirectionKind#getReturnParameter()     */"
"/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(java.lang.Object, java.lang.String)     *     * all main.methods below similarly implement main.methods from ActivityGraphsHelper      */"
// remove the ones already selected (if a perspective is selected)
"/*     * @see org.argouml.model.AggregationKind#getNone()     */"
// add them
"/*     * @see org.argouml.model.ScopeKind#getClassifier()     */"
"/*     * @see org.argouml.uml.reveng.ImportSettings#getImportLevel()     */"
// update the label (which shows the number of rules)
"/*     * @see org.argouml.model.PseudostateKind#getFork()     */"
// must add an editable list of new ExplorerPerspective's // to the list model so that the original ones are not changed // in the case of a cancel action by the user.
"/*     * @see org.argouml.uml.reveng.ImportSettings#isMinimiseFigsSelected()     */"
// set the newly selected item in the library list
"/*     * @see org.argouml.model.AggregationKind#getAggregate()     */"
"/* The name of the UMLDiagram                  * represented by this node has changed. */"
// uml model events
// notation events
// Handle remove for non-UML elements (e.g. diagrams)
"/*         * Get the selected targets (UML ModelElements)         * from the TargetManager.         */"
"/** * To persist to and from zargo (zipped file) storage containing seperate * xmi, argo, plgml and todo zip entries. * @author Bob Tarling * TODO: Review use of this against ZargoFilePersister - Bob */"
// project events
/* 4.5.2.28 Namespace */
// get one of the default profile dirs, if available // (as a default value for the following save dialog)
// save profile
// register it as a user profile
// If LAF is Metal (either set explicitly, or as the default)
// load user perspectives
// get the perspective name
// make sure there are some rules...
// get the rules
// get the rule name
// create the rule
// rule name but no rules
//This method can be called only if //there's a valid selection //so go ahead and remove whatever's selected.
// add the perspective
// no user defined perspectives
// one last check that some loaded.
"/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */"
// works for both statediagram as activitygraph
// Enter here go rules only relevant for UML 2 // empty for now
"/*         * The drag gesture recognizer fires events         * in response to drag gestures in a component.         */"
//specifies valid actions
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *          org.argouml.ui.targetmanager.TargetEvent)     */"
// Eliminates right mouse clicks as valid actions
"/*         * Get the cell renderer (which is a JLabel)         * for the path being dragged.         */"
/* The layout manager would normally do this: */
"/*     * @see java.awt.dnd.DragSourceListener#dragDropEnd(java.awt.dnd.DragSourceDropEvent)     */"
// Get a buffered image of the selection for dragging a ghost image
"/*         * Now paint a gradient UNDER the ghosted JLabel text         * (but not under the icon if any).         */"
//        LOG.log(Level.FINE, "Slope = " + theta / Math.PI + "PI " //                + theta / Math.PI * 180.0);
/* Make the gradient ghostlike: */
"/*         * Remember the path being dragged (because if it is being moved,         * we will have to delete it later).         */"
"/*         * @see javax.swing.table.TableModel#isCellEditable(int, int)         */"
"/*         * We pass our drag image just in case         * it IS supported by the platform.         */"
"/** * Implements the source path controller. * NOTE: If requested in the future this could be returned from the language * modules. * * TODO: Update this to use the UML 1.4 TagDefinition mechanism instead of * UML 1.3 String type tag types. The TagDefinition can be made more specific * so that it just applies to Components with a <<sourceModule>> stereotype * or something similar. - tfm *  * @author euluis * @since 0.17.1 */"
/* If the destination is not a NameSpace, then abort: */
"/*     * @see org.argouml.uml.ui.ActionNewDiagram#createDiagram()     */"
/* If the destination is a DataType, then abort: */
"/*                     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)                     */"
/* We are sure "dest" is a Namespace now. */
"/*     * @see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)     */"
"/*         * Let's check all dragged elements - if one of these         * may be dropped, then the drag is valid.         * The others will be ignored when dropping.         */"
// remove the rule from the library list
// empty implementation - not used.
// Figure out which row we're on.
// If we are not on a row then ignore this autoscroll request
"/*     * @see org.argouml.ui.explorer.Relocatable#relocate(java.lang.Object)     */"
// Now decide if the row is at the top of the screen or at the // bottom. We do this to make the previous row (or the next // row) visible as appropriate. If were at the absolute top or // bottom, just return the first or last row respectively.
"/* Set up a hover timer, so that a node will be             * automatically expanded or collapsed             * if the user lingers on it for more than a short time.             */"
/*isRootPath*/
// Set timer to one-shot mode
"/** * This class is a temporary wrapper around the GEF UndoManager. * This will be changed when GEF is modified to create commands and * provide an observer interface for ArgoUML to receive them. * <p> * TODO: How does this relate to {@link org.argouml.kernel.DefaultUndoManager}? * * @author Bob Tarling */"
//            LOG.log(Level.FINE, "dragOver");
"/*     * @see javax.swing.Action#getValue(java.lang.String)     */"
"/*             * The next condition becomes false when dragging in             * something from another application.             */"
"/*                 * If a drag image is not supported by the platform,                 * then draw my own drag image.                 */"
/* Rub out the last ghost image and cue line: */
// Access main.methods for program infrastructure.
// Just rub out the last cue line
"/*             * In any case draw (over the ghost image if necessary)             * a cue line indicating where a drop will occur.             */"
// Retrieve an existing GlassPane if old one already exist or  // create a new one, otherwise return null
// And include the cue line in the area to be rubbed out next time
// types can probably contain operations, but we should not nag at them // not having any.
// to prohibit dropping onto the drag source:
// this element can be contained add a menu item // that allows the user to take that action
/* If the destination is not a NameSpace, then reject: */
"/* Prevent hover timer from doing an unwanted             * expandPath or collapsePath:             */"
/* Clear the ghost image: */
//get new parent node
// LOG.log(Level.FINE, //         "Adding resolution for: " + c.getClass() + " " + canCreate);
//get the model elements that are being transfered.
// conflict detected: showing a warning to the user, instead of // saving shortcuts
// Only accept COPY or MOVE gestures (ie LINK is not supported)
// We can not remove this and have the application manage things directly // based on the font, since only the names should be bold.
// Do this if you want to prohibit dropping onto the drag source...
// Make sure the correspondence that we depend on doesn't change
"/* Remove the dependent         * modelelements, such as the statemachine         * for a statechartdiagram:         */"
/* end class */
"/*     * For a deployment diagram, not just any     * namespace will do - we need a package.     */"
// remove references for gc
"/*     * Strip all characters out of <var>s</var> that could not be part of a     * valid Java identifier. Return either the given string (if all characters     * were valid), or a new string with all invalid characters stripped out.     * This allows automatic conversion of strings containing punctuation and     * spaces to a resource name that can be looked up.     */"
// This should only be helpful for old garbage collectors.
// Avoid doing this too early in the initialization process
"/*     * @see org.tigris.gef.base.ModeCreatePolyEdge#mouseReleased(java.awt.event.MouseEvent)     */"
// Avoid recursively updating the same child
// //  if one or the other is null or they are not equal
// Types don't need a constructor.
// null elements represent new constraints, which will be // added to the target the first time any actual editing // takes place.  This is done to ensure syntactical // correctness of constraints stored with the target.
"/*     * @see javax.swing.tree.DefaultTreeModel#removeNodeFromParent(javax.swing.tree.MutableTreeNode)     */"
// Enumerate the current children of node to find out which now sorts // in different order, since these must be moved
// Avoid our deinitialization here // The node will be added back to the tree again
// For each reordered node, find it's new position among the current // children and move it there
// Avoid our initialization here
// Collect the current set of objects that should be children to // this node
// Handle WeakExplorerNodes
// Remove the node from removeSet
// Remove obj3 from weakNodes and newChildren
"/* We need to fill the whole pane,          * so that the description field can          * take all available space: */"
// Add any remaining nodes
// it is the combo for "order"
// Order the new children, the dependencies cannot and // need not be ordered
"/*     * Only refresh the tab if the bounds propertyChange event arrives.     *     * @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)     */"
// TODO: What?
"/*     * @see org.argouml.ui.StylePanelFig#setTargetBBox()     */"
// Newly selected tab may have stale target info, so generate // a new set target event for it to refresh it
//was ""
// TabResults has really large preferred height, so divide in // half to reduce size of dialog which will be sized based on // this preferred size.
// the responsibility of determining if the given target is a // correct one for this tab has been moved from the // DetailsPane to the member tabs of the details pane. Reason for // this is that the details pane is configurable and cannot // know what's the correct target for some tab.
"/*     * @see org.argouml.ui.StylePanelFig#refresh()     */"
// abstractions are represented in the Inheritance Node.
// Only return once per diagram so we don't, for example, find // a class as a diagram element and also as a child of a package // which is on the diagram
//JTabbedPane tabs = new JTabbedPane(); //mainPanel.add(tabs, BorderLayout.CENTER); //tabs.addTab("All Diagrams", allDiagrams);
// the name of this instance of diagram
"/** * A Fig designed to be the child of some FigNode or FigEdge to display the * stereotypes of the model element represented by the parent Fig. * Currently, multiple stereotypes are shown stacked one on top of the other, * each enclosed by guillemets.<p> * * The minimum width of this fig is the largest minimum width of its child * figs. The minimum height of this fig is the total minimum height of its child * figs.<p> * * The owner of this Fig is the UML element that is extended * with the stereotypes. We are listening to changes to the model: * addition and removal of stereotypes. <p> * * This fig supports showing one keyword * as the first ""stereotype"" in the list. <p> * * There is no way to remove a keyword fig, once added. <p> * * TODO: Allow for UML2 style display where all stereotypes are displayed in * the same guillemet pair and are delimited by commas. The style should be * changeable by calling getOrientation(Orientation). The swidget Orientation * class can be used for this. * @author Bob Tarling */"
// --------------- tree nodes -------------------------
// Needs to happen after initialization is done & modules loaded
"/*     * @see org.tigris.gef.persistence.pgml.HandlerFactory#getHandler(     * HandlerStack, Object, String, String, String, Attributes)     */"
"/*         *  The string <code>log4j.configuration</code> is the         *  same string found in         *  {@link org.apache.log4j.Configuration.DEFAULT_CONFIGURATION_FILE}         *  but if we use the reference, then log4j configures itself         *  and clears the system property and we never know if it was         *  set.         *         *  If it is set, then we let the static initializer in         * {@link Argo} perform the initialization.         */"
// in UML2, some elements are not to be shown
// The reason the gui is initialized before the commands are run // is that some of the commands will use the projectbrowser.
// don't show a profile application
// don't show element imports in profiles
// don't show extensions in profiles
// don't show base_... properties in stereotypes
// Notify the user that the modules in the list that are selected // but not enabled were not possible to enable and that are not // selected that we cannot disable. // // Currently we just log this. // // TODO: We could eventually pop up some warning window. //
// "N/A" or "x nodes and x edges"
/* Also show unattached sequence diagrams: */
"/** * A subclass of JPanel that can act as a tab in the DetailsPane or * MultiEditorPane. Added functionality:<p> * * Spawning: When the tab is double-clicked, this JPanel will generate a * separate window of the same size and with the same contents. This is almost * like ""tearing off"" a tab.<p> * * TODO: Spawning of windows disabled in spawn()<p> * * Title: This JPanel keeps track of its own title.<p> * * Icon: This JPanel keeps track of its own icon; i.e. an arrow pointing to * the panel that it gives details of.<p> * * Orientation: This JPanel is Orientable.<p> * * Cloning: This JPanel may be cloned.<p> * * This class used to be named TabSpawnable. * Renamed since it is not a Tab, but a Panel, and being spawnable is * not any more its main purpose. */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCall(tudresden.ocl.parser.node.AFeatureCall)     */"
// Transition
"/* Disabled since it gives various problems: e.g. the toolbar icons         * get too wide. Also the default does not give the new java 5.0 looks.        SwingUtilities.updateComponentTreeUI(SwingUtilities.getRootPane(this));        */"
// TODO: what?
// Todo: What?
"/*     * @see org.argouml.model.VisibilityKind#getProtected()     */"
// org.argouml.ui.TabTable // TabMetrics // TabJavaSrc | TabSrc // TabUMLDisplay // TabHash
// If nothing selected, go to last selected target
"/*     * @see java.awt.Component#getSize()     */"
// Needed for Argo startup :-(
"//	targets.remove(target);"
//        JPanel north = new JPanel(); //        north.setLayout(new BorderLayout()); //        north.add(tabs, BorderLayout.CENTER);
// Utilities usually do not require a constructor either
// Some subclasses will try to use this
// let's load the current shortcut from the configuration (as a string)
// implement set-like behaviour. The same element // may not be added more then once.
// cannot break here since an object can be multiple // times in history
// FigClass calls setBoundsImpl before we set // the stereotypeFigProfileIcon
// CommentEdge - the owner of a FigEdgeNote
// Write any left over bytes in the input buffer // (perhaps from a partially decoded character)
// check if there are new elements in the list // if the old and new list are of the same size // set the oldTargets to the correct selection
// If not found, try the parent namespace
// Listen for the removal of diagrams from project
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEnumLiteral(tudresden.ocl.parser.node.AEnumLiteral)     */"
// Figs on a diagram without an owning model element
/* end class DocumentationManager */
// TODO: Needs localization
/* end class ChildGenRelated */
// adds all stereotypes defined at the top level namespaces
// and now remove them
// The creation of the actual GUI elements is deferred until // they are actually needed. Otherwize we have problems // with the initialization.
// collect the to be removed stereotypes
"/*             * We preserve the current (multiple) selection, if we are over part             * of it ...             */"
// the name of this type of diagram
// add stereotypes
// Loop through each element in the namespace, recursing.
// Check to see if all targets are classifiers // before adding an option to create an association between // them all
// Instance
// For all other model elements, return any elements // associated in any way
// target may appear multiple places in the tree, so // we don't stop here (but it's expensive to search // the whole tree) - tfm - 20070904 // targets.remove(t); // break;
// adds all stereotypes defined at the profiles applied // to the current project
//////////////// // TableModel implementation
// the name of this type of ModelElement
"/*         * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)         */"
// the name of this instance of ModelElement
// the name of the parent diagram instance
// not safe to presume the destination is the comment
// this also sets the target as a convenient side effect
"/*     * The NotationProvider for the ClassifierRole. <p>     *      * The syntax is for UML is:     * <pre>     * baselist := [base] [, base]*     * classifierRole := [name] [/ role] [: baselist]     * </pre></p>     *      * The <code>name</code> is the Instance name, not used currently.     * See ClassifierRoleNotationUml for details.<p>     *     * This syntax is compatible with the UML 1.4 specification.     */"
// This is the tooltip of a comment link
"/*	 * @see java.io.FileFilter#accept(java.io.File)	 */"
// Class
"/*         * @see javax.swing.event.TreeExpansionListener#treeExpanded(         * javax.swing.event.TreeExpansionEvent) Updates the selection state.         */"
// Association
// Attribute
// If we have no source and dest connector then we assume this is // load of an old UML1.4 diagram from before this data was saved // in PGML. For UML1.4 we can assume the source is first connection // and destination is last connection stored in repository for this // association.
// State
// First argument:  Component to associate the target with // Second argument: DropTargetListener
// Operation
// Interface
// Link
"/*     * @see java.lang.Throwable#printStackTrace()     */"
"/*         * If requested height equals needed height then do nothing; it fits         * exactly.         */"
// replace all occurances of OFFENDER with the name of the // first offender
"/*         * Ask the cell renderer to paint itself into the BufferedImage.         * Make the image ghostlike.         */"
// check for all uppercase and/or mixed with underscores
//umlReserved.add("file");
//umlReserved.add("node");
"/*         * MVW: These are the WFRs for DataType:         * [1] A DataType can only contain Operations,         * which all must be queries.         * self.allFeatures->forAll(f |         *  f.oclIsKindOf(Operation) and f.oclAsType(Operation).isQuery)         * [2] A DataType cannot contain any other ModelElements.         *  self.allContents->isEmpty         *  IMHO we should enforce these WFRs here.         *  ... so it is still possible to copy or move query operations,         *  hence we should allow this.         */"
//umlReserved.add("send");
"/* The modelelement must have been                 * deleted - ignore this - it will pass. */"
// self.allConnections->forAll(ar|ar.participant <> self)
/* end class CrCircularAssocClass */
"/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#isVisibilityVisible()     */"
/*(MAttribute)*/
//clear out queues! @@@
// Copy returned parameters because it will be a live collection for MDR
"/*         * @see java.awt.dnd.DropTargetListener#dragEnter(java.awt.dnd.DropTargetDragEvent)         */"
// If the name is only underscores
// This is somewhat inconsistent with the design of the constructor // that receives the root object by argument. If this is okay // then there may be no need for a constructor with that argument.
"/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     *      int, int)     */"
"/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#setVisibilityVisible(boolean)     */"
"/*     * @see javax.swing.tree.DefaultTreeModel#insertNodeInto(javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int)     */"
//umlReserved.add("copy"); //umlReserved.add("create");
/* end class ClAttributeCompartment */
// Remember that children are not TreeNodes but UserObjects
// check whether constant, constants are often weird and thus not a // problem
// why are we here?
// If the classifier does not have a name, // then no problem - the model is not finished anyhow.
// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for attributes is drawn before drawing things // over it
// Abstract elements do not necessarily require associations
"/*         * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object)         */"
// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for operations is drawn before drawing things // over it
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAStringLiteral(tudresden.ocl.parser.node.AStringLiteral)     */"
// special cases for use cases // Extending use cases and use case that are being included are // not required to have associations.
// for use cases we need to check for extend/includes // actors cannot have them, so no need to check
// The association that triggered the critic. Its just possible the // association is no longer there, in which case we return null
/* end class ClOperationCompartment */
// Now create the five options
// in UML2, we don't want to see element imports in profiles
// Get the names of the two ends. If there are none (i.e they are // currently anonymous), use the ArgoUML convention of "(anon)" for the // names
// Default (any other step) is to return nothing
// Set the appropriate aggregation on each end
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object)     */"
// Start is a composite aggregation of end
// Start is a shared aggregation of end
// End is a composite aggregation of start
// End is a shared aggregation of start
// No aggregation
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#addEnclosedFig(org.tigris.gef.presentation.Fig)     */"
// Someone took our association away.
// First get the collection of ElementResidence
// Can't finish if our parent can't
// Can finish if it's step 0
// Can finish if we're on step1 and have actually made a choice
// Otherwise we can't finish
// TODO: The WFR doesn't restrict this to Classifiers - tfm
"/*     * Performs critique asap.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
"/*         * @see java.awt.dnd.DropTargetListener#dragExit(java.awt.dnd.DropTargetEvent)         */"
"/* If the script of the Action is empty,             * (or only specifies arguments and no method name)             * then we generate a string based on             * a different model element: */"
//     umlReserved.add("initial"); //     umlReserved.add("final"); //     umlReserved.add("fork"); //     umlReserved.add("join"); //     umlReserved.add("history");
// check if there is no OCL_END; if so, the critic expression // is not correct and can not be expanded
"/*     * @see org.argouml.uml.diagram.layout.LayoutedEdge#layout()     */"
//////////////////////////////////////////////////////////////// // display related main.methods
// Create a different client to bind to the same supplier
/* end class CrInterfaceAllPublic */
// return original string if no replacements made
// Types can probably have associations, but we should not nag at them // not having any. // utility is a namespace collection - also not strictly required // to have associations.
// If we drop out there is no problem
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#isStandalone()     */"
// Only look at associations
"/*     * @see org.tigris.gef.graph.GraphFactory#makeGraphModel()     */"
/* end class CrCrossNamespaceAssoc */
//TODO: different critic for packages consisting only //of references to elements of other packages?
// The next AssociationEnd, and its classifier. Check the // classifier is in the namespace of the association. If not we // have a problem.
// original class was not abstract
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAUnaryUnaryExpression(tudresden.ocl.parser.node.AUnaryUnaryExpression)     */"
// Nothing to do.
// //   see if there is already an element with the same name //
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getWeight()     */"
/* end class CrClassMustBeAbstract */
/* end class CrUselessAbstract */
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getRank()     */"
/*(MClassifier)*/
// found a concrete subclass
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getTypeOrderNumer()     */"
/* end class CrTooManyAssoc */
/* end class CrUselessInterface */
/* end class CrComponentInstanceWithoutClassifier */
// Check that the parameter lists match.
/* end class CrTooManyClasses */
// utility is a namespace collection - also not strictly // required to have operations.
"/*     * @see org.tigris.gef.base.Diagram#setName(java.lang.String)     */"
// We don't consider secondary stuff.
"/*     * @see org.tigris.gef.graph.MutableGraphModel#containsNode(java.lang.Object)     */"
//        newEdge.setDiElement( //            GraphChangeAdapter.getInstance().createElement(gm, edge));
/////////////////// End GEF main.methods ////////////////////////
// not allowed
// return;
// TODO: Comments are on Element in UML 2.x
// There is a constructor.
"/*     * Create a diagram.  This 4-arg version is only for internal use.  The     * 'namespace' argument is deprecated and not used in the new APIs.     */"
"/*     * @see ProfileModelLoader#loadModel(ProfileReference)     */"
// This shouldn't be possible, but just in case
/* end class CrTooManyStates */
// Create the UML connection of the given type between the // given model elements. // default aggregation (none)
// Commentlinks for comments. Iterate over all the comment links // to find the comment and annotated elements.
// The connection is not valid unless both nodes are // in this graph model.
// yeah right...we don't have an operation (and thus no
// *IMPORTANT* - These MUST remain in order!
// Check that the names match.
// singleton, no instantiation
"/*     * The special value <code>null</code> is used internally to indicate that     * the default value should be inherited from the next level of settings.     */"
// Both lists have the same length
// Repeat until no faults are fixed
/* Diagram appearance settings with project scope: */
// If the array hasn't been flagged to indicate otherwise // swap elements the elements and add again.
/* Some cached fonts based on the above settings */
// If we've got a local (uninherited) font name or size or if we've got // no parent to inherit from recompute our cached fonts
// types can probably have variables, but we should not nag at them // not having any.
// Listen for name changes so we can veto them if we don't like them
"/*     * @see org.argouml.model.ModelEventPump#stopPumpingEvents()     */"
// get all the classes from the diagram
// only classes with name need a constructor
"/*     * @see org.tigris.gef.base.Command#execute()     */"
// The report
// If we find an instance variable that is not a constant // we have succeeded
// de-selects the fig minimising & layout // if we are not creating diagrams
// We can give up looking if we've hit both criteria
/* end class CrNoInitialState */
// If we drop out we didn't meet both criteria, and all is well.
// 2. Make sure that all Figs are visible
"/*     * Create chooser for objects we are to import. Old style modules get to     * provide their own (although I don't believe any of them do), while new     * style modules get the a chooser provided by us (which matches what the     * abstract class FileImportSupport used to provide).     */"
// 1. Make sure all Figs in the Diagrams layer refer back to // that layer.
// maybe we have a modelelement that is part of some other // fig
// Register for notification of any global changes that would affect // our rendering
// 4. Make sure all FigNodes and FigEdges have an owner // The report
// 3. Make sure all FigEdges are attached to a valid FigNode // The report
// 5. Make sure all FigNodes and FigEdges have a valid owner // The report
// Do nothing, override in subclass.
// If we haven't succeeded in getting a namespace then abort
// This should always be true, but just in case...
"/*     * The diagram to be laid out.     */"
"/*     * Point at which to start layout (initial state goes here). The X     * coordinate must be greater than half the width of the widest figure to     * be placed (because figures are centered on this location).     */"
"/*     * FinalState element for ActivityDiagram     */"
// Find our Initial State
// Place all the nodes
// Place the final state last with a little separation
// get the first editable extent (which is OK unless there is more // than one editable extent)
// If we're trying to set the namespace to the existing value // then don't do any more work.
//        figClone.seperator = (FigLine) it.next();
//Needed for project deletion
// we want to maintain a minimum size for the partition
// TODO: midpoints for side handles
/* We removed the last partition, so now remove the pool, too: */
// no action required in case of veto on setName
// This test needed for project deletion
// TODO: side handles
"/* Listen to activitygraph deletion,         * delete this diagram. */"
//////////////////////// // actions for toolbar
// no action required
/* The namespace of the activitygraph is changed! */
"/*     * The space between the 2 text figs is: PADDING.     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */"
"/* TODO: We may return the following when the         * relocate() has been implemented.         */"
"/* TODO: We may return something useful when the         * relocate() has been implemented. */"
// register for events from the type
// Create a map of partitions keyed by x coordinate
// Sort the x coordinates into order
// the state name
// If the layer is null, then most likely we are being deleted.
"/* Don't listen to all property names             * We only need to listen to its ""type"", and ""remove"". */"
/* the height of the blank space above and below the text figs: */
// and listen to name changes of the submachine
// both have the same settings
// both have the same owner
// add them back to front
// Let our superclass sort itself out first
// add the listeners to the newOwner
/* Set up the property panels for activity diagrams: */
// overrule the single-line name-fig created by the parent
//setBlinkPorts(false); //make port invisible unless mouse enters
/* TODO: Do we need to clone the stereotype(s)? */
/*(MGeneralization)*/
// the width needs to be > the height
// TODO:?
"/*     * Add the given edge to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */"
// The stereotype. Width is the same as the cover, height is its default // (since the font is not yet set). The text should be centered.
//throws PropertyVetoException
/* end class CollabDiagramGraphModel */
// In the rather unlikely case that we have no name, we give up.
// The big port. Color of the big port is irrelevant
// The cover. 
/* At least one stereotype is visible */
// Remember where we are at present, so we can tell GEF later. Then // check we are as big as the minimum size
// Set the bounds of the bigPort and cover
// Work out the padding each side, depending on whether the stereotype // is displayed and set bounds accordingly
// singleton
//this one behaves differently, hence seperated:
/* end class FigAssociationRole */
// the figs that make up this group
// _x = first.getX(); // _y = first.getY();
/* Set up the property panels for collaboration diagrams: */
// this is neat...
/* Set up the property panels for deployment diagrams: */
////////////////////////////// // Getters for plugin modules: //////////////////////////////
// so it still looks like a cube
//_bigPort.setBounds(x+1, y+1, w-2, h-2);
// nothing extra to do currently
/* end class PredIsStartpackage */
/* end class StateDiagramGraphModel */
// Don't do it for comment.
/* (MElementImport) */
/* (MTransition) */
/* If a UML object is found, you can not remove selected elms. */
// check parameter types:
/* If nothing is selected, then not allowed to remove it. */
"/*     * The returned list of Figs is sorted according layout: from top to bottom.     */"
/* If only Figs without owner are selected, then you can remove them! */
/* end class PredIsFinalState */
/* This presumes that the layer is set after the owner: */
/* We only handle the case where a region has been removed: */
"/*If it is concurrent and contains concurrent regions,        the regions are resized*/"
"/* None of the menu-items below apply         * when multiple modelelements are selected:*/"
// do we need to 
//The event source is the owner stub state
/* end class FigCompositeState */
/*The event source is the submachine state*/
// ignored - fixed rendering
//////////////////////////////////////////////////////////////// // Event handlers
/* The submachine has got a new name*/
// This indicates a change in association, not name - tfm
//All states in the new reference state's path are added // as listeners
// The source was the referenced state that has got // a new name.
// ignored - rendering is fixed
//The old submachine container is deleted as listener
// The Referenced State or one of his path's states has got // a new name
//The new submachine container is added as listener
//All states in the old reference state's path are deleted // as listeners
// Translate any old style sequence diagrams
// Translate any sequence diagrams create with any previous svn // work in progress
// Get the first existing FigNode and if it exists set the // y position and height of _pers to be the same as it.
// ignore mouse clicks
"/* This assert fails for the TestPropertyPanels,          * file GUITestPropertyPanels.zargo: */"
//assert  w == h;
// The Machine State has been deleted from model
/* Ignore w and h from here on. */
// leave some space below the "include"
// File load/save gets done on a background thread, so we'll  // probably have to queue this to the Swing event thread
"/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */"
// and the parameter of its operations
// noop - fixed rendering
// There are no regions so create one and // place the vertex there.
//setBlinkPorts(false); //make port invisble unless mouse enters
// there can only be one
/*The group must be resized if a text field exceed the bounds*/
"/*         * A Concurrent region cannot have incoming or outgoing transitions so         * incoming or outgoing transitions are redirected to its concurrent         * composite state container.         */"
//cat.debug("NOTE: TodoParser handleStartTag:" + e.getName());
"/*     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */"
// or just the owner?
"/* Listen to machine deletion,         * to delete the diagram. */"
// this in case we are being deleted
/* The namespace of the statemachine is changed! */
/* Set up the property panels for statechart diagrams: */
//MModelElement modelElement = elementImport.getModelElement();
// top of the hierarchy is ME:
// then Generalizable Element
// then Classifier & Package
// navigable.... only want incoming
// then Classifier
// cast the params
//set the new end type!
// rerouting the destination:
// rerouting the source:
// empty at the moment
// move down
// move more right
// move left
// use left and right, up and down
// the amount of the "sidestep"
//LOG.debug(result + " node1: " + this + ", node2 " + node);
// split = //     (split == null || split.isStandalone()) ? node : split;
// (xOffset - curW) / 2;
// Element is allowed, but only NamedElement can return nonempty list
/* end class ActionGotoDiagram */
// Link does not exist in UML2
"/*     * Text group to contain name & stereotype     */"
/* end class FigLink */
/* Stereotype covers NameFig: */
/* Compartments from top to bottom: */
// by default, do not show operations nor attributes:
// We're going to change the name immediately, so just use ""
// TODO: place comments near connected classes // TODO: place from middle towards outer edges? (or place largest // groups first)
//        boolean hasPackages = false; // TODO: move "package in row" to NodeRow
//        initPreinitialize(); //        initializeSubsystems(new SimpleTimer(), null); //        ArgoFrame.getInstance().setVisible(true);
// since UML2, this must appear before the isAClass clause
// this rectangle marks the operation section; all operations // are inside it
// 2nd compartment, so adjust Y appropriately
// Visibility ...
// Collect the set of model elements that we want to listen to
/* check if any stereotype is defined */
// and its features
// Modifier ...
// Add ...
// There are 2 boxes showing lines: the tab and the body.
/* This populates the stereotypes area: */
// else nothing changed
// On uniprocessors wait until we're sure the splash screen // has been painted so that we aren't competing for resources
/* we got at least one stereotype */
// the user wants to hide them
// If we have any number of stereotypes displayed, then allow // some space for that (only width, height is included in nameFig):
// take into account the tab is not as wide as the body:
// we want at least some of the package body to be displayed
// And now aSize has the answer
// Save our old boundaries (needed later), and get minimum size // info. "aSize" will be used to maintain a running calculation of our // size at various points.
// The new size can not be smaller than the minimum.
// Now sort out the stereotype display. If the stereotype is displayed, // move the upper boundary of the name compartment up and set new // bounds for the name and the stereotype compartments and the // stereoLineBlinder that blanks out the line between the two
// -1 for 1 pixel overlap
// set bounds of big box
"/* The figPoly is located at the right edge of the nameFig.             * The nameFig size is such that it at least fits its text,             * and the figPoly next to the text.             * Making the package bigger, causes the figPoly to stick to             * the right edge.*/"
// Now force calculation of the bounds of the figure, update the edges // and trigger anyone who's listening to see if the "bounds" property // has changed.
/* Only show the menuitems if they make sense: */
/* save first */
/*while*/
// and its stereotypes
"/* Try to create a new class diagram.                     */"
/*if package */
/* if doubleclicks */
/* change prefix */
/* end class FigPackage */
/* end class StylePanelFigPackage */
// In the DeploymentDiagram there are no Generalizations
// Self-association isn't draggable
/* end class StylePanelFigInterface */
// No Generalizations on Deployment Diagram
// Use super because not fully init'd
// And now add listeners to them all:
"/* The next line is needed so that we have the right dimension         * when drawing this Fig on the diagram by pressing down         * the mouse button, even before releasing the mouse button: */"
// Set the bounds of the figure to the total of the above
// If moved into an Package
"/* Testing: Add a parameter to an operation on an Interface.                         * Does the Interface Fig adapt its width? */"
/* Set up the property panels for class diagrams: */
// The figure that holds the text of the note.
// Get the size of the text field.
//parse the text that was edited
// Resize the text figure
// resize the FigNode to accomodate the new text
// Not used, do nothing.
// Resize the big port around the figure
// The text element has no border, so the line color doesn't matter.
// The text is always opaque.
/*? 2*LINE_WIDTH? */
"/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel,     *         org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)     */"
// Make a seamless integration of the text // in the note figure.
//////////////////////////////////////////////////////////////// // user interaction main.methods
//////////////////////////////////////////////////////////////// // accessor main.methods
// If we have a stereotype displayed, then allow some space for that // (width and height)
// And add the gaps around the textfield to get the minimum // size of the note.
// Just move the corner to it's new position.
/////////////////////////////////////////////////////////////////// // Internal main.methods
// all connected edges
// Only adjust the stereotype height if we are not newly // created. This gets round the problem of loading classes with // stereotypes defined, which have the height already including // the stereotype.
// Whatever happened we are no longer newly created, so clear the // flag. Then set the bounds for the rectangle we have defined.
/* end class StylePanelFigClass */
// TODO: get tip string from comment
/* This one is still usable, so let's retain it, */
"/*     * @see org.tigris.gef.presentation.FigEdge#setSourceFigNode(org.tigris.gef.presentation.FigNode)     */"
// element will normally be null when called from PGML parser // It will get it's source & destination set later in attachEdges
// unimplemented
"/* Alternatively, we could just return null here,          * so that you can not create a comment just          * linked to a comment this way - which is a bit uncommon,         * but not illegal, so for consistency, we better allow it.          */"
//        return null;
"/** * Class to display a Stereotype declaration figure using * Classifier box notation.<p> * * TODO: This is just a place-holder right now! - tfm * This needs to show tags and constraints. */"
// Add...
// Show ...
// register for tagDefinitions:
/* TODO: constraints, ... */
"/*     * @see javax.swing.AbstractAction#isEnabled()     */"
// avoid GEF calcDrawingArea bug when nothing in a diagram.
// No generalizations in Deployment Diagrams
// the diagram image data
// copy the gif image to the clipboard
// hide grid, otherwise can't see anything
//        bigPort.setFilled(f);
// background color.
// 2 Pixel padding after compartment
// Set up hide all / show all
// Perform the action
// Only the bigPort may be filled
/*?LINE_WIDTH?*/
//see parent
// We remove all of them:
/* but its position may have been changed: */
// bounds not relevant here, but I am perfectionist...
"/* We need to set a new notationprovider, since                 * the Notation language may have been changed:  */"
// add it again (but now in the right sequence)
// Now put the text in // We must handle the case where the text is null
/* Find the compartment fig for this umlObject: */
// Override superclass to do nothing. // Line width cannot be changed.
// Override superclass to do nothing. // Line width property cannot be changed.
// aggregation
/* end class ActionSrcMultOneToMany */
// TODO: set font?
// to circumvent too many registered listeners
// this shortcut was already been assigned to another action; // let's pop-up a message for the user
// ending editing
// USED BY PGML.tee
// Actually return the FigEdge that the FigEdgePort is part of.
//            throw new IllegalArgumentException();
// updating the actions
/*Here the actions to divide a region*/
"/* The 1st region has an invisible divider line                 * (the box is always invisible): */"
"/* Throw out any previous elements that were                 * enclosed but are not a concurrent region;                 * let's move them onto the first region: */"
//linewidth?
/* The divider line should be visible, so no need to change its color. */
/* Make the composite state 1 region higher: */
// Look for the dashed edge
// We have the dashed edge now find the opposite FigNode
/* Prevent triggering too many events by setName(). */
// not???
// Do nothing    
// Do nothing        
// Consume to stop other modes from trying to take over
// marker interface only
// or vice versa?
// Provide feedback to the user that their name was // not accepted
/* Do not show border line, make transparent: */
//cleanup of unused FigText's
// TODO: This doesn't do anything special with keywords. // They should probably go first.
//There is one fig more in the group than (stereotypes + keyword):
// The keyword fig already exists.
// bounds not relevant here
// The stereotype fig already exists.
// remove all stereotypes that have a graphical icon
//TODO: check!
//set new bounds for all included figs
// StylePanelFigClass relies on getPanelTarget() to return a  // FigCompartmentBox
// Get class box, because we will set it's bounding box
// Get class box, because we will set it's bounding box in text field
// The keyword fig does not exist yet. // Let's create one:
// keywords which look like a stereotype (e.g. <<interface>>) have // no owner
// if there are no stereotypes, we return (0,0), preventing // double lines in the class (see issue 4939)
/* end class StylePanelFigAssociationClass */
/////////////////////////////////////////////////////////////////////////// // // Constructors // ///////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////// // // Main main.methods // ///////////////////////////////////////////////////////////////////////////
// Create the singleton if it does not exist, and then return it
// When a new target is selected, we have to check if it 's a use case. //Then, the icone "add extension point" have to become enabled.
// Create a new extension point and make it the browser target. Then // invoke the superclass action method.
/* end class ActionAddExtensionPoint */
// If there are bits of an association class then // remember their location and path.
// Create the new FigNodeAssociation and locate it.
// Add the association ends to the graph model
// Add the edges (such as comment edges) that were on the old // FigAssociation to our new FigNodeAssociation and make sure they are // positioned correctly.
"/*     * @see java.awt.dnd.DropTargetListener#dragEnter(     *         java.awt.dnd.DropTargetDragEvent)     */"
"/*     * @see java.awt.dnd.DropTargetListener#dragOver(     *         java.awt.dnd.DropTargetDragEvent)     */"
"/*     * @see java.awt.dnd.DropTargetListener#dropActionChanged(     *         java.awt.dnd.DropTargetDragEvent)     */"
// multiplicity
/* end class ModeCreateAssociation */
/*&& ((UMLDiagram) dia).doesAccept(dtde.getSource())*/
/* The new height can not be less than the name height: */
"//			System.err.println(""NullPointerException ignored."");"
/* end class SPFigEdgeModelElement */
"//    		System.err.println(""NullPointerException ignored."");"
// Get all our sub Figs and hit them with the big stick too
"/* Only show the path item when there is                          * an owning namespace. */"
// enumerate all selected figures and update their path accordingly  
// compartments
// add
/* 20 = height of name fig ?*/
/* 2*LINE_WIDTH?  or extra padding? */
// Set properties of the stereotype box.
"/*         * The nameFig is transparent, since this is a box and the fill color is         * drawn by the bigPort.         */"
// Use "aSize" to build up the minimum size. Start with the size of the // name compartment and build up.
"/*         * Only take into account the stereotype width, not the height, since         * the height is included in the name fig:         */"
"/* Add the height of all the compartments (if there are any),         * and check their minimum width: */"
// Save our old boundaries so it can be used in property message later
/* Now the new nameFig height will include the stereotype height: */
// Check for uninitialised instance variables and // constructor.
/* Calculate the minimum needed height for all the compartments:*/
/* Increase the height of the fig: */
/* Finally set the bounds of the big box and the border fig: */
// hide compartment
"/*                 * Hiding one compartment means that the Fig returns to minimal                 * dimensions:                 */"
"/*     * @see org.tigris.gef.base.PathConv#stuffPoint(java.awt.Point)     */"
"/*     * @see org.tigris.gef.base.PathConv#setClosestPoint(java.awt.Point)     */"
// show compartment
// forceRepaintShadow();
/* Update the diagram, and other users of these settings: */
// find the point offset on the line that gives a // correct offset
// default angle is 90 deg.
// Boundary condition in GEF, make sure this is LESS THAN, not equal
// Check for a collision between our computed position and the edge
// increase offset by 2px at a time
// Get the points representing the poly line for our edge
// increase offset by increments until we're clear
// If we timed out, give it one more try on the other side
/* count >= limit */
//                LOG.log(Level.FINE, "Final point #" + count + " " + result //                        + " offset of " + scaledOffset);
// segment size for computing slope
// If our position was clamped, try to make it up on the other end
// Can't get the slope of a point.  Just return an arbitrary point.
// This shouldn't happen, because of our line segment size check
// "We're going vertical!" - Goose in "Top Gun"
// Arctan only returns -PI/2 to PI/2 // Handle the other two quadrants and normalize to 0 - 2PI
// Quadrant II & III
// Quadrant IV
// Set the following for some backward compatibility with old algorithm
// Add displacement angle to slope
// Transform to 0 - 2PI range if we've gone all the way around circle
// Compute our deltas
// Load the standard colour, just add an alpha channel.
// Should never get here.  If we do, return the inner point.
// Called by propertyChange
// this does a calcBounds()
"/*     * @see org.tigris.gef.base.Diagram#getClassAndModelID()     */"
"/* The following is the default implementation         * for diagrams of which the owner is a namespace.         */"
// source // source position // destination // destination position // number of objects to be copied
/*"unnamed " + */
// Different lengths:
// TODO: should update to size of diagram contents
// next statement gives us a clone JGraph but not a cloned Toolbar
"/*     * @see org.tigris.gef.event.ModeChangeListener#modeChange(org.tigris.gef.event.ModeChangeEvent)     */"
// remains selected
// the old selection
// Target might not have been initialised yet.
// add to selection
// Assuming the target is some model element.
// how to handle empty target lists? // probably the TabDiagram should only show an empty pane in that case
// Any Swing work done here needs to be queued to the AWT thread // since we don't know what thread our event will arrive on
//- RedrawManager.lock();
/* This makes the text not touch the text-border line: */
// Certain types of fixed text (e.g. a FigStereotype with a keyword) // may not have an owner
//Now, we link it to the modelelements which are represented by FigNode
//update all tools' enabled status
// remember the fig for later
//Let's build the comment first, unlinked.
/* Prevent e.g. AssociationClasses from being added trice: */
//Select the new comment as target
//Create the Node Fig for the comment itself and draw it
//Create the comment links and draw them
// If we're drawing from an edge
//$NON-NLS-<n>$
// user made a false start
// So, the target is a MAssociationRole
"/*MVW This is not the correct way,        * but it allows connecting a CommentEdge to it!        * See e.g. ActionAddNote for the correct way.        * Testcase:        * 1. Select the message.        * 2. Click the Comment tool.        * */"
/* end class ActionAddMessage */
// let's use groups to construct the different text sections at // the association
"/* This only happens if model-change events arrive             * before we are completely constructed. */"
// x^2 + y^2 = r^2  (equation of a circle)
// max distance is set at 100 pixels, (rSquared = 100^2)
// east
"/*     * @see org.tigris.gef.presentation.Fig#propertyChange(java.beans.PropertyChangeEvent)     */"
/* end class FigAssociation */
// no need to listen to these property changes - the // notationProvider takes care of this.
/*, new String[] {"name", "visibility", "stereotype"}*/
// These are a list of arrow types.
// Added to the arrow type for navigable
// Finished editing. // Parse the text that was edited. // Only the role is editable, hence:
//            figEdge.showHelp(role.getParsingHelp()); //            role.setText();
// Pass everything else to superclass
/* end class ActionNavigability */
// Fonts and colors should get updated automatically for contained figs
/* There is none... */
// only initialized to prevent warning
//not supported for this target
// make space for the clarifier // margin between text and border
// Add a listener for changes to any property
// is used as InstanceSpecification, see UMLDeploymentDiagram
// Be careful here since subclasses could have overridden this with // the assumption that it wouldn't be called before the constructors // finished
// this rectangle marks the whole modelelement figure; everything // is inside it:
"/**     * Clone this figure. After the base clone method has been called determine     * which child figs of the clone represent the name, stereotype and port.     * <p>     * TODO: enclosedFigs, encloser and eventSenders may also need to be cloned.     *     * @see java.lang.Object#clone()     * @return the cloned figure     */"
"/* Idem here:                 * clone.stereotypeFig = (FigStereotypesGroup) cloneFig; */"
//figClone._polygon = (Polygon) _polygon.clone();
"/*     * Utility function to unregister all listeners     * registered through addElementListener.     *     * @see #addElementListener(Object, String)     */"
"/*     * @see org.tigris.gef.presentation.Fig#getEnclosingFig()     */"
// add stereotype view submenu
// The node's been placed on the diagram
// Set the namespace of the enclosed model element to the // namespace of the encloser.
// Find all ElementResidences between the class and the component:
// There was no ElementResidence yet, so let's create one:
// The node's been placed within some Fig
// There were 2 ElementResidences .. strange case.
// There is already a correct ElementResidence
// The owner is already linked to the component
// We are getting events we don't want. Filter them out.
/* Only update the bounds if they change:  */
// resize the FigNode to accommodate the new text
// TODO: Should this not be an assert?
// west
// south
// Convert null to empty string and clear help message
// it is done
//this enables direct text editing for sub figs of a //FigGroup object:
// either layer or owner was null
// Default is to do nothing
//This test needed for a FigPool
// Get model listeners removed:
// TODO: State & Vertex are independent classes in UML 2.1
// TODO assert modelElement != null???
// Default for name and stereotype is no border
// Use DiagramInterface to add classes to diagram
// situation 1
// we have an edge (the UML modelelement!)
// computeRoute(); // this recomputes the route if you reload the diagram.
// in case someone turns it on
// Do not allow fill to change. We should see through // the text to the color of the main FIg background.
/* Now force minimum dimensions for the text: */
/* Now add the areas around the text to return the complete size: */
// calculate the source and dest figs for to self assoc
//reset the pointIndex
// check pre-conds
//Set-up:
// the fig that was under the mouse when it was released
// and find the Fig:
// last is the top fig.
// check intermediate post-condition.
// delegate the re-routing to graphmodels.
// set it to an invalid number by default // to make sure it is set correctly.
// north
// Do nothing until code is reviewed
// TODO: Do nothing until code is reviewed
// Message
// ClassifierRole // ClassifierRole
/* Simulate a press of the mouse above the calculated point: */
"/* Calculate the drop location, and place every n-th element             * at an offset proportional to n.             */"
/* Simulate a release of the mouse: */
// Make sure the file doesn't exist so the user will // get prompted to choose a new name
"/*     * Overridden in order to implement PathCompartmentContainer.     */"
// Don't allow drag outside of bounds of diagram
// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // clarifiers.
// Remember what handle was clicked for the case where the drag // is released over empty space
// transparent cyan
// yellow
// translucent green
"//        super(ModeCreatePolyEdge.class, ""edgeClass"", //	      Model.getMetaTypes().getAssociation(), name);"
// set this to true on to enable debugging figs
// anchor position
/* TODO: The UML does not seem to define this name. Or is it? */
"/*     * The serialVersionUID (generated by Eclipse)     */"
// UML spec for Generalizations doesn't call for name
// Name & stereotypes get updated by superclass
// show it
//                fig.calcBounds();
// we only take the filename, not the whole system path

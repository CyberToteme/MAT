// TODO factor up into GenBaseImpl //
// EATM Call the deprecated method which does the same thing  // but might have an override in older code.
// Unused?
// TODO factor up into GenBaseImpl? //
// call workaround
// TODO deprecate (since getPluginClass() is no longer called) //
// Ensure that this race condition is thread safe; it doesn't matter who wins the race. //
// TODO // This assumes we only get a SET notification, which isn't a good assumption. //
//DMS handle this well.
//FB TBD can we come up with a better algorithm for choosing the default label feature?
//DMS should we let this exception out?
//DMS What if Eclipse is running, but an invalid facade has been specified?  We still should format code, use encoding,...
//DMS  Do a better job with specific exceptions? Just use chained RuntimeExceptions?
// If the delegate URI can be handled as a file,  // we'll hope that renaming it will be really efficient. //
//DMS Why not this? //new SubProgressMonitor(progressMonitor, 1));
// Assume that it's an attribute for now. // It will/could become a reference if the type resolves to an EClass. //
// Do nothing for now, and avoid propagating the exception.   // How should builders handle cancel?
// this is a fall-back, however, this should never be called
// TODO fix the space above
// TODO REMOVE THIS BOGUS EMPTY LINE
// TODO handle class cast exception better.
// I don't know if we should be run this deferred  // because we might have to give the editor a chance to process the viewer update events  // and hence to update the views first. //  //
// This is a big festering hack to make the images the right size from the start. //
// EATM Demand create metadata; needs to depend on processing mode...
// TODO This is really quite attrocious since there is code that will assume an iterator that returns strings!
//TBD return (user selected subset?) of referenced packages that contain super classes of classes in this package.
// call the workaround
// //TBD rethink where exactly some of the following main.methods belong (GenModel or GenPackage) //
// if there are multiple variables in declaration,  // separate this variable fragment into a separate declaration
// EATM this would be wrong.
// REVISIT: Remove this code.
// The label is not used. //
// Motif kludge: we would get something random instead of null. //
// TODO So what should be the eType be now? //
// This runs the operation, and shows progress. // (It appears to be a bad thing to fork this onto another thread.) //
// EATM Kind of hacky.
// This is a kludge to deal with enumerators, which crash the doSwitch. //
// This is copied from ItemProviderAdapterFactory. //
// EATM This might be better written as a single loop for the EObject case? //
// Second alternative should be getModelProject()?
// TODO Hack that should be removed.
// TODO // Specialize this to return a resource locator for messages specific to this validator. // Ensure that you remove @generated or mark it @generated NOT
// TODO // I'm concerned that folders will often return 401 or even 403. // So should we consider something to exist even though access if unauthorized or forbidden? //
// Only file-scheme URIs will be re-encoded. If a URI was decoded in the workaround // above, and Platform.resolve() didn't return a file-scheme URI, then this will return // an decoded URI. //
// This functionality should eventually go away, as it is replaced by model exporters. // We'll just delegate to the deprecated GenPackage method. The monitor isn't used, so we won't pass it. //
// The eAnnotations and eGenericType are possible containment references.  // We'll move them instead of copying //
// Note: Registry based authority is being removed from a // new spec for URI which would obsolete RFC 2396. If the // spec is added to XML errata, processing of reg_name // needs to be removed. - mrglavas.
// temporary structure to hold node's attributes + namespaces in scope
// HACK: reading encoding
// Because of the old factoring approach in the create method,  // it might be the case that the state of the old value has changed by the time we get here, // and in that case, we don't want to duplicate the removals in this code. //
// REVISIT: Remove this code. // Store port value as string instead of integer.
// TODO // This is faster than many charAt() calls. //
//REVISIT: do we really need to support block names as in Unicode 3.1 //         or we can just create all the names in IsBLOCKNAME format (XML Schema REC)? //
// Bubble sort // Why? -- In many cases, //         this.ranges has few elements.
// Per Schema 1.0 it is not clear if the result returned should be a valid URI.  // For the future if we plant to support IRIs then it is better not to massage // the initialValue.  // We should thought consider where would be the best way to validate anyURI values -- EL
// Note that the way they are sorted, the values of index[i++] always increase, // so the objects are added from right to left in the list. // // EATM  TODO // // We could make this more efficient by grouping the adds when indices increment by one, // so that a single grouped notification would result. //
// TODO deprecate (since no longer used by getEditPluginClass(), getEditorPluginClass(), getTestSuiteClass()) //
// if there are multiple variables in declaration,  // separate this variable fragment into a separate declaration    
//DMS factor this into a method? Use a non-static subclass? 
//DMS this doesn't really produce nice output. //
//FB TBD filter out volatile and other inappropriate links?
// I don't know if this should be run this deferred // because we might have to give the editor a chance to process the viewer update events // and hence to update the views first. // //
// TODO processing instructions are not sent to recordValues
// TODO comments are not sent to recordValues
// TODO Ignore for now.
// TODO handle situation when ASTJNode is removed (compilationUnit is null)
//TBD return super classes of classes in this package that come from a delegate package.
// if current char is comma, insert line break after it // // we should be able to find the comma because the range for enum constants includes all trailing comments up to the separator // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)
// TODO translation
// TODO Binary incompatibility; an old override must override putAll.
// This runs the options, and shows progress. // (It appears to be a bad thing to fork this onto another thread.) //
// we should be able to find the comma because the range for enum constants includes all preceding comments up to the previous constant // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)
// TODO we should generate this.
// TODO What about the instance type name and the fact that we should be matching its type argument structure? // If they match so far, we must assume they are okay and then check all the arguments. //

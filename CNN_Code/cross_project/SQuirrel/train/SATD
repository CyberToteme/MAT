// TODO: These 2 should be handled with an Iterator!!!
// TODO verify this is correct
// ??? For now, use the same renderer as everyone else. // ?? // ?? IN FUTURE: change this to use a new instance of renderer // ?? for this data type.
// TODO: This should be handled with an Iterator!!!
"/** * SQLFilterAction.java * * Created on March 22, 2003, 10:55 AM * * Adapted from SessionPropertiesAction.java by Colin Bell. * * TODO: CHange name to ContentsTabFilterAction */"
// TODO: Do we need this one. */
// JASON: Do we need these?
//??? For now, use the same renderer as everyone else. //?? //?? IN FUTURE: change this to use a new instance of renederer //?? for this data type.
// BAD - Converting a URL to a file this way is problematic when the file path contains spaces
//JASON: Remove?? //_session.getSessionSheet().getSQLPanel().executeSQL(sql);
// TODO: This is a nasty quick hack. Needs an API to do this.
"/* TODO: Delete this class * Copyright (C) 2001 Colin Bell * colbell@users.sourceforge.net * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */"
// TODO: Hard coded -. JDBC/ODBC bridge JDK1.4 // brings back -9 for nvarchar columns in // MS SQL Server tables.
// hear no evil, see no evil
// When I tried using a length for LONGVARBINARY that is the max // length of the source records, I get the following exception: // // Exception condition 239. Data exception - string data, right truncation. // I tried bit varying(32767) with data that had max length of 16384. So // it's back to maximum length hard-coded for now. // registerColumnType(Types.LONGVARBINARY, 2147000000, "bit varying($l)");
// TODO: is this right???
"/*	 * TODO: This should not be public. Check all usages of it	 * and put appropriate main.methods in an API object.	 */"
"//	 JASON: Do we need these?"
"// JASON: Do we need this? //		getSQLPanel().selected();"
//TODO: Rename to IObjectTreeNodeExpander
// TODO: Hard coded -. JDBC/ODBC bridge JDK1.4 // brings back -9 for nvarchar columns in // MS SQL Server tables. // -8 is ROWID in Oracle.
//set the property values // Note: this may have already been done by another instance of // this DataType created to handle a different column.
// Always add plugins - there is not a good way to compare plugin zips and their extracted contents // at the moment. // TODO: Determine the best way to derive the filesize and checksum of the plugin zip that was last // extracted. Should we keep it around? How about using the current release.xml file ? Come to // think of it, perhaps we shouldn't be computing the checksum of *any* existing files, why don't // we just get it from the current release.xml file?
// TODO: verify this
// multiple rows - not good
//?? Extract this out into a class like CascadeInternalFramePositioner.
// ?? Is there any way to check for invalid input? Valid input includes // ?? at least any printable character, but could it also include unprintable // ?? characters?
// Cast is not so nice, but framework doesn't meet new requirements.
"/*				 * END-KLUDGE				 */"
// Total Hack! Type OTHER(1111) can be other types as well?
// JASON: Should be part of status bar?
//??GETRIDOFTHIS
// Don't call super. Packing this frame causes problems.
// TODO: Delete ME
// Note. Some DBMSs such as Oracle do not allow: // "select *, rowid from table" // You cannot have any column name in the columns clause // if you have * in there. Aliasing the table name seems to // be the best way to get around the problem.
// We are displaying a new dataset, so if there was // a cell editor in operation, tell it to cancel. //???? How does this impact popup display?
// KLUDGE: // We want some info about the columns to be available for validating the // user input during cell editing operations.  Ideally we would get that // info inside the ResultSetDataSet class during the creation of the // columnDefinition objects by using various functions in ResultSetMetaData // such as isNullable(idx).  Unfortunately, in at least some DBMSs (e.g. // Postgres, HSDB) the results of those calls are not the same (and are less accurate // than) the SQLMetaData.getColumns() call used in ColumnsTab to get the column info. // Even more unfortunate is the fact that the set of attributes reported on by the two // calls is not the same, with the ResultSetMetadata listing things not provided by // getColumns.  Most of the data provided by the ResultSetMetaData calls is correct. // However, the nullable/not-nullable property is not set correctly in at least two // DBMSs, while it is correct for those DBMSs in the getColumns() info.  Therefore, // we collect the collumn nullability information from getColumns() and pass that // info to the ResultSet to override what it got from the ResultSetMetaData.
"/**	 * the utility class that reads and writes release info from/to the release.xml file TODO: Spring-inject	 * when this class is a Spring bean	 */"
// TODO: This won't work when the column has values with quotes in them. // Use PreparedStatements instead. Hmmm... instead of insert statements, could we not // just create a sequence and generate a select statement that: // a) uses the sequence for the pkid // b) selects distinct values // That would be a more efficient approach that would also eliminate this quoting problem
// The following only works if SwingUtilities.getRoot(table) returns // and instanceof BaseMDIParentFrame. // If SwingTUilities.getRoot(table) returns and instance of Dialog or // Frame, then other code must be used.
// Need to somehow call  // SQLResultExecuterPanel.reRunSelectedResultTab(true); //  // Something like : // SQLResultExecuterPanel panel = getPanel();  // panel.reRunSelectedResultTab(true); // // However, that doesn't apply when the user is exporting from the // table contents table.  There needs to be a more generic way to // do this for all tables containing data that is to be exported // where some of the fields contain placeholders. // For now, we just inform the user and let them either continue // or abort and change the configuration manually,  // re-run the query / reload the table data and re-export.  
//?? Split these 4 functions off into a subclass of BaseFavouriteAction
// TODO: Rename this to getTableType.
// TODO: Bizarre that I couldn't find a valid SQL to drop an index.
//TODO: ? Dialog Handling on Cancelled ?
// This refactoring depends on the following API main.methods: // getCreateTableSQL
//Should probably create my own table model but i am being a bit slack.
// TODO Probably want to allow the user to set these sequence properties ?? // Sequence settings.
// We set expected and checksum to -1 here, since we don't have that information for release.xml file // TODO: Can HttpClient be used to get the byte-size of release.xml so we can perform this check?
// Here, I don't completely understand how these types are to be used in all databases and I haven't // yet had time to implement support in the dialects for them. So, this exclude list will keep these // less commonly used types from failing the test. Also, since not all of these types appear in Java5 // and we currently support compiling the code base with it, I use the integer values for new types // that were introduces in Java6, rather than the type constant name.
"/* * TODO: Delete this class - unused */"
"/*					 * TODO: Find out why					 * KLUDGE: For some reason, I am not able to get the sheet to					 * size correctly. It always displays with a size that causes					 * the sub-panels to have their scrollbars showing. Add a bit					 * of an increase in the size of the panel so the scrollbars					 * are not displayed.					 */"
// Copied from Java Doc Matcher.replaceAll: // // Note that backslashes (\) and dollar signs ($) in the replacement string // may cause the results to be different than if it // were being treated as a literal replacement string. // Dollar signs may be treated as references to // captured subsequences as described above, and // backslashes are used to escape literal characters in the replacement string.
"/**	 * TODO: Clean this mess up!!!! Load plugins. Load all plugin jars into class loader.	 */"
// TODO: subclass these hibernate dialects to provide the "canPasteTo"  //       api method in HibernateDialect interface. //private static final DB2390Dialect db2390Dialect = new DB2390Dialect();
// This is weird - if I don't set this the column header doesn't line up // with the column contents.
// Required otherwise it gets too wide.
//??? For now, use the same renderer as everyone else. //?? //?? IN FUTURE: change this to use a new instance of renderer //?? for this data type.
// TODO: Delete Me
// This refactoring depends on the following dialect API main.methods: // getUpdateSQL
// For PointBase, if type maps to Pointbase "BLOB", and the size // isn't valid (PB requires size for BLOBS) then set it to something // reasonably large, like 16MB. 1 is the default size if no size // is specified.  That's practically useless :)
// Should the data be first cloned so that the sorting doesn't take place // on the array that is used in getValue() // TODO: This is a must if sorting is done in a thread! ??
"/*			 * TODO: When 1.4 is the earliest version supported, add the following line:			*		setSurrendersFocusOnKeystroke(true);			* This should help handle some problems with navigation using tab & return			* to move through cells.			*/"
// Drop FK constraints before dropping any tables. Otherwise, we // may drop the child table prior to dropping it's FKs, which would // be an error. // TODO: This should be done in the dialect's getTableDropSQL method for a database specific // handling(or ignoring) of this problem.
//Silently ignore, what could we do anyway?
// This is a bit hard coded but if we use _scale here // some number displays go crazy.
// TODO: Figure out why the selection of the root node in the object tree // is undone if we don't delay. It seems like some other thread racing  // to set the selected node to none.  When this happens, the detail pane // for the root node disappears when a session is first opened, or when // an ObjectTree frame is created.  This is a really crappy and unreliable // way to fix this problem, but it hides the problem for now.  A better  // understanding of the architecture of session creation is required  // before a proper solution can be attempted. RMM 20051217
// TODO: Temporary until we sort out a better way to do guido's fix // assertEquals(SECOND_STMT_SEP, qt2.getSQLStatementSeparator());
// TODO Maybe we should have a checkbox to allow the user to toggle  // default value on/off.  Some dbs (like DB2) treat empty string "" as // a different default value than null.
// check the error stream for a problem // // This is a bit questionable since it is possible // for processes to output something on stderr // but continue processing.  But without this, some // problems are not seen (e.g. "bad argument" type // messages from the process).
// OK, this is a hack.  Currently, when precision == scale, I have  // no way to determine if this is valid for the actual data.  The // problem comes when the source db's precision/scale are greater -  // or reported to be greater - than the precision/scale of the  // destination db.  In this case, it maximimizes both for the  // destination, causing a definition that allows 0 digits to the  // left of the decimal.  Trouble is, without looking at the actual // data, there is no way to tell if this is valid - in some cases // it will be ok (0.0000000789) in others it will not be ok (100.123). // So for now, make the scale be approx. one-half of the precision // to accomodate the most digits to the left and right of the decimal // and hopefully that covers the majority of cases.
//????? if desired, get fancy and use icons in buttons instead of text ?????????
// TODO: When JDK1.4 is the earliest JDK supported // by Squirrel then remove the hardcoding of the // boolean data type.
// TODO: This should be handled with an Iterator
/* Work around some UTC and Daylight saving offsets */
//?? Is there any way to check for invalid input?  Valid input includes //?? at least any printable character, but could it also include unprintable //?? characters?
// TODO: These 2 should be handled with an Iterator.
// This is (a logically not sufficent) try to cope with the problem that there are the following // contradictory rules in the JDBC API Doc: // Statement.getResultSet(): // This method should be called only once per result. // Statement.getUpdateCount(): // This method should be called only once per result. // Statement.getMoreResults(): // There are no more results when the following is true: (!getMoreResults() && (getUpdateCount() == -1) // // If getMoreResults() returns false, we don't know if we have more results, we only know that it isn't // a result set. Since we called getUpdateCount() before getMoreResults() because we would like to know // the update count of the first result, we might not be allowed to call getUpdateCount() again. // // The Intersystems Cache Driver for example always returns the same updateCount on simple // INSERT, UPDATE, DELETE statements not matter if getMoreResults() was called. So updateCount never // gets -1 and this will loop forever. When I discussed the issue with the Intersystems people they // just told me not to call getUpdateCount() twice. That simple. My hope is that this will cure // problems with DBs that just don't care for multiple result sets.
// The call here is the result of a desperate fight // to find a place where the components in the split // had not height = 0. If someone knows a better way // please tell me I'll apreciate any advice. // gerdwagner@users.sourceforge.net
/** TODO: Spring-inject when this class is a Spring bean */
"/* TODO: what I really want to do here is get the SQL script and replace                     * ""CREATE PROCEDURE"" with ""ALTER PROCEDURE"", then put that in the SQL pane                     * and *NOT* execute it. */"
// TODO: should I be adding quotes if user wants identifiers quoted??
// The following ugly conversion from text to Byte is necessary because // the Byte class is inconsistant.  When asked to output as Hex, it does // so as an UNSIGNED byte, but when asked to read back the same thing // using the Hex radix, it insists that the input must be SIGNED. // To get around this, we up-size the conversion to Integer, then  // truncate that to a byte, and finally convert the byte to a Byte.  Yech.
/* this should just bring back one table, i hope. */
// TODO: Temporary until we sort out a better way to do guido's fix // IQueryTokenizer qt2 = sessionUnderTest.getQueryTokenizer();
// Hack to deal with Firebird's RDB meta tables.
// Hack to deal with Axion AXION_* tables.
// handle mouse events for double-click creation of popup dialog. // This happens only in the JTextField, not the JTextArea, so we can // make this an inner class within this method rather than a separate // inner class as is done with the KeyTextHandler class. //
// Don't use tinyint for now, even though Mckoi "supports" it. It's // notion of tinyint is 7-bit (not 8-bit) so it is not compatible with // other DBs and leads to overflow (resulting in negative values which // are a corruption of the actual value inserted/updated). This is not // a great work-around. I filed a bug report on the mailing list; // hopefully it will get fixed soon.
// TODO: Need to define a better approach to getting dialects. // That is, we don't really want to ever prompt the user in this // case.  It's always Oracle.  Yet, we may have a new OracleDialect // at some point.
// No appropriate DataType for this column, so do the best // we can with what we know. // // THIS MAY NOT BE THE BEST BEHAVIOR HERE!!!!!!!
// Evil hack to split the vacuum output a little.
"/** * This <CODE>ICommand</CODE> displays a dialog box that allows the user to * enter a 'where' clause or an 'order by' clause used when getting data via * the 'Contents' tab. * * @author <A HREF=""mailto:mjhammel@users.sourceforge.net"">Maury Hammel</A> * * TODO: Change name to ContentsTabFilterCommand */"
// TODO: - Col - Add method to Databasemetadata that returns array // of objects for getBestRowIdentifier. For PostgreSQL put this kludge in // the new function. THis way all the kludges are kept in one place. // // KLUDGE!!!!!! // // For some DBs (e.g. PostgreSQL) there is actually a pseudo-column // providing the rowId, but the getBestRowIdentifier function is not // implemented.  This kludge hardcodes the knowledge that specific // DBs use a specific pseudo-column.  Additionally, as of pg 8.1, // you must create the table using "WITH OID" appended to the create // statement.  Otherwise, OID column is not available by default. //
// This is a work-around for what looks like a bug to me - it is a syntax error to qualify with the  // schema the new table name, but not the old as in: // // ALTER TABLE "public"."tablerenametest" RENAME TO "public"."tablewasrenamed" // // The second "public". is apparently not (currently) a valid thing to do.
// Skip formatting for Stored Procedures - They can have // comments embedded in them, and I'm presently not sure // how the formatter handles this.
// ??Need to tell object to display itself in a panel.
// all of the following have been converted to use the DataType objects // So, why not just have case Types.NULL and default??? (this seems pointless) // RMM 20070726
//?? Need to associate a panel with an object type somehow.
"/*     *     *     * Implement IDataSetUpdateableModel interface     * and IDataSetUpdateableTableModel interface     *     * TODO: THIS CODE WAS COPIED FROM ContentsTab.  IT SHOULD PROBABLY     * BE PUT INTO A COMMON LOCATION AND SHARED BY BOTH THIS     * CLASS AND ContentsTab.     *     *     */"
// TODO: How to let the user customize this??
"/*		 * CSE: moved this code down here to fix repaint problems on first		 * display - bounds should be set before install		 *		 * Uninstall the old popup from root pane		 * and install the new one. Even in case		 * they are the same objects it's necessary		 * to cover the workspace switches etc.		 */"
//TODO: RENAME to DataSetViewerPropertyDestination
// Discovered that the loginame field can be null - in that case, how to know we have the correct view?
"/**	 * TODO: This shouldn't be public. Its only been done for the JComplete	 * plugin. At some stage this method will be returned to package visibility.	 */"
// Some dbs (like McKoi) make -1 the default for scale.  Apply the  // same hack as above.
"/**	 * TODO: move to IOUtilities	 * 	 * @see net.sourceforge.squirrel_sql.client.update.UpdateUtil#createZipFile(FileWrapper, FileWrapper[])	 */"
"/*				 * TODO: Work out why				 * KLUDGE: For some reason, I am not able to get the sheet to				 * size correctly. It always displays with a size that causes				 * the sub-panels to have their scrollbars showing. Add a bit				 * of an increase in the size of the panel so the scrollbars				 * are not displayed.				 */"
// If SQL executing produced warnings then write them out to the session // message handler. TODO: This is a pain. PostgreSQL sends "raise // notice" messages to the connection, not to the statment so they will // be mixed up with warnings from other statements.
//?? Best guess: read object? //?? This is probably the wrong thing to do here, but //?? I don't know what else to try.
// Hack to deal with Ingres IIE* meta tables.
// This is a bit hard coded but if we use _scale here // some number displays go crazy. //_numberFormat.setMaximumFractionDigits(_scale);
// TODO: SPATIAL and FULLTEXT indexes require a MyISAM engine for the table. Is there a way // to tell what engine is being used for a table? It may not be necessary, since the following // doens't hurt if already a MyISAM engine: // // ALTER TABLE my_table ENGINE = MYISAM; // // Still, this is not the kind of thing we would want to do automatically, since MyISAM engine is // non-transactional. We will probably need to tell the user - somehow - that they need this // otherwise the create index statement will fail. Maybe a comment in the script and if they // happen to read it they could uncomment the conversion of the engine? Maybe a custom dialog?
"/* * TODO: Delete me * Copyright (C) 2002-2003 Johan Compagner * jcompagner@j-com.nl * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */"
// JASON: Make menu smarter. When second window for the same // session is added create a hierarchical menu for all windows // for the session.
// For some reason, when the Oracle plugin adds details tabs for  // triggers, the _tabPnl's first tab ends up being the trigger details // tab and not the generic database object info tab.  This causes the  // _tabs length to be 1 tab greater than the tabs that are actually in  // the _tabPnl.  This throws off the selection such that the tab  // selected in the tab panel doesn't get rendered until the tab to the // right of the selected tab is selected.  This is a work-around for  // this problem until I can determine why the DatabaseObjectInfoTab  // never makes it into the _tabPnl in the first place.
// The following is a work-around for the problem on Mac OS X where // the Apple LAF delegates to the Swing Popup factory but then // tries to set a 90% alpha on the underlying Cocoa window, which // will always be null if you're using JGoodies L&F // see http://www.caimito.net/pebble/2005/07/26/1122392314480.html#comment1127522262179 // This has no effect on Linux/Windows
// colDefs not in same order as DB, so search for // matching colDef entry // Note: linear search here will NORMALLY be not too bad // because most tables do not have huge numbers of columns.
// TODO: What about these // Viewport.font, ColorChooser.font, InternalFrame.font, // OptionPane.font, "Panel.font", // ScrollPane.font, DesktopIcon.font
// Don't use "real" type. Axion sets the column size to 12 by default, // yet it can handle more precision. So data being copied from the real // column can potentially be larger than what the column claims to support. // This will be a problem for other databases that pay attention to the // column size. // TODO: Perhaps re-introduce the REAL type, but use the new // getPrecisionDigits to max out the precision.
// This info is merely a placeholder in the tree that we can use to get index name and // parent name more easily. We probably should create a IndexColumnInfo that has this // extra info in it.
// TODO: should the constraint name simply be the column name or something more like a constraint // name?
// Some tables have pseudo column primary keys and others // do not.  JDBC on some DBMSs does not handle pseudo // columns 'correctly'.  Also, getTables returns 'views' as // well as tables, so the thing we are looking at might not // be a table. (JDBC does not give a simple way to // determine what we are looking at since the type of // object is described in a DBMS-specific encoding.)  For // these reasons, rather than testing for all these // conditions, we just try using the pseudo column info to // get the table data, and if that fails, we try to get the // table data without using the pseudo column. // TODO: Should we change the mode from editable to // non-editable?
// TODO: maybe instead of throwing an exception, we could ask // the user if they would like us to adjust their preference for // them.
// HACK: some dbs (like Frontbase) don't support boolean // types. I've tried tinyint, bit and boolean as the column // type, and setBoolean fails for all three. It's a mystery // at this point what column the getBoolean/setBoolean main.methods // actually work on iin FrontBase.
"/* work-around for this driver, which must have ""dbo"" for schema.  The       * JConnect family of drivers appears to not be affected and can accept a       * null schema, which is necessary to find tables in other schemas, within       * the same catalog.  Similarly, jTDS 1.2.2 doesn't require this, yet it       * doesn't return non-dbo schema tables, unfortunately.        */"
"/** * A dialect delegate for the Progress database. TODO: Progress specification says that the sum of all column * lengths of a table row may not exceed 31960. Need to add an interface method to the HibernateDialect * interface that takes an array of lengths and and checks the sum of columns for a row. This maximum number * may be different across databases so this check method needs to be implemented by each dialect. *  * @author manningr */"
"//TODO: Decide whether this should be a bound property or not. //		getPropertyChangeReporter().firePropertyChange(ISQLDriver.IPropertyNames.NAME, _name, _name);"
"/*					 * END-KLUDGE					 */"
// Hack to deal with Sybase's sys tables
"/** * TODO: Move all code other than for window creation up to AliasWindowManager * Factory to handle creation of maintenance sheets for SQL Alias objects. * * @author <A HREF=""mailto:colbell@users.sourceforge.net"">Colin Bell</A> */"
// TODO: Why shouldn't we call registerSQLDriver here? RMM 20070401
// TODO: Should have session listeners instead of these calls.
// TODO: just noticed that MySQL 5.0 supports a multi-bit BIT // column by using the getObject/setObject main.methods with a byte[]. // So it would be valuable at some point to make this code a bit // more dbms-specific
"/** * TODO: Move all code other than for window creation up to AliasWindowManager * Factory to handle creation of maintenance sheets for SQL Driver objects. * * @author <A HREF=""mailto:colbell@users.sourceforge.net"">Colin Bell</A> */"
// On Win 2000 & XP mnemonics are normally hidden. To make them // visible you press the alt key. Under the Windows L&F pressing // alt may not work. This code is a workaround. See bug report // 4736093 for more information.
// TODO: Once we're happy that JFCUtilities is no longer required
/* work-around for bug which means we must use "dbo" for schema */
//Unfortunately we need to remove the exising tree table component and create a //new one due to limitations with replacing models in the existing //sun implementation. Why on earth they couldnt formalise the tree //table example on JFC (which we use) a bit more is anyones guess.
// TODO: figure out why bind variables aren't working
// TODO: Make properties file Application.properties so we can use class // name to generate properties file name.
// Hack!!! hopefully the FK name will always be the last token!
// TODO Need to have a generic hibernate dialect extend this to provide the types.
// This could (perhaps more elegantly) be done by recursion
"/** * TODO: Get rid of this class. * This combobox contains all the columns in an SQL table. * * @author <A HREF=""mailto:colbell@users.sourceforge.net"">Colin Bell</A> */"
// TODO: Make Parameter implement SQLItem interface which has a getString // method which can also be implemented by SQLString, or SQLFragment or // some such.  We can then eliminate the use of instanceof below and  // clean up the code a bit, by making itemsInSql look like: // //   ArrayList<SQLItem> itemsInSql = new ArrayList<SQLItem>(); // 
// H2 uses Java classes that implement the "Trigger" interface to operate // on database tables rows when an action triggers them. Therefore, there // is currently no way to access the source for a trigger. Hopefully this // will change at some point in the future. // _treeAPI.addDetailTab(DatabaseObjectType.TRIGGER, new TriggerSourceTab("The source of the trigger"));
// Arrays of Strings are a special case. // In XMLBeanWriter method ProcessProperty an array of // Strings is turned into a list of StringWrapper objects // in the XML (presumably so that when reading them back // we have a class that we can call setters on). Thus, // when reading back an array of Strings we actually read // an array of StringWrappers, which gives a type mis-match // in the following arrayCopy. Therefore we need to convert // the data that is currently in the StringWrapper objects // into actual Strings.
"/**	 * TODO: Move this to IOUtilities Extracts the specified zip file to the specified output directory.	 * 	 * @param zipFile	 * @param outputDirectory	 * @throws IOException	 */"
"/**	 * Set the password for this alias.	 *	 * @param	password	The new password.	 *	 * @throws	ValidationException	 * 			TODO: What conditions?	 */"
// tell caller that the underlying data was not updated //?? is this always true, or could the data be updated with a warning?
// empty string ('') seems to be represented as null in some drivers. // Not sure if this is the best thing to do here, but it fixes an issue // where SQL returns is set default to '', when it is already null.
// TODO: pass in a message handler so user gets error msgs.
// Facade main.methods for IMessageHandler.  We don't want to allow code to  // directly access an internal IMessageHandler, now that the IMessageHandler // interface requires an ExceptionFormatter to be injected for main.methods that // accept Exceptions.
"// JASON: Mow that multiple object trees exist storing the edit // where by objectInfo within session won't work. It needs to be objectinfo // within something else. //	private final Map _editWhereColsSheets = new HashMap();"
// TODO: Put in all the property accessors
// DB delete worked correctly, so now delete from table //IMPORTANT: The user and the creator both work through the // SortableTableModel, not the Actual model.  Thus the row // indexes to delete are given in the SortableTableModel row numbers, // so we must work through that model model to actually do the delete.
// TODO: figure out a more reliable way to handle OTHER type // which indicates a database-specific type.
// TODO: Is giving a FK constraint a name universally supported // and done the same way on every database?
/* TODO: sort the list. */
//?? remember which column is the rowID (if any) so we can //?? prevent editing on it
// TODO // Plugin supports only the main session window
"/**	 * Called when app shutdown.	 * TODO: Put throws clause back in	 */"
// TODO I18N
// TODO: Tooltips
/* TODO: FILLFACTOR, ON [PRIMARY], etc. */
// TODO: allow the user to specify ignore case or preserve case.
// TODO: When message are can have some text in red (error) // and some normal then put out errors in red.
// TODO: tell the user that the selected destination schema is // the same as the source schema. // monitor.showMessageDialog(...)
/* TODO: ON [PRIMARY] */
// TODO: Maybe prompt the user to ask to append the records,  // ignoring errors for constraint violations?
// TODO: Refresh
// TODO: Maybe someday we could inform the user that the imported // key can't be created because the list of tables they've // selected, doesn't include the table that this foreign key // depends upon. For now, just log a warning and skip it.
"/*			 * TODO: hookup with Interbase spec and adjust these as necessary. 			 */"
// TODO: figure out how to get then name of the table that the trigger  //       is on.  //"and tables.name = ? " +
// TODO: should also make sure that each of the columns is made "NOT NULL"
// Not implemented
"/**     * Sorts the specified destInfos array based on the order of the sourceInfos     * array.  Not a very efficient algorthim, but it gets the job done.     * TODO: rewrite this using Collections sorting capability.     *      * @param sourceInfos     * @param destInfos     * @param sourceTableName     * @param destTableName     * @return a re-ordered version of the specified destInfos array     * @throws MappingException if the arrays differ in length or column names.     */"
// TODO: Perhaps we can tell the user when they click "Copy Table" // if the source session is Axion and they want primary keys that // it's not possible.
// TODO: use the destination database type to derive a format // that is acceptable.
// TODO: if the use checks "export entire table" and doesn't select all,  // then the selected indices are not set, and this check doesn't properly // detect missing data.  If export entire table is selected, we need to  // set the selected indexes below correctly.
// TODO: create the child index ST
// We just copied the last table.  Now it is safe to copy the // constraints.(Well, that is, if all FK dependencies are met // in the group of tables being copied.  // TODO: new feature could be to examine table list for FK's  // in tables not in the list then prompt the user to add  // those missing tables to the list.
"/** * A dialect delegate for the Axion database.   * TODO: This dialect is not yet complete.  Need to provide implementations wherever ""Not yet implemented"" * appears.  */"
// TODO: Allow the user to specify the sequence name for dialects that don't natively support  // auto-increment columns without using sequence/trigger combo.
"/* * TODO: finish i18n */"
// TODO: Need to enhance the index dialog to allow specifying storage option. For now just accept the // default for the index access method. // valuesMap.put("indexType", "USING BTREE");
// TODO: Put throws clause back in // Empty method.
// TODO?? ColumnDisplayDefinition should also have the Type (String, Date, // Double,Integer,Boolean)
// TODO: Need to add storageOptions to the add index dialog // valuesMap.put(ST_STORAGE_OPTION_KEY, );
// Move any i18n files that are located in the core downloads dir to the i18n downloads dir. The spring // application context will not load properly (for some unknown reason) when there are i18n jars in the // classpath. So as a work-around, we simply ensure that they are where they should be anyway. // Previously we were not as careful about this, so it is possible that i18n jars were copied into the // core downloads directory.
// TODO: Implement this better
// TODO need to implement or change the message
// TODO: Need to allow user to specify this
"/** * A dialect delegate for the TimesTen database. * TODO: This dialect is not yet complete.  Need to provide implementations wherever ""Not yet implemented"" * appears.   */"
"/** * A dialect delegate for the Sun Microsystems HADB (High-Availability) database. * TODO: This dialect is not yet complete.  Need to provide implementations wherever ""Not yet implemented"" * appears. *  * @author manningr */"
// Not yet ready // DataImportGlobalPreferencesTab tab = new DataImportGlobalPreferencesTab(); // return new IGlobalPreferencesPanel[] { tab };
// TODO: set the total for the progress bar.
// TODO: use the destination database type to derive a // format that is acceptable.
//?? Future: may want to create TablePopupMenu to allow cut/copy/paste operations
// TODO: ask the user if they want to "undo" the changes that the  // paste made.  Alternatively show them the specific problem and  // let them fix it.  Then allow them to retry the operation, starting // from the point at which the previous operation failed.
